{
  "course_name": "Communication System Design",
  "course_description": "This course presents a top-down approach to communications system design. The course will cover communication theory, algorithms and implementation architectures for essential blocks in modern physical-layer communication systems (coders and decoders, filters, multi-tone modulation, synchronization sub-systems). The course is hands-on, with a project component serving as a vehicle for study of different communication techniques, architectures and implementations. This year, the project is focused on WLAN transceivers. At the end of the course, students will have gone through the complete WLAN System-On-a-Chip design process, from communication theory, through algorithm and architecture all the way to the synthesized standard-cell RTL chip representation.",
  "topics": [
    "Engineering",
    "Computer Science",
    "Computer Networks",
    "Electrical Engineering",
    "Telecommunications",
    "Systems Engineering",
    "Systems Design",
    "Engineering",
    "Computer Science",
    "Computer Networks",
    "Electrical Engineering",
    "Telecommunications",
    "Systems Engineering",
    "Systems Design"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nTutorials: 1 session / week, 1.5 hours / session\n\nPrerequisites\n\n6.011 and 6.111\n\nTopics\n\nThe course will focus on four major categories as outlined below:\n\nIntroduction to digital communications\n\nModulation and detection, vector channel representation\n\nEqualization\n\nMulti-channel systems (modulation methods, waterfiling, bit loading)\n\nPractical examples including 802.11a\n\nCoding - sequence detection, gap, convolutional and block codes\n\nASIC design fundamentals\n\nASIC design flow, tools, system-on-a-chip design issues\n\nMicro-architectures and transformations (parallelism, pipelining, folding, time-multiplexing)\n\nHardware description languages: introduction to BluespecTM and Verilog(r) review\n\nTheory and building blocks\n\nFast fourier transform (theory, fast algorithms and VLSI implementations)\n\nConvolutional and Trellis codes, and Viterbi algorithm (theory, algorithms and VLSI implementations)\n\nSynchronization (phase and frequency tracking loops, algorithms and VLSI implementations)\n\nBlock codes (Hamming, BCH, Reed-Solomon), basic theory and VLSI implementations\n\nWireless channel fundamentals\n\nProperties and modeling (fading, Doppler effect,...)\n\nChannel estimation (theory and VLSI implementations)\n\nGrading\n\nACTIVITIES\n\nPERCENTAGES\n\nMidterm\n\n15%\n\nFinal\n\n25%\n\nFour major homeworks (10% each)\n\nFFT\n\nViterbi\n\nSynchronization\n\nChannel estimation\n\n40%\n\nTwo minor problem sets (5% each)\n\n10%\n\nFinal presentation and write-up\n\n10%\n\nCalendar\n\nThe calendar below provides information on the courses lectures (L) and Tutorials (T) sessions.\n\nSES #\n\nTOPICS\n\nKEY DATES\n\nL1\n\nCourse overview\n\nT1\n\nCppSim\n\nL2\n\nIntroduction to practical digital communications\n\nL3\n\nMulti-tone systems\n\nProblem set 1 out\n\nT2\n\nVerilog(r) review\n\nL4\n\n802.11a transceiver architecture\n\nL5\n\nASIC design\n\nProblem set 1 due\n\nProblem set 2 out\n\nT3\n\n802.11a PHY standard\n\nL6\n\nMicro-architectures and transformations\n\nL7\n\nBluespecTM overview\n\nProblem set 2 due\n\nT4\n\nBluespecTM\n\nL8\n\nFast fourier transform: theory and algorithms\n\nProblem set 3 out\n\nL9\n\nFast fourier transform: practical aspects and basic architectures\n\nT5\n\nDesign flow, part 1\n\nL10\n\nFast fourier transform: advanced VLSI architectures\n\nProblem set 3 due\n\nL11\n\nConvolutional codes\n\nT6\n\nDesign flow, part 2\n\nL12\n\nTrellis codes\n\nExam 1\n\nL13\n\nViterbi algorithm\n\nL14\n\nViterbi algorithm (cont.)\n\nL15\n\nViterbi algorithm (cont.)\n\nL16\n\nViterbi algorithm (cont.)\n\nL17\n\nSynchronization introduction\n\nL18\n\nSynchronization OFDM\n\nL19\n\nSynchronization: implementations\n\nL20\n\nWireless channels\n\nL21\n\nChannel estimation\n\nL22\n\nBlock codes: introduction\n\nL23\n\nBlock codes: code classes and Reed-Solomon codes\n\nL24\n\nBlock codes: implementations\n\nExam 2",
  "files": [
    {
      "category": "Resource",
      "title": "hw1_soln.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/fdf741e8588c4c02bc1c1c060e857015_hw1_soln.pdf",
      "content": "6.973 Communication System Design\n02/15/06\nProblem set 1 - Modulation, Equalization, Multi-tone\ndue 02/22/06\nProblem 1 - Minimal orthonormalization (from prof. Cioffi) (10pts)\nEach column of A given below is a data symbol that is used to construct its corresponding modulated\nwaveform from the set of orthonormal basis functions { ( ),\nφ1 t φ2 t\nφ6( )}\n. The set of modulated\n( ),..., t\nwaveforms described by the columns of A can be represented with a smaller number of basis functions.\nThe transmitted signals ai(t) are represented (with a superscript of * meaning matrix or vector transpose)\nas\nA t( ) = A*φ( )t\nThus, each row of A(t) is a possible transmitted signal.\n1) Use MATLAB to find an orthonormal basis for the columns of A. Record the matrix of basis vectors.\nThe MATLAB commands help and orth will be useful. In particular, if one executes Q = orth(A) in\nMATLAB, a 6 × 3 orthogonal matrix Q is produced such that Q*Q = I and A* = [A*Q]Q*. The columns of Q\ncan be thought of as a new basis - thus try writing A(t) and interpreting to get a new set of basis functions\nand description of the 7 possible transmit waveforms. Note that help orth will give a summary of the orth\ncommand. To enter the matrix B in MATLAB (for example) shown below, simply type B=[1 2; 3 4];\nSolution:\n⎡ -3.3941e-01 3.2336e-02 -1.1243e-01 ⎤\n⎢ -6.1902e-01 2.2144e-01 3.5120e-01⎥\n⎢\n⎥\n⎢ -6.7883e-01 6.4671e-02 -2.2486e-01 ⎥\nQ =orth(A)= ⎢\n⎥\n⎢ -3.3837e-02 -2.4499e-01 3.4793e-01⎥\n⎢ -6.7675e-02 -4.8998e-01 6.9586e-01⎥\n⎢\n⎥\n⎣ -1.8730e-01 -8.0351e-01 -4.5626e-01 ⎦\n* t\n*\n* ( )\n* )\n* t = Aˆ *φQ( )t\nA t\n( ) = A φ( ) = A QQ φ t = (A Q Q φ( )\n2) How many basis functions are actually needed to represent our signal set? What are the new basis\nfunctions in terms of { ( ),\nφ1 t φ2 t\nφ6( )}\n?\n( ),..., t\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nrank(Q) is three. Therefore we need three basis functions to represent the signal set. The new basis\nfunctions are: φQ ( )t = Q*φ( )t\n3) Find the new matrix Aˆ which gives the data symbol representation for the original modulated\nwaveforms using the smaller set of basis functions found in (2). Aˆ will have 8 columns, one for each data\nsymbol. The number of rows in Aˆ will be the number of basis functions you found in (2).\n⎡-2.6907e+00 -6.1696e+00 -8.5609e+00 -1.2040e+01 -1.4431e+01 -1.7910e+01 -2.0301e+01 -2.3780e+01 ⎤\nAˆ = ⎢\n⎢-1.2239e+00 -3.4513e+00 -1.4804e-02 - 2.2422e+00 1.1943e+00 -1.0331e+00 2.4034e+00 1.7598e-01 ⎥\n⎥\n⎢-1.1235e+00 -1.5609e-01 -8.4300e-01 1.2439e-01 -5.6252e-01 4.0486e-01 -2.8204e-01 6.8534e-01 ⎥\n⎣\n⎦\nProblem 2 - Equalization (50pts)\nIn this problem, you will get to implement several equalization techniques using finite length filters and\ncharacterize the performance of these different approaches.\n1) Zero-forcing linear equalization (10pts)\nThe basic zero-forcing linear equalization algorithm is implemented for 0.9D-1+1 channel in the script eq.m.\nModify this script to investigate the equalizer performance (variance of residual ISI, and SNR) for different\nequalizer lengths (1-20). Make sure that for each equalizer length you find the optimal delay (marked delta\nin the equalization script). Explain the results.\n2) Minimum-mean square error linear equalization (15 pts)\nModify the script from 1) to compute the equalizer coefficients that minimize the mean-square error (i.e.\nboth ISI and noise). Hint: Look at the lecture notes or the Chapter 3 of the reader. It is only a small\nmodification to the ZFE formula.\nFor MMSE equalizer, plot the variance of residual ISI, and SNR vs. equalizer length. Again, make sure that\nyou find the optimum delay for each equalizer length (1-20). Explain the results.\nAs expected, we see that the SINR or mmse algorithm is better than that of the zero-forcing algorithm\n(since mmse limits the noise amplification). Zero-forcing algorithm makes use of longer equalizers to\nremove the ISI, but enhances the noise so that the net SINR drops after an optimal value of 10 taps.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nFor more details on the computations, see ps1_problem2_soln.m script.\n3) Decision-feedback equalization (25 pts)\nBy puncturing certain columns of the channel matrix P, implement the decision-feedback equalizer. Find\nfeedforward equalizer coefficients for both ZFE and MMSE cases. Also find feedback equalizer\ncoefficients. Plot the residual ISI and SNR vs. the number of feedback and feed-forward taps that you used\n(adjust the delay delta for optimal performance). The total number of taps should be 1-20.\nPick a 10 tap total equalizer length and plot the channel response, equalized pulse response, and equalizer\nresponse in time and frequency domain, for ZFE and MMSE linear equalizers as well as ZFE and MMSE\ndecision-feedback equalizers and explain the differences.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nEqualized pulse response - time domain.\nEqualized pulse - frequency domain.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nLinear and feedforward equalizer response - time domain.\nLinear and feed-forward equalizer response - frequency domain.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nProblem 3 - Water-filling (40pts)\nOur example channel is 0.9D-1+1. The script waterfill.m contains basic channel and noise information.\n1) Capacity (20pts)\nDesign the waterfilling rate-adaptive algorithm (based on the iterative algorithm discussed in class). Find\nthe capacity of the channel.\nSolution: (waterfilling code is shown in waterfill_soln.m function and by running ps1_problem3_soln.m,\nfor this part of the problem we get (by setting the gap to 0dB):\nc_bar = 1.5541e+00 % total channel capacity per dimension\ncn_bar = 9.6934e-01 1.8456e+00 2.2297e+00 2.3436e+00 2.2297e+00 1.8456e+00 9.6934e-01 0\nen_bar = 9.5470e-01 1.1916e+00 1.2329e+00 1.2415e+00 1.2329e+00 1.1916e+00 9.5470e-01 0\nNstar = 7\ngn = 2.9680e+00 1.0000e+01 1.7032e+01 1.9945e+01 1.7032e+01 1.0000e+01 2.9680e+00 5.5249e-02\n2) QAM (10pts)\nAssuming a Pe=10-4, find the Gap for the QAM modulation and find the achievable bit rate for this channel\nusing the algorithm in 1) modified to include the Gap for QAM at Pe=10-4.\nSolution: (waterfilling code is shown in waterfill_soln.m function and by running ps1_problem3_soln.m,\nfor this part of the problem we get (by setting the gap to 6.637dB).\nb_bar_qam = 8.0894e-01\nbn_bar_qam = 1.1774e-01 9.9396e-01 1.3781e+00 1.4920e+00 1.3781e+00 9.9396e-01 1.1774e-01\nen_bar_qam = 2.7540e-01 1.3677e+00 1.5581e+00 1.5976e+00 1.5581e+00 1.3677e+00 2.7540e-01\nNstar_qam =\ngn_qam = 2.9680e+00 1.0000e+01 1.7032e+01 1.9945e+01 1.7032e+01 1.0000e+01 2.9680e+00 5.5249e-02\nThe gap for QAM can be calculated from following equations:\nEx = d 2 M -1 ; d 2 Q-1(Pe ) ; ΓQAM = 1 (\n-1(\n))\nσ\nQ\nPe\n⎛\n⎞\n( b = 1 log (1 + (M -1)) = 1 log ⎛1+ 12\n\nE x ⎞= 1 log ⎜ 1+\nSNR\n⎟= 1 log ⎜\n⎛\n1+ SNR ⎟\n⎞ )\n2 ⎜\nd 2 ⎟\n2 ⎜\n-1\n2 ⎟\n2 ⎜\nΓ\n⎟\n⎠\n⎜\n⎝\n3 (\n(\n)) ⎟\n⎠\nQAM ⎠\n⎝\nQ\nPe\n⎝\n3) PSK (10pts)\nFind the Gap for the PSK modulation at Pe=10-4 and calculate the bit rate.\n-\nQ\nPe\n\nd = 2 Ex sin\n\n⎛\n⎜ M\nπ ⎞\n⎟≈ 2 Ex M\nπ ; d ≈ 2σ Q 1(Pe ) ; ΓPSK = ⎛\n⎜\n-1\nπ\n(\n)\n\n⎞\n⎟\n⎝\n⎠\n⎝\n⎠\n⎛\n⎞\n⎛ 2π Ex ⎞\n⎟ = 1 log 2\n⎛\n⎜\n4π 2 Ex\n⎞\n⎟ ≈ 1 log 2 ⎜\n⎜\n⎜1+\nSNR\n⎟\n⎟\n⎟ = 1 log 2\n⎛\n⎜1+ SNR ⎞\n⎟\nb = 2 log ( M ) = 2 log ⎜\n⎝⎜\nd\n⎟⎠\n⎜\n⎝ 4σ 2 (Q\nPe\n\n-1(\n)) ⎟\n⎠\n⎜⎜\n⎛\n⎜\nQ\nPe\n\n-1(\n)\n\n⎞\n⎟ ⎟⎟\n⎝\nΓPSK ⎠\n⎝\n⎝\nπ\n⎠⎠\nPlot the energy and bit distributions for 1-3. Try increasing the number of dimensions (decrease tone\nspacing). Plot the capacity, bitQAM, bitPSK vs. number of dimensions. Explain the plots.\nb_bar_psk = 6.8481e-01\nbn_bar_psk = 3.7926e-01 8.1737e-01 1.0094e+00 1.0664e+00 1.0094e+00 8.1737e-01 3.7926e-01\nen_bar_psk = 8.7918e-01 1.2112e+00 1.2691e+00 1.2811e+00 1.2691e+00 1.2112e+00 8.7918e-01\nNstar_psk =\ngn_psk = 2.9680e+00 1.0000e+01 1.7032e+01 1.9945e+01 1.7032e+01 1.0000e+01 2.9680e+00 5.5249e-02\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nFig.3.1. Average number of bits per dimension for a) 0.9D-1+1 channel, b) randomly distributed 100-tap multipath\nchannel\nSince the channel in Fig. 3.1 a) is pretty smooth, not many dimensions (>4) are needed to accurately estimate the\ncapacity of the channel. On the other hand, in a heavily non-line of site (multi-path) channel significant notching occurs\nin frequency domain hence many points (dimensions) are needed to accurately estimate the channel capacity.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY]."
    },
    {
      "category": "Resource",
      "title": "hw1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/b83f49fc4f974ca72d4347550b70d776_hw1.pdf",
      "content": "6.973 Communication System Design\n02/15/06\nProblem set 1 - Modulation, Equalization, Multi-tone\ndue 02/22/06\nProblem 1 - Minimal orthonormalization (from prof. Cioffi) (10pts)\nEach column of A given below is a data symbol that is used to construct its corresponding modulated\nwaveform from the set of orthonormal basis functions { ( ),\nφ1 t φ2 t\nφ6( )}\n. The set of modulated\n( ),..., t\nwaveforms described by the columns of A can be represented with a smaller number of basis functions.\nThe transmitted signals ai(t) are represented (with a superscript of * meaning matrix or vector transpose)\nas\nA t( ) = A*φ( )t\nThus, each row of A(t) is a possible transmitted signal.\n1) Use MATLAB to find an orthonormal basis for the columns of A. Record the matrix of basis vectors.\nThe MATLAB commands help and orth will be useful. In particular, if one executes Q = orth(A) in\nMATLAB, a 6 × 3 orthogonal matrix Q is produced such that Q*Q = I and A* = [A*Q]Q*. The columns of Q\ncan be thought of as a new basis - thus try writing A(t) and interpetting to get a new set of basis functions\nand description of the 7 possible transmit waveforms. Note that help orth will give a summary of the orth\ncommand. To enter the matrix B in MATLAB (for example) shown below, simply type B=[1 2; 3 4];\n2) How many basis functions are actually needed to represent our signal set? What are the new basis\nfunctions in terms of { ( ),\nφ1 t φ2 t\nφ6( )}\n?\n( ),..., t\n3) Find the new matrix Aˆ which gives the data symbol representation for the original modulated\nwaveforms using the smaller set of basis functions found in (2). Aˆ will have 8 columns, one for each data\nsymbol. The number of rows in Aˆ will be the number of basis functions you found in (2).\nProblem 2 - Equalization (50pts)\nIn this problem, you will get to implement several equalization techniques using finite length filters and\ncharacterize the performance of these different approaches.\n1) Zero-forcing linear equalization (10pts)\nThe basic zero-forcing linear equalization algorithm is implemented for 0.9D-1+1 channel in the script eq.m.\nModify this script to investigate the equalizer performance (variance of residual ISI, and SNR) for different\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nequalizer lengths (1-20). Make sure that for each equalizer length you find the optimal delay (marked delta\nin the equalization script). Explain the results.\n2) Minimum-mean square error linear equalization (15 pts)\nModify the script from 1) to compute the equalizer coefficients that minimize the mean-square error (i.e.\nboth ISI and noise). Hint: Look at the lecture notes or the Chapter 3 of the reader. It is only a small\nmodification to the ZFE formula.\nFor MMSE equalizer, plot the variance of residual ISI, and SNR vs. equalizer length. Again, make sure that\nyou find the optimum delay for each equalizer length (1-20). Explain the results.\n3) Decision-feedback equalization (25 pts)\nBy puncturing certain columns of the channel matrix P, implement the decision-feedback equalizer. Find\nfeedforward equalizer coefficients for both ZFE and MMSE cases. Also find feedback equalizer\ncoefficients. Plot the residual ISI and SNR vs. the number of feedback and feed-forward taps that you used\n(adjust the delay delta for optimal performance). The total number of taps should be 1-20.\nPick a 10 tap total equalizer length and plot the channel response, equalized pulse response, and equalizer\nresponse in time and frequency domain, for ZFE and MMSE linear equalizers as well as ZFE and MMSE\ndecision-feedback equalizers and explain the differences.\nProblem 3 - Water-filling (40pts)\nOur example channel is 0.9D-1+1. The script waterfill.m contains basic channel and noise information.\n1) Capacity (20pts)\nDesign the waterfilling rate-adaptive algorithm (based on the iterative algorithm discussed in class). Find\nthe capacity of the channel.\n2) QAM (10pts)\nAssuming a Pe=10-4, find the Gap for the QAM modulation and find the achievable bit rate for this channel\nusing the algorithm in 1) modified to include the Gap for QAM at Pe=10-4.\n3) PSK (10pts)\nFind the Gap for the PSK modulation at Pe=10-4 and calculate the bit rate.\nPlot the energy and bit distributions for 1-3. Try increasing the number of dimensions (decrease tone\nspacing). Plot the capacity, bitQAM, bitPSK vs. number of dimensions. Explain the plots.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY]."
    },
    {
      "category": "Exam",
      "title": "exam1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/de345259ab563c20619913f0e3fff8f7_exam1.pdf",
      "content": "6.973 Communication System Design\n03/22/06\nExam 1\ndue 03/29/06\nDiscrete Multitone System Design\nIn this problem you will get to investigate the system design space for a discrete\nmultitone system. System parameters are the number of tones (i.e. points in the FFT) and\nthe sampling rate.\nAssume the channel is a single-pole channel with 1MHz bandwidth.\nAssume that average transmit power is fixed to 1μW and thermal noise power is\nPnoise=-174+10*log10(∆f)+NF_dB [dBm], where ∆f=1/Tsamp (dBm is a measure\nrelative to 1mW) and NF_dB=20 [dB] is the noise figure of the transceiver electronics.\nAssume that target BER is 10-6.\n1) (15pts) Plot the capacity of this channel as a function of the sampling rate, using the\nwaterfilling code from problem set 1. (Hint: Since average power is fixed, make sure you\nadjust the energy as you change the sampling rate, and also use a large enough number of\ntones to reach the stable capacity values). Plot the capacity as a function of sampling rate.\nWhat happens to the capacity as the sampling rate increases beyond the waterfilling\nbandwidth?\n2) (5pts) Using Gap approximation for BER of 10-6, estimate the uncoded discrete\nmultitone performance for QAM, without discrete loading. (Hint: Use the same\nwaterfilling script). Again, plot the data rate vs. the sampling rate.\n3) (40pts) Implement the rate adaptive (RA) Levin-Campello loading algorithm,\nassuming all tones are loaded with QAM modulation and using the Gap approximation.\n4) (20pts) Assuming that the channel length can be approximated by the length of the\npulse response within the pulse energy represent the 99% of the total pulse energy, find\nthe cyclic prefix as a function of sampling rate, and use this to plot the data rate of the\nsystem, as a function of sampling rate and number of tones used.\n5) (20pts) Using the setup from 1) and 2) investigate the behavior of the data rate as a\nfunction of the sampling rate and number of tones used. What is the maximum data rate\nyou can achieve on this channel, with given system settings? What happens if you choose\ntoo high a sampling rate?\nPlease turn in the writeup with plots and comments, and all the code that you have\nwritten for this exam. The code must be clean of bugs and able to run to confirm the plots\nthat you turned in.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY]."
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/95da07c89090a3f2d266248031ed19e8_lecture_1.pdf",
      "content": "6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nModern Communication System Design:\nCourse Overview\nLecture 1\nVladimir Stojanovic\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n6.973 Communication System Design\nCommunication systems are ubiquitous\nhttp://www.aradial.com/images/hotspots.jpg\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nCourtesy of Aradial Technologies. Used with permission.\n\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\ncoder\nFilter/\nModulator\nChannel\ndecoder\nFilter/\nDemodulator\nTiming\nSynchronizer\nInner Tx\nOuter Tx\nInner Rx\nOuter Rx\nDQ\nClk\nLogic A\nDQ\nClk\nLogic B\nDQ\nClk\nD Q\nClk\nLogic A\nD Q\nClk\nLogic A\nLogic B\nLogic B\nD Q\nClk\nLogic A\nD Q\nClk\nLogic B\nD Q\nClk\nD Q\nClk\nLogic A\nD Q\nClk\nLogic A\nLogic B\nLogic B\nTheory\nAlgorithm\nμArchitecture\nGate Level\nPhysical Design\nImage removed due to copyright restrictions.\nVery complicated - so divide & conquer\n\nCourses usually follow the hierarchy\nNot a bad thing\nGet a lot of depth\nBut, loose the \"big picture\"\nRarely get a chance to look at the whole system\nWith today's tight energy and performance specs\nNeed to optimize the whole system\nNeed to know and work ACROSS the hierarchy\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nIn 6.973 we'll try to cut ACROSS\nProject driver - Wi-Fi chip\ncoder\nIFFT/\nModulator\nChannel\nViterbi\ndecoder\nIFFT/\nDemodulator\nTiming\nSynchronizer\nTheory/\nAlgorithm\nChannel Est.\nμArchitecture\nGate Level\nPhysical\nDesign\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Summary illustration of the chart below: computers on the right and left broadcast signals to each other that are relayed by a receiver/transmitter in the middle.\nFigure by MIT OpenCourseWare.\n\n6.973 Communication System Design\nCommunication theory view\ncoder\nIFFT/\nModulator\nChannel\nViterbi\ndecoder\nIFFT/\nDemodulator\nTiming\nSynchronizer\nTheory/\nAlgorithm\nChannel Est.\nMultitone modulations\nConvolutional/Block coding and Viterbi/RS decoding\nSynchronization - tracking loops\nChannel Estimation\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n6.973 Communication System Design\nImplementation view - μArchitecture\nFFT\nRadix 2,4,8\nViterbi\nACS - radix 2,4\nTraceback vs. Reg. Exch\nSynchronization\nCorrelators\nCORDIC\nTracking loops\nChannel Estimation\nEqualization\nMean-square\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nImage removed due to copyright restrictions.\n\n6.973 Communication System Design\nOur ASIC design flow\nBehavioral Simulator\nVppSim\n(c++, Verilog views)\nμArchitecture specification\nBlueSpec\n(System Verilog)\nCompiled gate level\n(Verilog)\nSynthesis\n(Design Vision)\nPlace and route\n(Encounter)\nPower,\nArea,\nTiming\nBlock Verification,\nPerformance estimation\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n6.973 Communication System Design\nVppSim project snapshot\n\nCadence schematic editor\n\nBlock modules written in C++ or Verilog\n\nCo-simulation C++/Verilog\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nImage removed due to copyright restrictions.\n\nLogic synthesis with Design Vision\nBehavioral to structural RTL\nMakes Bluespec generated Verilog RTL more compac\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nt\n\nImage removed due to copyright restrictions.\nScreenshot of \"Design View\" program.\n\nPlace and route (Encounter)\nSynthesized structural RTL to placed and routed design\net area, power and timing estimates\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nG\nImage removed due to copyright restrictions.\nScreenshot of \"Encounter\" program.\n\nClass logistics\nLectures\nM,W 1-2:30pm\nPrerequisites: 6.011 and 6.111\nUnits: 3-1-8, 6 EDPs (H level)\nContact:\nProfessor Vladimir Stojanovic\nTA Steven Gerding\nOffice hours after the lecture and tutorials\nTutorials\nOn Fridays 1:00-2:30pm - first six weeks\n\nDesign lab\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nCppSim, Verilog, 802.11a Arch, Bluespec, Design Flow 1 & 2\n\n6.973 Communication System Design\nAssignments and grades\nExams are take home (little math, mostly Matlab)\nExam 1 - 15%\nExam 2 - 15%\nNo collaboration\nHomeworks\nThree major, 15% each\nFFT, Viterbi, Synchronization and Channel Estimation\nCollaboration is o.k. but need to design everything yourself\nThree minor, 5% each\nEqualization and multi-tone, 802.11a behavioral, Bluespec\nNo collaboration\nFinal presentation and writeup, 10%\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n6.973 Communication System Design\nSimilar course is 6.375\nUses same tool-flow (Bluespec to gates)\nDoes not use VppSim\nHave to write your own test harnesses\nMore focused on hardware\nDoesn't offer the \"vertical\" view\nYou can choose your own project\nNot a bad idea to listen to lectures in one or\nthe other course\nWe'll share the lab with 6.375 people\nLectures MWF 2:30-4\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n6.973 Communication System Design\nRecommended readings\nPosted on the web site (stellar)\nRecommended books on reserve in Barker\nPapers\n802.11a implementations\nFFT\nViterbi algorithm\nConvolutional codes and Trellis coded modulation\nSynchronization\nBlock codes (if time permits)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n6.973 Communication System Design\nFor Friday\nRead the CppSim primer\nStart reading Chapter 1 in Digital\nCommunications reader posted online\nCppSim tutorial will be this Friday Feb. 10\nTutorials are hands-on\nHighly advise you attend\nWill save you a ton of time later\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY]."
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/e20f5689bb1606324f1488536896e301_lecture_2.pdf",
      "content": "6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nIntro to Practical\nDigital Communications\nLecture 2\nVladimir Stojanovic\n\nDiscrete data transmission\nMessages are encoded into signal points\nsignal points\nsignal waveform\nSignal points are mapped to signal waveforms\nModulation\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\ns\n\nModulation and de-modulation\ne.g. Binary Phase-Shift Keying (BPSK)\nx0(t)\nx1(t)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nMaps continuous signals to discrete vectors\nSignificantly simplifies system analysis\nsignal points\nsignal\nwaveforms\nbasis functions\nModulator\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nVector signal representation\n\nBPSK example\nSignal constellation\nWhat is the information rate (R) of this modulation?\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nManchester modulation example (Ethernet)\nDifferent waveforms can have same vector representations\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMore constellations\nφ1( )t\n-3\n-1\nφ\n-3\n-1\n1( )t\nQuadrature Amplitude Modulation\n(QAM)\nPulse Amplitude Modulation\nφ2( )t\n(PAM)\n-1\ne.g. PAM4\n-3\ne.g. 16-QAM\nPAM and QAM have pulses as basis functions\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nNeed to be orthonormal - (b/c of demodulation)\nInner products\nContinuous\nDiscrete\nInvariant to choice of basis functions\nAverage energy of the constellation\nInvariant to the choice of basis functions\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nHow do we choose basis functions?\n\nImplications of the inner product invariance to\nbasis functions\nIf energy is a signal, it is the same regardless of\nthe mod waveform used\nAs long as basis functions are orthogonal\nParseval's identity\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nConstellation energy\n\n6.973 Communication System Design\nStraightforward demodulator implementation\nUse the fact that basis functions are orthogonal\nCollect the signal energy\nHard to build in practice\nDemodulator\nModulator\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nCorrelative demodulator\n\n6.973 Communication System Design\nCor\nNote\nequivalent to\nCan implement with an \"integrate-and-dump\"\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nPractical implementation\nrelative demodulator\nMatched-filter demodulator\n\nSummary\nIn this course you'll be able to learn\nPractical digital communication techniques\nHands-on, little math\nHardware implementations\nAlgorithmic transformations\nMicro-architectures\nASIC flow and behavioral modeling\nIn other words, everything you'll need to start building\ncutting-edge digital communication systems\nStarted intro to digital communications\nModulation - signal constellation, basis functions\nDemodulation - basis function invariance, matched-filter\nNext - basics of detection, signalling on band-limited channels\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nSources\nVppSim/CppSim is a tool developed by prof.\nMichael Perrott\nDigital communications material is adapted\nfrom prof. John Cioffi's Stanford Course\nreaders\nhttp://www.stanford.edu/class/ee379a,b,c/\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design"
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/adc29637f94056ac38da8030e9c2ffbd_lecture_3.pdf",
      "content": "6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nBandlimited communication systems\nLecture 3\nVladimir Stojanovic\n\nPassband channel example\nTwo-ray wireless channel (multi-path - 1+0.9D)\nMulti-path creates notching in frequency domain\nJust slide the frequency window to bb\nAdd single-sided noise\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nBandlimited channel example\n-60\n-50\n-40\n-30\n-20\n-10\nfrequency [GHz]\nAttenuation [dB]\n0.2\n0.4\n0.6\n0.8\nns\npulse response\nTsymbol=160ps\nLow-pass channel causes pulse attenuation and dispersion\nNotches cause ripples in time domain\nMakes it hard to transmit successive messages\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nInter-Symbol Interference (ISI)\n0 2\n0.2\n0.4\n0.6\n0.8\nSymbol time\nAmplitude\nError!\n\nMiddle sample is corrupted by 0.2 trailing ISI (from the previous\nsymbol), and 0.1 leading ISI (from the next symbol) resulting in\n0.3 total ISI\n\nAs a result middle symbol is detected in error\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nBandlimited communication systems\nBlock detector vs. symbol-by-symbol\nBlock of K symbols - MK messages\nMAP/ML detector complexity grows exponentially\nMK basis functions (branches in the matched filter)\nSequence detection can bound that growth\nSimpler detector is \"Symbol-By-Symbol\"\nOptimal for AWGN channel\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nCompa\nrison of\n\ntwo\ncommuni\ncatio\nn sys\ntems: bloc\nk versus s\nymbol-to-s\ny\nmbol dete\nction.\nFigure by MIT OpenCourseWare.\n\nSymbol-by-symbol detection\n\nSuffers significantly from Intersymbol-interference (channel memory),\nso need to remove ISI to get almost AWGN channel\n\nNeed to adapt basis functions to the particular channel, to avoid ISI\n\nAlternatively, use equalization to remove ISI\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nInput-Outpu\nt diagr\nam of sy\nmbol-\nby-sy\nmbol de\ntection.\nFigure by MIT OpenCourseWare.\n\nVector channel - revisited\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nInpu\nt-ou\ntput\ndiagram of vector channel.n\nFigure by MIT OpenCourseWare.\n\nMean-distortion\n\nTreat ISI as noise\n\nPeak-distortion\n\nTreat worst-case ISI as constellation offset\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nISI impact\n6.973 Communication System Design\nInput-output diagra\nm that in\ncludes t\nhe pulse\nres\nponse p(\nt)\n, th\ne sampling rate, and discrete time receiver.\nn\nFigure by MIT OpenCourseWare.\n\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nMatched Filter Bound\nYou can't do better with successive\ntransmissions than with one-shot\nMatched filter collects the pulse energy ||p||2\nThen calculate performance as on AWGN\nExample - binary transmission\nWill use MFB to compare different ISI\ncompensation techniques\n\nNyquist criterion - 6.011 revisited\nA channel specified by pulse response p(t) is\nISI free if\nNyquist frequency:\nw=pi/T or f=1/2T\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nRaised-cosine pulses\nCan have \"excess\" bandwidth as long as\nthere is symmetry that \"fills\" the aliased\nspectrum flat\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nBasic equalization concepts\nZero-forcing equalization\nFlattens equalized channel transfer function\nH(D)=Q(D)*W(D)\nWzfe(D)=1/(Q(D)||p||)\nX\n=\nChannel Q(w)\nEqualizer W(w)\nEqualized\n=>\nQ(D)\nW(D)\nkx\nˆkx\nky\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nLinear equalization\nZero-forcing not good on channels with nulls\nEqualizer enhances noise\nRemember, Pe depends on both noise and ISI\nBalance noise and ISI in the mean-square sense\nMinimizing MMSE wrt. Wk\nSame as using the orthogonality principle\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nZFE vs. MMSE - LE\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nT\nw\no graphic\nal plots with\nexponential curv\ne\ns\n,\n\nt\nh\ne o\nne on the left decreasing and the one on the right increasing.\nFigure by MIT OpenCourseWare.\n\nExample: ZFE vs. MMSE LE\n1+0.9D channel\nEqualizer response\nzfe\nmmse\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFractional equalizers\nOversampling in the receiver\nCan merge matched filter and equalizer\nCan reconstruct original signal from oversampled signal\n(as long as original is band-limited)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nIn\np\nu\nt-out\nput\ndiagram of a fractional equalizer.\nn\nFigure by MIT OpenCourseWare.\n\nISI channel model\nOversampled channel representation (3x e.g)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFinite length equalizer formulation\nWrite convolution as multiply with Toeplitz matrix\nyk\nzk\nxk\np\nw\nk\nk\nz\nwPx\n=\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nZFE and MMSE solution\nZero forcing equalizer (ZFE)\nMinimum-mean square error (MMSE) equalizer\n=>\n(\n)\n,\n[00...1...00]\nT\nT\nT\nT\nk\nk\nk\nzfe\nzfe\nz\nx\nwPx\nw P\nw\nP\nPP\n-\n-∆\n∆\n∆\n∆\n=\n=\n⇒\n=\n⇒\n=\n=\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nDecision feedback equalizer\nFeed-forward equalizer\nMatched + whitening filter + remove pre-cursor ISI\nFeed-back equalizer\nRemoves trailing ISI\nTo get w, first puncture the channel matrix to emulate the effect of\nfeedback on the equalized pulse response wP\nThen, get b from the causal taps of equalized pulse response wP\nyk\nzk\nxk\np\nw\nb\n0 2 4\n8 10 12 14 16\n0.2\n0.4\n0.6\n0.8\nSymbol time\nAmplitude\nFeedback\nequalization\nxk-∆\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nMMSE DFE\nSelects the feedback taps\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nBasic multitone modulation\nBest performance if basis functions are tailored to the\nchannel\nUse each tone as a basis function\nEach tone transmits narrow QAM signal and satisfies Nyquist\ncriterion - i.e. no ISI per tone\nPut less energy where channel is bad or where there is more noise\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nPictorial\ndepictio\nn of how\ninformati\non bits a\nre modula\nted.\nFigure by MIT OpenCourseWare.\n\nA bit of history\n1948 Shannon constructs capacity bounds\nAWGN channel with linear ISI - effectively uses multi-tone\nmodulation\nAnalog multi-tone\n1958 Collins Kineplex modem (first voiceband modem) - analog\nmultitone\n1964 Holsinger's MIT thesis - modem that approximates\nShannon's \"water-filling\"\n1967 Saltzberg, 1973 Bell Labs, 1980 IBM ...\nDigital multi-tone ~ 1990s\nDMT for DSL - Major push by prof. Cioffi's group at Stanford\nUse DSP power to improve the robustness and algorithms for\ndiscrete multi-tone modulation\nWe will mostly focus on this type of modulation\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nBasic multitone transmission\nEach tone sees AWGN channel (no ISI)\nN QAM-like symbols (complex)\n1 PAM symbol\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nPi\nct\noria\nl\ndepic\ntion\nof how\nmulti\ntone bi\nts are t\nransmit\nted.\nFigure by MIT OpenCourseWare.\n\nPictor\nial de\npi\nct\nio\nn\nof\nt\nhe\ne\nff\nec\nt of\na c\nha\nnn\nel o\nn an\nYi\nnp\nut sig\nnal.\nThe effect of the channel\nEach channel can be treated as AWGN\nWith only one basis function - hence simple\nsymbol-by-symbol detector is optimal\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nFigure by MIT OpenCourseWare.\n\nGap review\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nI\nllu\ns\ntra\nt\nion\n\no\nf\n\nb\nit\nr\nat\nes\nversus SNR for various gaps.n\nTab\nle of\nS\nNR\n\ng\na\np\ns\nwith Psube = 10^-6.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nExample - simplified multitone\n1+0.9D channel\nWith gap 4.4 dB\nPut unit energy per dimension (simply guessed)\nSame as baseband DFE\nData rate 1bit/dimension\nRe-calculate the necessary SNR - margin\nSNRmfb=10dB\nSNRmultitone=8.8dB (with more tones to better approx no-ISI case)\nSNRdfe=7.1dB\nCan do even better with multitone, if allocated energy properly\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFind optimum energy allocation that\nmaximizes b for given total energy constraint\n\nb is a convex function in energy/dimension\nUse Lagrange multipliers to solve for εn\n=>\nd\ndεn\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nWater-filling derivation\n\nWater-filling spectrum\nFlip the channel and pour in energy like water\nChannel\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nIl\nlu\nst\nra\nt\nio\nn\no\nf\ne\nn\ner\ng\ny\nv\ner\nsus su\nbchannel\n\ni\nn\nd\ne\nx\nand the a\nmount\n\no\nf\ne\nn\nergy for\neach subchannel.\nn\nFigure by MIT OpenCourseWare.\n\nWater-fill loading algorithms\nRate maximization\nMargin maximization\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nRate-adaptive loading\nSolve through\nmatrix inversion\nSolve iteratively\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nWater-filling example (rate-adaptive)\n1+0.9D again (Gap=1, so calculating capacity)\nTry 8 dim first\nTry 7 dim next\nCapacity=1.55bits/dim\n=>\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Illustration of energy versus subchannel index and the amount of energy for each subchannel.\nIllust\nrati\no\nn\n\no\nf\n\ne\nn\ne\nrgy\nvers\nus s\nubch\nanne\nl ind\nex a\nnd\nt\nhe\na\nmo\nun\nt\nof e\nnerg\ny fo\nr ea\nch\nsub\nchann\nel.\n\nFigure by MIT OpenCourseWare.\n\nSummary\n\nBandlimited communication\n\nBlock vs. symbol-by-symbol detector\n\nTry to make bandlimited channel look AWGN\n\nUse complex block detectors to orthogonalize basis functions\n(MAP)\n\nSimplify with equalization+sbs detector\n\nGenerate basis functions that don't loose orthogonality when\npassing through frequency selective channle (multitone modulation)\n\nEqualization\n\nZFE removes ISI but enhances noise\n\nTrade-off by designing MMSE equalizer\n\nDFE removes trailing ISI without noise enhancement\n\nMultitone\n\nOptimal transmission with proper allocation of energy/dimension\n(waterfilling)\n\nNext - practical loading algorithms and DMT/OFDM, Vector\ncoding\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design"
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/2a8950c0b8a77687bae83a70ff459b08_lecture_4.pdf",
      "content": "Practical multitone architectures\nLecture 4\nVladimir Stojanovic\n6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nLoading with discrete information units\nChow's algorithm (rounding of waterfilling results)\nLevin-Campello algorithm (greedy optimization)\nEach additional bit placed on subchannel that requires\nthe least incremental energy for its transport\nIncremental energy\n(\n) ε (\n) -ε (b -β)\ne b\nb\n⎛\ne b g\n(\n)\n⎞\nn\n2 ⎜\nn\nn\nn ⎟\nb = log\n1 +\n⎝\nΓ\n⎠\nn\nn\nn\nn\nn\nn\nbit increment\nEfficiency of bit distribution\nCan't move a bit from one channel to another and reduce the\ntotal energy\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nLevin-Campello (LC) algorithm- components\nEfficientizing (EF) - finding energy-efficient bit\ndistribution\nAlways replace a bit distribution with a more efficient -\nexhaustively search all single information unit changes\nat each step\nSmallest energy to add a new bit\nLargest energy to subtract the bit\nSubtract bits from costly sub-channels\nand add to least costly sub-channels\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nEfficientizing example\n1+0.9D-1 channel (Pe=10-6, gap=8.8dB, PAM/QAM)\nPAM and single-sideband\nQAM\nbn\nb +1\nn\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nRate adaptive solution\nNeed also to satisfy the energy constraint\n\nE-tightness (ET)\nCan't add another bit without violating the E constraint\n6.973 Communication System Design\nIf energy constraint violated\nsubtract the most costly bit\nIf energy less than max add\nthe bit that costs the least to add\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nLC - Rate adaptive algorithm\nET example (continue from EF example)\nStart from efficient distribution that blows up the energy\nconstraint\n= 8 1 8\nNε\n⋅=\nx\nMargin\nNε\nx =\n=1.8dB\nε\n5.32\nLevin-Campello Rate Adaptive algorithm\nChoose any bit distribution\nMake it efficient using (EF algorithm)\nMake it energy tight using (ET algorithm)\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDynamic rate adaptation\nChange the loading when channel changes\nLC is a natural candidate\nKeep the ET bit distribution and perturb based on\nchannel changes\nBit is moved from channel n to m\nTightly coupled with channel and noise estimation\nWill cover in later lectures\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nChannel partitioning\nDivide the channel into a set of parallel,\nindependent channels Illustration of how a channel is partitioned into parallel, independent channels.\nGeneralized Nyquist criterion\nNo interference between symbols\nNo interference between sub-channels\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFigure by MIT OpenCourseWare.\nIll\nust\nrat\nion\nof h\now a\ncha\nnnel\nis\npartiti\noned i\nnto\npara\nllel\n, in\ndepe\nnden\nt ch\nanne\nls.\n\nModal modulation\nTransmission with eigen-functions Illustration of how a channel is partitioned into parallel, independent channels.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 20\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n06.Illustration of how a channel is partitioned into parallel, independent channels.Illustration of how a channel is partitioned into parallel, independent channels.\nIllustration of how\na channel is part\nit\nioned in\nt\no p\nara\nl\nlel,\nindepe\nndent channels.\nI\nl\nl\nustratio\nn of how a cha\nn\nnel is partitioned into parallel, independent channels.\nPer-channel MAP is optimal\nProblem is vector AWGN\neigenfunctions (channel dependent)\n\nφk (t ) Channel\nFigure by MIT OpenCourseWare.\n\nConvergence of multitone to modal modulation\nModal modulation is optimal for finite symbol time\nEigenfunctions hard to compute and channel dependent\nMultitone converges to Modal modulation\nAs both N->inf and [-T/2, T/2]->(-inf,+inf)\nSet of eigenvalues of any autocorrelation function is unique\nThis set determines the performance of MM through SNR\nis also a valid eigen-function for inf symbol period\nEigen-functions are not unique\n\nCorresponding eigenvalues are R(2πn/T)\nNo ISI on any tone since symbol period is infinite\nEach tone is AWGN channel\nSBS detector is MAP optimal\nIf channel is periodic (does not exist in practice)\nare then eigen-functions even on finite [-T/2,T/2]\n\nCan use extra bandwidth in the design to make the channel \"look\" periodic\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFinite symbol duration effects\nISI corrupts the neighboring symbol\nNeed to leave the guardband\nCan try to create a more sinc-looking symbols in\ntime by filtering the tones in frequency domain\nNeed excess bandwidth for filter roll-off\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDiscrete time channel partitioning\nDigital realization\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n12 Digital realization of channel partitioning.\nDi\ngi\ntal\nreal\niz\nat\nion\nof c\nh\na\nn\nnel\npa\nr\nt\ni\nt\ni\no\nning\n.\nFigure by MIT OpenCourseWare.\n\nVector coding\nCreates a set of parallel channels by using SVD\nsingular-value decomposition of P\ndiscrete transmitter waveforms\ndiscrete matched filters\nsince F is unitary N is also AWGN\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nVC example\n1+0.9D-1, N=8\nNeed one sample guardband\nEtot=(N+1)*E_dim=(8+1)*1=9\nSVD on\nGives singular values\nSub-channel SNRs\nWaterfilling shows only 7 dimensions can be used\nSub-channel energies\nSNRs are then\nTotal SNR\nVC capacity\nWould get 1.55bits/dim if N-> inf\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nDMT and OFDM\nDiscrete multitone (DMT) and Orthogonal\nfrequency Division Multiplexing (OFDM)\nDMT used on slowly time-varying channels\nOptimize bn and En per sub-channel\nOFDM uses same channel partitioning as DMT\nBut uses same bn and En on all channels\nUsed on one-way broadcast channels\nForms of vector coding with added restrictions\nIn vector coding, M,F channel dependent\nMake the channel circular and make M,F channel\nindependent - simplify hardware implementation\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDMT/OFDM channel partitioning\nMake channel \"look\" circular\nRepeat the tail of the symbol at its beginning\nAdd cyclic prefix to each transmitted symbol\nCP\nDMT\n0 ...\nx\n...\nN\nN\nx\nx\nν\n-\n-\n...\nN\nN\nx\nx\nν\n-\n-\nVC\n0 ...\nx\n...\nN\nN\nx\nx\nν\n-\n-\n0...0\nSVD can be replaced by eigen-decomposition (spectral\nfactorization)\nA discrete form of modal modulation\nWhile SNRs are unique, many choices for M and F\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nIDFT and DFT as orthogonal transformations\nDMT and OFDM use IDFT and DFT as eigen-vectors\nDFT\nIDFT\nProof\nchannel gain at tone n\nqn is eigen-vector of P\n#\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDMT/OFDM implementation Pictorial depiction of DMT and OFDM implementation.\n/(\nData rate penalty N\nN +ν )\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design Pictorial depiction of DMT and OFDM implementation.\nPictorial depiction of DMT\nand\nOFD\nM\nim\nple\nment\nati\non.\n\nFigure by MIT OpenCourseWare.\n\nOne-tap frequency equalizer\nNeed to compensate for channel attenuation\nTo recover the original constellation distance Pictorial depiction of a one tap frequency equalizer.\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Pictorial depiction of a one tap frequency equalizer.\nFigure by MIT OpenCourseWare.\n\nRx/Tx Windowing\nRectangular window\nRaised cosine 5%\nRaised cosine 25%\nCan overlap as long\nas sum is constant\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n1+0.9D-1 DMT example\nN=8\nWaterfilling with Etot=8\nWaste one unit on CP\nlower than VC (8.1dB)\nFor N=16 quickly reaches max of 8.8dB\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nComplexity of DFE, VC, DMT\nExample 1+0.9D-1 channel\nMMSE-DFE, SNR=7.6 dB, 3ff, 1fb tap, 4 mac/sample\nVC, N=8, SNR=8.1 dB, 7*8/9=6.2MAC/sample\nDMT, N=8, SNR=7.6 dB, 8pt FFT/IFFT,\n2.7MAC/sample\nN=16, 3.8MAC/sample, SNR=8.8 dB\nDFE needs 10FF taps, 1FB tap, SNR=8.4 dB, 11MAC/sample\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nAsymmetric digital subscriber line (ADSL)\nSymbol rate T=250us\nNd=256, 4.3125kHz wide\n1/T'=2.208 MHz (CP = 40 samples) Various illustration of how ASDL flows from the electrical wires outside of the home to other products like the phone or computer.\nEach time domain symbol 2*256+40=552 samples\nHermitian symmetry creates real signal transmitted from 0-1.1MHz\nFirst 2-3 tones near DC not used - avoid interference with voice\nTone 256 also not used, 64 reserved for pilot\nNup=32, CP=5, each symbol 2*32+5=69 samples\nExactly 1/8 of downstream\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nVarious illu\nstra\ntion\nof h\now ASDL\nflow\ns\nfrom\nthe\nelect\nrical w\nires ou\ntside of\nthe hom\ne to oth\ner\nprod\nucts\nlike\nthe\nphone\nor co\nmput\ner.\nFigure by MIT OpenCourseWare.\n\n802.11a Wireless LAN example\nUp to 54Mbps symmetrically (<100m)\n1-3 Tx power levels\nComplex baseband\nunlike ADSL which is real baseband\nN=64 (-31 ... 31) (so 128 dimensions)\nSymbol length = 80 samples, CP=16\nSymbol rate 250kHz (T=4uS, T'=50ns), CPguard=0.8us\nFCC demands flat spectrum so no energy-allocation\nThe only knob is data rate selection\nBroadcast channel - can't optimize bit allocation\nnot used\n4 pilots\n48 data tones\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nTable of\nvalues for v arious co\nde\n\nra\nt\ne\ns\nof\nt\nhe\n.11a\nwir\neless\nLAN.\nPicto\nrial bar\ngraph d\nepicti\nng frequ\nencies an\nd associa\nted po\nwer le\nvels of 802.11a wireless LAN.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nHigh-level system view\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nTable.\nFigure by MIT OpenCourseWare.\n\nTransceiver architecture\n[2]\n6.973 Communication System Design\nFFT/IFFT\nCyclic prefix\nWindowing\nDAC\nUpconvert\nSynchronizer\nRemove prefix\nAGC& ADC\nLNA & Downconvert\nChannel estimator\nPilot insertion\nMapper\nEncoder\nInterleaver\nDescrambler\nViterbi decoder\nDeinterleaver\nDemapper\nScrambler\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nTransmitter architecture detail\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Illustration of the detail in the transmitter architecture.\nIll\nustr\nation of\nthe detail in\nthe tr\nansmitter\narchi\ntectur\ne.\nFigure by MIT OpenCourseWare.\n\nScrambling\nNeed to randomize incoming data\nEnables a number of tracking algorithms in\nthe receiver\nProvides flat spectrum in the given band\npseudo-random bit sequence (prbs) generator\nWhat is the period of this pseudo-random sequence?\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nInterleaver\nProtects the code from overload by burst errors\nBlock interleaver\nBlock size is the #of coded bits in OFDM symbol (NCBPS)\nTwo-step permutation\nAdjacent coded bits mapped\nOnto nonadjacent sub-carriers\nAlternate between less and more significant bits in the\nconstellation - avoid long runs of low reliability LSBs\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nConvolutional Encoder\nRate 1/2 convolutional encoder\nPunctured to obtain 2/3 and 3/4 rate\nTw o pictorial depictions of ho\nw input or\nsource data\nis encoded.\n64-state (constraint length K=7) code\nViterbi algorithm applied in the decoder\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFigure by MIT OpenCourseWare.\n\nSignal mapper\nBPSK, QPSK, 16-QAM, 64-QAM\nData divided into groups of (1,2,4,6) bits and mapped\nto a constellation point (i.e. a complex number)\nGray-coded constellation mapings\nNeed the same average power for all mappings\nScale the output by KMOD\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nPilot insertion and FFT/IFFT\nPilot insertion\nPilots BPSK, prbs modulated\nFFT and IFFT shared\nJust flip the Re and Im inputs\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nSpectral mask\nCannot use last 5 tones on each side\nDoes not use extra windowing\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nIllustration of transmit sp\nectral mask.\nFigure by MIT OpenCourseWare.\n\nReceiver architecture\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nBlock diagra\nm show\ning the p\nroc\ness\nflow\nof\nthe r\neceive\nr a\nrchitec\ntur\ne.\nFigure by MIT OpenCourseWare.\n\nPilot tracking and channel correction\nOFDM packet structure\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Block diagram of the OFDM packet structure.\nLinear illust\nration of the\nstructure of a\nn OFDM pa\ncket which a\nlso highlights th\ne packet length, d\nata, and time for each par\nameter.\nBlock diagra\nm of the OFDM pac\nket struc\nture.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nSynchronizer\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nA block di\nagram tha\nt i\nllu\nstrates what ha\nppens\nonce in\nput d\nata is given to a synchronizer system and the result is output symbols.a\nFigure by MIT OpenCourseWare.\n\nChannel estimator\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nA block di\nagram o\nf the proposed ch\nannel esti\nmator.\nFigure by MIT OpenCourseWare.\n\nFirst 802.11a chip\n[1]\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nImage removed due to copyright restrictions.\n\nReferences\n\n[1] T.H. Meng, B. McFarland, D. Su and J. Thomson \"Design and implementation of an all-CMOS 802.11a\nwireless LAN chipset,\" Communications Magazine, IEEE vol. 41, no. 8 SN - 0163-6804, pp. 160-168, 2003\n\n[2] M. Krstic, K. Maharatna, A. Troya, E. Grass and U. Jagdhold \"Implementation of an IEEE 802.11a\ncompliant low-power baseband processor,\" Telecommunications in Modern Satellite, Cable and\nBroadcasting Service, 2003. TELSIKS 2003. 6th International Conference on vol. 1, no. SN -, pp. 97-100\nvol.1, 2003.\n\n[3] J. Thomson, B. Baas, E.M. Cooper, J.M. Gilbert, G. Hsieh, P. Husted, A. Lokanathan, J.S. Kuskin, D.\nMcCracken, B. McFarland, T.H. Meng, D. Nakahira, S. Ng, M. Rattehalli, J.L. Smith, R. Subramanian, L.\nThon, Y.-H. Wang and R. Yu \"An integrated 802.11a baseband and MAC processor,\" Solid-State Circuits\nConference, 2002. Digest of Technical Papers. ISSCC. 2002 IEEE International vol. 1, no. SN -, pp. 126\n451 vol.1, 2002.\n\n[4] E. Grass, K. Tittelbach-Helmrich, U. Jagdhold, A. Troya, G. Lippert, O. Kruger, J. Lehmann, K.\nMaharatna, K.F. Dombrowski, N. Fiebig, R. Kraemer and P. Mahonen \"On the single-chip implementation\nof a Hiperlan/2 and IEEE 802.11a capable modem,\" Personal Communications, IEEE [see also IEEE\nWireless Communications] vol. 8, no. 6 SN - 1070-9916, pp. 48-57, 2001.\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 200\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6."
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/44d1cff68d0f994cca25442de3e1ac78_lecture_5.pdf",
      "content": "Application Specific Integrated Circuit Design\nLecture 5\nVladimir Stojanoviu\n6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nModern digital systems engineering\nu Managing complexity and connectivity\nPersonal Computer:\nCircuit Board:\nHurdware & software\n=8 / system\n1-166 devices\nScheme for\nrsprcsenting\ninfo m t i o n\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nIntegrated Circuit: \\\nw8-16 / PCB\n0.25M-16devices\n&-16/IC\n1OOK devices\nGate:\n16-64 devices\n=2-16 / Cell\n8 devices\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nChip design styles\nFull-custom\nTransistors are hand-drawn\nBest performance (although almost extinct)\nAlpha processors, older Intel processors\nRecent processors are semi-custom (Sun, AMD, Intel)\nStandard-Cell-based ASICs\nOnly use standard cells from the library\nDominant design style for non-processor, comms and multimedia\nASICs\nThis is what we will use in 6.973 (also used in 6.375)\nCheaper alternatives (for small volumes)\nSea of Gates (mask-programmable gate arrays)\nField Programmable Gate Arrays (FPGA)\nOn-the fly reconfigurable interconnect\nFlexibility vs. cost\nTighter control over transistors increases design cost\nCan make faster designs but harder to verify and more expensive\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nModern Application-Specific IC (ASIC)\nMultiple functional blocks\nOur ASIC example:\nPut together at the top level\n802.11a PHY\nMakes a WLAN chip\nLots of modeling\nBehavioral level\nArchitecture/functional level\nImage removed due to copyright restrictions.\nDifferent teams on each block\nNeed to make sure things work\nWhen connected\nMany levels of hierarchy\nLots of iteration and reuse\nMany architectural choices\nUse lots of implementation tricks\nMicro-architecture and algorithmic transforms\n[Thompson02]\nStraightforward solutions many times the chip size\nSophisticated CAD tools to architect and verify 4M design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nMacro modules\n256x32 (or 8192 bit) SRAM Generated by hard-macro module generator\nImage removed due to copyright restrictions.\nGenerate highly regular structures (entire memories,\nmultipliers, etc.) with a few lines of code\nVerilog models for memories automatically generated\nbased on size\nExample- chip-in-a-day flow (B. Brodersen, UC Berkely)\nA bunch of macros pre-generated (multipliers, adders, memories)\nEasy to do COmm system design\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nGate Arrays\nCan cut mark costs by prefabricating arrays of\ntransistors on wafers\nOnly customize metal layer for each design\nImage removed due to copyright restrictions.\nFixed-size unit transistors\nMetal connections personalize\ndesign\nTwo kinds:\nChanneled Gate Arrays\n- Leave space between rows of\ntransistors for routing\nSea-of-Gates\n- Route over the top of unused\ntransistors\nCourtesy of Arvind and Krste Asanovic. Used with permission.\n[ OCEAN Sea-of -Gates Base Pattern\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nGate Array Pros and Cons\nCheaper and quicker since less masks t o make\n- Can stockpile wafers with diffusion and poly finished\nMemory inefficient when made from gate array\n- Embedded gate arrays add multiple fixed memory\nblocks to improve density (=>Structured ASICs)\n- Cell -based array designed t o provide efficient memory\ncell (6 transistors in basic cell)\nLogic slow and big due t o fixed transistors and\nwiring overhead\n- Advanced cell -based arrays hardwire logic functions\n(NANDs/NORs/LUTs) which are personalized with\nmetal\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nField-Programmable Gate Arrays (FPGA)\nEach cell in array contains a programmable logic function\nArray has programmable interconnect between logic functions\nArrays mass-produced and programmed by customer after\nfabrication\n- Can be programmed by blowing fuses, loading SRAM bits, or loading\nFLASH memory\nOverhead of programmability makes arrays expensive and slow\nbut startup costs are low, so much cheaper than ASIC for small\nvolumes\nImage removed due to copyright restrictions.\nVirtex4 FPGA\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nXilinx Configurable logic block (CLB)\nFull-add, LUT, shift, mux, xor, ff\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCourtesy of David B. Parlour.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nStandard cell ASICs\nAlso called Cell-Based ICs (CBICs)\nFixed library of cells\nMemory generators\nDesign\nCells synthesized from hardware descriptive language (Verilog,\nVHDL)\nCells manually entered in a schematics\nPlaced and routed automatically (most desirable)\nFull set of masks for productions\nMost popular today, but increasingly expensive due to mask costs\nin advanced technologies\nCurrently a mask set is a couple $M\nFPGAs are getting increased attention\nWe will use this approach\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nThe ASIC flow\nDesign Capture\nPre-Layout\nSimulation\nLoaic Svnthesis\n!\nFloordannina\n3 1 1 1 1 U I Q C I U I I\nPlacement\nI\nPhysical\n: I\n. --\n.\nI\nCircuit\nRouting\nExtraction\n.c\nTapeout\nMost Common DesignApproach for Designs up to 500Mhz\nClock Rates\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month WYY].\n6.973 Communication System Design\n\nASIC flow subset - 6.375 and 6.973\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nStandard cell desian\no Layout considerations\nCells have standard height but vary in width\nDesigned to conmct power. ground, and wells by abutment\nClock Rail\n(not typical\n/\nCell U O\nPower\nRails in\n,\non M2\n\\L\nFlip-flop\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nStandard cell characterization\nPower Supply Line (V,,)\nDelay in (ns)! !\n1 I\nPath\nI\n~.ZV@C\nI\n1.W-40°C\nI\n3-input NAND cell\n(from ST Microelectronics):\nC = Load capacitance\nT = input riseffall time\nGround Supply Line (GND)\nEach library cell (FF, NAND, NOR, INV, etc.) and the variations on size\n(strength of the gate) is fully characterized across temperature, loading, etc.\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMJT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYW].\n6.973 Communication System Design\n\nStandard cell layout methodology\nCelktructuru!hldden under interconnect layers\nWith limlted interconnect layers, dedicated routing channels\nbetween rows of standard cells are needed\nWidth of the cell allowed to vary to accommodate complexity\nInterconnect plays a significant role in speed of a digital circuit\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month W].\n6.973CommunicationSystem Design\n\nMore standard cell layouts\nOver cell routing for\n0.18pm bmctal stdcells\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladirnir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw,mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973Communication System Design\n\nThe front-end: Verilog to ASIC layout flow\nThe \"push-button\" approach\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nThe back-end: The \"Design closure\" problem\nBiggest problem are wires (signals and clock)\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nClockina\nLarge Systems\nMost large scale ASICs, and systems built with these\nASICs, have several synchronous clock domains connected\nby asynchronous communication channels\nI\nclock\ndomain 4\nWe'll focus on a single synchronous clock domain today\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimlr Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month W].\n6.973 Communication System Design\n\nSingle Clock Edge-Triggered Design\nL\nCLK\nSingle clock with edge-triggered registers most common\ndesign style in ASICs\nSlow path timing constraint\nT-lc\nTcc&wt+ TP-\n+ Tawp\n- can always work around slow path by using slower clock\nI Fast wth timincl constraint I\n- bad fast path camot be fixed without redesign1\n- might have to add delay into paths to satisfy hold time\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nClock distribution\nCan't really distribute clock at same instant t o\nall flip-flops on chip\nClock\nDistribution\njntmCe\nNetwork length, metal width and\nheight, ctqdi/irg caps\nClock\nis \"clock skew\"\nDriver\nLocal\nClock\nVarrbtions in /ma/ clock\nBuffers\nload, local power supply,\nlocal gate length and --A\nthreshold: lccal\ntemprutwe\nCourtesy of A ~ i n dand Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http ://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nClock grids\nAlpha 21264 grid example\nMinimize skew and jitter\nCosts a lot of power\nbuffer tree\nImages removed due to copyright restrictions.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nClock trees\nbinary tree\nH-tree\nImages removed due to copyright restrictions.\nX-tree\nArbitrary\nmatched tree\nRecursive pattern to match delay\nMuch less power than grid\nMore skew and jitter\nSkew\nNon-uniform loading\nBuffer mismatch\nJitter\nSupply noise on buffers\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nModern Interconnect Stack\nImages removed due to copyright restrictions.\nTungsten local interconnect\nIBM CMOS7 process\n6 layers of copper wiring\n1 layer of tungsten local interconnect\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nWire resistance\nHeight7\nwidth\nresistance = (length x resistivity)\n(height x width)\nbulk aluminum\nbulk copper\nbulk silver\n2 . 8 ~ 1 0 - ~\nn-m\n1. ~ x I o - ~\nn-m\n1 . 6 ~ 1 0 - ~\nn-m\nHeight (Thickness) fixed in given tnanufacturing process\nResistances quoted as Wsquare\nTSMC O.18pm 6 Aluminum metal layers\n- MI-5 0.08 Wsquare (0.5\nx lmrn wire = 160 a)\n- M6\n0.03 SVsquare (0.5 pm x 1mm wire = 60 Q)\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nWire capacitance\nCapacitance depends on geometry of surrounding wires and\nrelative permittivity, &,,of\ninsulating dielectric\n- silicon dioxide, SiOp E,\n3-9\n- silicon flouride, SiOF E, = 3.1\n- SiLKTMpolymer, E, = 2.6\nCan have different materials between wires and between\nlayers, and also different materials on higher layers\nCourtesy of A ~ i n dand Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit,edu/),\nMassachusettsInstitute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nCapacitance scaling\nparallel plate capacitance\nwidth x length\nspacing\nu\nwidth\nCapacitance/wnit length -constant with feature\nsize scaling (width and spacing scale together)\n- Isolated wire sees approx. 100 fF/rnrn\n- With close neiohbors about 160 fF/mrn\nNeed t o use capacitance extractor t o get\naccurate values\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month WW].\n6.973 Communication System Design\n\nWire delay models\nW i n has distributed R and C per unit length\n-\nwire delay increases quadratically with length\n-\nedge rate also degrades quadratically with length\nSimple lumped n model gives reasonable approximation\n-\nRw is lumped resistance of wire\n-\nCw is lumped capacitance (put half at each end)\ncw\nDelay = Rdriver x -+(Rdriver +Rw) x\nCourtesy of h i n d and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973Communication Svstem Desian\n\nWire delay example - our technology\nI n 0.18prn TSMC, 5x minimum inverter with effective\nresistance of 3 kn, driving F04 load (25fF)\nDelay = Rdriver x Cload = 75 ps\nNow add lmrn M1 wire. 0.25prn wide\n- Rw = 320R wire + 22n vias = 344Q\n- CW = 160fF\nCourtesy of Awind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw,rnit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nWire delay scaling, local wires\nFor wire crossing same amount of circuitry\n- Resistance stays roughly constant\nlength decreases by saw amount as width, height stays\nlarge and/or change material t o copper\n- Capacitance decreases by scaling factor\ncap/unit length constant, length decreases\nWire delay tracks improvement in gate delay\n[Fnm Mark Homwitr, DAC ZdlXl]\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYW].\n6.973 Communication System Design\n\nWire delay scaling, global wires\nFor wire crossing whole chip\n- Resistance grows linearly\n- Capacitance stays fixed\nWire delay increases relative t o gate delay\n[From Mork Homwitz DAC 200Y7 ]\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973Communication System Design\n\nFewer gates per clock cycle\nProcessors in Intel 386 generation, around 50\nF04 gate delays per clock cycle\nPentium-4 around 16 F04 in normal clock,\naround 8 F04 delays in fast ALU section\nFastest 64-bit adder around 7 F04 delays\nAs measured in distance per clock cycle, wires\nare getting much slower\nChip area traversed,,\nin one clock cycle\nCourtesy of Arvind and Krste Asanovic. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusettsInstitute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design"
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_6.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/b34c08522c4d384487429e49b79eec53_lecture_6.pdf",
      "content": "Micro-architectures and transformations\nLecture 6\nVladimir Stojanoviu\n6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nBehavioral transformations\nThere are a large number of implementations of the same\nfunctionality\nThese implementations present a different point in the\narea-time-power design space\nBehavioral transformations allow exploring the design\nspace a high-level\nOptimization metrics:\n1. Area of the design\n2. Throughput or sample time T,\n3. Latency: clock cycles between\nthe input and associated output\nchange\n4. Power consumption\n5. Energy of executing a task\n6. ...\npower\narea\ntime\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nFixed-Coefficient Multiplication\nConventional Multiplication\nZ = X * Y\nConstant multiplication (become hardwired shifts and adds)\nI\nshifts using wiring\nu Example - FFT\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nAlgebraic transformations\nCommutativity\nDistributivity\nAssociativity\nCommon sub-expressions\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nTransforms for efficient resource utilization\nTime multiplexing: mapped to\n3 multipliers and 3 adders\nReduce number of operators\nto 2 multipliers and 2 adders\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nM l l Opencourseware (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nEssential transform: Retiming\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nRetiming example: FIR filter\nm m m m m ~ d ; a ~ d ~ h * ~ m .\n<\n.\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT Opencourseware (http://ocw,mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nPipelining\nPipelining = Adding Delays + Retiming\nOnly works on feed-forward path,s\nContrary to retiming,\npipelining adds extra registers\nto the system\nadd input\nregistem 3\nHow to pipehe:\n1. Add extra registers at\nall inputs\n2.\nRetime\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nCourtesy of Anantha Chandrakasan. Used with permission.\nLookahead\nloop\nunrolling\nTry pipelining\nthis structure\nHow about pipelining\nthis structure!\nretiming -\nA*\n-\nprecomputed\nCourtesy of Anantha Chandrakasan. Used with permission.\nCite as: Vladimlr Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/),\nMassachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nParallelism - saving power\nD\nD\nclk\nf\nclk\nf\nD\nD\nD\nclk\nf\nclk\nf\nclk\nf\nclk\nf\nSame throughput as nominal\nDelay of each path relaxed 2x\nLower the supply to match 2x nominal delay\nP=f*Ctot*Vdd\nfpar=fnom/2, Cpar=2*Cnom, Vdd_par~=Vdd_nom/2 (sqrt(2))=> Ppar~=Pnom/4 (2)\nNot quite right since Mux is additional overhead (but close)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nParallelism - speeding up\nD\nD\nclk\nf\nclk\nf\nD\nD\nD\nclk\nf\nclk\nf\nclk\nf\nclk\nf\nclk\nf\nAlmost twice the throughput of the nominal design\nNeed to fit the extra mux\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nImproving area efficiency: Time multiplexing\nD\nD\nD\nD\nclk\nf\nclk\nf\nclk\nf\nclk\nf\n2 clk\nf\nD\nD\nclk\nf\nclk\nf\n2 clk\nf\nD\nD\nclk\nf\nclk\nf\nSave area by reusing resources\nNeed twice faster clock internally\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nImproving area efficiency: Folding\nN times\nD\nD\nclk\nf\nclk\nf\nD\nclk\nf\n...\nD\nD\nclk\nf\nclk\nNf\nSel\nReuse logic and registers\nPreserves the throughput\nSaves area\nNeed to up-sample the internal data flow\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nImproving area efficiency: Folding\nb n\n( )\nc n\n( )\nD\nl\nl\nb n\n( )\nc n\n( )\na n\n( )\ny n\n( )\na n\n( )\ny n\n( )\nl\nl\nReuse logic and registers\nPreserves the throughput\nSaves area\nNeed to up-sample the internal data flow\nEasy for simple designs and folding ratios\nNeed a systematic way to do it\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nSystematic Folding\nConsider an edge e connecting U and V, with w(e) delays\nU\nV\nw(e)D\nHU\nPUD\nDF(U->V)\nHV\nNl v\nNl+u and Nl+v, u and v are folding orders\nTime partition to which the node is scheduled to execute in hardware\nN - folding factor (number of operations folded onto a single unit)\nIf HU pipelined by PU stages, result available at Nl+u+PU\nThe result of the l-th iteration of node U is used by l+w(e) iteration of\nnode V\nExecuted at N(l+w(e))+v\nHence, the result must be stored for\nDF ( V ) >N (l w(e)) v@>Nl PU u@ Nw(e) PU\nU\neo\nv u\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFolding - example\nFolding set\nordered set of operations executed by the same\nfunctional unit (e.g. S1={A1, 0, A2}, N=3)\nA1 belongs to folding set S1 with folding order 0 - S1|0\nA2 belongs to folding set S1 with folding order 2 - S1|2\nUnit is not utilized at time instances 3l+1 due to null operation at\nposition 1 within S1 - S1|1\nBiquad filter example (add 1, multiply 2)\nN=4 (folded 4 times, now iteration period is 4)\nEach node of the filter executed once every 4 time units when\nfolded\nPa=1, Pm=2 (one stage pipelined add, 2-stage\npipelined multiply) - units can be clocked at unit time\nFunctional units in the folded architecture execute 4\noperations before the next period\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFolding - biquad filter example\n(\n|1)\nS1\n(\n| 3)\nS\nD\na\nD\nD\nD\nD\nc\nD\nb\nd\n)\n3 (\n|\nS\n(\n| 2)\nS\n2)\nOUT\nIN\n(\n|\n\n(\n| 0)\nS1\nS1\nS\n(\n| )\n\n(\n| 3)\nS 1\nFolding sets S1={4,2,3,1}, S2={5,8,6,7}\ne.g. node 3 executed in the folded architecture at\ntime instances 4l+2 (S1|2)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nFolding - biquad filter example\nD\na\nD\nD\nD\nD\nD\nb\nc\nd\n(\n|\n\n0)\nS\n(\n|\n\n2)\nS\n(\n|\n\n3)\nS\nIN\n(\n|\n\n2)\nS\n(\n|\n\n0)\nS\nNlv\nU\nV\nw(e)D\nHU\nPUD\nDF(U->V)\nHV\nDF (\neoV )\nN l w e( )) v\n>Nl\nu\n( ) PU\nv\nu\nU\n>\n(\n\n@\nPU\n@\nNw e\n\nDF (1 o 2) 4(1) 1 1 3\n\nS\n(\n|1)\n\nDF (1 o 5) 4(1) 1 0\n3 0\n\nOUT\nDF (1 o 6) 4(1) 1\n3 2\n\nDF (1 o 7) 4(1) 1 3\n3 3\n\nDF (1 o 8) 4(2) 1 1 3 5\n\nDF (3 o1)\n1 3\n4(0) 2\nDF (4 o\n4(0)\n1 0\n2)\nDF (5 o 3) 4(0) 2\n\nDF (6 o 4) 4(1) 2\n\nDF (7 o 3) 4(1)\n\nS2\nDF\n(\n| 3)\nS\n(\n|1)\n\n(8 o 4) 4(1)\n\nDF(1->8)=5 means there is an edge from the adder to the\nmultiplier in the folded DFG with 5 delays\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nD\nD\nD\n2D\nD\na\n2D\nb\nc\nd\nD\nIN\n{1}\n{2}\n{3}\n{0}\n{0}\n{2} {3}\n{1}\n{0, 2}\n{1,3}\n{0, 2} {3}\n{1}\n{ , }\np q denotes 4l\nFolding - biquad folded architecture\np and 4l q\n{2}\nOUT\nDF (1 o 2) 4(1) 113\nDF (1 o 5) 4(1) 1\n\n3 0\nDF (1 o 6) 4(1) 1\nDF (1 o 7)\n4(1) 1 3\nDF (1 o 8) 4(2) 113\nDF (3 o1) 4(0)\n1 2\nDF (4 o 2) 4(0) 11 0\nDF (5 o 3) 4(0) 2\n\nDF (6 o\n4(1)\n\n4)\nDF (7 o 3) 4(1) 2\n\nDF (8 o 4)\n4(1)\n\nDF(1->8)=5 means there is an edge from the adder to the multiplier in\nthe folded DFG with 5 delays\nSince this edge ends at node 8, which has folding order 1, folded edge is\nswitched at the input of the multiplier in the folded DFG at 4l+1\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nUnfolding\n9D\n( )\na\ny n\n( )\nx n\n( ) y\n\n( )\nn\ny n a (n\n9) x\n(2\n(2 )\ny\nk\n(2 ) ay\nk\n\n9) x\nk\n(2\nx\nk\n\n(2\nx\nk\n1)\n(2\nay\nk\n(2\nx\nk\n1)\ny\nk\n1)\n\n9)\n(2\na\na\n4D\n5D\n(2 )\ny\nk\n(2\n1)\ny\nk\nIncrease throughput\nCan reveal hidden dependencies - schedule to a smaller iteration period\nDesign parallel architectures at the word or bit level\nWord(bit)-parallel architectures from word(bit)-serial\nIncrease throughput or decrease power consumption\nEach delay is J-slow (for J-unfolded system)\ny(2k)=ay(2(k-5)+1)+x(2k) and y(2k+1)=ay(2(k-4)+0)+x(2k+1)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nUnfold J-times\nData flow graph (DFG)\nFor each node in DFG, J nodes in J-unfolded DFG\nFor each edge in DFG, J edges in J-unfolded DFG\nUnfolding algorithm\nFor each node U in the original DFG\nDraw J nodes U0, U1, ..., UJ-1\nFor each edge U->V with w delays in the original DFG\nDraw J edges Ui->V(i+w) mod J with floor((i+w)/J) delays for i=0...J-1\na\nb\nc\nd\n9D\na o c\nc o b\n9D\nc od\nd o c\na0\nb0\nc0\nd0\na1\nc1\nd1\nb1\n4D\n5D\na0 o c0\nc0 ob0\nfloor((0 9)/2)D\n\no\nc0 d(0 9)mod2\n\nd0 o c0\na1 o c1\nc1 ob1\nfloor((1 9)/2)D\n\nc1 od(1 9)mod2\n\nd1 o c1\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nUnfolding applications\nSample period reduction\np\nq\nr\nu\nt\ns\n(4)\n(4)\n(4)\np\nq\nr\nu\nt\ns\n2D\n(1)\nD\n(0)\nD\nTs=4 (1)\n2D\n(4)\n(0)\n(1)\n(0)\n(4) D\nTs=6/2=3\np\nq\nr\nu\nt\ns\n(1)\n(0)\n(4)\nReduce iteration period\n(1)\na\nb\nc\nD\nb b c\nc\nc\nc\na\nD\nb\nc\na\n(4)\na\nb\nc\nD\n(0)\nD\n(2)\n(1)\n(2)\n(4)\n(1)\n(1)\n(0)\na\nb b c\nc\nc\nc\na b b\nTp=7\n(1)\n(2)\n(4)\nc c c c\nTp=6\nD\nTiter_avg=Tp/2\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nUnfolding applications\nParallel processing\nTurn bit-serial processing into bit-parallel\n4l 0\nWl u\n+\na3a2a1a0\nb3b2b1b0\nD\ns3s2s1s0\n1,\n\n2,3\nl\nUnfolding with switches\nWrite the switching instance as\n(\n'\n\n( / J )) (u mod J )\nu\nv\nWl u\nJ W l floor u\nDraw an edge with no delays in the unfolded graph from\nnode Uu mod J to the node Vu mod J, which is switched at time\n(W'l+floor(u/J))\n12l 1,7,9,11\nl\n4l 0,2\n4l 3\nu\nv\nu0\nv0\nu1\nv1\nu2\nv2\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nBit-serial adder example\nStart from bit-serial adder DFG\na\nb\nx\ns\nc\nz\nD\nl ,2,3\n4l 0\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nReferences\nA. P. Chandrakasan, S. Sheng, and R. W.\nBrodersen, \"Low-power CMOS digital design\"\nIEEE Journal Solid-State Circuits, April 1992\nSecond most cited JSSC paper\nKeshab Parhi \"VLSI Digital Signal Processing\nSystems\"\nRead: Chapters 3, 4, 5, 6 (10, 13 and 17 optional)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design"
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_7.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/bad73374d368d33a59d6e28f51cb9e33_lecture_7.pdf",
      "content": "March 1, 2006\nL-1\nArchitecture exploration in\nBluespec\nArvind\nComputer Science & Artificial Intelligence Lab\nMassachusetts Institute of Technology\nGuest Lecture 6.973 (lecture 7)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\n\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-2\nChip design has become\ntoo risky a business\nEver increasing size and complexity\nMicroprocessors: 100M gates ⇒1000M gates\nASICs: 5M to 10M gates ⇒50M to 100M gates\nEver increasing costs and design team sizes\n> $10M for a 10M gate ASIC\n> $1M per re-spin in case of an error (does not\ninclude the redesign costs, which can be substantial)\n18 months to design but only an eight-mon\nth\nselling opportunity in the market\nFewer new chip-starts every year\nLooking for alternatives, e.g., FPGA's\n⇒\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-3\nTypical SOC Architecture\nFor example: Cell phone\nHardware/software\ndevelopment needs to\nbe tightly coupled in\norder to meet\nperformance/power/\ncost goals\nSystem validation for\nfunctionality and\nperformance is very\ndifficult\nStable platform for\nsoftware development\nIP block reuse is\nessential to mitigate\ndevelopment costs\nIP = Intellectual Property\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-4\nIP re-use sounds great until\nyou start to use it...\ndata_in\npush_req_n\npop_req_n\nclk\nrstn\ndata_out\nfull\nempty\nExample: Commercially available\nFIFO IP block\nNo machine verification of such\ninformal constraints is feasible\nThese constraints are spread over many pages of\nthe documentation...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-5\nNew semantics for expressing behavior\nto reduce design complexity\nDecentralize complexity: Rule-based\nspecifications (Guarded Atomic Actions)\nLet us think about one rule at a time\nFormalize composition: Modules with\nguarded interfaces\nAutomatically manage and ensure the\ncorrectness of connectivity, i.e., correct-by-\nconstruction methodology\nRetain resilience to changes in design or\nlayout, e.g. compute latency ∆'s\nPromote regularity of layout at macro level\nBluespec\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-6\nBluespec promotes composition\nthrough guarded interfaces\ntheModuleA\nnot full\nnot empty\nnot empty\nn\nn\nrdy\nenab\nrdy\nenab\nrdy\nenq\ndeq\nfirst\nFIFO\ntheModuleB\ntheFifo.enq(value1);\ntheFifo.deq();\nvalue2 = theFifo.first();\ntheFifo.enq(value3);\ntheFifo.deq();\nvalue4 = theFifo.first();\ntheFifo\nEnqueue\narbitration\ncontrol\nDequeue\narbitration\ncontrol\nSelf-documenting\ninterfaces;\nAutomatic generation\nof logic to eliminate\nconflicts in use.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMar\nIn Bluespec SystemVerilog (BSV) ...\nch 1, 2006\nL-7\nPower to express complex static\nstructures and constraints\nChecked by the compiler\n\"Micro-protocols\" are managed by the\ncompiler\nThe compiler generates the necessary\nhardware (muxing and control)\nMicro-protocols need less or no verification\nEasier to make changes while\npreserving correctness\nI Smaller, simpler, clearer, more correct code\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\ninterface\nmodule\nMarc\nBluespec: State and Rules\norganized into modules\nAll state (e.g., Registers, FIFOs, RAMs, ...) is explicit.\nBehavior is expressed in terms of atomic actions on the state:\nRule: condition I action\nRules can manipulate state in other modules only via their\ninterfaces. Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nh 1, 2006\nDownloaded on [DD Month YYYY].\nL-8\n\nMarch 1, 2006\nL-9\nProgramming with\nrules: A simple example\nEuclid's algorithm for computing the\nGreatest Common Divisor (GCD):\nsubtract\nsubtract\nswap\nsubtract\nsubtract\nanswer:\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-10\nGCD in BSV\nmodule mkGCD (I_GCD);\nReg#(int) x <- mkRegU;\nReg#(int) y <- mkReg(0);\nrule swap ((x > y) && (y != 0));\nx <= y; y <= x;\nendrule\nrule subtract ((x <= y) && (y != 0));\ny <= y - x;\nendrule\nmethod Action start(int a, int b) if (y==0);\nx <= a; y <= b;\nendmethod\nmethod int result() if (y==0);\nreturn x;\nendmethod\nendmodule\nInternal\nbehavior\nExternal\ninterface\nState\ntypedef int Int#(32)\nAssumes x /= 0 and y /= 0\nx\ny\nswap\nsub\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-11\nrdy\nenab\nint\nint\nrdy\nstart\nresult\nGCD\nmodule\nint\ny == 0\ny == 0\nimplicit\nconditions\ninterface I_GCD;\nmethod Action start (int a, int b);\nmethod int result();\nendinterface\nGCD Hardware Module\nt\n#(type t)\nt\nt\nt\nt\nt\nIn a GCD call t\ncould be\nInt#(32),\nUInt#(16),\nInt#(13), ...\nThe module can easily be made polymorphic\nMany different implementations can provide the same\ninterface:\nmodule mkGCD (I_GCD)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nM\nBluespec SystemVerilog source\nBluespec Compiler\nBlueview\nC\nVerilog 95 RTL\nCycle\nBluespec C sim\nVerilog sim\nRTL synthesis\nAccurate\nVCD output\ngates\nLegend\nDebussy\nfiles\nVisualization\nBluespec tools\n3rd party tools\narch 1, 2006\nL-12\nBluespec Tool flow\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n.\nfiles\nBluespec tools\n3rd party tools\n\nMarch 1, 2006\nL-13\nGenerated Verilog RTL: GCD\nmodule mkGCD(CLK,RST_N,start_a,start_b,EN_start,RDY_start,\nresult,RDY_result);\ninput CLK; input RST_N;\n// action method start\ninput [31 : 0] start_a; input [31 : 0] start_b; input EN_start;\noutput RDY_start;\n// value method result\noutput [31 : 0] result; output RDY_result;\n// register x and y\nreg [31 : 0] x;\nwire [31 : 0] x$D_IN; wire x$EN;\nreg [31 : 0] y;\nwire [31 : 0] y$D_IN; wire y$EN;\n...\n// rule RL_subtract\nassign WILL_FIRE_RL_subtract = x_SLE_y___d3 && !y_EQ_0___d10 ;\n// rule RL_swap\nassign WILL_FIRE_RL_swap = !x_SLE_y___d3 && !y_EQ_0___d10 ;\n...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-14\nGenerated Hardware\nnext state values\npredicates\nx_en\ny_en\nx\ny\n>\n!(=0)\nswap? subtract?\nsub\nx\ny\nwen\nrdy\nx\nrdy\nstart\nresult\nx_en = swap?\ny_en = swap? OR subtract?\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-15\nGenerated Hardware Module\nx_en\ny_en\nx\ny\n>\n!(=0)\nswap? subtract?\nsub\nx\ny\nwen\nrdy\nx\nrdy\nstart\nresult\nstart_en\nstart_en\nx_en = swap? OR start_en\ny_en = swap? OR subtract? OR start_en\nrdy = (y==0)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-16\nDesign a 802.11a Transmitter\n802.11a is an IEEE Standard for wireless\ncommunication\nFrequency of Operation: 5Ghz band\nModulation: Orthogonal Frequency Division\nMultiplexing (OFDM)\nTransmitter\nReceiver\nChannel\nTX MAC\nAnalog\nRX\nAnalog\nTX\nRX MAC\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-17\nTransmitter Overview\nController\nScrambler\nEncoder\nInterleaver\nMapper\nIFFT\nCyclic\nExtend\nheaders\ndata\nIFFT Transforms 64 (frequency domain)\ncomplex numbers into 64 (time domain)\ncomplex numbers\ncompute intensive\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-18\nReceiver Overview\nSynchronizer\nFFT\nSerial to\nParallel\nDetector /\nDeinterleaver\nViterbi\nController\nDescrambler\nFFT, in half\nduplex\nsystem is\noften\nshared with\nIFFT\ncompute intensive\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-19\nIFFT Requirements\n802.11a needs to process a symbol in 4 μsec\n(250KHz)\nIFFT must output a symbol every 4 μsec\ni.e. perform an Inverse FFT of 64 complex numbers\nEach module before IFFT must process every 4 μsec\n1 frame for 6Mbps rate\n2 frames for 12Mbps rate\n4 frames for 24Mbps rate\nEven in the worst case (24Mbps) the clock frequency\ncan be as low as 1Mhz.\nBut what about the area & power?\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-20\nArea-Frequency Tradeoff\nWe can decrease the area by multiplexing some\ncircuits and running the system at a higher frequency\nReuse\nTwice the frequency\nbut half the area\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-21\nCombinational IFFT\nin0\n...\nin1\nin2\nin63\nin3\nin4\nRadix 4\nRadix 4\nRadix 4\n...\nx16\nRadix 4\nRadix 4\nRadix 4\n...\nRadix 4\nRadix 4\nRadix 4\n...\nout0\n...\nout1\nout2\nout63\nout3\nout4\nPermute_1\nPermute_2\nPermute_3\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-22\nRadix-4 Node\n*\n*\n*\n*\n+\n-\n-\n+\n+\n-\n-\n+\n* j\nk0\nout0\nk1\nk2\nk3\ntwid3\ntwid2\ntwid1\ntwid0\nout1\nout2\nout3\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-23\nBluespec code: Radix-4 Node\nfunction Tuple4#(Complex, Complex, Complex, Complex)\nradix4(Tuple4#(Complex, Complex, Complex, Complex) twids,\nComplex k0, Complex k1, Complex k2, Complex k3);\nmatch {.t0, .t1, .t2, .t3} = twids;\nComplex m0 = k0 * t0; Complex m1 = k1 * t1;\nComplex m2 = k2 * t2; Complex m3 = k3 * t3;\nComplex y0 = m0 + m2; Complex y1 = m0 - m2;\nComplex y2 = m1 + m3; Complex y3 = m1 - m3;\nComplex y3_j = Complex {i: negate(y3.q), q: y3.i};\nComplex z0 = y0 + y2; Complex z1 = y1 - y3_j;\nComplex z2 = y0 - y2; Complex z3 = y1 - y3_j;\nreturn tuple4(z0, z1, z2, z3);\nendfunction\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-24\nBluespec code for pure\nCombinational Circuit\nfunction SVector#(64, Complex) ifft (SVector#(64, Complex) in_data);\n//Declare vectors\nSVector#(64, Complex) stage12_data = newSVector();\nSVector#(64, Complex) stage12_permuted = newSVector();\nSVector#(64, Complex) stage12_out = newSVector();\nSVector#(64, Complex) stage23_data = newSVector();\n...\n//Radix 4 stage 1 (unpermuted)\nfor (Integer i = 0; i < 16; i = i + 1)\nbegin\nInteger idx = i * 4;\nlet twid0 = getTwiddle(0, fromInteger(i));\nmatch {.y0, .y1, .y2, .y3} = radix4(twid0,\nin_data[idx], in_data[idx + 1],\nin_data[idx + 2], in_data[idx + 3]);\nstage12_data[idx] = y0; stage12_data[idx + 1] = y1;\nstage12_data[idx + 2] = y2; stage12_data[idx + 3] = y3;\nend\n//Stage 1 permutation\nfor (Integer i = 0; i < 64; i = i + 1)\nstage12_permuted[i] = stage12_data[permute_1to2[i]];\n//Continued on next slide...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-25\nBluespec code for pure\nCombinational Circuit continued\n// (* continued from previous *)\nstage12_out = stage12_permuted; //Later implementations will change this\n//Radix 4 stage 2 (unpermuted)\nfor (Integer i = 0; i < 16; i = i + 1)\nbegin\nInteger idx = i * 4;\nlet twid1 = getTwiddle(1, fromInteger(i));\nmatch {.y0, .y1, .y2, .y3} = radix4(twid1,\nstage12_out[idx], stage12_out[idx + 1],\nstage12_out[idx + 2], stage12_out[idx + 3]);\nstage23_data[idx] = y0; stage23_data[idx + 1] = y1;\nstage23_data[idx + 2] = y2; stage23_data[idx + 3] = y3;\nend\n//Stage 2 permutation\nfor (Integer i = 0; i < 64; i = i + 1)\nstage23_permuted[i] = stage23_data[permute64_2to3[i]];\n...\n//Repeat for Stage 3\n...\nreturn stage3out_permuted;\nendfunction\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-26\nPipelined IFFT\nin0\n...\nin1\nin2\nin63\nin3\nin4\nRadix 4\nRadix 4\nRadix 4\n...\nx16\nRadix 4\nRadix 4\nRadix 4\n...\nRadix 4\nRadix 4\nRadix 4\n...\nout0\n...\nout1\nout2\nout63\nout3\nout4\nPermute_1\nPermute_2\nPermute_3\nPut a register to hold 64 complex numbers at the output of\neach stage.\nEven more hardware but clock can go faster - less\ncombinational circuitry between two stages\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-27\nBluespec code for Pipeline\nStage\nmodule mkIFFT_Pipelined() (I_IFFT);\n//Declare vectors\nSVector#(64, Complex) in_data;\nSVector#(64, Complex) stage12_data = newSVector();\n...\n//Declare FIFOs\nFIFO#(SVector#(64, Complex)) in_fifo <- mkFIFO();\n//Declare pipeline registers\nReg#(SVector#(64, Complex)) stage12_reg <- mkReg(newSVector());\nReg#(SVector#(64, Complex)) stage23_reg <- mkReg(newSVector());\n//Read input\nin_data = in_fifo.first();\n//Radix 4 stage 1 (unpermuted)\nfor (Integer i = 0; i < 16; i = i + 1)\nbegin\nInteger idx = i * 4;\nw\nlet twid0 = getTwiddle(0, fromInteger(i));\nw\nmatch {.y0, .y1, .y2, .y3} = radix4(twid0,\nin_data[idx], in_data[idx + 1],\n//Continue as before...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-28\nBluespec code for Pipeline\nStage\n...\n//Read from pipe register for stage 2\nstage12_out = stage12_reg;\n//Radix 4 stage 2 (unpermuted)\nfor (Integer i = 0; i < 16; i = i + 1)\n...\n//Read from pipe register for stage 3\nstage23_out = stage23_reg;\nrule writeRegs (True);\nstage12_reg <= stage12_permuted;\nstage23_reg <= stage23_permuted;\nin_fifo.deq(); out_fifo.enq(stage3out_permuted);\nendrule\nmethod Action inp (Vector#(64, Complex) data);\nin_fifo.enq(data);\nendmethod\n...\nendmodule\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-29\nCircular pipeline: Reusing the\nPipeline Stage\nin0\n...\nin1\nin2\nin63\nin3\nin4\nout0\n...\nout1\nout2\nout63\nout3\nout4\n...\nRadix 4\nRadix 4\nPermute_1\nPermute_2\nPermute_3\nStage\nCounter\n16 Radix 4s can be\nshared but not the three\npermutations. Hence the\nneed for muxes\n64, 4-way\nMuxes\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-30\nBluespec Code for Circular\nPipeline\nmodule mkIFFT_Circular (I_IFFT);\nSVector#(64, Complex) in_data = newSVector();\nSVector#(64, Complex) stage_data = newSVector();\nSVector#(64, Complex) stage_permuted = newSVector();\n//State elements\nReg#(SVector#(64, Complex)) data_reg <- mkReg(newSVector());\nReg#(Bit#(2)) stage_counter <- mkReg(0);\nFIFO#(SVector#(64, Complex)) in_fifo <- mkFIFO();\n//Read input\nin_data = data_reg;\n//Perform a single Radix 4 stage (unpermuted)\nfor (Integer i = 0; i < 16; i = i + 1)\nbegin\nInteger idx = i * 4;\nlet twid = getTwiddle(stage_counter, fromInteger(i));\nmatch {.y0, .y1, .y2, .y3} = radix4(twid,\nin_data[idx], in_data[idx + 1],\nin_data[idx + 2], in_data[idx + 3]);\nstage_data[idx] = y0; stage_data[idx + 1] = y1;\nstage_data[idx + 2] = y2; stage_data[idx + 3] = y3;\nend\n//Continued...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-31\nBluespec Code for Circular\nPipeline\n//Stage permutation\nfor (Integer i = 0; i < 64; i = i + 1)\nstage_permuted[i] = case (stage_counter)\n0: return in_wire._read[i];\n1: return stage_data[permute64_1to2[i]];\n2: return stage_data[permute64_2to3[i]];\n3: return stage_data[permute64_3toOut[i]];\nendcase;\nrule writeRegs (True);\ndata_reg <= stage_permuted;\nstage_counter <= stage_counter + 1;\nendrule\nmethod Action inp(SVector#(64, Complex) data) if (stage_counter == 0);\nin_fifo.enq(data);\nstage_counter <= 1;\nendmethod\n...\nendmodule\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-32\nJust one Radix-4 node!\nin0\n...\nin1\nin2\nin63\nin3\nin4\nout0\n...\nout1\nout2\nout63\nout3\nout4\nRadix 4\nPermute_1\nPermute_2\nPermute_3\nStage\nCounter\n0 to 2\nIndex\nCounter\n0 to 15\n64, 4-way\nMuxes\n4, 16-way\nMuxes\n4, 16-way\nDeMuxes\nThe two stage\nregisters can be\nfolded into one\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-33\nBluespec Code for Extreme\nreuse\nmodule mkIFFT_SuperCircular (I_IFFT);\nSVector#(64, Complex) in_data = newSVector();\nSVector#(64, Complex) stage_data = newSVector();\nSVector#(64, Complex) permutedV = newSVector();\n//State\nReg#(SVector#(64, Complex)) data_reg <- mkReg(newSVector());\nReg#(SVector#(64, Complex)) post_reg <- mkReg(newSVector());\nReg#(Bit#(2)) stage_counter <- mkReg(0);\nReg#(Bit#(5)) idx_counter <- mkReg(16);\nFIFO#(SVector#(64, Complex)) in_fifo <- mkFIFO();\n//Read input\nin_data = data_reg;\n//Do one-sixteenth of a Radix 4 stage (unpermuted)\nBit#(6) idx = {idx_counter, 2'b00};\n//idx = idx_counter * 4\n//Use DYNAMIC select and update of the Vector\nlet twid = getTwiddle(stage_counter, idx_counter);\nmatch {.y0, .y1, .y2, .y3} = radix4(twid,\nselect(in_data, idx), select(in_data, idx + 1),\nselect(in_data, idx + 2), select(in_data, idx + 3));\n//generates post_reg after writing in the 4 new values\nlet stage_data0 = post_reg;\nlet stage_data1 = update(stage_data, idx, y0);\nlet stage_data2 = update(stage_data1,idx + 1, y1);\nlet stage_data3 = update(stage_data2,idx + 2, y2);\nstage_data\n= update(stage_data3,idx + 3, y3);\n//Continued...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-34\nBluespec Code for Extreme\nreuse-2\n//Permutation is based on the current stage\nfor (Integer i = 0; i < 64; i = i + 1)\npermutedV[i] = case (stage_counter)\n1: return post_reg[permute64_1to2[i]];\n2: return post_reg[permute64_2to3[i]]\n3: return\npost_reg[permute64_3toOut[i]];\ndefault: return in_fifo.first()[i];\nendcase;\nrule writeRegs (stage_counter != 0);\npost_reg <= stage_data;\nif (idx == 16)\ndata_reg <= permutedV;\nidx_counter <= (idx_counter == 16) ? 0: idx_counter + 1;\nif (idx_counter == 16)\nstage_counter <= stage_counter + 1;\nendrule\n//Everything else as before...\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-35\nSynthesis results\nNirav Dave & Mike Pellauer\nDesign\nArea (mm2)\nCLK Period\nThroughput\n(1 symbol)\n15 ns\n15ns\n7 ns\n24 ns\n408 ns\n7 ns\n8 ns\n8 ns\n1.03\n1.46\n0.83\n0.23\nComb.\nPipelined\nCircular\n1 Radix\nLatency\n15 ns\n21 ns\n24 ns\n408 ns\nTSMC .13 micron; numbers reported are before place and route.\nSingle radix-4 node design is 1⁄4 the size of combination design\nbut still meets the throughput requirement easily; clock can\nreduced to 15 to 20 Mhz\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-36\nSynthesis results\nSteve Gerding, Elizabeth Basha & Rose Liu\nDesign\nArea (mm2)\nCLK Period\nThroughput\n(1 symbol)\n63 ns\n63 ns\n90 ns\n99 ns\n30 ns\n33 ns\n29.12\n5.19\n4.57\nComb.\nCircular-\n2stages\nCircular\nLatency\n63 ns\n180 ns\n99 ns\nTSMC .13 micron; numbers reported are after place and route\nTwo stage circular pipeline design is not good.\nCircular pipeline design can meet the throughput requirement\nat 750KHz!\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nMarch 1, 2006\nL-37\nTwo circular pipelines\nStart\nInputDataQ\nOutputDataQ\n16-Node\nStage\nData and\nTwiddle\nSetup\nData and\nTwiddle\nSetup\nInputDataQ\nOutputDataQ\n16-Node\nStage\nSteve Gerding, Elizabeth Basha & Rose Liu\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY]."
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_8.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/49a17bd0078f7723100ac1395a476595_lecture_8.pdf",
      "content": "Fast Fourier Transform:\nTheory and Algorithms\nLecture 8\n6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nVladimir Stojanovic\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDiscrete Fourier Transform - A review\nDefinition\n{Xk} is periodic\nSince {Xk} is sampled, {xn} must also be periodic\nFrom a physical point of view, both are\nrepeated with period N\nRequires O(N2) operations\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nFast Fourier Transform History\nTwiddle factor FFTs (non-coprime sub-lengths)\n\n1805 Gauss\nPredates even Fourier's work on transforms!\n1903 Runge\n1965 Cooley-Tukey\n1984 Duhamel-Vetterli (split-radix FFT)\nFFTs w/o twiddle factors (coprime sub-lengths)\n1960 Good's mapping\napplication of Chinese Remainder Theorem ~100 A.D.\n1976 Rader - prime length FFT\n1976 Winograd's Fourier Transform (WFTA)\n1977 Kolba and Parks (Prime Factor Algorithm - PFA)\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDivide and conquer\nSuppose all Il sets have same number\nof elements N1 so, N=N1*N2, r=N2\nEach inner-most sum takes N1\n2 multiplications\nThe outer sum will need N2 multiplications per output point\nHence, total number of multiplications\nDivide and conquer always has less computations\nN2*N for the whole sum (for all output points)\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nGeneralizations\nThe inner-most sum has to represent a DFT\nOnly possible if the subset (possibly permuted)\nHas the same periodicity as the initial sequence\nAll main classes of FFTs can be cast in the above form\nBoth sums have same periodicity (Good's mapping)\nNo permutations (i.e. twiddle factors)\nAll the subsets have same number of elements m=N/r\n(m,r)=1 - i.e. m and r are coprime\nIf not, then inner sum is one stap of radix-r FFT\nIf r=3, subsets with N/2, N/4 and N/4 elements\nSplit-radix algorithm\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nThe cost of mapping\nThe goal for divide and conquer\nDifferent types balance mapping with subproblem\ncost\nE.g. in radix-2\nsubproblems are trivial (only sum and differences)\nMapping requires twiddle factors (large number of\nmultiplies)\nE.g. in prime-factor algorithm\nSubproblems are DFTs with coprime lengths (costly)\nMapping trivial (no arithmetic operations)\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nFFTs with twiddle factors\nReintroduced by Cooley-Tukey '65\nStart from general divide and conquer\nKeep periodicity compatible with\nperiodicity of the input sequence\nUse decimation\nalmost N1 DFTs of size N2\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nCooley-Tukey FFT contd.\ncan be taken mod N2\n,\n,\nn k\nn k\nY\nY\n=\n2. N multplications with twiddle factors\n1. N1 DFTs of length N2\n3. N2 DFTs of length N1\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nStep 1: Evaluate N1 DFTs of length N2\nStep 2: N multiplications with twiddle factors\nStep 3: Evaluate N2 DFTs of length N1\nVector xi mapped to matrix xn1,n2 (N1xN2)\nCompute N1 DFTs of length N2 on each row\nPoint-to-point multiply with twiddle factors\nCompute N2 DFTs of length N1 on the columns\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n2-D view of Cooley-Tukey mapping\nN=15 (N1=3, N2=5) Two dimensional view of Cooley-Tukey mapping. Mapping includes discrete fourier transform representation.\nCannot exchange the order of DFTs\nBecause of twiddle multiply\nDifferent mapping for N1=5, N2=3\nNot just transpose\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nTwo d\nimens\nio\nna\nl\nvi\new\no\nf\nCo\nol\ney\n-T\nuk\ney\nm\nap\npin\ng.\nMap\npin\ng\nin\ncludes discrete f\nou\nri\ner\nt\nra\nns\nfo\nrm\nrep\nres\nent\nati\non.\nTw\no dim\nen\nsi ona\nl\nvi ew\nof\nC ool\ney\n-\nT\nu\nkey mapping. Mapping includes discrete fourier transform representation.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nRadix 2 and radix 4 algorithms\nLengths as powers of 2 or 4 are most popular\nAssume N=2n\nN1=2, N2=2n-1 (divides input sequence into even and\nodd samples - decimation in time - DIT)\n\"Butterfly\"\n(sum or difference followed or\npreceeded by a twiddle factor multiply)\nXm and XN/2+m outputs of N/2 2-pt DFTs on outputs of\n2, N/2-pt DFTs weighted with twiddle factors\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDIT radix-2 implementations\nSeveral different ways\nReorder the input data\nInput samples for inner\nDFTs in subsequent\nlocations\nResults in bit-reversed\ninput, in-order output DIT\nSelectively compute\nDFTs on evens and\nodds\nPerform in-place\ncomputation\nOutput in bit-reversed\norder (X3 in position six\n(011->110))\n\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nPic\ntoria\nl i\nllust\nrat\nion o\nf t\nhe DI\nT\nra\ndi\nx-\nim\npl\nem\nen\nta\nti\non\nXf\nro\nm\nin\nput\ns to\ncorres\npo\nn\ndi\nn\ng\no\nutputs.\nWhich type is this implementation?\nFigure by MIT OpenCourseWare.\n\nDecimation in frequency (DIF) radix-2 implementation\nIf reverse the role of N1 and N2, get DIF\nN1=N/2, N2=2\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nPic\ntoria\nl i\nllust\nrat\nion o\nf t\nhe DI\nF r\nadix-\nim\npl\nem\nen\nta\nti\non\nf\nor\nv\nal\nue\ns\nof\nN\na\nnd\n\nN2\n.\nFigure by MIT OpenCourseWare.\n\nDuality DIT<->DIF\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nPic\ntoria\nl i\nllust\nrat\nion o\nf t\nhe DI\nT\nra\ndix-2 implementation from inputs to corresponding outputs. Pictorial illustration of the DIF radix-2 implementation for values of N1 and N2.\nWhich one is DIT (DIF)?\nHow can we get one from another?\nFigure by MIT OpenCourseW. are.\n\nComplexity of radix-2 FFTs\nDFT of length N replaced by two length-N/2\nAt the cost of N complex multiplications (twiddle)\nAnd N complex additions (2pt DFTs)\nIterate the scheme log2N-1 times\nObtain trivial transforms (length 2) of the length-N/2 DFTs\nTwiddle multiplies (WNi)\nComplex multiply - 3 real mult + 3 real add\nIf i is multiple of N/4, no arithmetic operation required (why?)\n4 butterflies (one general, 3 special cases)\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nRadix-4\nN=4n, N1=4, N2=N/4\n4 DFTs of length N/4\n3N/4 twiddle multiplies\nN/4 DFTs of length 4\nCost of length-4 DFT\nNo multiplication\nOnly 16 real additions\nReduces the number of stages to log4N\nRadix-8 can reduce number of operations even more\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nPic\nt\nori\na\nl i\nl\nlus\nt\nrat\ni\non\no\nf a\nn\nin\np\nut-\nou\ntpu\nt\nsy\nst\nem\nXof\nra\ndi\nx-\n4.\nFigure by MIT OpenCourseWare.\n\nMixed-radix and Split-radix\nMixed-radix\nDiferent radices in different\nstages\nSplit-radix\nDifferent radices in the same\nstage\nSimultaneously on different\nparts of the transform\nCan achieve lowest number\nof adds and multiplies for\nlength 2n inputs\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nPi\nct\nori\nal\nXi\nll\nus\ntra\ntio\nn\nfor\nXa\nXsp\nlit\n-ra\ndix\n\nwit\nh\nap\np\nrop\nr\niat\ne\nin\np\nuts\n\nand\n\nout\np\nuts\n.\nFigure by MIT OpenCourseWare.\n\nSplit-radix (DIF SRFFT)\nPic\ntor\nia\nl\nil\nlus\ntr\nati\non\nXfo\nr\na s\nplit-radix with a\nppropriate inputs and outp\nuts\n.\nPic\ntoria\nl i\nllust\nrat\nion o\nf t\nhe DI\nF r\nadix-\nim\npl\nem\nen\nta\nti\non\nXf\nor\nXv\nal\nue\ns\nof\nXN\na\nnd\n\nN2\n.\nfactors\nEven samples X2k in DIF should\nbe computed separately from\nother samples\nWith same algorithm (recursively) as\nthe original sequence\nNo general rule for odd samples\nRadix-4 is more efficient than radix-2\nHigher radices are inefficient\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nLook at DIF radix-2\nX\ndon't have twiddle\n2k1\ns\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nSplit-radix (DIT SRFFT)\nDual to DIF SRFFT\nConsiders separately subsets {x2i}, {x4i+1} and {x4i+3}\nRedundancy in Xk, Xk+N/4, Xk+N/2, Xk+3N/4 computation\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nFFTs without twiddle factors\nDivide and conquer requirements\nN-long DFT computed from DFTs with lengths that are\nfactors of N (allows the inner sum to be a DFT)\nProvided that subsets Il guarantee periodic xi\nWhen N factors into co-prime factors N=N1*N2\nStarting from any xi form subset with compatible periodicity (the\nperiodicity of the subset divides the periodicity of the set)\n{x +\nn | n2 = 1,..., N2 -1} or\n\nx\n\ni N n | n1 = 1,..., N1 -1}\n{\ni N1 2\n+ 2 1\nBoth subsets have only one common point xi\nAllows a rearrangement of the input (periodic) vector into a\nmatrix with a periodicity in both dimensions (rows and\ncolumns), both periodicities being comatible with the initial one\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nGood's mapping\n\nmapping\nTurns original transform into a set of small DFTs with\ncoprime lengths\n{xi N\n+\nn | n2 = 1\n\n1 2\n,..., N -1} or {xi+ N\n\n1 | n = 1,...,\n2n\nN1 -1}\nequivalent to\nThis mapping is one-to-one if N1 and N2 are coprime\nAll congruences modulo N1 obtained\nFor a given congruence modulo N2 and vice versa\nFFTs without twiddle factors all based on the same\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nP\ni\nc\nt\no\nr\ni\na\nl\n\ni\nl\nl\nu\ns\nt\nr\na\nt\ni\non\no\nf\nnu\nmb\ner\ns\nth\nro\nugh 14 representing the original transform being mapped into a set of small DFTs with coprime lengths, also known as Good's mapping.\nFigure by MIT OpenCourseW. are.\n\nJust another arrangement of CRT\n\nIf we know the residue of some number k modulo\ntwo coprime numbers N1 and N2\nk\nN\nk\nN2\nIt is possible to reconstruct\nk N N\n\nN\nk N = k1\nk\nN = 2\nThen\nk\nN\n\nk\n\n=\nt k +\nN N\n1 1\n\nN2 2 1\nt1\nN\n= 1 and t N\nN\n=\nN\nt1 multiplicative inverse of N1 mod N2\nt2 multiplicative inverse of N2 mod N1\nt1, t2 always exist since N1, N2 coprime (N1,N2)=1\nWhat are t1, t2 for N1=3, N2=5?\nReversing N1 and N2\nResults in transposed mapping\n6.973\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nChinese Remainder Theorem (CRT)\nLet\n\nt k\nP\ni\nc\nt\no\nr\ni\na\nl\n\ni ll us tr at io\nn\n\no\nf\n\nt\nh\ne\n\nm\nap\npi\nng\nf\nor\nthe Chinese Re\nm\na\ni\nn\nd\ne\nr\n\nT\nh\neo\nre\nm\nor\nC\nRT.\n\nFigure by MIT OpenCourseW. are.\n\nImpact on DFT\nFormulating the true multi-dimensional transform\nk\n= N t k + N t k\n\nN N\n1 1\n2 2 1\n\nN\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nA pictorial illustration of the in\nput-o\nut\nput system for a mutidimensional transform.\nN - 1\nFigure by MIT OCW.\nTrue bidimensional transform!\n(no extra twiddle factors)\nFigure by MIT OpenCourseWare.\n\nUsing convolution to compute DFTs\nAll sub DFTs are prime length\nRader showed that prime-length DFTs can be\ncomputed as a result of cyclic convolution\nE.g. length 5 DFT\nPermute last two rows and columns\nCyclic correlation\n(a convolution with a reversed sequence)\nThis is a general result\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nExample\nResults in smallest number of multiplies\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nPrime Factor Algorithm\nEfficient small DFTs are a key to the\nfeasibility of this algorithm\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nA pictorial\ni\nllu\nst\nra\nti\non\nof\nt\nhe\nin\npu\nt-\nou\ntp\nut\nsys\nt\nem\nf\nor a mutidimen\nsional transform.\nFigure by MIT OpenCourseWare.\n\nWinograd's Fourier Transform Algorithm\nB1xB2' only involves additions\nD - diagonal (so point multiply)\nWinograd transform has many more additions than\ntwiddle FFTs\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nA p\nic\nto\nri\nal\nd\nep\nic\ntio\nn\nof\nWi\nno\ngra\nd's Fourier Tra\nnsform Algorith\nm that resembles several trapezo\nids connect\ned by lines, w\nhich\nindic\nate t\nhe inputs and outputs flowing through the system.\nFigure by MIT OpenCourseWare."
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_9.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/49aa5e11da2190ceb1dcadbf5abf7393_lecture_9.pdf",
      "content": "6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nVladimir Stojanovic\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFast Fourier Transform:\nPractical aspects and Basic Architectures\nLecture 9\n\nMultiplication complexity per output point\nCTFFT and SRFFT\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nPlot of multipl\ne l\nine\narl\ny u\npwa\nrd\nris\ning\ngr\naph\ns fo\nr\n\nv\na\nr\ni\no\nus\nFFT radix\nme\nasurements\n.\n\nMultiplies and adds\nReal multiplies\nReal adds\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nT\nwo tabl\nes the\npresent\nthe re\nal mu\nltipl\nes\nand\nadds fo\nr powers\no\nf\nand\nth\neir\napp\nropr\nia\nte\nF\nFTs\n.\n\nStructural considerations\nHow to compare different FFT algorithms?\nMany metrics to choose from\nThe ease of obtaining the inverse FFT\nIn-place computation\nRegularity\nComputation\nInterconnect\nParallelism and pipelining\nQuantization noise\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nInverse FFT\nFFTs often used for computing FIR filtering\nFast convolution (FFT + pointwise multiply + IFFT)\nIn some applications (like 802.11a)\nCan reuse FFT block to do the IFFT (half-duplex scheme)\nSimple trick [Duhamel88]\nSwap the real and imaginary inputs and outputs\nIf FFT(xR,xI,N) computes the FFT of sequence xR(k)+jxI(k)\nThen FFT(xI,xR,N) computes the IFFT of jxR(k)+xI(k)\nExchange the real and imag part\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nIn-place computation\nMost algorithms allow in-place computation\nCooley-Tukey, SRFFT, PFA\nNo auxilary storage of size dependent on N is needed\nWFTA (Winograd Fourier Transform Algorithm) does\nnot allow in-place computation\nA drawback for large sequences\nCooley-Tukey and SRFFT are most compatible\nwith longer size FFTs\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nRegularity, parallelism\n\nRegularity\n\nCooley-Tukey FFT very regular\nRepeat butterflies of same type\nSums and twiddle multiplies\n\nSRFFT slightly more involved\nDifferent butterfly types in parallel\ne.g. radix-2 and radix-4 used in parallel on even/odd samples\n\nPFA even more involved\nRepetitive use of more complicated modules (like cyclic convolution, for prime\nlength DFTs)\n\nWFTA most involved\nRepetition of parts of the cyclic conv. modules from PFA\n\nParallelization\n\nFairly easy for C-TFFT and SRFFT\nSmall modules applied on sets of data that are separable and contiguous\n\nMore difficult for PFA\nData required for each module not in contiguous locations\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nQuantization noise\n\nRoundoff noise generated by finite precision of operations inside FFT (adds,\nmultiplies)\n\nCTFFT (lengths 2n)\n\nFour error sources per butterfly (variance 2-2B/12)\n\nTotal variance per butterfly 2-2B/3\n\nEach output node receives signals from a total of N-1 butterflies in the flow graph\n(N/2 from the first stage, N/4 in the second, ...)\n\nTotal variance for each output ~ N/3*2-2B\n\nAssuming input power 1/3N2 (|x(n)|<1/N to avoid overflow)\n\nOutput power is 1/3N\n\nError-to-signal ratio is then N22-2B (needs 1 additional bit per stage to maintain SER)\n\nSince a maximum magnitude increases by less than 2x from stage to stage we\ncan prevent the overflow by requiring that |x(n)|<1 and scaling by 1⁄2 from stage-to-\nstage\n\nThe output will be 1/N of the previous case, but the input magnitude can be Nx larger,\nimproving the SER\n\nError-to-signal ratio is then 4N*2-2B (needs 1/2 additional bit per stage to maintain SER)\n\nRadix-4 and SRFFT generate less roundoff noise than radix-2\n\nWFTA\n\nFewer multiplications (hence fewer noise sources)\n\nMore difficult to include proper rescaling in the algorithm\n\nError-to-signal ratio is higher than in CTFFT or SRFFT\n\nTwo more bits are necessary to represent data in WFTA for same error order as\nCTFFT\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nParticular cases\nDFT algorithms for real data sequence xk\nXk has Hermitian symmetry (XN-k=Xk\n*)\nX0 is real, and when N even, XN/2 real as well\nN input values map to\n2 real and N/2-1 complex conjugate values when N even\n1 real and (N-1)/2 complex conjugate values when N odd\nCan exploit the redundancy\nReduce complexity and storage by a factor of 2\nIf take the real DFT of xR and xI separately\n2N additions are sufficient to obtain complex DFT\nGoal to obtain real DFT with half multiplies and half adds\nExample DIF SRFFT\nX2k requires half-length DFT on real data\nThen b/c of Hermitian symmetry X4k+1=X*\n4(N/4-k-1)+3\nOnly need to compute one DFT of size N/4 (not two)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nDFT pruning\nIn practice, may only need to compute a few tones\nOr only a few inputs are different from zero\nTypical cases: spectral analysis, interpolation, fast conv\nComputing a full FFT can be wasteful\nGoertzel algorithm\nCan be obtained by simply pruning the FFT flow graph\nAlternately, looks just like a recursive 1-tap filter for each\ntone\nx(n)\nWN-k\nX(k)\nz-1\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nRelated transforms\nMostly focused on efficient matrix-vector product\ninvolving Fourier matrix\nNo assumption made on the input/output vector\nSome assumptions on these leads to related transforms\nDiscrete Hartley Transform (DHT)\nDiscrete Cosine (and Sine) Transform (DCT, DST)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nRelated transforms: DHT\nProposed as an alternative to DFT\nInitial (false) claims of improved arithmetic complexity\nReal-valued FFT complexity is equivalent\nSelf-inverse\nProvided that X0 further weighted by 1/sqrt(2)\nInverse real DFT on Hermitian data\nSame complexity as the real DFT so no significant gain from\nself-inverse property of DHT\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nRelated transforms: DCT\nLots of applications in image and video processing\nScale factor of 1/sqrt(2) for X0 left out\nFormula above appears as a sub-problem in length-4N\nreal DFT\nMultiplicative complexity can be related to real DFT\nPractical algorithms depend on the transform length\nN odd: Permutations and sign changes map to real DFT\nN even: Map into same length real DFT + N/2 rotations\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nRelationship with FFT\nDHT, DCT, DST and related transforms can all be\nmapped to DFT\nAll transforms use split-radix algorithms\nFigure by MIT OpenCourseWare.\nFor minimum number of operations\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nA dia\ngram\nof\nhow\nthe\nD\nH\nT,\nD\nC\nT\n,\n\nD\nS\nT\n,\n\na\nn\nd\n\no\nt\nher\nr\ne\nl\na\nt\ne\nd\n\nt\nr\na\nn\ns\nf\no\nr\nms map to the\nDFT and its accom\npanying text\nwith explanations.\n\nImplementation issues\nGeneral purpose computers\nDigital signal processors\nVector/multi processors\nVLSI ASICs\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nImplementation on general purpose computers\nFFT algorithms built by repetitive use of basic\nbuilding blocks\nCTFFT and SRFFT butterflies are small - easily optimizable\nPFA/WFTA blocks are larger\nMore time is spent on load/store operations\nThan in actual arithmetic (cache miss and memory access\nlatency problem)\nLocality is of utmost importance\nThis is the reason why PFA and WFTA do not meet the\nperformance expected from their computation complexity!\nPFA drawback partially compensated since only a few\ncoefficients have to be stored\nCompilers can optimize the FFT code by loop-\nunrolling (lots of parallelism) and tailoring to cache\nsize (aspect ratio)\n\nDigital Signal Processors\nBuilt for multiply/accumulate based algorithms\nNot matched by any of the FFT algorithms\nSums of products changed to fewer but less regular\ncomputations\nToday's DSPs take into account some FFT\nrequirements\nModulo counters (a power of 2 for CTFFT and SRFFT)\nBit-reversed addressing\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nVector and multi-processors\nMust deal with two interconnected problems\nThe vector size of the data that can be processed at the maximal\nrate\nHas to be full as often as possible\nLoading of the data should be made from data available inside the\ncache memory to save time\nIn multi-processors performance dependent on\ninterconnection network\nSince FFT deterministic, resource allocation can be solved off-line\nArithmetic units specialized for butterfly operations\nArrays with attached shuffle networks\nPipelines of arithmetic units with intermediate storage and\nreordering\nMostly favor CTFFTs\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nASICs\n\nArea and throughput are important\n\nA - area, T- time between two successive DFT computations\n\nAsymptotic lower bound for AT2\n\nAchieved by several micro-architectures\nShuffle-exchange networks\nSquare grids\n\nOutperform the more traditional micro-architectures only for very large N\nCascade connection with variable delay\n\nDedicated chips often based on traditional micro-architectures efficiently\nmapped to layout\n\nCost dominated by number of multiplies but also by cost of communication\n\nCommunication cost very hard to estimate\n\nDedicated arithmetic units\n\nButterfly unit\n\nCORDIC unit\n\nStill, many heuristics and local tricks to reduce complexity and improve\ncommunication\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nArchitectures\n1, N, N2 cell type - direct transform\nCascade (pipelined) FFT\nFFT network\nPerfect-shuffle FFT\nCCC network FFT\nThe Mesh FFT\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nThe naive approach\nCompute all terms in the matrix-vector product\nN2 multiplications required\nThree degrees of parallelism\nCalculate on one multiply-add cell\nOn N multiply-add cells\nOn N2 multiply-add cells\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\n1 multiply-add cell\n\nPerformance O(N2logN)\n\nFor large FFTs storage of intermediate results is a problem\n\nN-long FFT requires\nN/r*logrN, radix-r butterfly operations\n2N*logrN read or write RAM accesses\nE.g. to do the 8K FFT in 1ms, need to access internal RAM every 9ns,\nusing radix-4\n\nTo speed up\n\nEither use higher radix (to reduce the overall number of memory accesses\nat the price of increase in arithmetic complexity)\n\nOr partition the memory to r banks accessed simultaneously (more\ncomplex addressing and higher area)\n\nNeed a very high rate clock\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n22A simple block diagram of the perfomance of one multiply-add cell.\nFigure by MIT OpenCourseWare.\nA si\nmpl\ne blo\nck dia\ngra\nm o\nf the per\nf\nomance\nof one\nmultiply-add cell.\n\nCascade FFT\nCascade of logN multiply-add cells\nNicely suited for decimation in frequency FFT\nE.g. 8pt DIF FFT\nProduces the output values in bit-reversed order\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n23Simple block illustration of the cascade flow of FFTs with the leftmost block being twice that of the center block and the rightmost block have one block.\nS\nimple block illustration of the cascade flow of FFTs with the leftmost block being twice that of the center block and the rightmost block have one block.\nFigure by MIT OpenCourseWare.\nPic\ntoria\nl i\nllust\nrat\nion o\nf o\nf the\nDI\nF rad\nix\n-2\ni\nmp\nle\nme\nnt\nat\nio\nn\nfo\nr\nva\nlu\nes\no\nf\nN\na\nnd\n\nN2.\nFigure by MIT OpenCourseWare.\n\nFFT network\n\nOne of the most obvious\nimplementations\n\nProvide a multiply-add cell for each\nexecution statement\n\nEach cell also has a register holding a\nparticular value of zj (twiddle factor)\n\nHow many such cells do we need for\nlength-N (radix-2 DIT)?\n\nOne possible layout\n\nlogN rows, N/2 cells each row\n\nPipelined performance O(logN)\n\nA new problem instance can enter the\nnetwork as soon as the previous one has\nleft the first row\n\nDelay limited by cell's multiply-add and\nlong-wire driver to the next row O(logN)\nTotal network delay is O(log2N)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nBloc\nk il\nlust\nrati\non o\nf th\ne ce\nll c\nonfi\ngurat\nion f\nor an\nFFT\nnetw\nork.\nFigure by MIT OpenCourseWare.\n\nFFT network\nInputs are in \"bit-shuffled\" order (decimated)\nOutputs are in \"bit-reversed\" order\nMinimizes the amount of interconnects\nGeneral scheme for interconnections\nNumber the cells naturally\n0 to N/2-1, from left to right\nCell i in the first row is connected to two cells inB\nl\noc\nk il\nlust\nrati\non o\nf th\ne ce\nll c\nonfi\ngura\ntion\nfor a\nn FFT\nnetw\nork.\nthe second row\nCell i and (i+N/4) mod N/2\nCell i in the second row is connected to cells\ni and floor(i/(N/4))+((i+N/8) mod N/4) in the third\nrow\nCell i in the k-th row (k=1,...logN-1) is connecte\nto (k+1)-th row\nCell i and cell floor(i/(N/2k))+((i+N/2k+1) mod N/2k)\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nFigure by MIT OpenCourseWare.\n\nThe perfect-shuffle network\nN/2 element network perfectly suited for FFT, radix-2 DIT\nEach multiply-add cell associated with xk and xk+1 (k- even\nnumber between 0 and N-1)\nA connection from cell with xk to cell with xj when j=2k mod\nN-1 (this mapping is one-to-one)\nRepresents \"circular left shift\" of the logN-bit binary representation\nof k\nFirst the xk values are loaded into cells\nIn each iteration, output values are shuffled among cells\nAt the end of logN steps, final data is in cell registers in bit-\nreversed order\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nA pic\ntoria\nl ill\nustration of the perfect shuffle network, that is blocks that have multiply-add cells connected by arrows in a feedback fashion.\nFigure by MIT OpenCourseWare.\n\nCube-Connected-Cycles (CCC) network\nN cells capable of performing N-element FFT in\nO(logN) steps\nClosely related to the FFT network\nJust has circular connections between first and last\nrows (and uses N instead of N/2logN cells)\nDoes not exist for all N (only for N=(K/2)*logK for integer K\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n27A pictorial illustration of interconnected blocks that represent a CCC network.\nFigure by MIT OpenCourseWare.\n\nThe Mesh implementation\nApproximately sqrt(N) rows and columns\nN-long FFT in logN steps\nView as time-multiplexed version of the FFT\nnetwork\nIn each step, N/2 nodes take the role of N/2 cells\nin FFT network\nOther half routes the data other nodes\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System DesignA pictorial representation of the mesh implementation which includes approximately squareroot of N rows and columns.\nFigure by MIT OpenCourseWare.\n\nPerformance summary\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nA table of v\nalues su\nmmariz\ning e\nach design\nand its p\nerformance\ncharac\nteristi\ncs.\nFigure by MIT OpenCourseWare.\nCascade FFT has the best trade-off\nLess complicated wiring and NlogN delay\nFFT network is as fast as N2 cell FFT but much less\narea (only N/2logN cells)\nPerfect-Shuffle and CCC use less cells than FFT\nnetwork, but take a bit more time\n\nReadings\n[1] C.D. Thompson \"Fourier Transforms in\nVLSI,\" no. UCB/CSD-82-105, 1982.\nSame, but hard to find publication\n[2] C.D. Thompson \"Fourier Transforms in VLSI,\"\nIEEE Trans. Computers vol. 32, no. 11, pp. 1047-\n1057, 1983.\n[3] P. Duhamel and M. Vetterli \"Fast fourier\ntransforms: a tutorial review and a state of the\nart,\" Signal Process. vol. 19, no. 4, pp. 259-\n299, 1990.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design"
    },
    {
      "category": "Lecture Notes",
      "title": "lecture_10.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/1460f43d3993b7c956d4bb8ee03d1fb0_lecture_10.pdf",
      "content": "Fast Fourier Transform:\nVLSI Architectures\nLecture 10\n6.973 Communication System Design - Spring 2006\nMassachusetts Institute of Technology\nVladimir Stojanovic\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nPipelined FFT architectures\nExamples\nRadix-2\nmulti-path delay commutator\nsingle-path delay feedback\nRadix-4\nsingle-path delay feedback\nmulti-path delay commutator\nsingle-path delay commutator\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFigure by MIT OpenCourseWare.\nFive different di\nagrams representi\nng various example\ns of pipelined FFT\narchitectures.\n\nRadix-2 Multi-path Delay Commutator\nThe most classical approach for pipeline\nimplementation of radix-2 FFT\nInput sequence broken into two parallel data\nstreams flowing forward with correct \"distance\"\nbetween data elements entering the butterfly\nscheduled by proper delays\nBoth butterflies and multipliers are in 50%\nutilization\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nLi\nne\nar\nb\nloc\nk d\niag\nram\n\no\nf\na\nra\ndi\nx-2\nFF\nT pipeline implementation.\n\nRadix-2 Single-path Delay Feedback\nUses registers more efficiently\nBoth as input and the output of the butterfly\nA single data stream goes through the\nmultiplier at every stage\nMultiplier utilization is also 50%\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nIll\nu\nstr\na\ntio\nn\nof\n\na single path radix-2 delay feedback.\nFigure by MIT OpenCourseWare.\n[Wold & Despain '84]\n\nRadix-4 Single-path Delay Feedback\n[Despain74]\nUtilization of multipliers 75%\nBy storing 3 BF4 outputs\nRadix-4 butterfly utilization only 25%\nButterfly fairly complicated\nAt least 8 complex adders\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nBlo\nck\ndia\ngram for radix-4 delay system that includes feedback component.\nP\ni\nctorial i\nl\nl\nustration\n\no\nf an inpu\nt-\no\nutput net\nwork\nof\nm\nu\nltipliers\ni\nn\na criss-c\nro\ns\ns\nf\nas\nhi\non\n.\n\nDFT\n\nInp\nu\nt-O\nu\ntpu\nt\nMo\nd\nel\n.A pictorial illustration of the butterfly radix-4 implementation that contains several adders, multipliers, and subtractors connected together.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nRadix-4 Multi-path Delay Commutator\n[Swartzlander84]\nWhat is the utilization of\nButterflies?\nMultipliers?\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nA p\nic\nt\no\nria\nl i\nl\nl\nu\nst\nr\na\nt\nion of block inputs and multipliers connected together to create a multi-path delay commutator.\nDFT\n\ninp\nu\nt-o\nu\ntpu\nt\n.\nP\ni\nctorial i\nl\nl\nustration\n\no\nf an inpu\nt-\no\nutput net\nwork\nof\nm\nu\nltipliers\ni\nn\na criss-c\nro\ns\ns\nf\nas\nhi\non\n.\n\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nRadix-4 Single-path Delay Commutator\n[Bi & Jones '89]\nModified radix-4 algorithm\nProgrammable 1⁄4 radix-4 BF\n75% utilization\nUsed to build one of the largest single-chip\nFFTs (8192pts) [Bidet'95]\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Simple block illustration of an input-output model with 2-stages clearly delineating the commutator and butterfly element.\nDFT\n\ninp\nu\nt-o\nu\ntpu\nt\n.\nP\ni\nctorial i\nl\nl\nustration\n\no\nf an inpu\nt-\no\nutput net\nwork\nof\nm\nu\nltipliers\ni\nn\na criss-c\nro\ns\ns\nf\nas\nhi\non\n.\n\nSimple blo\nck illust\nration\nof an inpu\nt-output\nmodel w\nith 2-stage\ns cl ea\nrl y de\nlinea\nting th\ne commutator and butterfly element.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nR4SDC commutator and butterfly details\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nOne v\ner\nsi\non\no\nf\na\nco mm\nut\nat\no\nr\n\nb\nl\no\nc\nk\n\nd\ni\na\ng\nr\na\nm\n.\n\nC\no\nm\nm\nu\nt\na\nt\no\nr\n\ni\nl\nl\nu\ns\nt\nr\na\nt\ni\no\nn\n\ns\nhowi\nng t\nh\ne i\nnput,\n2-\nto-1 m\nultip\nlexer\n, and\noutp\nut sta\nge s.\nD\ne\nt\na\ni\nl\ne\nd\n\nb\nu\nt\nt\ne\nr\nf\nl\ny\n\ni\nl\nl\nu\ns\nt\nr\nat\nio\nn\nwi\nth\nt\nw\no\n\nst\na\ng\ne\ns.\n\nIl\nlustra\nti\non\nof a c\nommutat\no\nr multi\nplexer that includes adders and\nsubtra\nctors.\n\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nSome conclusions\nDelay feedback approaches are always more\nefficient than corresponding delay-commutator\napproaches\nIn terms of memory utilization\nSince butterfly outputs share same storage with its inputs\nPipeline architectures require FFT algorithms to\nbe formulated in a \"hardware-oriented\" form\nWhere spatial regularity is preserved in a signal-flow\ngraph (SFG)\nSo that arithmetic operations can be tightly\nscheduled for efficient hardware utilization\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nDecomposition - a review\nTwiddle factor is Nth primitive root of unity\nWith exponent evaluated modulo N\nMost fast algorithms share same general\nstrategy\nMap one-dimensional transform int a two or multi-\ndimensional representation\nExploit congruence property of coefficients to simplify\ncomputation\nUnlike traditional step-by-step decomposition\nof twiddle factors\nCascading the twiddle factor decomposition leads\nto new forms of FFT with high-spatial regularity\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\n\nRadix 22 approach\nStart by classical divide-and-conquer radix-2 DIF\nindexing\nBut, consider the first two steps of decomposition together\nCompute directly in standard radix-2 approach\nNew idea is to proceed to shorter DFTs cascading\nthe twiddle factor WN\n(N/4n2+n3)k1\n[Shouseng and Torkelson 1996]\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\nA 16pt example\nGet radix-4-like mulitplier complexity with\nradix-2 butterfly structures (radix-22)\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Illustration of a radix-2 butterfly structure with multiplier complexity with 16 inputs and outputs.\nIllu\nstra\ntion\nof\na ra\ndix-\n2 bu\ntter\nfly\nstru\ncture\nwith\nmult\niplie\nr com\nplexi\nty w\nith\n16 i\nnput\ns an\nd ou\ntput\ns.\nFigure by MIT OpenCourseWare.\n\nA 64pt radix-22 example\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nImage removed due to copyright restrictions.\n\nRadix-22 (R22SDF) architecture\nN=256\nSimilar to R2SDF\nReduced number of multipliers\nNeed two types of butterflies\nOne identical to that in R2SDF\nThe other contains the logic for trivial twiddle factor multiplication (with j)\nSynchronization control very simple due to spatial regularity\nJust a log2N binary counter\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Illustration of radix 2-squared architecture for 256 bits and includes BF2I, BF2II, and clock for 8 stages.\nMagnified view of BF2I.\nMagnified view of BF2II.\nIllu\ns\ntrat\nion\nof r\nadix\n2-squ\na\nre\nd\nar\nchi\ntect\nure f\nor 2\n56 bi\nts a\nnd in\nclud\nes BF\nI\n,\n\nB\nF\nI\nI\n,\n\na\nn\nd\n\nc\nl\no\nc\nk\n\nf\no\nr\n\n8 stages.\nM\na\ng\nn\ni\nf\ni\ne\nd\n\nv\ni\ne\nw of\nBF2I.\n\nM\na\ng\nn\ni\nf\ni\ne\nd\n\nv\ni\ne\nw\nof B\nF2II.\n\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nRadix-22 architecture - Sync control\n\nlog2N-bit binary counter\n\nSynchronization controller\n\nAddress counter for twiddle factor reading in each stage\n\nOn first N/2 cycles, 2-to-1 mux in BF1 switch to 0\n\nButterfly is idle (input data directed to shift registers)\n\nOn next N/2 cycles, muxes in BF1 switch to 1\n\nButterfly computes a 2pt DFT with incoming data and data stored in the shift registers\n\nOutput Z1(n) sent to twiddle multiplier\n\nOutput Z1(n+N/2) sent back to the shift register to be \"multiplied\" in next N/2 cycles,\nwhen the first half of the next frame is loaded in\n\nOperation of BF2 is similar, except the \"distance\" of butterfly input sequence is\njust N/4 and the trivial multiply logic\n\nUtilization of the multiplier is 75%\n\nNext frame can be computed w/o pausing due to the pipelined processing in\neach stage\n6.973 Communication System Design\n\nPipeline register can be inserted between each multiplier and BF stage to\nimprove the performance\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nIllu\ns\ntrat\nion\nof r\nadix\n2-squ\na\nre\nd\nar\nchi\ntect\nure f\nor 2\n56 bi\nts a\nnd in\nclud\nes BF\nI\n,\n\nB\nF\nI\nI\n,\n\na\nn\nd\n\nc\nl\no\nc\nk\n\nf\no\nr\n\n8 stages.\nFigure by MIT OpenCourseWare.\n\nArithmetic complexity\nR22SDF has reached minimum requirement\nfor both multiplier and storage\nOnly R4SDC better in terms of adder usage\nR22SDF well suited for VLSI implementations\nof pipeline FFT processors\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nA tab\nle th\nat sh\nows t\nhe ar\nithmet\nic complexit\ny of va\nrious radix\narchit\nectures.\nFigure by MIT OpenCourseWare.\n\nMemory issues\nThe area/power consumption in the pipeline architectures\ndominated by the\nFIFO register files at each stage\nComplex multipliers at each (or every other stage)\nTo diminish the unnecessary data moving in the FIFO need\nto reconstruct the storage\nA known approach is to use FIFO with 2-port RAM\nWith read and write addresses displaced by a constant\n2-port RAM cells 33% more area of the 1-port RAM cell\nUse two N/2 1-port RAMs\nRead and write interleaved\nEach active every other cycle\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].Illustration of a 2-port RAM.\nIllu\nstration of a\n2-port\nRAM.\nN/2-\n1 port\nRA\nM\n.\n\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\n\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nCris\ns-cr\noss\nbutt\nerfl\ny ne\ntwor\nk fo\nr ei\nght\ninpu\nts.\n\nIllustr\nation of\nbutt\nerf\nly network with\nfeedback loops a\nnd\nsix process blocks.\nFigure by MIT OpenCourseWare.\nFigure by MIT OpenCourseWare.\nSingle stage hardware example\n\nFold stages onto each other\n\nNeed constant geometry signal flow graph\n\nBig price in area for parallelism (within each stage)\n[Sadat2001]\n\nRadix-8 Pipelined/Parallel implementation\nA 64pt FFT example for 802.11a\n[Excerpted from Maharatna et al 2004]\nTwo dimensional structure of 8pt FFTs\nThe number of nontrivial complex multiplications is 49 (7x7)\nSince the first twiddle is always 1\nThe number of nontrivial complex multiplications for radix-2\nFFT is 66\nRadix-4 (or 22) FFTs need only 52 multiplies\nImportant to note that for 8pt FFT (DIT) no need for\nmultiplies\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n\n8pt DIT FFT\nThe only nontrivial multiply is with 1/sqrt(2)\nEasily realize using hardwired shift-and-add\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFigure from Maharatna, K., E. Grass, and U. Jagdhold. \"A 64-point Fourier Transform Chip for High-speed Wireless\nLAN Application Using OFDM.\" Solid-State Circuits 39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.\n\nBlock diagram of the FFT unit\nTwo-stages are pipelined\nFully parallel in each stage (radix-2 8pt FFT, single clk cycle)\nTwo performance bottlenecks\nLarge number of global wires resulting from the multiplexing of\ncomplex data to the 8-point FFTs\nConstruction of the multiplier unit to attain the required speed with\nminimal silicon are is not trivial\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFigure from Maharatna, K., E. Grass, and U. Jagdhold. \"A 64-point Fourier Transform Chip for High-speed Wireless\nLAN Application Using OFDM.\" Solid-State Circuits 39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.\n\nInput unit\nHard wired outputs and data shifting\nTo the 8pt FFT\nReduce de-muxing\nReduce global wires\nCannot shift every clk\nMultiplier cannot finish\nExtend latency\nTemporary registers 1,2,3\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design\nFigure from Maharatna, K., E. Grass, and U. Jagdhold. \"A 64-point Fourier Transform Chip for High-speed Wireless\nLAN Application Using OFDM.\" Solid-State Circuits 39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.\n\nMultiplier unit\n49 multiplies\nOnly nine sets unique (cos,sin)\nhard-wired constant\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nSignificantly less storage space\nfor coefficients\nTurn multiplies into shift&add\nFigure from Maharatna, K., E. Grass, and U. Jagdhold. \"A 64-point Fourier Transform Chip for High-speed Wireless\nLAN Application Using OFDM.\" Solid-State Circuits 39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.\n\nMultiplier unit and scheduling\nSome of the coefficients requested concurrently by different FFT\noutputs\nSolve by adding temp registers in the input unit\n~50% less power and area than 8 standard complex multipliers\nBuffer unit similar to input unit, just w/o temporary registers\nOutputs also hardwired with distance of 8\n6.973 Communication System Design\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nFigures from Maharatna, K., E. Grass, and U. Jagdhold. \"A 64-point Fourier Transform Chip for High-speed Wireless\nLAN Application Using OFDM.\" Solid-State Circuits 39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.\n\nOutput unit\nA mirror of input unit\nJust w/o temporary reg\nControl/sync is simple\n5-bit counter\nStarts counting when in\nLocal counters control\nInput\nIntermediate\nOutput units\n6.973 C\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\nrs\null\niste\n\nput f\nommunication System Design\nFigure from Maharatna, K., E. Grass, and U. Jagdhold. \"A 64-point Fourier Transform Chip for High-speed Wireless\nLAN Application Using OFDM.\" Solid-State Circuits 39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.\n\nReadings\n\n[1] H.e. Shousheng and M. Torkelson \"A new approach to pipeline FFT processor,\" Parallel\nProcessing Symposium, 1996., Proceedings of IPPS '96, The 10th International no. SN -,\npp. 766-770, 1996.\n\n[3] H.e. Shousheng and M. Torkelson \"Designing pipeline FFT processor for OFDM (de)modulation,\"\nSignals, Systems, and Electronics, 1998. ISSSE 98. 1998 URSI International Symposium on no. SN\n-, pp. 257-262, 1998.\n\n[2] E. Wold and Alvin M. Despain \"Pipeline and Parallel-Pipeline FFT Processors for VLSI\nImplementations,\" IEEE Trans. Computers vol. 33, no. 5, pp. 414-426, 1984.\n\n[3] G. Bi and E.V. Jones \"A pipelined FFT processor for word-sequential data,\" Acoustics,\nSpeech, and Signal Processing [see also IEEE Transactions on Signal Processing], IEEE\nTransactions on vol. 37, no. 12 SN - 0096-3518, pp. 1982-1985, 1989.\n\n[4] K. Maharatna, E. Grass and U. Jagdhold \"A 64-point Fourier transform chip for high-\nspeed wireless LAN application using OFDM,\" Solid-State Circuits, IEEE Journal of vol. 39,\nno. 3 SN - 0018-9200, pp. 484-493, 2004.\n\nInteresting DIT&F algorithm\n\n[4] C. Chiu, W. Hui, T.J. Ding and J.V. McCanny \"A 64-point Fourier transform chip for video motion\ncompensation using phase correlation,\" Solid-State Circuits, IEEE Journal of vol. 31, no. 11 SN -\n0018-9200, pp. 1751-1761, 1996.\n\nPower-performance estimation\n\n[2] S. Hong, S. Kim, M.C. Papaefthymiou and W.E. Stark \"Power-complexity analysis of pipelined\nVLSI FFT architectures for low energy wireless communication applications,\" Circuits and Systems,\n1999. 42nd Midwest Symposium on vol. 1, no. SN -, pp. 313-316 vol. 1, 1999.\n\n[3] K. Pagiamtzis and P.G. Gulak \"Empirical performance prediction for IFFT/FFT cores for OFDM\nsystems-on-a-chip,\" Circuits and Systems, 2002. MWSCAS-2002. The 2002 45th Midwest\nSymposium on vol. 1, no. SN -, pp. I-583-6 vol.1, 2002.\nCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.\nMIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.\nDownloaded on [DD Month YYYY].\n6.973 Communication System Design"
    }
  ]
}