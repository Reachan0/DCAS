{
  "course_name": "Optimization Methods in Management Science",
  "course_description": "This course introduces students to the theory, algorithms, and applications of optimization. The optimization methodologies include linear programming, network optimization, integer programming, and decision trees. Applications to logistics, manufacturing, transportation, marketing, project management, and finance. Includes a team project in which students select and solve a problem in practice.",
  "topics": [
    "Business",
    "Operations Management",
    "Project Management",
    "Engineering",
    "Systems Engineering",
    "Systems Optimization",
    "Mathematics",
    "Applied Mathematics",
    "Probability and Statistics",
    "Social Science",
    "Game Theory",
    "Business",
    "Operations Management",
    "Project Management",
    "Engineering",
    "Systems Engineering",
    "Systems Optimization",
    "Mathematics",
    "Applied Mathematics",
    "Probability and Statistics",
    "Social Science",
    "Game Theory"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nRecitations: 1 session / week, 1.5 hours / session\n\nPrerequisites\n\nThis subject has no formal prerequisites.\n\nCourse Structure\n\n15.053 is structured as two longer modules followed by three short modules.\n\nLinear Programming Theory and Applications (7 Lectures)\n\nInteger Programming Theory (5 Lectures)\n\nNetwork Flows and Heuristics (3 Lectures)\n\nDecision Trees (2 Lectures)\n\nBehavioral Economics (2 lectures)\n\nSee the\ncalendar\nbelow for more details.\n\nTextbook and Software\n\nThere is no required textbook for the subject. Students can refer to the following book, out of print but\navailable free online\n, for some of the material.\n\nBradley, S. P., A. C. Hax, and T. L. Magnanti.\nApplied Mathematical Programming\n. Addison-Wesley, 1977. ISBN: 9780201004649.\n\nMicrosoft\n(r)\nExcel will be used frequently within 15.053. Students will be using the \"Solver\" Add-in that is available when Microsoft\n(r)\nOffice or Excel is installed.\n\nThe class will use\nPiazza\nfor online discussions and announcements.\n\nGrading\n\nCOURSE WORKS\n\nPERCENTAGES\n\nProblem sets\n\nWritten (not spreadsheet-based)\n\n10%\n\nSpreadsheets\n\n10%\n\nIn-class quizzes\n\nQuiz 1 (practice)\n\n0%\n\nQuizzes 2 to 5\n\n10% (2.5% each)\n\nQuizzes 6 and 7\n\n10% (5% each)\n\nMidterm 1\n\n20%\n\nMidterm 2\n\n20%\n\nTeam Project\n\n15%\n\nClass Participation\n\n5%\n\nProblem Sets\n\nThere are six problem sets. Problem sets are an important part of the learning experience, which is why they are required.\n\nProblem sets are to be handed in individually; however, students may discuss the problems with others in the class. Copying from other students is not permitted.\n\nSpreadsheets should also be individual work. Students may obtain help from other students. But students may not copy and paste parts of spreadsheets from other students.\n\nQuizzes\n\nThere are seven quizzes. Quizzes are given at the beginning of class periods as noted on the calendar, and will be 20 to 30 minutes long. Quizzes will be based on the same material as the problem set due on the day of the quiz.\n\nThe first quiz is for practice, but it may count as part of the quiz grade if its inclusion leads to an increase in the average quiz score.\n\nThe lowest score in quizzes 2 to 5 will be dropped. The scores of the remaining quizzes will be scaled so that the grade is out of 10 points.\n\nThe topics of Quizzes 2 to 5 appear again on the two midterms.\n\nQuizzes 6 and 7 are both required. They cover the topics that are presented after the second midterm.\n\nQuizzes 6 and 7 are worth 5 points each. They are worth more than other quizzes because the material is not tested again.\n\nExams\n\nThere are two midterms. The first is on linear programming; the second is on integer programming. The second midterm is not \"comprehensive,\" but integer programming concepts do build on linear programming.\n\nThere is no final exam.\n\nTeam Project\n\n15.053 aims to teach students methods for identifying and solving optimization problems. In order to bring these concepts to life, students will be preparing group projects to identify and model a real world optimization problem. The student teams will select an actual situation and use the concepts from class to define the problem, build an optimization model, and solve it.\n\nFinal project deliverables include a 4 to 6 page team paper, a 1 page written assessment of individual learnings, and a team presentation.\n\nClass Participation\n\nStudents will be provided clickers at the second lecture of the semester, which the student can keep for the entire semester. Students should bring their clickers to each class.\n\nClass participation points will be based on the use of clickers throughout the semester.\n\nStudents may not bring another student's clicker to class.\n\nNo Laptops or Smart Phone Usage in Class\n\nLaptops should not be used in class, except by students who have been granted an exception to use them for notetaking only. Any other use is not permitted.\n\nRecitations and Review Sessions\n\nRecitation attendance is optional. Recitations will cover problems that are similar to the ones on the current problem set.\n\nIn addition, there will be a review session the night before each of the two midterms.\n\nCalendar\n\nKey:\n\nL = Lecture session\n\nR = Recitation session\n\nSES #\n\nTOPICS\n\nKEY DATES\n\nL1\n\nIntroduction\n\nL2\n\nFormulations of linear and non-linear programs\n\nR1\n\nRecitation 1\n\nL3\n\nGeometry and visualizations of linear programs\n\nQuiz 1: Formulations\n\nProblem set 1 due\n\nL4\n\nThe simplex method 1\n\nR2\n\nRecitation 2\n\nL5\n\nThe simplex method 2\n\nQuiz 2: Formulations and LP geometry\n\nProblem set 2 due\n\nR3\n\nRecitation 3\n\nL6\n\nSensitivity analysis and shadow prices\n\nL7\n\nGame theory 1: 2-person 0-sum, or constant sum\n\nQuiz 3: The simplex method\n\nProblem set 3 due\n\nR4\n\nRecitation 4\n\nL8\n\nGame theory 2\n\nL9\n\nDiscussion of projects; slack variables vs. artificial variables\n\nQuiz 4: Sensitivity analysis\n\nProblem set 4 due\n\nR5\n\nRecitation 5\n\nMidterm exam 1\n\nL10\n\nIntroduction to integer programming\n\nProject: list of team members due one day prior\n\nL11\n\nInteger programming formulations\n\nProject: topic and short description due 2 days later\n\nR6\n\nRecitation 6\n\nL12\n\nInteger programming techniques 1: branch and bound\n\nL13\n\nInteger programming techniques 2: cutting planes\n\nQuiz 5: Integer programming formulations\n\nProblem set 5 due\n\nProject: draft proposal due\n\nR7\n\nRecitation 7\n\nL14\n\nInteger programming formulations, again\n\nL15\n\nNetworks 1: Shortest path problem\n\nProblem set 6 due\n\nR8\n\nRecitation 8\n\nMidterm exam 2\n\nProject: final proposal due\n\nL16\n\nNetworks 2: Network flows\n\nL17\n\nNetworks 3: Traveling salesman problem\n\nProject: class vote on in-class presentations\n\nR9\n\nRecitation 9\n\nL18\n\nDecision trees 1\n\nQuiz 6: Networks\n\nL19\n\nDecision trees 2: the value of information\n\nR10\n\nRecitation 10\n\nL20\n\nBehavioral economics 1\n\nQuiz 7: Decision trees\n\nProject: final team paper and individual learning due\n\nL21\n\nBehavioral economics 2\n\nL22\n\nProject reports\n\nL23\n\nProject reports\n\nFinal feedback",
  "files": [
    {
      "category": "Assignment",
      "title": "Problem Set 1 – Group 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/d1d43e11227c5ed731ab491d98f00108_MIT15_053S13_ps1-1.pdf",
      "content": "Optimization Methods in Management Science\nMIT 15.053, Spring 2013\nProblem Set 1\nSecond Group of Students (with first letter of surnames A-H)\nDue: February 12 , 2013\nProblem Set Rules:\n1. Each student should hand in an individual problem set.\n2. Discussing problem sets with other students is permitted. Copying from another person\nor solution set is not permitted.\n3. Late assignments will not be accepted. No exceptions.\n4. The non-Excel solution should be handed in at the beginning of class on the day the\nproblem set is due. The Excel solutions, if required, should be posted on the website by\nthe beginning of class on the day the problem set is due. Questions that require an Excel\nsubmission are marked with Excel submission . For Excel submission questions, only\nthe Excel spreadsheet will be graded.\nProblem 1\n(35 points total) The first problem asks you to formulate a 3-variable linear program in three\ndifferent ways (four ways if you also count the algebraic formulation). Both of the first two ways\nare fairly natural. The third way is a bit obscure. And the algebraic formulation may seem\noverly complex. In practice, there are advantages to formulating linear programs in different\nways. And there are huge advantages in the algebraic formulation. (One can express huge\nproblems efficiently on a computer using a modeling language, which is based on the algebraic\nformulation.) In addition, formulating an LP in multiple ways provides insight into the LP\nmodels.\nAccessories & co. is producing three kinds of covers for Apple products: one for iPod, one\nfor iPad, and one for iPhone. The company's production facilities are such that if we devote\nthe entire production to iPod covers, we can produce 6000 of them in one day. If we devote the\nentire production to iPhone covers or iPad covers, we can produce 5000 or 3000 of them in one\nday. The production schedule is one week (5 working days), and the week's production must be\nstored before distribution. Storing 1000 iPod covers (packaging included) takes up 40 cubic feet\nof space. Storing 1000 iPhone covers (packaging included) takes up 45 cubic feet of space, and\nstoring 1000 iPad covers (packaging included) takes up 210 cubic feet of space. The total storage\nspace available is 6000 cubic feet. Due to commercial agreements with Apple, Accessories & co.\nhas to deliver at least 5000 iPod covers and 4000 iPad covers per week in order to strengthen\nthe product's diffusion. The marketing department estimates that the weekly demand for iPod\ncovers, iPhone, and iPad covers does not exceed 10000 and 15000, and 8000 units, therefore\nthe company does not want to produce more than these amounts for iPod, iPhone, and iPad\ncovers. Finally, the net profit per each iPod cover, iPhone cover, and iPad cover is $4, $6, and\n$10, respectively.\nThe aim is to determine a weekly production schedule that maximizes the total net profit.\n\n(a) (5 points) Write a Linear Programming formulation for the problem. Start by stating any\nassumptions that you make. Label each constraint (except nonnegativity). For this first\nformulation, the decision variables should represent the proportion of time spent each day\non producing each of the two items:\nx1 = proportion of time devoted each day to iPod cover production,\nx2 = proportion of time devoted each day to iPhone cover production,\nx3 = proportion of time devoted each day to iPad cover production.\n(Different formulations will be required for parts (b) and (c).)\n(b) (5 points) Write a second Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). For this second formulation, the decision variables should\nrepresent the number of items of each type produced over the week:\ny1 = number of iPod covers produced over the week,\ny2 = number of iPhone covers produced over the week,\ny3 = number of iPad covers produced over the week.\nThe problem data is the same but you must make sure that everything matches the new\ndecision variables.\n(c) (5 points) Write a third Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). Assume that each working day has 8 working hours. For\nthis third formulation, the decision variables should be:\nz1 = number of hours devoted to the production of iPod smart covers in one week ,\nz2 = number of hours devoted to the production of iPhone smart covers in one week,\nz3 = total number of production hours employed during the week.\nExpress the objective function in thousands of dollars. The problem data is the same but\nyou must make sure that everything matches the new decision variables.\n(d) (5 points) What is the relationship between the variables z1, z2, z3 of part (c) and the\nvariables x1, x2, x3 of part (a) of this problem? Give a formula to compute z1, z2, z3 from\nx1, x2, x3.\n(e) (5 points) Excel submission Solve the problem using Excel Solver, following the guidelines\ngiven in the Excel Workbook that comes with this problem set. Pay attention to the\nformulation in the Excel Workbook: it is similar to the one required for part (b), but it is\nnot exactly the same.\n(f) (10 points) Write an algebraic formulation of the weekly production schedule problem de\nscribed above using the following notation:\n- n is the number of product types,\n- xj is the number of days devoted to the production of products of type j,\n- pj is the number of items of type j that can be manufactured in one day, assuming\nthat the process is devoted to products of type j.\n\n- P is the number of production days in one week,\n- sj is the storage space required by one item of type j,\n- S is the total storage space available for the week's production,\n- rj is the unit profit for each product of type j,\n- dj is the weekly maximum demand for an item of type j.\n- bj is the weekly minimum demand for an item of type j.\nProblem 2\n(10 points total). Problem 2 reviews the transformations from nonlinear constraints or objec\ntives into linear constraints and objectives, as mentioned in the second lecture and discussed in\nthe tutorial \"LP Transformation Tricks\".\nIdentify which of the following optimization problems can be reformulated as a single Linear\nProgram, and write the corresponding equivalent LP formulation. For those problems that\ncannot be reformulated, the answer should identify all the troublesome constraint(s) and/or\nobjective.\n(a) (5 points) Problem formulation:\nmin\ns.t.:\nmax{2.3x1 + x2, 4.3x1 - 0.5x2, 2.5x1 + 3.5x2}\nConstr1 :\nx1/(x1 + x2)\n≤\n0.5\nConstr2 :\n10x1 + 28x2\n=\n3.4\nConstr3 :\nx1 + x2\nx1\nx2\n≥\nfree\nfree\n(b) (5 points) Problem formulation:\n⎫\n⎪\n\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎭\n(1)\nmin |0.8x1 + 0.9x2|\ns.t.:\n⎫\n⎪\n⎬\n⎪\n⎪\n⎭\nConstr1 : |0.9x1 + 1.2x2|\n≤ 10\nx1\n(2)\n≥ 0\nx2\nfree\nProblem 3 (First group of students)\n(55 points total) This problem is based on Problem 11 of Applied Mathematical Programming,\nChapter 1. This is a more complex model than the one in Problem 1. For many product mix\nexamples, each product uses a fixed set of materials. In this example, if one makes one gal\nlon Deluxe, one does not know a priori how much of Additive A and Additive C are used. In\nfact, the decision maker must determine the optimal amounts of A and C to be added to Deluxe.\nA corporation that produces gasoline and oil specialty additives purchases four grades of\npetroleum distillates, A, B, C, and D. The company then combines the four according to spec\nifications of the maximum or minimum percentages of grades A, C, or D in each blend, given\nin Table 1.\n\nMixture\nMax %\nallowed for\nAdditive A\nMin %\nallowed for\nAdditive C\nMax %\nallowed for\nAdditive D\nSelling\nprice\n$/gallon\nDeluxe\nStandard\nEconomy\n60%\n15%\n-\n20%\n60%\n50%\n10%\n25%\n45%\n7.9\n6.9\n5.0\nTable 1: Specifications of the three mixtures.\nSupplies of the three basic additives and their costs are given in Table 2.\nMax quantity\navailable\nCost\nDistillate\nper day (gals)\n$/gallon\nA\n0.60\nB\n0.52\nC\n0.48\nD\n0.35\nTable 2: Supplies and costs of petroleum grades.\n(a) (15 points) Formulate a Linear Program to determine the production policy that maximizes\nprofits.\n(b) (10 points) Excel submission Write a spreadsheet for the problem and solve the problem\nusing Excel Solver, following the guidelines given in the Excel Workbook that comes with\nthis problem set. (Hint: The optimal value is $102986.7 . In the optimal solution, there\nare 12500 gallons of mixture Deluxe and 1666.667 gallons of mixture Standard. No mixture\nEconomy is produced.)\n(c) Use the Excel spreadsheet to answer the following questions:\ni) (4 points) No mixture Economy is produced in the optimal solution. What would the\nminimum selling price need to be in order for Deluxe to be worth producing? (Be\naccurate to within 5 cents).\nii) (4 points) There are constraints on the maximum amount of distillate D that is used\nin producing the different mixtures. If you could violate any of these constraints on\ndistillate A, would you? Which constraint would be most advantageous to delete?\niii) (4 points) Suppose that you can increase the selling price of Deluxe. What would be the\nincrease in the profit if the selling price of mixture Deluxe per gallon increases to p for\np = $ 7.95, $8.00, and $8.05 . (Assume that the selling price of mixtures Standard and\nEconomy remain $6.9 and $5.0 per gallon, respectively.) The increase is the difference\nbetween the new profit and the profit from Part (b).\niv) (4 points) Based on your answer in Part (iv), what do you think will be the profit if the\nselling price of mixture Deluxe increases by 5%? (Verify that you are correct.) What\nis the formula for the optimum profit if the selling price of Deluxe per gallon increased\nby p? (You may assume that p is between 1% and 10%).\n\nv) (4 points) Based on your formula in part (iii), what is the contribution if the selling\nprice of Deluxe per gallon increases to 8.5. Use Excel solver to see if the formula is\ncorrect. (It wont be.) Use Excel solver to determine the maximum value of p for which\nyour formula is correct. (Be accurate to within 5 cents).\nvi) (5 points) The quantity available of distillate A is 4000 gals per day which is entirely\nused up in an optimal mixture. If you could buy (just a little bit) more, would you do\nso? At what price would be worthwhile to buy more?\n(d) (10 points) Write an algebraic formulation for the problem using the following notation:\n- m is the number of mixtures (final products),\n- n is the number of basic petroleum grades (additives),\n- pj is the selling price of mixture j,\n- ci is the cost of additive i,\n- ai is the maximum availability of additive i,\n- rij is the minimum percentage of additive i that is required in mixture j,\n- qij is the maximum percentage of additive i that can be blended in for mixture j,\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 1 – Group 2",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/e1db6a373067f38766a7233563a3b167_MIT15_053S13_ps1-2.pdf",
      "content": "Optimization Methods in Management Science\nMIT 15.053, Spring 2013\nProblem Set 1\nSecond Group of Students (with first letter of surnames I-Z)\nDue: February 12 , 2013\nProblem Set Rules:\n1. Each student should hand in an individual problem set.\n2. Discussing problem sets with other students is permitted. Copying from another person\nor solution set is not permitted.\n3. Late assignments will not be accepted. No exceptions.\n4. The non-Excel solution should be handed in at the beginning of class on the day the\nproblem set is due. The Excel solutions, if required, should be posted on the website by\nthe beginning of class on the day the problem set is due. Questions that require an Excel\nsubmission are marked with Excel submission . For Excel submission questions, only\nthe Excel spreadsheet will be graded.\nProblem 1\n(35 points total) The first problem asks you to formulate a 3-variable linear program in three\ndifferent ways (four ways if you also count the algebraic formulation). Both of the first two ways\nare fairly natural. The third way is a bit obscure. And the algebraic formulation may seem\noverly complex. In practice, there are advantages to formulating linear programs in different\nways. And there are huge advantages in the algebraic formulation. (One can express huge\nproblems efficiently on a computer using a modeling language, which is based on the algebraic\nformulation.) In addition, formulating an LP in multiple ways provides insight into the LP\nmodels.\nAccessories & co. is producing three kinds of covers for Apple products: one for iPod, one\nfor iPad, and one for iPhone. The company's production facilities are such that if we devote\nthe entire production to iPod covers, we can produce 6000 of them in one day. If we devote the\nentire production to iPhone covers or iPad covers, we can produce 5000 or 3000 of them in one\nday. The production schedule is one week (5 working days), and the week's production must be\nstored before distribution. Storing 1000 iPod covers (packaging included) takes up 40 cubic feet\nof space. Storing 1000 iPhone covers (packaging included) takes up 45 cubic feet of space, and\nstoring 1000 iPad covers (packaging included) takes up 210 cubic feet of space. The total storage\nspace available is 6000 cubic feet. Due to commercial agreements with Apple, Accessories & co.\nhas to deliver at least 5000 iPod covers and 4000 iPad covers per week in order to strengthen\nthe product's diffusion. The marketing department estimates that the weekly demand for iPod\ncovers, iPhone, and iPad covers does not exceed 10000 and 15000, and 8000 units, therefore\nthe company does not want to produce more than these amounts for iPod, iPhone, and iPad\ncovers. Finally, the net profit per each iPod cover, iPhone cover, and iPad cover is $4, $6, and\n$10, respectively.\nThe aim is to determine a weekly production schedule that maximizes the total net profit.\n\n(a) (5 points) Write a Linear Programming formulation for the problem. Start by stating any\nassumptions that you make. Label each constraint (except nonnegativity). For this first\nformulation, the decision variables should represent the proportion of time spent each day\non producing each of the two items:\nx1 = proportion of time devoted each day to iPod cover production,\nx2 = proportion of time devoted each day to iPhone cover production,\nx3 = proportion of time devoted each day to iPad cover production.\n(Different formulations will be required for parts (b) and (c).)\n(b) (5 points) Write a second Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). For this second formulation, the decision variables should\nrepresent the number of items of each type produced over the week:\ny1 = number of iPod covers produced over the week,\ny2 = number of iPhone covers produced over the week,\ny3 = number of iPad covers produced over the week.\nThe problem data is the same but you must make sure that everything matches the new\ndecision variables.\n(c) (5 points) Write a third Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). Assume that each working day has 8 working hours. For\nthis third formulation, the decision variables should be:\nz1 = number of hours devoted to the production of iPod smart covers in one week ,\nz2 = number of hours devoted to the production of iPhone smart covers in one week,\nz3 = total number of production hours employed during the week.\nExpress the objective function in thousands of dollars. The problem data is the same but\nyou must make sure that everything matches the new decision variables.\n(d) (5 points) What is the relationship between the variables z1, z2, z3 of part (c) and the\nvariables x1, x2, x3 of part (a) of this problem? Give a formula to compute z1, z2, z3 from\nx1, x2, x3.\n(e) (5 points) Excel submission Solve the problem using Excel Solver, following the guidelines\ngiven in the Excel Workbook that comes with this problem set. Pay attention to the\nformulation in the Excel Workbook: it is similar to the one required for part (b), but it is\nnot exactly the same.\n(f) (10 points) Write an algebraic formulation of the weekly production schedule problem de\nscribed above using the following notation:\n- n is the number of product types,\n- xj is the number of days devoted to the production of products of type j,\n- pj is the number of items of type j that can be manufactured in one day, assuming\nthat the process is devoted to products of type j.\n\n- P is the number of production days in one week,\n- sj is the storage space required by one item of type j,\n- S is the total storage space available for the week's production,\n- rj is the unit profit for each product of type j,\n- dj is the weekly maximum demand for an item of type j.\n- bj is the weekly minimum demand for an item of type j.\nProblem 2\n(10 points total). Problem 2 reviews the transformations from nonlinear constraints or objec\ntives into linear constraints and objectives, as mentioned in the second lecture and discussed in\nthe tutorial \"LP Transformation Tricks\".\nIdentify which of the following optimization problems can be reformulated as a single Linear\nProgram, and write the corresponding equivalent LP formulation. For those problems that\ncannot be reformulated, the answer should identify all the troublesome constraint(s) and/or\nobjective.\n(a) (5 points) Problem formulation:\nmin\ns.t.:\nmax{2.3x1 + x2, 4.3x1 - 0.5x2, 2.5x1 + 3.5x2}\nConstr1 :\nx1/(x1 + x2)\n≤\n0.5\nConstr2 :\n10x1 + 28x2\n=\n3.4\nConstr3 :\nx1 + x2\nx1\nx2\n≥\nfree\nfree\n(b) (5 points) Problem formulation:\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎭\n(1)\nmin |0.8x1 + 0.9x2|\ns.t.:\n⎫\n⎪\n⎪\n⎬\n⎪\n⎭\nConstr1 : |0.9x1 + 1.2x2|\n≤ 10\n(2)\nx1 ≥ 0\nx2\nfree\nProblem 3 (Second group of students)1\n(55 points total) Charles Watts Electronics manufactures the following six peripheral devices\nused in computers especially designed for jet fighter planes: internal modems, external modems,\ngraphics circuit boards, USB memory stick, hard disk drives, and memory expansion boards.\nEach of these technical products requires time, in minutes, on three types of electronic testing\nequipment as shown in the following table:\n1This problem is based on Problem B.29 of Operations Management by Heizer and Render (2010).\n\nInternal\nExternal\nCircuit\nUSB\nHard\nMemory\nModem\nModem\nBoard\nStick\nDrives\nBoards\nTest device 1\nTest device 2\nTest device 3\nThe first two test devices are available 130 hours per week. The third (device 3) requires\nmore preventive maintenance and may be used only 100 hours each week. Watts Electronics\nbelieves that it cannot sell more than 2000, 1500, 1800, 1200, 1000, 1000 units of each device,\nrespectively. Thus, it does not want to produce more than these units. The table that follows\nsummarizes the revenues and material costs for each product:\nRevenue per\nMaterial Cost\nDevice\nunit sold ($)\nper unit ($)\nInternal modem\nExternal modem\nCircuit board\nUSB memory stick\nHard disk drive\nMemory expansion board\nIn addition, variable labor costs are $16 per hour for test device 1, $12 per hour for test device\n2, and $18 per hour for test device 3. Watts Electronics wants to maximize its profits.\na) (10 points) Write a linear program for this problem.\nb) (10 points) Excel submission Write a spreadsheet for the problem and solve the problem\nusing Excel Solver, following the guidelines given in the Excel Workbook that comes with\nthis problem set. (Hint: the optimal value is $211666.9 .)\nc) Use the Excel spreadsheet to answer the following questions:\n(i) (4 points) What is the value of an additional minute of time per week on test device\n1? Test device 2? Test device 3? Should Watts Electronics add more test device time?\nIf so, on which equipment?\n(ii) (4 points) Suppose that Watts Electronics is considering to increase the availability\ntime of test device 2 for the next week. What would be the increase in the profit if the\navailability time increases to t for t = 131, 132, and 133. (Assume that there are still\n130 hours of test device 1 and 100 hours of test device 3.) The increase is the difference\nbetween the new profit and the profit from Part (a).\n(iii) (4 points) Based on your answer to part (ii), what do you think will be the contribution\nif the availability time of test deice 2 increases to 135? (Verify that you are correct.)\nWhat is the formula for the optimum profit if the availability time increased by 130+t?\n(You may assume that t is between 1 and 10).\n(iv) (4 points) Based on your formula in part (iii), what is the contribution if the availability\ntime of test deice 2 increases to 150. Use Excel solver to see if the formula is correct.\nUse Excel solver to determine the maximum value of t for which your formula is correct\n(Be accurate to within an hour).\n\n(v) (4 points) How would the optimal solution in Part (b) change if the labor costs increased\nto $18 per hour for test device 1, $13 per hour for test device 2, and $20 per hour for\ntest device 3?\n(vi) (5 points) Over what range of the labor cost for test device 3 will the optimal production-\nmix in Part (b) remain optimal? (Be accurate to within one dollar.)\nd) (10 points) Write an algebraic formulation for the problem using the following notation:\n- m is the number of peripheral devices,\n- n is the number of test devices,\n- ai is the maximum availability time of test device i ( in hour),\nL\n- c\nis the labor cost per hour of test device i (in $),\ni\nM\n- c\nis the material cost per unit for device j (in $),\nj\n- rj is the revenue cost per unit for device j (in $),\n- bj is the maximum availability of material j,\n- qij is the amount of time in minute on test service i that is required in device j,\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 1 solutions – Group 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/c9d7327e8e2be0bccf05d13532eec42b_MIT15_053S13_ps1-1sol.pdf",
      "content": "Optimization Methods in Management Science\nMIT 15.053, Spring 2013\nProblem Set 1 (First Group of Students)\nStudents with first letter of surnames A-F\nDue: February 12 , 2013\nProblem Set Rules:\n1. Each student should hand in an individual problem set.\n2. Discussing problem sets with other students is permitted. Copying from another person\nor solution set is not permitted.\n3. Late assignments will not be accepted. No exceptions.\n4. The non-Excel solution should be handed in at the beginning of class on the day the\nproblem set is due. The Excel solutions, if required, should be posted on the website by\nthe beginning of class on the day the problem set is due. Questions that require an Excel\nsubmission are marked with Excel submission . For Excel submission questions, only\nthe Excel spreadsheet will be graded.\nProblem 1\n(35 points total) The first problem asks you to formulate a 3-variable linear program in three\ndifferent ways (four ways if you also count the algebraic formulation). Both of the first two ways\nare fairly natural. The third way is a bit obscure. And the algebraic formulation may seem\noverly complex. In practice, there are advantages to formulating linear programs in different\nways. And there are huge advantages in the algebraic formulation. (One can express huge\nproblems efficiently on a computer using a modeling language, which is based on the algebraic\nformulation.) In addition, formulating an LP in multiple ways provides insight into the LP\nmodels.\nAccessories & co. is producing three kinds of covers for Apple products: one for iPod, one\nfor iPad, and one for iPhone. The company's production facilities are such that if we devote\nthe entire production to iPod covers, we can produce 6000 of them in one day. If we devote the\nentire production to iPhone covers or iPad covers, we can produce 5000 or 3000 of them in one\nday. The production schedule is one week (5 working days), and the week's production must be\nstored before distribution. Storing 1000 iPod covers (packaging included) takes up 40 cubic feet\nof space. Storing 1000 iPhone covers (packaging included) takes up 45 cubic feet of space, and\nstoring 1000 iPad covers (packaging included) takes up 210 cubic feet of space. The total storage\nspace available is 6000 cubic feet. Due to commercial agreements with Apple, Accessories & co.\nhas to deliver at least 5000 iPod covers and 4000 iPad covers per week in order to strengthen\nthe product's diffusion. The marketing department estimates that the weekly demand for iPod\ncovers, iPhone, and iPad covers does not exceed 10000 and 15000, and 8000 units, therefore\nthe company does not want to produce more than these amounts for iPod, iPhone, and iPad\ncovers. Finally, the net profit per each iPod cover, iPhone cover, and iPad cover is $4, $6, and\n$10, respectively.\nThe aim is to determine a weekly production schedule that maximizes the total net profit.\n\n(a) (5 points) Write a Linear Programming formulation for the problem. Start by stating any\nassumptions that you make. Label each constraint (except nonnegativity). For this first\nformulation, the decision variables should represent the proportion of time spent each day\non producing each of the two items:\nx1 = proportion of time devoted each day to iPod cover production,\nx2 = proportion of time devoted each day to iPhone cover production,\nx3 = proportion of time devoted each day to iPad cover production.\n(Different formulations will be required for parts (b) and (c).)\nSolution.\nAs required, we let: x1 = proportion of time devoted each day to iPod\nsmart cover production, x2 = proportion of time devoted each day to iPhone smart cover\nproduction, and x3 = proportion of time devoted each day to iPad smart cover production.\nWe assume:\n(a) that the production can be split between the two products in any desired way (that\nis, fractional values for x1, x2, and x3 are acceptable), and\n(b) that the number of produced item of each type is directly proportional to the time\ndevoted to producing the item.\nGiven these assumptions, we can formulate the problem as an LP as follows:\nmax 120000x1 + 150000x2 + 150000x3\ns.t.:\nMax daily production:\nx1 + x2 + x3 ≤ 1\nStorage:\n1200x1 + 1125x2 + 3150x3 ≤ 6000\nMin iPod production:\n30000x1 ≥ 5000\nMin iPad production:\n15000x3\n(1)\n≥ 4000\nMax iPod demand:\n30000x1 ≤ 10000\nMax iPhone demand:\n25000x2 ≤ 15000\nMax iPad demand:\n15000x3 ≤ 8000\nx1, x2, x3 ≥ 0.\n⎫\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n⎬\n⎪\n⎪\n\n⎪\n⎪\n⎭\nBecause x1 already has a lower bound, omitting the nonnegativity constraint for x1 is not\nconsidered an error (no penalty).\n(b) (5 points) Write a second Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). For this second formulation, the decision variables should\nrepresent the number of items of each type produced over the week:\ny1 = number of iPod covers produced over the week,\ny2 = number of iPhone covers produced over the week,\ny3 = number of iPad covers produced over the week.\nThe problem data is the same but you must make sure that everything matches the new\ndecision variables.\nSolution.\nAs required, we let: y1 = number of iPod covers produced over the week,\ny2 = number of iPhone covers produced over the week, and y3 = number of iPad covers\n\nproduced over the week. We make the same assumptions as for part (a). We can formulate\nthe problem as an LP as follows:\nmax\n4y1 + 6y2 + 10y3\ns.t.:\nMax weekly production: 1/6000y1 + 1/5000y2 + 1/3000y1 ≤ 5\nStorage:\n0.04y1 + 0.045y2 + 0.21y3 ≤ 6000\nMin iPod production:\ny1 ≥ 5000\nMin iPad production:\ny3\n(2)\n≥ 4000\nMax iPod demand:\ny1 ≤ 10000\nMax iPhone demand:\ny2 ≤ 15000\nMax iPad demand:\ny3 ≤ 8000\ny1, y2, y3 ≥ 0.\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎭\nBecause y1 already has a lower bound, omitting the nonnegativity constraint for y1 is not\nconsidered an error (no penalty).\n(c) (5 points) Write a third Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). Assume that each working day has 8 working hours. For\nthis third formulation, the decision variables should be:\nz1 = number of hours devoted to the production of iPod smart covers in one week ,\nz2 = number of hours devoted to the production of iPhone smart covers in one week,\nz3 = total number of production hours employed during the week.\nExpress the objective function in thousands of dollars. The problem data is the same but\nyou must make sure that everything matches the new decision variables.\nSolution.\nAs requested, we use two decision variables: z1 is the number of hours\ndevoted to iPod cover production, z2 is the number of hours devoted to iPhone cover\nproduction, and z3 is the total number of production hours employed for the week. It\nfollows that the number of hours devoted to iPad cover production is z3 - z1 - z2, which\nshould be a nonnegative number (i.e. we must impose z1 + z2 ≤ z3). We can therefore\nformulate the problem as follows:\nmax 3000z1 + 3750z2 + 3750(z3 - z1 - z2)\ns.t.:\niPad Production:\nz1 ≤ 40\niPhone Production:\nz2 ≤ 40\nStorage: 30z1 + 28.125z2 + 78.75(z3 - z1 - z2) ≤ 6000\nMin iPod production:\n750z1 ≥ 5000\nMin iPad production:\n375(z3 - z1 - z2) ≥ 4000\nMax iPod demand:\n750z1 ≤ 10000\nMax iPhone demand:\n625z2 ≤ 15000\nMax iPad demand:\n375(z3 - z1 - z2) ≤ 8000\nz1, z2 ≥ 0.\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎭\n(d) (5 points) What is the relationship between the variables z1, z2, z3 of part (c) and the\nvariables x1, x2, x3 of part (a) of this problem? Give a formula to compute z1, z2, z3 from\n\nx1, x2, x3.\nSolution.\nThe relationship between z1, z2, z3 of part (d) and x1, x2, z3 of part (a) is the\nfollowing. z1 = 40x1 because x1 represents the percentage of time of each day dedicated\nto iPad cover production; multiplying x1 by the total number of hours in a production\nperiod (= 40) yields the number hours spent on iPods. Similarly, we have z2 = 40x2.\nThen, z3 = 40(x1 + x2 + x3) because x1 + x2 + x3 represents the fraction of time used\nduring the day; multiplying this by the total number of hours in a production period\nyields the total number of hours employed during the week.\n(e) (5 points) Excel submission Solve the problem using Excel Solver, following the guidelines\ngiven in the Excel Workbook that comes with this problem set. Pay attention to the\nformulation in the Excel Workbook: it is similar to the one required for part (b), but it is\nnot exactly the same.\nSolution.\nNonzero variables in the optimal solution: x1 = 5, x2 = 7.5, x3 = 8. Objec\ntive value: 145000.\n(f) (10 points) Write an algebraic formulation of the weekly production schedule problem de\nscribed above using the following notation:\n- n is the number of product types,\n- xj is the number of days devoted to the production of products of type j,\n- pj is the number of items of type j that can be manufactured in one day, assuming\nthat the process is devoted to products of type j.\n- P is the number of production days in one week,\n- sj is the storage space required by one item of type j,\n- S is the total storage space available for the week's production,\n- rj is the unit profit for each product of type j,\n- dj is the weekly maximum demand for an item of type j.\n- bj is the weekly minimum demand for an item of type j.\nSolution.\nWe denote by xj the number of days devoted to the production of the j-th\nitem. This is one possible formulation. Other correct formulations are possible.\n⎫\nn\nmax\nj=1 rj pj xj\n⎪\n\n⎪\n⎪\n⎬\ns.t.:\nProduction:\n\nn\n≤ P\nj=1 xj\nn\nStorage:\n≤ S\nj=1 sj pj xj\n⎪\n\n⎪\n⎪\n⎭\nMax demand:∀j = 1, . . . , T\npj xj\n≤ dj\nMin demand:∀j = 1, . . . , T\npj xj\n≥ bj\n∀j = 1, . . . , T\nxj\n≥ 0.\nProblem 2\n(10 points total). Problem 2 reviews the transformations from nonlinear constraints or objec\ntives into linear constraints and objectives, as mentioned in the second lecture and discussed in\n\nthe tutorial \"LP Transformation Tricks\".\nIn each part, transform the corresponding mathematical program to an equivalent linear\nprogram. Do not solve the linear program.\n(a) (5 points) Problem formulation:\nmin\ns.t.:\nmax{2.3x1 + x2, 4.3x1 - 0.5x2, 2.5x1 + 3.5x2}\nConstr1 :\nx1/(x1 + x2)\n≤\n0.5\nConstr2 :\n10x1 + 28x2\n=\n3.4\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n\n⎪\n⎭\n(3)\nConstr3 :\nx1 + x2\n≥\nx1 free\nx2 free\nSolution.\nThe objective function can be reformulated as a linear objective function\nby introducing an extra variable w and adding three constraints. In addition, we require\nto multiply through by x1 + x2 (which is nonnegative) the constraint that has x3 the\ndenominator. The resulting problem is as follows\nmin\nw\ns.t.:\nObj Ref1 :\n2.3x1 + x2 - w\n≤\nObj Ref2 : 4.3x1 - 0.5x2 - w\n≤\nObj Ref2 : 2.5x1 + 3.5x2 - w\n≥\nConstr1 :\n0.5x1 - 0.5x2\n≤\nConstr2 :\n10x1 + 28x2\n=\n3.4\nConstr3 :\nx1 + x2\n≥\nx1 free\nx2 free\n(b) (5 points) Problem formulation:\n⎫\n⎪\n\n⎪\n⎪\n\n⎪\n⎪\n⎬\n⎪\n\n⎪\n⎪\n⎪\n⎭\nmin |0.8x1 + 0.9x2|\ns.t.:\n⎫\n⎪\n⎪\n⎬\n⎪\n⎭\nConstr1 : |0.9x1 + 1.2x2|\n≤ 10\n(4)\nx1 ≥ 0\nx2\nfree\nSolution.\nCan be reformulated by introducing an extra variable w to reformulate the\nobjective function, and splitting Constr1 into two constraints:\nmin\nw\ns.t.:\nObj Ref1 :\n0.8x1 + 0.9x2 - w ≤ 0\nObj Ref2 : -0.8x1 - 0.9x2 - w ≤ 0\nConstr1 Ref1 :\n0.9x1 + 1.2x2 ≤ 10\nConstr1 Ref2 :\n-0.9x1 - 1.2x2 ≤ 10\nx1 ≥ 0\nx2\nfree\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\nᆰ\n⎭\n\nProblem 3 (First group of students)\n(55 points total) This problem is based on Problem 11 of Applied Mathematical Programming,\nChapter 1. This is a more complex model than the one in Problem 1. For many product mix\nexamples, each product uses a fixed set of materials. In this example, if one makes one gal\nlon Deluxe, one does not know a priori how much of Additive A and Additive C are used. In\nfact, the decision maker must determine the optimal amounts of A and C to be added to Deluxe.\nA corporation that produces gasoline and oil specialty additives purchases four grades of\npetroleum distillates, A, B, C, and D. The company then combines the four according to spec\nifications of the maximum or minimum percentages of grades A, C, or D in each blend, given\nin Table 1.\nMixture\nMax %\nallowed for\nAdditive A\nMin %\nallowed for\nAdditive C\nMax %\nallowed for\nAdditive D\nSelling\nprice\n$/gallon\nDeluxe\nStandard\nEconomy\n60%\n15%\n-\n20%\n60%\n50%\n10%\n25%\n45%\n7.9\n6.9\n5.0\nTable 1: Specifications of the three mixtures.\nSupplies of the three basic additives and their costs are given in Table 2.\nMax quantity\navailable\nCost\nDistillate\nper day (gals)\n$/gallon\nA\n0.60\nB\n0.52\nC\n0.48\nD\n0.35\nTable 2: Supplies and costs of petroleum grades.\n(a) (15 points) Formulate a Linear Program to determine the production policy that maximizes\nprofits.\nSolution.\nWe define twelve decision variables to indicate the gallons of each of the basic\npetroleum grades (additives) that contribute to the production of the three mixtures.\nWe use the following labels: xAD indicates the quantity of additive A that is used for\nproduction of mixture Deluxe, xAS indicates the quantity of additive A that is used for\nproduction of mixture Standard, xAE indicates the quantity of additive A that is used for\nproduction of mixture Economy. Similarly, we use xBD, xBS , xBE to label the quantity\nof additive B used in each of the three mixtures, xCD, xCS , xCE for additive C, and and\nxDD, xDS , xDE for additive D. The gallons of mixture Deluxe produced can be computes\nas xAD +xBD +xCD; similarly for mixture Standard and Economy. The objective function\nis the total profit, computed as revenues minus costs. Thus, we can formulate the problem\n\nas follows:\nmax\n7.9(xAD + xBD + xCD + xDD)+\n6.9(xAS + xBS + xCS + xDS )+\n5.0(xAE + xBE + xCE + xDE )+\n-0.6(xAD + xAS + xAE )+\n-0.52(xBD + xBS + xBE )+\n-0.48(xCD + xCS + xCE )+\n-0.35(xDD + xDS + xDE )+\ns.t.:\nAvailability A :\nxAD + xAS + xAE\n≤ 4000\nAvailability B :\nxBD + xBS + xBE\n≤ 5000\nAvailability C :\nxCD + xCS + xCE\n≤ 3500\nAvailability D :\nxDD + xDS + xDE\n≤ 5500\nMixture D Add A :\nxAD/(xAD + xBD + xCD + xDD) ≤ 0.6\nMixture D Add C :\nxCD/(xAD + xBD + xCD + xDD) ≥ 0.2\nMixture D Add D :\nxDD/(xAD + xBD + xCD + xDD) ≤ 0.1\nMixture S Add A :\nxAS /(xAS + xBS + xCS + xDS ) ≤ 0.15\nMixture S Add C :\nxCS /(xAS + xBS + xCS + xDS ) ≥ 0.6\nMixture S Add D :\nxDS /(xAS + xBS + xCS + xDS ) ≤ 0.25\nMixture E Add C :\nxCE/(xAE + xBE + xCE + xDE ) ≥ 0.5\nMixture E Add D :\nxDE/(xAE + xBE + xCE + xDE ) ≤ 0.45\nxAD, xAS , xAE , xBD, xBS, xBE , xCD, xCS, xCE, xDD, xDS , xDE\n≥ 0.\nThis is not a Linear Program but can easily be reformulated as such by multiplying\nthrough by the denominators of the fractions (which are nonnegative). We can also carry\nout the calculations in the objective function. We obtain:\nmax\n7.3xAD + 7.38xBD + 7.42xCD + 7.55xDD\n6.3xAS + 6.38xBS + 6.42xCS + 6.55xDS\n4.4xAE + 4.48xBE + 4.52xCE + 4.65xDE\ns.t.:\nAvailability A :\nxAD + xAS + xAE\n≤ 4000\nAvailability B :\nxBD + xBS + xBE\n≤ 5000\nAvailability C :\nxCD + xCS + xCE\n≤ 3500\nAvailability D :\nxDD + xDS + xDE\n≤ 5500\nMixture D Add A :\n0.4xAD - 0.6xBD - 0.6xCD - 0.6xDD ≤ 0\nMixture D Add C :\n-0.2xAD - 0.2xBD + 0.8xCD - 0.2xDD ≥ 0\nMixture D Add D :\n-0.1xAD - 0.1xBD - 0.1xCD + 0.9xDD ≤ 0\nMixture S Add A :\n0.85xAS - 0.15xBS - 0.15xCS - 0.15xDS\n≤ 0\nMixture S Add C :\n-0.6xAS - 0.6xBS + 0.4xCS - 0.6xDS\n≥ 0\nMixture S Add D :\n-0.25xAS - 0.25xBS - 0.25xCS + 0.75xDS\n≤ 0\nMixture E Add C :\n-0.5xAE - 0.5xBE + 0.5xCE - 0.5xDE\n≥ 0\nMixture E Add D :\n-0.45xAE - 0.45xBE - 0.45xCE + 0.55xDE\n≤ 0\nxAD, xAS , xAE , xBD, xBS, xBE , xCD, xCS, xCE, xDD, xDS , xDE\n≥ 0.\n(b) (10 points) Excel submission Write a spreadsheet for the problem and solve the problem\nusing Excel Solver, following the guidelines given in the Excel Workbook that comes with\nthis problem set. (Hint: The optimal value is $102986.7 . In the optimal solution, there\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎭\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\nᆰ\n⎭\n\nare 12500 gallons of mixture Deluxe and 1666.667 gallons of mixture Standard. No mixture\nEconomy is produced.)\n(c) Use the Excel spreadsheet to answer the following questions:\ni) (4 points) No mixture Economy is produced in the optimal solution. What would the\nminimum selling price need to be in order for Deluxe to be worth producing? (Be\naccurate to within 5 cents).\nSolution.\nIt is worth producing mixture Economy when it selling price increases\nto $5.20\nii) (4 points) There are constraints on the maximum amount of distillate D that is used\nin producing the different mixtures. If you could violate any of these constraints on\ndistillate A, would you? Which constraint would be most advantageous to delete?\nSolution.\nDeleting the constraint on the maximum percentage of distillate D in\nmixture Deluxe, Standard, and Economy results in profit of $ 129945, $ 104903,\nand $ 103402, respectively. Thus, the constraint on the percentage of distillate D in\nmixture Deluxe would be most advantageous to delete.\niii) (4 points) Suppose that you can increase the selling price of Deluxe. What would be the\nincrease in the profit if the selling price of mixture Deluxe per gallon increases to p for\np = $ 7.95, $8.00, and $8.05 . (Assume that the selling price of mixtures Standard and\nEconomy remain $6.9 and $5.0 per gallon, respectively.) The increase is the difference\nbetween the new profit and the profit from Part (a).\nSolution.\nThe increase in the profit for the selling price p = $ 7.95, $8.00, and\n$8.05 is $ 625, $1250, $1875, respectively.\niv) (4 points) Based on your answer in Part (ii), what do you think will be the profit if the\nselling price of mixture Deluxe increases by 5%? What is the formula for the optimum\nprofit if the selling price of Deluxe per gallon increased by p? (You may assume that p\nis small enough).\nSolution.\nThe increase in the profit at price p (for small enough p) is 12500 ×\n(p - 7.9).\nv) (4 points) Based on your formula in part (iii), what is the contribution if the selling\nprice of Deluxe per gallon increases to 8.5. Use Excel solver to see if the formula is\ncorrect. (It wont be.) Use Excel solver to determine the maximum value of p for which\nyour formula is correct. (Be accurate to within 5 cents).\nSolution.\nThe increase by the formula is $7500, while the increase in the profit\nby solving the problem is $7902. The maximum value of p for which your formula is\ncorrect is p = 8.20\nvi) (5 points) The quantity available of distillate A is 4000 gals per day which is entirely\nused up in an optimal mixture. If you could buy (just a little bit) more, would you do\nso? At what price would be worthwhile to buy more?\nSolution.\nYes. If we increase the amount of distillate A to 4001 gallons, the profit\nwill increase from 102903 to 102911. So the increase in the objective function value\nis $8 per unit increase in the amount of distillate A. Thus, it would be worthwhile to\nbuy more distillate A at any price less than or equal $8 + 0.60 = 8.60.\n(d) (10 points) Write an algebraic formulation for the problem using the following notation:\n\n- m is the number of mixtures (final products),\n- n is the number of basic petroleum grades (additives),\n- pj is the selling price of mixture j,\n- ci is the cost of additive i,\n- ai is the maximum availability of additive i,\n- rij is the minimum percentage of additive i that is required in mixture j,\n- qij is the maximum percentage of additive i that can be blended in for mixture j,\nSolution.\nDefine A × M decision variables xij , i = 1, . . . , A, j = 1, . . . , M, xij =\nquantity of basic additive i used in mixture j. The total quantity of additive i employed\nis then\nM\nj=1 xij , and the total quantity of mixture j produced is\nA\ni=1 xij . We can\nformulate a Linear Program to maximize the profit as follows:\nA\nM\nmax\n(pj - ci)xij\ni=1\nj=1\nM\nAvailability : ∀i = 1, . . . , A\n≤ ai\nj=1 xij\nMin % : ∀i = 1, . . . , A, ∀j = 1, . . . , M (1 - rij )xij -\n=i rij xkj\n≥ 0\nk=1,...,A,k\nMax % : ∀i = 1, . . . , A, ∀j = 1, . . . , M (1 - qij )xij -\n=i qij xkj\n≤ 0\nk=1,...,A,k\n∀i = 1, . . . , A, ∀j = 1, . . . , M\nxij\n≥ 0\n⎫\n⎪\n⎪\n⎬\n⎪\nᆰ\n⎭\nP\nP\nP\nP\nP\nP\n\nP\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 1 solutions – Group 2",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/551dc4ab89ca0b24727843ee6b5ddae2_MIT15_053S13_ps1-2sol.pdf",
      "content": "Optimization Methods in Management Science\nMIT 15.053, Spring 2013\nProblem Set 1 (Second Group of Students)\nStudents with first letter of surnames G-Z\nDue: February 12 , 2013\nProblem Set Rules:\n1. Each student should hand in an individual problem set.\n2. Discussing problem sets with other students is permitted. Copying from another person\nor solution set is not permitted.\n3. Late assignments will not be accepted. No exceptions.\n4. The non-Excel solution should be handed in at the beginning of class on the day the\nproblem set is due. The Excel solutions, if required, should be posted on the website by\nthe beginning of class on the day the problem set is due. Questions that require an Excel\nsubmission are marked with Excel submission . For Excel submission questions, only\nthe Excel spreadsheet will be graded.\nProblem 1\n(35 points total) The first problem asks you to formulate a 3-variable linear program in three\ndifferent ways (four ways if you also count the algebraic formulation). Both of the first two ways\nare fairly natural. The third way is a bit obscure. And the algebraic formulation may seem\noverly complex. In practice, there are advantages to formulating linear programs in different\nways. And there are huge advantages in the algebraic formulation. (One can express huge\nproblems efficiently on a computer using a modeling language, which is based on the algebraic\nformulation.) In addition, formulating an LP in multiple ways provides insight into the LP\nmodels.\nAccessories & co. is producing three kinds of covers for Apple products: one for iPod, one\nfor iPad, and one for iPhone. The company's production facilities are such that if we devote\nthe entire production to iPod covers, we can produce 6000 of them in one day. If we devote the\nentire production to iPhone covers or iPad covers, we can produce 5000 or 3000 of them in one\nday. The production schedule is one week (5 working days), and the week's production must be\nstored before distribution. Storing 1000 iPod covers (packaging included) takes up 40 cubic feet\nof space. Storing 1000 iPhone covers (packaging included) takes up 45 cubic feet of space, and\nstoring 1000 iPad covers (packaging included) takes up 210 cubic feet of space. The total storage\nspace available is 6000 cubic feet. Due to commercial agreements with Apple, Accessories & co.\nhas to deliver at least 5000 iPod covers and 4000 iPad covers per week in order to strengthen\nthe product's diffusion. The marketing department estimates that the weekly demand for iPod\ncovers, iPhone, and iPad covers does not exceed 10000 and 15000, and 8000 units, therefore\nthe company does not want to produce more than these amounts for iPod, iPhone, and iPad\ncovers. Finally, the net profit per each iPod cover, iPhone cover, and iPad cover is $4, $6, and\n$10, respectively.\nThe aim is to determine a weekly production schedule that maximizes the total net profit.\n\n(a) (5 points) Write a Linear Programming formulation for the problem. Start by stating any\nassumptions that you make. Label each constraint (except nonnegativity). For this first\nformulation, the decision variables should represent the proportion of time spent each day\non producing each of the two items:\nx1 = proportion of time devoted each day to iPod cover production,\nx2 = proportion of time devoted each day to iPhone cover production,\nx3 = proportion of time devoted each day to iPad cover production.\n(Different formulations will be required for parts (b) and (c).)\nSolution.\nAs required, we let: x1 = proportion of time devoted each day to iPod\nsmart cover production, x2 = proportion of time devoted each day to iPhone smart cover\nproduction, and x3 = proportion of time devoted each day to iPad smart cover production.\nWe assume:\n(a) that the production can be split between the two products in any desired way (that\nis, fractional values for x1, x2, and x3 are acceptable), and\n(b) that the number of produced item of each type is directly proportional to the time\ndevoted to producing the item.\nGiven these assumptions, we can formulate the problem as an LP as follows:\nmax 120000x1 + 150000x2 + 150000x3\ns.t.:\nMax daily production:\nx1 + x2 + x3 ≤ 1\nStorage:\n1200x1 + 1125x2 + 3150x3 ≤ 6000\nMin iPod production:\n30000x1 ≥ 5000\nMin iPad production:\n15000x3\n(1)\n≥ 4000\nMax iPod demand:\n30000x1 ≤ 10000\nMax iPhone demand:\n25000x2 ≤ 15000\nMax iPad demand:\n15000x3 ≤ 8000\nx1, x2, x3 ≥ 0.\n⎫\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n⎬\n⎪\n⎪\n\n⎪\n⎪\n⎭\nBecause x1 already has a lower bound, omitting the nonnegativity constraint for x1 is not\nconsidered an error (no penalty).\n(b) (5 points) Write a second Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). For this second formulation, the decision variables should\nrepresent the number of items of each type produced over the week:\ny1 = number of iPod covers produced over the week,\ny2 = number of iPhone covers produced over the week,\ny3 = number of iPad covers produced over the week.\nThe problem data is the same but you must make sure that everything matches the new\ndecision variables.\nSolution.\nAs required, we let: y1 = number of iPod covers produced over the week,\ny2 = number of iPhone covers produced over the week, and y3 = number of iPad covers\n\nproduced over the week. We make the same assumptions as for part (a). We can formulate\nthe problem as an LP as follows:\nmax\n4y1 + 6y2 + 10y3\ns.t.:\nMax weekly production: 1/6000y1 + 1/5000y2 + 1/3000y1 ≤ 5\nStorage:\n0.04y1 + 0.045y2 + 0.21y3 ≤ 6000\nMin iPod production:\ny1 ≥ 5000\nMin iPad production:\ny3\n(2)\n≥ 4000\nMax iPod demand:\ny1 ≤ 10000\nMax iPhone demand:\ny2 ≤ 15000\nMax iPad demand:\ny3 ≤ 8000\ny1, y2, y3 ≥ 0.\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎭\nBecause y1 already has a lower bound, omitting the nonnegativity constraint for y1 is not\nconsidered an error (no penalty).\n(c) (5 points) Write a third Linear Programming formulation for the problem. Label each\nconstraint (except nonnegativity). Assume that each working day has 8 working hours. For\nthis third formulation, the decision variables should be:\nz1 = number of hours devoted to the production of iPod smart covers in one week ,\nz2 = number of hours devoted to the production of iPhone smart covers in one week,\nz3 = total number of production hours employed during the week.\nExpress the objective function in thousands of dollars. The problem data is the same but\nyou must make sure that everything matches the new decision variables.\nSolution.\nAs requested, we use two decision variables: z1 is the number of hours\ndevoted to iPod cover production, z2 is the number of hours devoted to iPhone cover\nproduction, and z3 is the total number of production hours employed for the week. It\nfollows that the number of hours devoted to iPad cover production is z3 - z1 - z2, which\nshould be a nonnegative number (i.e. we must impose z1 + z2 ≤ z3). We can therefore\nformulate the problem as follows:\nmax 3000z1 + 3750z2 + 3750(z3 - z1 - z2)\ns.t.:\niPad Production:\nz1 ≤ 40\niPhone Production:\nz2 ≤ 40\nStorage: 30z1 + 28.125z2 + 78.75(z3 - z1 - z2) ≤ 6000\nMin iPod production:\n750z1 ≥ 5000\nMin iPad production:\n375(z3 - z1 - z2) ≥ 4000\nMax iPod demand:\n750z1 ≤ 10000\nMax iPhone demand:\n625z2 ≤ 15000\nMax iPad demand:\n375(z3 - z1 - z2) ≤ 8000\nz1, z2 ≥ 0.\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎭\n(d) (5 points) What is the relationship between the variables z1, z2, z3 of part (c) and the\nvariables x1, x2, x3 of part (a) of this problem? Give a formula to compute z1, z2, z3 from\n\nx1, x2, x3.\nSolution.\nThe relationship between z1, z2, z3 of part (d) and x1, x2, z3 of part (a) is the\nfollowing. z1 = 40x1 because x1 represents the percentage of time of each day dedicated\nto iPad cover production; multiplying x1 by the total number of hours in a production\nperiod (= 40) yields the number hours spent on iPods. Similarly, we have z2 = 40x2.\nThen, z3 = 40(x1 + x2 + x3) because x1 + x2 + x3 represents the fraction of time used\nduring the day; multiplying this by the total number of hours in a production period\nyields the total number of hours employed during the week.\n(e) (5 points) Excel submission Solve the problem using Excel Solver, following the guidelines\ngiven in the Excel Workbook that comes with this problem set. Pay attention to the\nformulation in the Excel Workbook: it is similar to the one required for part (b), but it is\nnot exactly the same.\nSolution.\nNonzero variables in the optimal solution: x1 = 5, x2 = 7.5, x3 = 8. Objec\ntive value: 145000.\n(f) (10 points) Write an algebraic formulation of the weekly production schedule problem de\nscribed above using the following notation:\n- n is the number of product types,\n- xj is the number of days devoted to the production of products of type j,\n- pj is the number of items of type j that can be manufactured in one day, assuming\nthat the process is devoted to products of type j.\n- P is the number of production days in one week,\n- sj is the storage space required by one item of type j,\n- S is the total storage space available for the week's production,\n- rj is the unit profit for each product of type j,\n- dj is the weekly maximum demand for an item of type j.\n- bj is the weekly minimum demand for an item of type j.\nSolution.\nWe denote by xj the number of days devoted to the production of the j-th\nitem. This is one possible formulation. Other correct formulations are possible.\n⎫\nn\nmax\nj=1 rj pj xj\n⎪\n\n⎪\n⎪\n⎬\ns.t.:\nProduction:\n\nn\n≤ P\nj=1 xj\nn\nStorage:\n≤ S\nj=1 sj pj xj\n⎪\n\n⎪\n⎪\n⎭\nMax demand: ∀j = 1, . . . , T\npj xj\n≤ dj\nMin demand: ∀j = 1, . . . , T\npj xj\n≥ bj\n∀j = 1, . . . , T\nxj\n≥ 0.\nProblem 2\n(10 points total). Problem 2 reviews the transformations from nonlinear constraints or objec\ntives into linear constraints and objectives, as mentioned in the second lecture and discussed in\n\nthe tutorial \"LP Transformation Tricks\".\nIn each part, transform the corresponding mathematical program to an equivalent linear\nprogram. Do not solve the linear program.\n(a) (5 points) Problem formulation:\nmin\ns.t.:\nmax{2.3x1 + x2, 4.3x1 - 0.5x2, 2.5x1 + 3.5x2}\nConstr1 :\nx1/(x1 + x2)\n≤\n0.5\nConstr2 :\n10x1 + 28x2\n=\n3.4\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n\n⎪\n⎭\n(3)\nConstr3 :\nx1 + x2\n≥\nx1 free\nx2 free\nSolution.\nThe objective function can be reformulated as a linear objective function\nby introducing an extra variable w and adding three constraints. In addition, we require\nto multiply through by x1 + x2 (which is nonnegative) the constraint that has x3 the\ndenominator. The resulting problem is as follows\nmin\nw\ns.t.:\nObj Ref1 :\n2.3x1 + x2 - w\n≤\nObj Ref2 : 4.3x1 - 0.5x2 - w\n≤\nObj Ref2 : 2.5x1 + 3.5x2 - w\n≥\nConstr1 :\n0.5x1 - 0.5x2\n≤\nConstr2 :\n10x1 + 28x2\n=\n3.4\nConstr3 :\nx1 + x2\n≥\nx1 free\nx2 free\n(b) (5 points) Problem formulation:\n⎫\n⎪\n\n⎪\n⎪\n\n⎪\n⎪\n⎬\n⎪\n\n⎪\n⎪\n⎪\n⎭\nmin |0.8x1 + 0.9x2|\ns.t.:\n⎫\n⎪\n⎪\n⎬\n⎪\n⎭\nConstr1 : |0.9x1 + 1.2x2|\n≤ 10\n(4)\nx1 ≥ 0\nx2\nfree\nSolution.\nCan be reformulated by introducing an extra variable w to reformulate the\nobjective function, and splitting Constr1 into two constraints:\nmin\nw\ns.t.:\nObj Ref1 :\n0.8x1 + 0.9x2 - w ≤ 0\nObj Ref2 : -0.8x1 - 0.9x2 - w ≤ 0\nConstr1 Ref1 :\n0.9x1 + 1.2x2 ≤ 10\nConstr1 Ref2 :\n-0.9x1 - 1.2x2 ≤ 10\nx1 ≥ 0\nx2\nfree\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\nᆰ\n⎭\n\nProblem 3 (Second group of students)1\n(55 points total) Charles Watts Electronics manufactures the following six peripheral devices\nused in computers especially designed for jet fighter planes: internal modems, external modems,\ngraphics circuit boards, USB memory stick, hard disk drives, and memory expansion boards.\nEach of these technical products requires time, in minutes, on three types of electronic testing\nequipment as shown in the following table:\nInternal\nExternal\nCircuit\nUSB\nHard\nMemory\nModem\nModem\nBoard\nStick\nDrives\nBoards\nTest device 1\nTest device 2\nTest device 3\nThe first two test devices are available 130 hours per week. The third (device 3) requires\nmore preventive maintenance and may be used only 100 hours each week. Watts Electronics\nbelieves that it cannot sell more than 2000, 1500, 1800, 1200, 1000, 1000 units of each device,\nrespectively. Thus, it does not want to produce more than these units. The table that follows\nsummarizes the revenues and material costs for each product:\nRevenue per\nMaterial Cost\nDevice\nunit sold ($)\nper unit ($)\nInternal modem\nExternal modem\nCircuit board\nUSB memory stick\nHard disk drive\nMemory expansion board\nIn addition, variable labor costs are $16 per hour for test device 1, $12 per hour for test device\n2, and $18 per hour for test device 3. Watts Electronics wants to maximize its profits.\na) (10 points) Write a linear program for this problem.\nSolution.\nWe define six decision variables that indicate the number of devices as:\nxI = the number of internal modems\nxE = the number of external modems\nxC = the number of circuit boards\nxU = the number of USB memory sticks\nxH = the number of hard disk derives\nxM = the number of memory expansion boards\nThe challenging part of this problem is to determine the objective function. The objective\nfunction is the sum of profits from selling each device. The profit from each device is the\nselling price minus the material costs minus the costs of testing. For example, the profit\nfor selling xI units of internal modem device is given as\nxI 200 - 35 - (7/60)16 - (2/60)12 - (5/60)18 .\n1This problem is based on Problem B.29 of Operations Management by Heizer and Render (2010).\n\nSimilarly, we can determine the profit for other devices. Thus, we can formulate the\nproblem as follows:\nmax\nxI 200 - 35 - (7/60)16 - (2/60)12 - (5/60)18 +\nxE 120 - 25 - (3/60)16 - (5/60)12 - (1/60)18 +\nxC 180 - 40 - (12/60)16 - (3/60)12 - (3/60)18 +\nxU 130 - 45 - (6/60)16 - (2/60)12 - (2/60)18 +\nxH 430 - 170 - (18/60)16 - (15/60)12 - (9/60)18 +\nxM 260 - 60 - (17/60)16 - (17/60)12 - (2/60)18\ns.t.:\nAvailability Test Dev. 1 :\n7xI + 3xE + 12xC + 6xU + 18xH + 17xM\n≤ 130 ∗ 60\nAvailability Test Dev. 2 :\n2xI + 5xE + 3xC + 2xU + 15xH + 17xM\n≤ 130 ∗ 60\nAvailability Test Dev. 3 :\n5xI + 1xE + 3xC + 2xU + 9xH + 2xM\n≤ 100 ∗ 60\nMax int modem demand :\nxI\n≤ 2000\nMax ext modem demand :\nxE\n≤ 1500\nMax circuit demand :\nxC\n≤ 1800\nMax USB memory demand :\nxU\n≤ 1200\nMax hard disk demand :\nxH\n≤ 1000\nMax memory demand :\nxM\n≤ 1000\nxI , xE , xC , xU , xH , xM\n≥ 0.\nb) (10 points) Excel submission Write a spreadsheet for the problem and solve the problem\nusing Excel Solver, following the guidelines given in the Excel Workbook that comes with\nthis problem set. (Hint: the optimal value is $102986.7 .)\nc) Use the Excel spreadsheet to answer the following questions:\n(i) (4 points) What is the value of an additional minute of time per week on test device\n1? Test device 2? Test device 3? Should Watts Electronics add more test device time?\nIf so, on which equipment?\nSolution.\nIn the optimal solution, there constraint on time for device is non\nbinding as not all of the available time is used; therefore, there is no value in additional\nhours for device 3. However, for device 1, the solution changes by $211688-$211667\n= $21 when one additional minute is allowed, indicating an additional minute on\ndevice 1 is worth $21. Similarily, when one additional minute of availability is added\nfor device 2, the solution changes by $211673-$211667 = $6; one additional minute\nis worth $6 (or $5.70 if not rounding).\n(ii) (4 points) Suppose that Watts Electronics is considering to increase the available time\nof test device 2 for the next week. What would be the increase in the profit if the\navailabile time increases to t for t = 131, 132, and 133. (Assume that there are still 130\nhours of test device 1 and 100 hours of test device 3.) The increase is the difference\nbetween the new profit and the profit from Part (a).\nSolution.\nThe increase in profit for t = 131, 132, 133 will be $344.69, $689.38,\nand $1034.07, respectively\n(iii) (4 points) Based on your answer to part (ii), what do you think will be the contribution\nif the availability time of test device 2 increases to 135? (Verify that you are correct.)\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\nᆰ\n⎭\n\nWhat is the formula for the optimum profit if the availability time increased by 130+t?\n(You may assume that t is between 1 and 10).\nSolution.\nThe increase in profit will be $1723.45; the formula for profit increase\nin this region of t will be $344.69*t.\n(iv) (4 points) Based on your formula in part (iii), what is the contribution if the availability\ntime of test device 2 increases to 150. Use Excel solver to see if the formula is correct.\nUse Excel solver to determine the maximum value of t for which your formula is correct\n(Be accurate to within an hour).\nSolution.\nThe formula predicts an increase of $6893.80; however, there is only\nan increase of $3693.10 in reality. The formula works for an increase of up to t=10\nhours.\n(v) (4 points) How would the optimal solution in Part (b) change if the labor costs increased\nto $18 per hour for test device 1, $13 per hour for test device 2, and $20 per hour for\ntest device 3?\nSolution.\nThe optimal profit then reduces to $211142.\n(vi) (5 points) Over what range of the labor cost for test device 3 will the optimal production-\nmix in Part (b) remain optimal? (Be accurate to within one dollar.)\nSolution.\nThe solution in part (b) is stable over all labor rates.\nd) (10 points) Write an algebraic formulation for the problem using the following notation:\n- m is the number of peripheral devices,\n- n is the number of test devices,\n- ai is the maximum availability time of test device i ( in hour),\nL\n- c\nis the labor cost per hour of test device i (in $),\ni\nM\n- cj is the material cost per unit for device j (in $),\n- rj is the revenue cost per unit for device j (in $),\n- ai is the maximum availability of material i,\n- bj is the maximum demand of device j,\n- qij is the amount of time in minute on test service i that is required in device j,\nSolution.\nLet xj indicate the number of units of device j for j = 1, . . . , m. Then, the\nproblem can be formulated as follows:\nm\nn\nm\n1 m\n\nM\nL\nmax\nrj - c\n-\nc\nxj\nj\ni qij\nj=1\ni=1\nm\nm\ns.t.\nqij xj ≤ ai ∗ 60 ∀i = 1, . . . , n,\n(Availability time for test device i)\nj=1\nxj ≤ bj ,\n∀j = 1, . . . , m, (Maximum demand for device j)\nxj ≥ 0,\n∀j = 1, . . . , m, (Nonnegative constraints).\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 2 – Group 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/12db753b56341c01a6781ae3b28de2f2_MIT15_053S13_ps2-1.pdf",
      "content": "Optimization Methods in Management Science\nMIT 15.053, Spring 2013\nProblem Set 2 (First Group of Students)\nStudents with first letter of surnames A-H\nDue: February 21 , 2013\nProblem Set Rules:\n1. Each student should hand in an individual problem set.\n2. Discussing problem sets with other students is permitted. Copying from another person\nor solution set is not permitted.\n3. Late assignments will not be accepted. No exceptions.\n4. The non-Excel solution should be handed in at the beginning of class on the day the\nproblem set is due. The Excel solutions, if required, should be posted on the website by\nthe beginning of class on the day the problem set is due. Questions that require an Excel\nsubmission are marked with Excel submission . For Excel submission questions, only\nthe Excel spreadsheet will be graded.\nProblem 1\n(33 points total) Consider the following linear program:\nmax x1 + 2x2\ns.t.:\nConst 1\nx1 - x2 ≥\n-2\nConst 2\nx1 + x2 ≤ 4\nConst 3\nx1 ≤ 2.5\nConst 4\nx2 ≤ 3\nx1, x2 ≥ 0.\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n\n⎪\n⎪\n⎭\n(LP)\n(a) (5 points) Graph the feasible region of the LP. Is the feasible region unbounded?\n(b) (4 points) Are any of the above constraints redundant? If so, indicate which one(s). (For\nlarge linear programs, eliminating redundant constraints can speed up the solution of the\nlinear program.)\n(c) (4 points) Solve the LP using the graphical method. Explain your approach.\n(d) (4 points) Is there more then one optimal solution? If so give two different solutions. If\nnot, explain using the graphical method why not?\n(e) (9 points, 3 points each) Suppose we add the constraint 2x1 + x2 ≥ α to (LP). For which\nvalues of α:\n- is the constraint redundant?\n\n- the optimal solution found above is no longer optimal?\n- the problem becomes infeasible?\nTo answer these questions, you should use the graph of the feasible region drawn in Part\n(a).\n(f) (4 points) Replace the objective function x1 +2x2 with the objective function x1 + βx2, and\ncompute the values of β for which the point (2.5, 1.5) is optimal.\nProblem 2 1\n(38 points total) A company makes three lines of tires. Its four-ply biased tires produce $6 in\nprofit per tire; its fiberglass belted line $4 a tire; and its radials $8 a tire. Each type of tire\npasses through three manufacturing stages as a part of the entire production process.\nEach of the three process centers has the following hours of available production time per\nday:\nProcess\nModeling\nCuring\nAssembly\nHours\nThe time required in each process to produce one hundred tires of each line is as follows:\nTire\nHours per 100 units\nModeling\nCuring\nAssembly\nFour-ply\nFiberglass\nRadial\n(a) (5 points) Write a linear program to determine the optimum product mix for each day's\nproduction, assuming all tires are sold.\n(b) (10 points) Excel submission Solve the problem using the simplex algorithm, employing\nthe Excel spreadsheet given with this problem set. Make sure you understand the formu\nlation and the meaning of the variables, and fill in the missing coefficients of the tableau.\nThe spreadsheet that you submit should contain the sequence of tableaus that leads to the\noptimal tableau only. You will then use the same spreadsheet to help through the rest of\nProblem 2, but make sure you submit a spreadsheet containing the sequence of tableaus\nleading to the optimal tableau for the original data!\n(c) (8 points) Using the Excel spreadsheet to carry out the calculations, answer the following\nquestion:\n(1) What is the initial feasible solution? Give the value for all the decision variables and\nall the slack variables.\n(2) What is the optimal solution? Give its objective function value and the value of all the\ndecision variables.\n1This problem is based on Problem 6 of Applied Mathematical Programming, Chapter 2.\n\n(d) (15 points, 5 points each) Using the Excel spreadsheet from the previous point to recompute\nthe optimal solution of the LP, answer the following questions:\n(i) Suppose we increase the number of modeling hours per day from 12 to 13. How much\ndoes the profit increase? (Comment: This is the shadow price of the constraint on the\nmodeling hours. Read the tutorial on \"Sensitivity Analysis in 2 Dimensions\" to learn\nmore about shadow prices.)\n(ii) What would be the increase in the profit if we increase the number of assembly hours\nper day from 16 to 17 (Assume that the number of modeling hours per day is 12. )\n(iii) (Extra credit) Consider the answer to the previous two questions. What relation\nship do you observe between the shadow price of a constraint and the value of the\ncorresponding slack variable in the optimal solution?\nProblem 3 (First group of students)2\n(34 points total) Charles Watts Electronics manufactures the following six peripheral devices\nused in computers specially designed for jet fighter planes: internal modems, external modems,\ngraphics circuit boards, USB memory stick, hard disk drives, and memory expansion boards.\nEach of these technical products requires time, in minutes, on three types of electronic testing\nequipment as shown in the following table:\nInternal\nExternal\nCircuit\nUSB\nHard\nMemory\nModem\nModem\nBoard\nStick\nDrives\nBoards\nTest device 1\nTest device 2\nTest device 3\nThe first two test devices are available 130 hours per week. The third (device 3) requires\nmore preventive maintenance and may be used only 100 hours each week. Watts Electronics\nbelieves that it cannot sell more than 2000, 1500, 1800, 1200, 1000, 1000 units of each device,\nrespectively. Thus, it does not want to produce more than these units. The table that follows\nsummarizes the revenues and material costs for each product:\nRevenue per\nMaterial Cost\nDevice\nunit sold ($)\nper unit ($)\nInternal modem\nExternal modem\nCircuit board\nUSB memory stick\nHard disk drive\nMemory expansion board\nIn addition, variable labor costs are $16 per hour for test device 1, $12 per hour for test device\n2, and $18 per hour for test device 3. Watts Electronics wants to maximize its profits. This\n2This problem is based on Problem B.29 of Operations Management by Heizer and Render (2010).\n\nproblem can be formulated as follows:\n\n(\n(\n+\n200 - 35 - (7/60)16 - (2/60)12 - (5/60)18\nmax\nxI\n120 - 25 - (3/60)16 - (5/60)12 - (1/60)18 +\nxC\nxU\nxE(\n(\n180 - 40 - (12/60)16 - (3/60)12 - (3/60)18\n130 - 45 - (6/60)16 - (2/60)12 - (2/60)18\n(\n+\n+\n430 - 170 - (18/60)16 - (15/60)12 - (9/60)18\nxM 260 - 60 - (17/60)16 - (17/60)12 - (2/60)18\ns.t.:\nAvailability Test Dev. 1 :\n7xI + 3xE + 12xC + 6xU + 18xH + 17xM\n≤ 130 ∗ 60\nAvailability Test Dev. 2 :\n2xI + 5xE + 3xC + 2xU + 15xH + 17xM\n≤ 130 ∗ 60\nAvailability Test Dev. 3 :\n5xI + 1xE + 3xC + 2xU + 9xH + 2xM\n≤ 100 ∗ 60\nMax int modem demand :\nxI\n≤ 2000\nMax ext modem demand :\nxE\n≤ 1500\nMax circuit demand :\nxC\n≤ 1800\nMax USB memory demand :\nxU\n≤ 1200\n(\nMax hard disk demand :\nxH\n≤ 1000\nMax memory demand :\nxM\n≤ 1000\nxI , xE , xC , xU , xH , xM\n≥ 0.\nIn this problem, there are six decision variables that indicate the number of devices as:\nxI = the number of internal modems\nxE = the number of external modems\nxC = the number of circuit boards\nxU = the number of USB memory sticks\nxH = the number of hard disk drives\nxM = the number of memory expansion boards\nYou are given an Excel spreadsheet that solves the above problem. Suppose that the labor\ncosts are changed to $18 per hour for test device 1, $15 per hour for test device 2, and $12 per\nhour for test device 3. In addition, Watts Electronics considers producing external hard drives,\nwith $127 of revenue per unit, and $50 of the material cost per unit. All external hard drives\nwill be sold. The required time, in minutes, on the three testing devices are given as follows:\nExternal hard drives\nTest device 1\nTest device 2\nTest device 3\nAll other data remains unchanged. Update the Excel spreadsheet and answer the following\nquestions:\n(a) (10 points) What is the optimal profit and the optimal production-mix?\n(b) (5 points) As you see from the solution in Part (a), no external hard drives is produced in\nthe optimal production-mix. What is the minimum increase in the revenue of external hard\ndrive (in terms of $ per unit), before they will be included in the optimal production mix?\n(Be accurate within one dollar.)\n+\nxH\n\n⎫\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n⎬\n\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n\n⎪\n\n⎪\n⎪\n\n⎪\nᆰ\n⎭\n\n(c) (6 points) Suppose that Watts Electronics is considering increasing the available time of\ntest device 2 for the next week. What would be the increase in the profit over the solution\nin Part (a) if the available time increases to 130 + t for t = 1, 2, and 3. (Assume that there\nare still 130 hours of test device 1 and 100 hours of test device 3.)\n(d) (8 points) Based on your answer in Part (c), estimate the optimal profit if the availability\ntime of test device 2 increases to 140. (Use Excel solver to check if your estimate is correct.)\nWhat is the formula for the optimum profit if the availability time increased by 130 + t?\n(You may assume that t is between 1 and 10).\n(e) (5 points) Based on your formula in part (d), what is the contribution (the increase in\noptimal profit) if the availability time of test device 2 increases to 150. Use Excel solver\nto see if your estimation is correct (it won't). Use Excel solver to determine the maximum\nvalue of t for which your formula is correct (Be accurate to within an hour).\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 2 – Group 2",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/eec4cc5780e93008baaaa7ce7fb1aee1_MIT15_053S13_ps2-2.pdf",
      "content": "Optimization Methods in Management Science\nMIT 15.053, Spring 2013\nProblem Set 2 (Second Group of Students)\nStudents with first letter of surnames I-Z\nDue: February 21 , 2013\nProblem Set Rules:\n1. Each student should hand in an individual problem set.\n2. Discussing problem sets with other students is permitted. Copying from another person\nor solution set is not permitted.\n3. Late assignments will not be accepted. No exceptions.\n4. The non-Excel solution should be handed in at the beginning of class on the day the\nproblem set is due. The Excel solutions, if required, should be posted on the website by\nthe beginning of class on the day the problem set is due. Questions that require an Excel\nsubmission are marked with Excel submission . For Excel submission questions, only\nthe Excel spreadsheet will be graded.\nProblem 1\n(33 points total) Consider the following linear program:\nmax x1 + 2x2\ns.t.:\nConst 1\nx1 - x2 ≥\n-2\nConst 2\nx1 + x2 ≤ 4\nConst 3\nx1 ≤ 2.5\nConst 4\nx2 ≤ 3\nx1, x2 ≥ 0.\n⎫\n⎪\n⎪\n⎪\n⎬\n⎪\n\n⎪\n⎪\n⎭\n(LP)\n(a) (5 points) Graph the feasible region of the LP. Is the feasible region unbounded?\n(b) (4 points) Are any of the above constraints redundant? If so, indicate which one(s). (For\nlarge linear programs, eliminating redundant constraints can speed up the solution of the\nlinear program.)\n(c) (4 points) Solve the LP using the graphical method. Explain your approach.\n(d) (4 points) Is there more then one optimal solution? If so give two different solutions. If\nnot, explain using the graphical method why not?\n(e) (9 points, 3 points each) Suppose we add the constraint 2x1 + x2 ≥ α to ??. For which\nvalues of α:\n- is the constraint redundant?\n\n- the optimal solution found above is no longer optimal?\n- the problem becomes infeasible?\nTo answer these questions, you should use the graph of the feasible region drawn in Part\n(a).\n(f) (4 points) Replace the objective function x1 +2x2 with the objective function x1 + βx2, and\ncompute the values of β for which the point (2.5, 1.5) is optimal.\nProblem 2 1\n(38 points total) A company makes three lines of tires. Its four-ply biased tires produce $6 in\nprofit per tire; its fiberglass belted line $4 a tire; and its radials $8 a tire. Each type of tire\npasses through three manufacturing stages as a part of the entire production process.\nEach of the three process centers has the following hours of available production time per\nday:\nProcess\nModeling\nCuring\nAssembly\nHours\nThe time required in each process to produce one hundred tires of each line is as follows:\nTire\nHours per 100 units\nModeling\nCuring\nAssembly\nFour-ply\nFiberglass\nRadial\n(a) (5 points) Write a linear program to determine the optimum product mix for each day's\nproduction, assuming all tires are sold.\n(b) (10 points) Excel submission Solve the problem using the simplex algorithm, employing\nthe Excel spreadsheet given with this problem set. Make sure you understand the formu\nlation and the meaning of the variables, and fill in the missing coefficients of the tableau.\nThe spreadsheet that you submit should contain the sequence of tableaus that leads to the\noptimal tableau only. You will then use the same spreadsheet to help through the rest of\nProblem 2, but make sure you submit a spreadsheet containing the sequence of tableaus\nleading to the optimal tableau for the original data!\n(c) (8 points) Using the Excel spreadsheet to carry out the calculations, answer the following\nquestion:\n(1) What is the initial feasible solution? Give the value for all the decision variables and\nall the slack variables.\n(2) What is the optimal solution? Give its objective function value and the value of all the\ndecision variables.\n1This problem is based on Problem 6 of Applied Mathematical Programming, Chapter 2.\n\n(d) (15 points, 5 points each) Using the Excel spreadsheet from the previous point to recompute\nthe optimal solution of the LP, answer the following questions:\n(i) Suppose we increase the number of modeling hours per day from 12 to 13. How much\ndoes the profit increase? (Comment: This is the shadow price of the constraint on the\nmodeling hours. Read the tutorial on \"Sensitivity Analysis in 2 Dimensions\" to learn\nmore about shadow prices.)\n(ii) What would be the increase in the profit if we increase the number of assembly hours\nper day from 16 to 17 (Assume that the number of modeling hours per day is 12. )\n(iii) (Extra credit) Consider the answer to the previous two questions. What relation\nship do you observe between the shadow price of a constraint and the value of the\ncorresponding slack variable in the optimal solution?\nProblem 3 (Second group of students) 2\n(34 points total) A corporation that produces gasoline and oil specialty additives purchases four\ngrades of petroleum distillates, A, B, C, and D. The company then combines the four distillates\nto make three mixtures (Deluxe, Standard, and Economy) according to specifications of the\nmaximum and/or minimum percentages of grades A, C, or D in each blend, given in Table ??.\nMixture\nMax %\nallowed for\nAdditive A\nMin %\nallowed for\nAdditive C\nMax %\nallowed for\nAdditive D\nSelling\nprice\n$/gallon\nDeluxe\nStandard\nEconomy\n60%\n15%\n-\n20%\n60%\n50%\n10%\n25%\n45%\n7.9\n6.9\n5.0\nTable 1: Specifications of the three mixtures.\nSupplies of the three basic additives and their costs are given in Table ??.\nMax quantity\navailable\nCost\nDistillate\nper day (gals)\n$/gallon\nA\n0.60\nB\n0.52\nC\n0.48\nD\n0.35\nTable 2: Supplies and costs of petroleum grades.\nWe write a linear program to determine the production policy that maximizes profits. To do\nthat, we define twelve decision variables to indicate the gallons of each of the basic petroleum\ngrades (additives) that contribute to the production of the three mixtures. We use the following\nlabels: xAD indicates the quantity of additive A that is used for production of mixture Deluxe,\nxAS indicates the quantity of additive A that is used for production of mixture Standard, xAE\nindicates the quantity of additive A that is used for production of mixture Economy. Similarly,\nThis problem is based on Problem 11 of Applied Mathematical Programming, Chapter 1.\n\nwe use xBD, xBS , xBE to label the quantity of additive B used in each of the three mixtures,\nxCD, xCS , xCE for additive C, and and xDD, xDS , xDE for additive D. The gallons of mixture\nDeluxe produced can be computed as xAD + xBD + xCD + xDD; similarly for mixture Standard\nand Economy. The objective function is the total profit, computed as revenues minus costs.\nThe problem can be formulated as\nmax\n7.3xAD + 7.38xBD + 7.42xCD + 7.55xDD\n6.3xAS + 6.38xBS + 6.42xCS + 6.55xDS\n4.4xAE + 4.48xBE + 4.52xCE + 4.65xDE\ns.t.:\nAvailability A :\nxAD + xAS + xAE\n≤ 4000\nAvailability B :\nxBD + xBS + xBE\n≤ 5000\nAvailability C :\nxCD + xCS + xCE\n≤ 3500\nAvailability D :\nxDD + xDS + xDE\n≤ 5500\nMixture D Add A :\n0.4xAD - 0.6xBD - 0.6xCD - 0.6xDD ≤ 0\nMixture D Add C :\n-0.2xAD - 0.2xBD + 0.8xCD - 0.2xDD ≥ 0\nMixture D Add D :\n-0.1xAD - 0.1xBD - 0.1xCD + 0.9xDD ≤ 0\nMixture S Add A :\n0.85xAS - 0.15xBS - 0.15xCS - 0.15xDS\n≤ 0\nMixture S Add C :\n-0.6xAS - 0.6xBS + 0.4xCS - 0.6xDS\n≥ 0\nMixture S Add D :\n-0.25xAS - 0.25xBS - 0.25xCS + 0.75xDS\n≤ 0\nMixture E Add C :\n-0.5xAE - 0.5xBE + 0.5xCE - 0.5xDE\n≥ 0\nMixture E Add D :\n-0.45xAE - 0.45xBE - 0.45xCE + 0.55xDE\n≤ 0\nxAD, xAS , xAE , xBD, xBS , xBE , xCD, xCS , xCE, xDD, xDS , xDE\n≥ 0.\nYou are given an Excel spreadsheet that solves this problem. Suppose that the selling prices\nare changed to $7.7 per gallon for Deluxe, $6.8 per gallon for Standard, and $4.9 per gallon\nfor Economy. In addition, the marketing department estimates that the demand for Deluxe\ndoes not exceed 12000 gallons, therefore the corporation does not want to produce more than\nthis quantity for Deluxe. Assume that all other data remains unchanged. Update the Excel\nspreadsheet and then answer the following questions:\n(a) (10 points) What is the optimal profit and the optimal production-mix?\n(b) (5 points) No mixture Economy is produced in the optimal solution. What would the\nminimum selling price need to be in order for Economy to be worth producing? (Be accurate\nto within 5 cents).\n(c) (6 points) Suppose that you can increase the selling price of Standard. What would be\nthe increase in the profit if the selling price of mixture Standard per gallon increases to\n6.8 + s for s = $ 0.05, $0.1, and $0.15 . (Assume that the selling price of mixtures Deluxe\nand Economy remain $7.7 and $4.9 per gallon, respectively.) The increase is the difference\nbetween the new profit and the profit from Part (a).\n(d) (8 points) Based on your answer in Part (c), estimate the profit if the selling price of mixture\nStandard increases to 7.2. What is the formula for the optimum profit if the selling price\nof Standard per gallon increased to $6.8 + s? (You may assume that s is between 0.05 and\n0.25).\n(e) (5 points) Based on your formula in part (d), estimate the contribution (the increase in\noptimal profit) if the selling price of Standard per gallon increases to 7.5. Use Excel solver\nto see if your estimation is correct.\n⎫\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎬\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎪\n⎭\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Behavioral economics",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/8131f0f5cf45de4b2cf77e0fc6cd50b8_MIT15_053S13_lec20-21.pdf",
      "content": "15.053/8 May 9 and 11, 2013\nWhy is elementary\nprobability so hard to understand?\n\nA top 10 list\n\n\"Misunderstanding of probability may be the greatest\nof all impediments to scientific literacy.\"\n\n-- Stephen J. Gould\n\"It is remarkable that a science which began with the\nconsideration of games of chance should have become\nthe most important object of human knowledge.\"\n\nPierre Simon Laplace\n\"This branch of mathematics [probability] is the only one, I\nbelieve, in which good writers frequently get results which\nare entirely erroneous.\"\n\n--Charles Pierce\nQuotes of the day\n\nBackground\nHarold Larnder Prize\n\n\"The Zen of probability\"\n\nA top 10-list: challenges and suggestions\n\n1. Probability does not work backwards.\nFrequentists vs Bayesians\n\nLaw of large numbers\n\n4 Image of a coin flip\nImage by MIT OpenCourseWare.\n\nExercise: Suppose we select 10 random numbers\nbetween 0 and 99. What is the probability that we\nget the following sequence:\n1. 1 in 100 billion\n2. 1 in 100 trillion\n3. 1 in 100 quadrillion\n4. 1 in 100 quintillion\n\nProbability does not work backwards\nWhat is the probability that someone would ever be\nborn with your exact DNA sequence?\n\nPhysicists have pointed out that if physical\nconstants were slightly different, there would be no\npossibility of life. Is this evidence that intelligent\nlife was a reason that the universe was created?\n\nProbability can be used to analyze the\npast. But it's very subtle and slippery.\nJohn Doe was accused of a murder in NYC. During\nhis trial, experts stated that there was a partial\nfingerprint on the murder weapon that matched\nJohn Doe's fingerprint.\nSuppose that there was less than a 1 in a million\nchance that a random person would be positive\nmatch with the partial fingerprint found on the\nmurder weapon.\nIs this extremely strong evidence that it was John\nDoe's fingerprint on the murder weapon?\n\n2. What would Bayes say (WWBS)?\nAssumptions most likely to lead to error\n(after learning information)\nevents are independent\nevents are equally likely\n\nTo help remember that these assumptions are often\nwrong: ask WWBS?\n\nSimulating a probability of 1/3 with a coin.\nSuppose you want to select A or B with equal probability.\nFlip a coin.\nSuppose you want to select A or B or C with equal\nprobability.\nFlip a coin twice, and repeat if necessary.\n\nH - H\nA\nH - T\nB\nT - H\nC\nT - T\nRepeat\nProb(H-H | Not T-T) = 1/3\n\n2. What would Bayes say (WWBS)?\n3 coin problem. Suppose you\nhave three coins.\n- coin with two heads\n- coin with two tails\n- coin with one head and\none tail\n\n2. What would Bayes say (WWBS)?\nSuppose you choose one at random and observe one\nof its sides. If you observe a head, what is the\nprobability that it is the two headed coin?\n1. 1/3\n2. 1/2\n3. 2/3\n\n3. Its large! it's the law!\nTake advantage of the law of large numbers, and\nthen turn probability analysis into counting.\n3-coin problem.\n- Label the coins A, B, C\n- Label the sides 1 and 2\n- Select a random coin and\nside, 6 million times.\n- How many times does a\nhead come up?\n- Of these, how many are due\nto the 2- headed coin?\n- 2/3\nA1\nA2\nB1\nB2\nC1\nC2\n1 MM\n1 MM\n1 MM\n\n4. Context and hidden assumptions\nIf I toss a fair coin 50 times and it comes up heads\neach time, what is the probability that it comes up\nheads the next time?\n\n1. 1/2\n\n2. Something else\n\nThe coin example, from a different angle\nSuppose that there is a 99.9999% chance that a coin\nis fair, and a 1 in a million chance that the coin is\ntwo-headed.\n\nIf the first 50 tosses of the coin are heads, what is\nthe probability that it is the 2-headed coin.\n\n= 99.99999991%\n\n4. Context and hidden assumptions\nA parent with two children reveals that at least one\nof them is a boy. What is the probability that both\nare boys?\n\n1. 1/3\n\n2. 1/2\n\n3. something else\n\nA mental experiment\n4 million parents of two children are selected at\nrandom.\nWe list the oldest child first.\n- 1 million B-B\n- 1 million B-G\n- 1 million G-B\n- 1 million G-G\nProb(B-B | at least one boy) = 1 / 3\n\nBut, what was hidden?\nA parent with two children reveals that at least one\nof them is a boy.\n\n- 1 million B-B\n- 1 million B-G\n- 1 million G-B\n- 1 million G-G\nIn the first three cases, the\nparent reveals that at least\none child is a boy.\nWhat does a parent of two\ngirls reveal?\n\n5. The sound of the dog not barking\n\nBob was bragging about his high school football\nteam. He claimed that it was ranked as one of the\ntop 25 high school football teams in Texas.\n\nWhat is the probability that it was one of the top 10\nhigh school football teams?\n\nExamples of advertising claims\n\"Easy-Off has 33% more cleaning power than\nanother popular brand.\"\n\"Special Morning--33% more nutrition.\"\n\"Wonder Bread helps build strong bodies 12 ways.\"\n\nThe Monte Hall Problem\n1. You pick door number 1.\n2. Monte Hall reveals a goat behind door number 3.\n3. Should you switch to door number 2?\n- About the past\n- Conditional probabilities\n- Hidden assumptions\n- Depends on what\nMonte Hall says and\ndoesn't say.\nGoat image: public domain\n\nSimulating Monte Hall 6 MM times.\nYou pick door number 1.\nLet's look behind\ndoor number 2.\nLet's look behind\ndoor number 3.\nLet's look behind\n...\n\n2 million times\n\n2 million times\n\n2 million times\nGoat and car images: public domain\n\n6. Simple Heuristics\nWe employ heuristics to develop answers quickly.\n\nThese are rules of thumb.\n\nAs a rule of thumb, these heuristics often work\nquite well.\n\nAlbert and the room lottery\nIn college, we had a lottery for choosing rooms.\nThere were 75 persons and 75 rooms\n#s 1 to 75 were put into a hat.\nEach person drew a number\nPersons selected rooms in the order of the\nnumber they drew, with \"1\" going first.\n\nWhy is elementary probability so hard?\n1.\nProbability does not work backwards?\n2.\nWhat would Bayes say (WWBS)?\n3.\nIt's large, it's the law?\n4.\nContext and hidden assumptions\n5.\nThe sound of the dog not barking\n6.\nSimple heuristics\n15.053 and 15.058\n\n6. The birthday paradox\nSuppose that there are 12 persons in a room.\nWhich is more likely:\n1. At least two of the twelve have the same\nbirthday?\n2. All twelve were born in different months.\n\nConsider the first three persons.\n- Prob(birthday match) < 1%\n- Prob(3 different months) > 75%\n\nConsider all twelve persons.\n- Prob(birthday match) ~ 1/6\n- Prob(12 different months) <\n\n18,000\n\nBirthday problem\n2 persons\n1 link\n3 persons\n3 links\n4 persons\n6 links\n12 persons\n66 links\n16 persons\n120 links\n\n6. The law of small numbers\nKidney cancer incidence study\n3,141 counties in U.S.\n\nCounties with lowest incidence of kidney cancer\nrural\nsparsely populated\ntraditionally Republican states\n\nWhat is the explanation?\n\n6. Simple heuristics: the law of small\nnumbers\nA certain town is served by two hospitals. In the larger hospital\nabout 45 babies are born each day, and in the smaller hospital\nabout 15 babies are born each day. For a period of 1 year, each\nhospital recorded the days on which more than 60% of the babies\nborn were boys. Which hospital do you think recorded more such\ndays?\n\n1.\nThe larger hospital\n2.\nThe smaller hospital\n3.\nAbout the same (that is, within 5% of each other)\n\n6. The law of VERY small numbers\n(not in Kahneman's book)\nFiring decisions are often based on a single\nmistake\n\nWe often like or dislike someone based on their\nphysical similarity to someone whom we like or\ndislike\n\nWe make conclusions about groups of people\nbased on the actions of very few of them.\n\nThe cancer study again\nOne would expect small counties to have larger\nvariation.\n\nThe counties with the lowest incidence will be\nsmall counties.\n\nThe counties with the highest incidence will be\nsmall counties\n\n7. Segal's law\n\"A man with a watch knows what time it is. A man\nwith two watches is never sure.\"\nCorollary. A man with a watch refuses to believe the\ntime given by a different watch.\nWYSIATI: What you see is all there is.\n- General concept (in Thinking Fast and Slow)\n- Hindsight bias\n- Bias towards illusion of understanding\n- Premonitions and intuitions about the past\n\nThe Monte Hall Problem again\nSuppose Monte Hall revealed all but door number 35\n(out of 50). Would you want to switch?\nPublic domain image\n\n8. Patterns or randomness?\nRecognizing randomness\n\nRecognizing patterns\nThe gender of 6 babies will be observed in the\nhospital. Which of the following three are more\nlikely to be observed.\n1. B B B G G G\n2. G G G G G G\n3. B G B B G B\n\nDoes uniform randomness look this?\nA\n\nOr this? or neither?\nB\n1.\nA\n2.\nB\n3.\nNeither\n\nWhich is generated uniformly at random?\n0 1 0 0 1 0 1 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0\n1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 0 1 1 0 1 0 1 0 0 0 0 1 0 1 1 1 0 1 1 0 0 0 1 1 1 0 0 1 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1\nThe yellow segments are sequences of 0's.\nThe blue segments are sequences of 1's.\n1. Sequence A\n2. Sequence B\n3. Sequence C\n4. A, B, and C.\nA\nB\n0 0 1 0 0 1 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 0 1 0 0 0 1 0 0 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 1 0\nC\n\nStreaks in sports\nHot hand in sport\n- nearly universally believed\n- basketball players have streaks in which they\nare more likely to make baskets\n- statistical analysis indicates that this is\nalmost entirely an illusion.\nOptical illusions:\nstart at 8:00\nColors on a 2-dimensional\npicture or video..\nhttp://www.lottolab.org/illusiondemos/Demo%2014.html\n\nCourtesy of R. Beau Lotto. Used with permission.\n\n10 11 12 13 14 15 16 17 18 19 20\nIsraeli airforce flight instructors\n\nRegression to the mean\nThe dice example, but in reverse order\n10 11 12 13 14 15 16 17 18 19 20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n\n9. Prospect theory and risk assessment\nProblem 1. Which do you choose?\n1. $900 for sure or\n2. 90% chance to get $1000.\nProblem 2. Which do you choose?\n1. Lose $900 for sure or\n2. 90% chance to lose $1000.\n\n10. Interesting connections help.\n- Birthday paradox and coincidences.\n\n10. Interesting connections help.\n- Birthday paradox and coincidences.\n\n- Views of randomness, streaks in sports,\nand gambler's fallacy\n\n10. Interesting connections help.\n- Birthday paradox and coincidences.\n\n- Views of randomness, streaks in sports,\nand gambler's fallacy\n\n- Seeing patterns and superstitions.\n\nSummary\nElementary probability for many reasons\nWe use it to analyze past events\nConditional probability is hard to intuit\nHidden assumptions\n\"Reasonable\" perspectives lead to different conclusions\nOur natural mental heuristics sometimes lead us astray\n\nWays to help out\nUse the law of large numbers to give guidance on\nconditional probability\nVisualizations\nInteresting connections\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Discussion of projects; slack variables vs. artificial variables",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/0e12054262ebd006b30149ea0ba1ccb8_MIT15_053S13_lec9.pdf",
      "content": "15.053 March 7, 2013\nTeam Projects (plus more)\n\nQuotes of the Day\n\n\"For me, every day is a new thing. I approach each\nproject with a new insecurity, almost like the first\nproject I ever did. And I get the sweats. I go in and\nstart working, I'm not sure where I'm going. If I knew\nwhere I was going I wouldn't do it.\"\n\nFrank Gehry (Architect)\n\n\"Don't undertake a project unless it is manifestly\nimportant and nearly impossible.\"\n\nEdwin Land\n\nOverview of Lecture\nComments on upcoming midterm\n\nSlack variables vs artificial variables.\n\nInformation on projects\n\nTwo presentations of projects\n- Brian Chang (from 15.066, Systems opt.)\n- Noa Ben\n(from 15.066, Systems opt.)\n\nMidterm 1\nSame topics as the review topics for quizzes 1 to 4\n\nComparable level of difficulty as the quizzes\n\nOffice hours Monday\n\nOptional review session Monday, March 11,\n7 PM to 8 PM. E51-145.\n- covers material requested by students\n- answers questions from students\n\nSlack variables vs. artificial variables\nSlack variables: added when the original problem\nhas a \"≤\" constraint.\nOriginal:\n\nx1 + 2 x2 + x3 - x4 ≤ 5 ;\nAfter slack:\nx1 + 2 x2 + x3 - x4 + s1 = 5 ;\ns1 ≥ 0\nOriginal:\n\nD + E ≤ 32\nAfter slack:\nD + E + s2 = 32\ns2 ≥ 0\nNote: Slacks are (implicitly) part of the original problem.\ns2 = 32 - D - E is the \"unsatisfied demand for e-readers.\"\n\nSlack variables vs. artificial variables\nArtificial variables: added to a \"=\" constraint of the\noriginal problem in creating a Phase 1 problem.\nProblem P\nProblem P*\nNote: Artificial variables were created so that they could be\npart of an initial bfs for P*. (Simplex needs an initial bfs).\nThe goal of Phase 1 is to find a solution x*, y* with y* = 0.\n\nSlack variables vs. artificial variables\nD + E ≤ 32\n\nD + E + s2 = 32\n\ns2 ≥ 0\nIt is OK for slack variables to be\npositive.\ne.g. D = 25 and E = 5 and s2 = 7.\nThe \"≤\" constraint is satisfied.\nProblem P*\nP* and P are\ndifferent problems\nIt is OK for artificial variables to be positive in P*, but not P.\ne.g. x1 = x2 = x3= 0, y1 = 4, y2 = 1 is feasible for P*.\nBut it is infeasible for P.\n\nTeam Projects\ndetails are available on Stellar\n3 or 4 person teams\nProject that applies optimization in practice\n- modeling\n- data collection\n- optimization and analysis\nWritten presentation\n4 to 6 pages\nOral presentation:\n\n15 minutes.\n\nSample (very challenging) topics\nSchool bus scheduling\nOptimization in radiation\ntherapy\nExam scheduling at MIT\nor elsewhere\nAssigning K-12\nstudents to public\nschools.\nPortfolio optimization\nScheduling residents in\nhospitals\nOptimal location of cell\nphone towers\nMeal selection (and diet)\nproblems.\nOptimal strategies for\nsports teams\nOptimal location of wind\nturbines.\nOptimal pricing\nproblems.\nOptimal inventory\ncontrol.\nOptimal truck routing.\n\nTeam Projects: Objectives\nIdentify practical applications for concepts learned in\nclass\nConduct analysis while leveraging course material\nLearn about assorted real-life situations where\noptimization methods can be used\nUtilize a different approach for learning and mastering\n15.053 concepts\nLearn about applying optimization in practice, including\nlearning the difficulties that may be associated with\nfinding the right data and forming a useful model.\n\nTeam Projects: Time frames\n3 or 4 person teams formed by March 13\n- Students can select members of their teams.\n- We will assign students not on a team.\nBrief description of project is due on March 21\nIntermediate deliverables\nProject report\ndue May 7\nTeam presentations. May 13 to 17\n\nAdditional support: OR Consultants\nThere are five OR Center Ph.D. students who\nhave agreed to serve as internal consultants for\nthe projects.\n\nThey will provide limited guidance where needed.\n- suggestions on where to get data\n- advice on modeling\n- suggestions on software\n\nIf you would like to meet with one of them, let us\nknow.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Formulations of linear and non-linear programs",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/d244065e2dce13f23254035a14586d6c_MIT15_053S13_lec2.pdf",
      "content": "15.053/8 February 7, 2013\nMore Linear and Non-linear Programming Models\n- Optimal meal selection at McDonalds.\n- A (financial) portfolio selection problem.\n- Introduction to convex functions\n- Workforce scheduling.\n\nAnnouncements\nOptional recitations for 15.053/8 on February 8 :\n- formulations 11 AM\n- Excel Solver\n2 PM\nFuture (optional) recitations\nWritten affirmation on problem sets\n\nOverview of Lecture\nGoals\n- get practice in recognizing and modeling linear\nconstraints and objectives\n\n- and non-linear objectives\n- to see a broader use of models in practice\nNote: Read tutorials 00, 01, 02, 03 on the website.\n00. Meet the characters\n01 LP formulations\n02. Algebraic formulations\n03. Excel Solver\n\nQuotes for today\n\n\"Reality is merely an illusion, albeit\na very persistent one.\"\n\nAlbert Einstein\n\n\"Everything should be made as\nsimple as possible, but not one bit\nsimpler.\"\n\nAlbert Einstein, (attributed)\n\nOverview on modeling\nModeling as a mathematical skill\n\nModeling as an art form\n\nApplications to diet problem, portfolio\noptimization, and workforce scheduling\n\nA simplified modeling process\nStart with a\nsimple model\nof the problem\nat hand.\n\nImproved\nmodel\nMake\nimprovements\nMake improvements\nuntil you have\nmade enough.\n\nQ1.\nWhat year are you?\n1. freshman\n2. sophomore\n3. junior\n4. senior\n5. grad student\n\nClicker Questions\n\nQ2. Are you taking 15.053 as\n1. part of the management science major (or\ndouble major)\n2. part of the management science minor\n3. an elective\n\nQ3.\nDo you own a clicker from Turning\nTechnologies.\n1. Yes\n2. No, but I was given one for this subject.\n\nSupersize me: 2004 documentary\nMorgan Spurlock: director and star\n30 Day diet of McDonald's food\nHis rules:\n- Eat everything on the menu at least once\n- Eat no food outside of McDonalds\n- Supersize a meal whenever offered, but only\nwhen offered.\nHe averaged 5000 calories a day\n\nResults\ngained 24.5 lbs\nsuffered depression, lethargy, headaches, and\nlow sex drive\nDay 21: heart palpitations. His internist asked\nhim to stop what he was doing.\nBright side\n- Oscar nomination for documentary\n- $20.6 million in box office\n- McDonalds dropped \"supersizing\"\nOther side: legitimate criticism of movie\n\nQuestion: what would be a good diet\nat McDonalds?\nSuppose that we wanted to design a good 1 week\ndiet at McDonalds. What would we do?\n\nWhat data would we need?\n\nDecision variables?\n\nMore on diet problem\nObjective function?\n\nConstraints?\n\nA simpler problem\nMinimize the cost of a meal\n- just a few choices listed\n- between 600 and 900 calories\n- less than 50% of daily sodium\n- fewer than 40% of the calories are from fat\n- at least 30 grams of protein.\n- fractional meals permitted.\n\nData from McDonalds\n(prices are approximate)\nCaesar Salad\nsmall\nHamburger\nBig Mac\nMcChicken\nwith Chicken French fries\nTotal Calories\nFat Calories\nProtein (grams)\nSodium (mg)\nCost\n$1.00\n$3.00\n$2.50\n$3.00\n$1.00\nsodium limit: 2300 mg per day.\n\nLP for McDonalds\nMinimize H + 3 B + 2.5 M + 3 C + R\nsubject to 250 H + 770 B + 360 M + 190 C + 230 R - F = 0\n600 ≤ F ≤ 900\n81 H + 360 B + 144 M + 45 C + 99 R - .4 F ≤ 0\n480 H + 1770 B + 800 M + 580 C + 160 R ≤ 1150\n31 H + 44 B + 14 M + 27 C + 3 R ≥ 30\nH, B, M, C, R ≥ 0\nOpt LP Solution: H = 1.13 B = .41 Cost = $2.37\nOpt IP Solution: H =1 R = 2 Cost = $3\n\nPortfolio optimization\nyou are managing a small ($500 million) fund of\nstocks of major companies.\n\nInformation:\n- can choose from 500 stocks\n- expected returns, variances and covariances\n\nSample rule:\n- no more than 2% of portfolio in any stock\n\nObjective: average return on the investment.\nBA\nXON\nGM\n12.7\n9.9\n11.8\nAverage annual rate of return\n(approx)\nSample investment.\nBA\nXON\nGM\n50%\n20%\n30%\nrate of return\n= .5 * 12.7 + .2 * 9.9 + .3 * 11.8\n= 11.87\nBA\nXON\nGM\n18.7\n12.2\n24.4\nStandard deviation of annual\nrate of return (approx)\nStocks are very risky!\n\nUse variance of portfolio as risk metric.\n\nBA\nXON\nGM\nBA\nXON\nGM\nCovariance matrix (approx)\nSample investment.\nBA\nXON\nGM\n50%\n20%\n30%\n\nx1 = .5\nx2 =.2\nx3 =.3\nx1 =.5\nx2 = .2\nx3 = .3\n\nUse variance to measure risk\n\nBA\nXON\nGM\nBA\nXON\nGM\nCovariance matrix (approx)\nSample investment.\nBA\nXON\nGM\n50%\n20%\n30%\nvariance = 350 × .52 + 150 × .22 + 600 × .32\n+ 2 × 50 × .5 × .2\n+ 2 × 100 × .3 × .5\n+ 2 × 30 × .2 × .3\n= 193.5\nstandard deviation = 13.9\nThe risk is almost as\nlow as XON but the\nreturn is far better.\nWhat is the intuition?\n\nFormulation\nmaximize\nreturn\n\nsubject to variance of portfolio ≤ specified amount\n\nproportion of stock i ≤ .02\n\nproportions ≥ 0\n\nOther considerations?\n\nfrom DMD, 15.060\nBA\nXON\nGM\nMCD\nPG\nSP\n12.7\n9.9\n11.8\n13.5\n13.5\n13.0\n\nBA\nXON\nGM\nMCD\nPG\nSP\nBA\n363.1\n47.1\n103.5\n179.9\n107.4\n110.7\nXON\n47.1\n144.8\n34.4\n78.9\n55.4\n79.0\nGM\n103.5\n34.4\n614.8\n174.9\n-95.6\n106.1\nMCD\n179.9\n78.9\n174.9\n470.5\n70.7\n150.1\nPG\n107.4\n55.4\n-95.6\n70.7\n475.6\n140.6\nSP\n110.7\n79.0\n106.1\n150.1\n140.6\n137.1\n\nThe optimal tradeoff curve\n12.0\n12.1\n12.2\n12.3\n12.4\n12.5\n12.6\n12.7\n12.8\n12.9\n13.0\n10.0\n10.5\n11.0\n11.5\n12.0\n12.5\n13.0\n13.5\nExpected Annual Return\nStandard Deviation\nEfficient Frontier\n\nTime for a mental break\nSome cartoons on science.\n\nNon-linear programs and convexity\nAn optimization problem with a single objective\nand multiple constraints.\n\nLinear programs are a special case.\n\nExamples of\nNonlinear Objective\nFunctions\nExamples of\nNonlinear Constraints\n\n1(\n)\nj\nj\nx\n\n(\n)\n13.76\nj\nj\nj\nCos e\nd\n\nj\nj\nx\n\n1(\n)\nj\nj\nx\nMin\n\n(\n)\nj\nj\nj\nCos e\nd\nMax\n\nj\nj\nx\nMin\n\nOn Nonlinear Programs\nIn general, nonlinear programs are incredibly\nhard to solve. Sometimes they are impossible to\nsolve.\n26 Find the right algorithm for the right problem\nBut they usually\ncan be solved if\nthe objective is\nto minimize a\nconvex function,\nand the\nconstraints are\nlinear.\n(c) USAIG. All rights reserved. This content is excluded from our Creative Commons\nlicense. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nConvex functions of one variable\nA function f(x) is convex if for all x and y, the\nline segment on the curve joining (x, f(x)) to\n(y, f(y)) lies on or above the curve.\nx\nf(x)\n\nNo\nYes No\nYes\nYes\nWhich functions are convex?\nf(x) = x2\nf(x) = x3 for x ≥ 0\nf(x) = x.5\nf(x) = |x|\nStep Function\nwhatever\nYes No\nNo\n\nAnd now, we return to linear\nprogramming.\n\nScheduling Postal Workers\nEach postal worker works for 5 consecutive days,\nfollowed by 2 days off, repeated weekly.\nDay\nMon\nTues\nWed Thurs Fri\nSat\nSun\nDemand\nMinimize the number of postal workers (for the\ntime being, we will permit fractional workers on\neach day.)\n\nFormulating as an LP\nDon't look ahead.\n\nLet's see if we can come up with what the\ndecision variables should be.\n\nDiscuss with your neighbor how one might\nformulate this problem as an LP.\n\nThe linear program\nDay\nMon\nTues\nWed Thurs Fri\nSat\nSun\nDemand\n\nThe linear program\nsubject to\nx1 + x4 + x5 + x6 + x7 ≥ 17 Mon.\nx1 + x2 + x5 + x6 + x7 ≥ 13 Tues.\nx1 + x2 + x3 + x6 + x7 ≥ 15 Wed.\nx1 + x2 + x3 + x4 + x7 ≥ 19 Thurs.\nx1 + x2 + x3 + x4 + x5 ≥ 14 Fri.\nx2 + x3 + x4 + x5 + x6 ≥ 16 Sat.\nx3 + x4 + x5 + x6 + x7 ≥ 11 Sun.\nxj ≥ 0 for j = 1 to 7\nMinimize\nz = x1 + x2 + x3 + x4 + x5 + x6 + x7\nDay\nMon\nTues\nWed Thurs Fri\nSat\nSun\nDemand\n\nOn the selection of decision variables\nA choice of decision variables that doesn't\nwork\n- Let yj be the number of workers on day j.\n- No. of Workers on day j is at least dj. (easy to\nformulate)\n- Each worker works 5 days on followed by 2 days off\n(hard).\nConclusion: sometimes the decision variables\nincorporate constraints of the problem.\n- Hard to do this well, but worth keeping in mind\n- We will see more of this in integer programming.\nMicrosoft(r)\nExcel\n\nA Modifications of the Model\nSuppose that there was a pay differential. The cost of\neach worker who works on day j is cj. The new\nobjective is to minimize the total cost.\n\nWhat is the objective coefficient for the shift that starts\non Monday for the new problem?\n1.\nc1\n2.\nc1 +c2 +c3 +c4 +c5\n3.\nc1 +c4 +c5 +c6 +c7\nMicrosoft(r)\nExcel\n\nA Different Modification of the Model\nSuppose that there is a penalty for understaffing and\npenalty for overstaffing. If you hire k too few workers\non day j, the penalty is 5 k2. If you hire k too many\nworkers on day j, then the penalty is k2. How can we\nmodel this?\nStep 1. Create new decision variables.\nLet ej = \"excess workers on day j\"\nLet di = \"deficit workers on day j\"\n\nx1 + x4 + x5 + x6 + x7 + d1 - e1 = 17\nx1 + x2 + x5 + x6 + x7 + d2 - e2 = 13\nx1 + x2 + x3 + x6 + x7 + d3 - e3 = 15\nx1 + x2 + x3 + x4 + x7 + d4 - e4 = 19\nx1 + x2 + x3 + x4 + x5 + d5 - e5 = 14\nx2 + x3 + x4 + x5 + x6 + d6 - e6 = 16\nx3 + x4 + x5 + x6 + x7 + d7 - e7 = 11\nxj ≥ 0, dj ≥ 0, ej ≥ 0 for j = 1 to 7\nMinimize\n\ni\ni\ni\ni\nd\ne\nWhat is wrong with this model, other than the fact that\nvariables should be required to be integer valued?\nModel 2\n\n1.\nThe constraints should have inequalities.\n2.\nThe constraints don't make sense.\n3.\nThe objective is incorrect. (Note: it is OK\nthat it is nonlinear)\n4.\nIt's possible that ej and dj are both positive.\n5.\nNothing is wrong.\nWhat is wrong with Model 2?\n\nMore Comments on Model 2.\nDifficulty: The feasible region permits feasible solutions that\ndo not correctly model our intended constraints. Let us call\nthese bad feasible solutions.\nThe good feasible solutions are ones in which d1 = 0 or e1 = 0\nor both. They correctly model the scenario.\n\nResolution: All optimal solutions are good.\nIllustration of why it works:\n10 + 10 + 0 + 0 + 0 + d1 - e1 = 17\n\ne1 = 4 and d1 = 1 is a bad feasible solution.\ne1 = 3 and d1 = 0 are good feasible solution.\n\nFor every bad feasible solution, there is a good feasible\nsolution whose objective is better.\n\nMore on the model\nSummary: the model permits too many\nfeasible solutions.\nAll of the optimal solutions are good.\nWe will see this technique more in this\nlecture, and in other lectures as well.\nMicrosoft(r)\nExcel\n\nOn the practicality of these models\nIn modeling in practice, one needs to capture a\nlot of reality (but not too much).\n\nWorkforce scheduling is typically much more\ncomplex.\n\nThese models are designed to help in thinking\nabout real workforce scheduling models.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Geometry and visualizations of linear programs",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/56f54ffad5796b9459b260c5138930c5_MIT15_053S13_lec3.pdf",
      "content": "15.053/8 February 12, 2013\nGeometry and visualizations of linear programs\n\n(c) Wikipedia User: 4C. License CC BY-SA. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nQuotes of the day\n\"You don't understand anything\nuntil you learn it more than one\nway.\"\n\nMarvin Minsky\n\n\"One finds limits by pushing\nthem.\"\n\nHerbert Simon\n\nOverview\nViews of linear programming\n- Geometry/Visualization\n- Algebra\n- Economic interpretations\n\nWhat does the feasible region of an LP\nlook like?\nThree 2-dimensional examples\n\nSome 3-dimensional LPs\nCourtesy of Wolfram Research, Inc. Used with permission. Source: Weisstein, Eric W.\n\"Convex Polyhedron.\" From MathWorld -- A Wolfram Web Resource.\n\nGoal of this Lecture: visualizing LPs in 2 and 3\ndimensions.\nWhat properties does the feasible region have?\n- convexity\n- corner points\nWhat properties does an optimal solution have?\nHow can one find the optimal solution:\n- the \"geometric method\"\n- The simplex method\nIntroduction to sensitivity analysis\n- What happens if the RHS changes?\n\nA Two Variable Linear Program\n(a variant of the DTC example)\nx, y 0\n2x + 3y 10\nx + 2y 6\nx + y 5\ny 3\nx 4\nz = 3x + 5y\nobjective\n(1)\n(2)\n(3)\n(4)\n(5)\n(6)\nConstraints\n\nFinding an optimal solution\nIntroduce yourself to your partner\n\nTry to find an optimal solution to the linear\nprogram, without looking ahead.\n\nInequalities\nx\ny\nA single linear inequality determines a unique\nhalf-plane\nx + 2y 6\n\nGraph the Constraints:\n2x+ 3y 10 (1)\nx 0 , y 0. (6)\nx\ny\n2x + 3y = 10\nGraphing the Feasible Region\n\nAdd the Constraint:\nx + 2y 6 (2)\nx\ny\nx + 2y = 6\n\nAdd the Constraint:\nx + y 5\nx\ny\nx + y = 5\nA constraint is\ncalled redundant\nif deleting the\nconstraint does\nnot increase the\nsize of the\nfeasible region.\n\"x + y = 5\"\nis redundant\n\nAdd the Constraints:\nx 4; y 3\nx\ny\nWe have now\ngraphed the\nfeasible\nregion.\n\nHow many constraints are redundant?\n1. One\n2. Two\n3. More than two\n\nx\ny\nThe geometrical method for optimizing 3x + 5y\nGraph points such that 3x + 5y = p\nfor various values of p.\n3x + 5y = 11\nChoose p maximal\n3x + 5y = 8\nIsocost lines\n\nx\ny\nFind the maximum value p such that there is a\nfeasible solution with 3x + 5y = p.\nMove the line with profit p parallel as much as\npossible.\n3x + 5y = 8\n3x + 5y = 11\n3x + 5y = 16\nThe optimal\nsolution\noccurs at a\ncorner point.\n\nAnother Problem\n\nMental Break\n\nTrivia about US\nPresidents\n\nDifferent types of LPs\nLPs that have an\noptimal solution.\nLPs with\nunbounded\nobjective. (For a\nmax problem this\nmeans unbounded\nfrom above.)\nInfeasible LP's:\nthat is, there is no\nfeasible solution.\nmax x\ns.t. x + y ≤ -1\nx ≥ 0, y ≥ 0\nmax x\ns.t. x + y ≤ 1\nx ≥ 0, y ≥ 0\nmax x\ns.t. x + y ≥ 1\nx ≥ 0, y ≥ 0\n\nTry to develop an LP with one or\ntwo variables for each of the\nfollowing three properties.\n\n1. it has no solution\n2. it has an optimal solution\n3. the solution is unbounded\n\nAny other types\nTheorem. If the feasible region is non-empty and\nbounded, then there is an optimal solution.\nThis is true when all of the inequalities are \"<=\nconstraints\", as opposed to \"< constraints\".\n\ne.g., the following problem has no optimum\n\nMaximize x\n\nsubject to 0 < x < 1\n\nx\ny\nConvex Sets\nA set S is convex if for every two points in the\nset, the line segment joining the points is also in\nthe set; that is,\np1\np2\nTheorem. The feasible\nregion of a linear program is\nconvex.\nif p1, p2 ∈ S, then so is (1 - λ)p1 + λp2 for λ ∈ [0,1].\n\nx\ny\nnot\nnot\nnot\nnot\nconvex\nconvex\nMore on Convexity\nconvex\nWhich of the following are\n?\nconvex\nconvex\nor not\nnot ?\n(c) source unknown. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nThe feasible region of a linear program\nis convex\nx\ny\n\nCorner Points\nA corner point (also called an extreme point) of\nthe feasible region is a point that is not the\nmidpoint of two other points of the feasible\nregion. (They are only defined for convex sets, to\nbe described later.)\nWhere are the\ncorner points of\nthis feasible\nregion?\n\nFact: a feasible LP region has a corner\npoint so long as it does not contain a line.\nRegion 1.\nNo corner point. Feasible region contains a line.\n\nRegion 2.\nTwo corner points. Unbounded feasible region\n\nRegion 3.\n\nFacts about corner points.\n\nIf every variable is non-negative, and if the feasible\nregion is non-empty, then there is a corner point.\n\nIn two dimensions, a corner point is at the\nintersection of two equality constraints.\n\nRegion 2.\nTwo corner points. Unbounded feasible region\n\nOptimality at corner points\nIf a feasible region has a corner point, and if it has an\noptimal solution, then there is an optimal solution that is a\ncorner point.\nExample 1:\nminimize x+y\nExample 2:\nmaximize y\nExample 3:\nmaximize y\n\nSuppose an LP has a feasible solution.\nWhich of the following is not possible?\n4. The LP has a corner point and an optimal\nsolution, but no corner point is optimal.\n1. The LP has no corner point.\n2. The LP has a corner point that is optimal.\n3. The LP has a corner point, but there is\nno optimal solution.\n\nTowards the simplex algorithm\nMore geometrical notions\n- edges and rays\n\nThen ... the simplex algorithm\n\nEdges of the feasible region\n\nIn two dimensions, an edge of the feasible region\nis one of the line segments making up the\nboundary of the feasible region. The endpoints of\nan edge are corner points.\n\n31 An edge\nAn edge\nIn two dimensions, it is\na (bounded) equality\nconstraint.\n\nEdges of the feasible region\n\nIn three dimensions, an edge of the feasible region is\none of the line segments making up the framework of\na polyhedron. The edges are where the faces intersect\neach other. A face is a flat region of the feasible\nregion.\n\nA face\n\nA face\nAn edge\nIn two\ndimensions it is a\nbounded\nintersection of\ntwo equality\nconstraints.\n\nExtreme Rays\nAn extreme ray is like an edge, but it starts\nat a corner point and goes on infinitely.\nx\ny\nTwo extreme\nrays.\n\nThe Simplex Method\nx\ny\nStart at any feasible corner point.\nMax z = 3 x + 5 y\n3 x + 5 y = 12\n\nIs it easy to\nfind a corner\npoint to start\nat?\nIn two dimensions it\nis pretty easy,\nespecially if the LP is\nalready graphed. But\nwith larger LPs, it is\nsurprisingly tricky.\n\nThe Simplex Method\nx\ny\nStart at any feasible corner point.\nFind an edge (or extreme ray) in which the objective\nvalue is continually improving. Go to the next corner\npoint. (If there is no such corner point, stop. The\nobjective is unbounded.)\nContinue until no adjacent corner point has a better\nobjective value.\nMax z = 3 x + 5 y\n3 x + 5 y = 19\n\nThe Simplex Method\nPentagonal prism\nNote: in three dimensions, the\n\"edges\" are the intersections of\ntwo constraints. The corner\npoints are the intersection of\nthree constraints.\n\nSo, one starts at a corner\npoint. At each iteration,\none looks for an adjacent\ncorner point that is\nbetter. And one stops\nwhen there is no\nimprovement.\nDoes this really work?\nYes. It's one of the\nnice (but rare) cases\nin optimization in\nwhich you can find\nthe global optimum by\nmaking local\nimprovements.\nCool !!\nBut, the\nalgorithm appears\nmore complicated\nwhen there are\nmore variables.\n\nSensitivity Analysis in 2 Dimensions\nWhat happens if the RHS of the\nconstraint 1 decreases from 40?\nx = 5 1/3 ; y = 7 1/3\nz = 43 1/3\n\nSensitivity Analysis in 2 Dimensions\nWhat happens if the RHS of the constraint 1\ndecreases from 40 to 40 - Δ?\nClaim: the optimal objective value decreases from\n43 1/3 to 43 1/3 - Δ/3 provided that Δ ≤ 16.\n\nWe say that the shadow price of Constraint 1 is 1/3,\nand that the allowable decrease in the RHS is 16.\nBut why should the optimal objective change in a\nlinear manner? And what causes the bound of 16?\n\nRHS = 36\nx = 6 ; y = 6\nz = 42\nIf the RHS changes only a\nlittle, then (usually) the\nstructure of the optimum\nsolution stays the same.\n\nRHS = 32\nx = 6 2/3 ; y = 4 2/3\nz = 40 2/3\nThe solution changes, but\nthe structure of the\nsolution stays the same.\n\nRHS = 28\nx = 7 1/3 ; y = 3 1/3\nz = 39 1/3\nThe solution changes, but\nthe structure of the\nsolution stays the same.\n\nRHS = 24\nx = 8 ; y = 2\nz = 38\nIf we decrease the RHS below\n24, then the intersection of the\ntwo lines has x > 8, and is\ninfeasible.\n\nSensitivity Analysis in 2 Dimensions\nWhat happens if the RHS of\nthe constraint 1 decreases\nto 40 - Δ?\n4 x + 8 y = 80 - 2Δ\n4 x + 2 y = 36\n6 y = 44 - 2Δ\ny = 7 1/3 - Δ/3\nx = (36 -2y)/4 = 5 1/3 + Δ/6\nz = 4x + 3y = 43 1/3 - Δ/3\n\n2-Dimensional LPs and\nSensitivity Analysis\nMita, an MIT\nBeaver\nAmit, an MIT Beaver\nHi, we have a tutorial\nfor you stored at the\nsubject web site. We\nhope to see you\nthere.\n\nIt's on sensitivity analysis\nin two dimensions. We\nknow that you'll find it\nuseful for doing the\nproblem set.\n\nThis concludes geometry and\nvisualization of LPs.\nNote for Thursday's lecture: please review\nhow to solve equations prior to lecture.\nNext lecture: the simplex method\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Integer programming formulations",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/aa983ed5875f13b3c8f4aa963a68e2b4_MIT15_053S13_lec11.pdf",
      "content": "15.053/8\n\nMarch 19, 2013\nInteger Programming Formulations 2\n\nreferences: IP Formulation Guide (on the website)\n\nTutorial on IP formulations.\n\nApplied Math Programming\n\nannouncement on meetings of teams with staff\n\nQuote of the Day\n\"What chiefly characterizes creative thinking from\nmore mundane forms are (i) willingness to accept\nvaguely defined problem statements and gradually\nstructure them, (ii) continuing preoccupation with\nproblems over a considerable period of time, and (iii)\nextensive background knowledge in relevant and\npotentially relevant areas.\"\n\n-- Herbert Simon\n\nOverview of today's lecture\nVery quick review of integer programming\nBuilding blocks for creating IP models\nLogical constraints\nNon-linear functions\nIP models that generalize the assignment\nproblem or transportation problem\nOther combinatorial problems modeled as IPs\n\nInteger Programs\n\nInteger programs: a linear program plus the\nadditional constraints that some or all of the\nvariables must be integer valued.\n\nWe also permit \"xj ∈{0,1},\" or equivalently,\n\"xj is binary\"\n\nThis is a shortcut for writing the constraints:\n\n0 ≤ xj ≤ 1 and xj integer.\n\n1 if prize i is selected\nLet\n0 otherwise\nix\n\nWrite Nooz's problem as an integer program.\nBudget: 14 IHTFP points.\nPrize\nPoints\nUtility\niPad\nserver\nBrass\nRat\nAu Bon\nPain\n6.041\ntutoring\n15.053\ndinner\nTrading for Profit (from last lecture)\n\nModeling logical constraints that\ninclude only two binary variables.\nModeling logical constraints with two\nvariables can be accomplished in two\nsteps:\nStep 1. Graph the feasible region as\nrestricted to the two variables.\nStep 2. Add linear equalities and or\ninequalities so that the feasible region of\nthe IP is the same as that given in Step 1.\n\nLogical Constraints 1\nx1 = 1 if iPad\nx5 = 1 if 6.041\nConstraint 1. If you\nselect the iPad, you\ncannot select 6.041\nx1\nx5\nMIP Constraint:\nx1 + x5 ≤ 1\n\nLogical Constraints 2\nx1 = 1 if iPad\nx2 = 1 if server\nConstraint 2. If Prize 1\nis selected then Prize 2\nmust be selected.\nx1\nx2\nMIP Constraint: x1 ≤ x2\n\nLogical Constraints 3\nx1 = 1 if iPad\nx2 = 1 if server\nConstraint 3. You must\nselect Prize 1 or Prize 2\nor both\nx2\nMIP Constraint:\nx1 + x2 ≥ 1\n\nOther logical constraints\nModeling logical\nconstraints that\ninvolve non-binary\nvariables is much\nharder. But we will\ntry to make it as\nsimple as possible.\n\nI volunteer to\nbe the judge\nof what's\nsimple.\nAnd I'll be\nthe judge of\nwhat's\npossible.\n\nBIG M Method for IP Formulations\nAssume that all variables are integer valued.\nAssume a bound u* on coefficients and variables;\n* e.g., xj ≤ 10,000 for all j.\n|aij| ≤ 10,000 for all i, j.\nChoose M really large so that for every constraint i,\n|ai1x1 + ai2 x2 + ... + ain xn| ≤ bi + M\n\nThat is, we will be able to satisfy any \"≤\" constraint by\nadding M to the RHS.\nAnd we can satisfy any \"≥\" constraint by subtracting M\nfrom the RHS.\n\nThe logical constraint \"x ≤ 2 or x ≥ 6\"\nWe formulate the logical constraint,\n\"x ≤ 2 or x ≥ 6\" as follows.\n\nChoose a binary variable w so that\nif w = 1, then x ≤ 2.\nif w = 0, then x ≥ 6.\nx ≤ 2 + M(1-w)\nx ≥ 6 - M w\nw ∈ {0,1}\nTo validate the formulation one needs\nto show: The logical constraints are\nequivalent to the IP constraints.\nIf w = 1, then x ≤ 2.\nIf w = 0, then x ≥ 6.\nSuppose that (x, w) is\nfeasible, for the IP.\n\nSuppose that x satisfies the logical constraints.\nIf x ≤ 2, then let w = 1.\nx ≤ 2\n\nand\nx ≥ 6 - M\nIf x ≥ 6,\nthen let w = 0.\nx ≤ 2 + M and\nx ≥ 6\nIn both cases, the IP constraints are satisfied.\nx ≤ 2 + M(1-w)\nx ≥ 6 - M w\nw ∈ {0,1}\nx ≤ 2 or x ≥ 6\nlogical constraint\nIP constraints\n\nModeling \"or constraints\"\nIf w = 1, then x1 + 2x2 ≥ 12\nIf w = 0, then 4x2 - 10x3 ≤ 1\nTherefore, the logical constraints are satisfied.\nSuppose that (x, w) is\nfeasible, for the IP.\nTo show: The logical constraints are\nequivalent to the IP constraints.\nSuppose that xi is\nbounded for all i.\nx1 + 2x2 ≥ 12 or\n4x2 - 10x3 ≤ 1.\nLogical constraints.\nx1 + 2x2 ≥ 12 - M(1-w)\n4x2 - 10x3 ≤ 1 + Mw.\nIP constraints.\nSuppose that M is very large.\n\nSuppose that x satisfies the logical constraints.\nTo show: The logical constraints are\nequivalent to the IP constraints.\nSuppose that xi is\nbounded for all i.\nx1 + 2x2 ≥ 12 or\n4x2 - 10x3 ≤ 1.\nLogical constraints.\nx1 + 2x2 ≥ 12 - M(1-w)\n4x2 - 10x3 ≤ 1 + Mw.\nIP constraints.\nSuppose that M is\nvery large.\nIf x1 + 2x2 ≥ 12,\nthen let w = 1\nx1 + 2x2 ≥ 12 AND\n4x2 - 10x3 ≤ 1 + M.\nElse 4x2 - 10x3 ≤ 1\nthen let w = 0\nx1 + 2x2 ≥ 12 - M AND\n4x2 - 10x3 ≤ 1.\nIn both cases, the IP constraints are satisfied.\n\nMental Break\n\nFixed charge problems\nSuppose that there is a linear cost of production,\nafter the process is set up.\n\nThere is a cost of setting up the production\nprocess.\n\nThe process is not set up unless there is\nproduction.\n\nThe Alchemist's Problem\nGold\nSilver\nBronze\nAvailable\nTA labor (days)\nlead (kilos)\npixie dust (grams)\nProfit ($)\nCost to set up\n$500\n$400\n$300\nZor is unable to get any of his reactions going without an\nexpensive set up.\nIn 1502, the alchemist Zor Primal has set up shop creating gold,\nsilver, and bronze medallions to celebrate the 10th anniversary of the\ndiscovery of America. His trainee alchemist (TA) makes the\nmedallions out of lead and pixie dust. Here is the data table.\n\nZor's problem with set up costs\nMaximize f1(x1) + f2(x2) + f3(x3)\nsubject to 2 x1 + 4 x2 + 5 x3 ≤ 100\n\n1 x1 + 1 x2 + 1 x3 ≤ 30\n10 x1 + 5 x2 + 2 x3 ≤ 204\nx1, x2 , x3 ≥ 0 integer\n\nThe IP Formulation\nMax -500 w1 + 52 x1 - 500 w2 + 30 x2 - 300 w3 + 20 x3\ns.t.\n2 x1 + 4 x2 + 5 x3 ≤ 100\n\n1 x1 + 1 x2 + 1 x3 ≤ 30\n10 x1 + 5 x2 + 2 x3 ≤ 204\nx1 ≤ M w1; x2 ≤ M w2; x3 ≤ M w3;\n\nx1, x2 , x3 ≥ 0 integer\n\nw1, w2, w3 ∈ {0,1}.\n\nThe IP formulation correctly models the fixed charges.\nTo show:\n1.\nIf x is feasible for the fixed charge problem, then (x, w) is\nfeasible for the IP (w is defined on the last slide) , and the\ncost in the IP matches the cost of the fixed charge problem.\n\n2.\nIf (x, w) is feasible for the IP, then x is feasible for the fixed\ncharge problem, and the IP cost is the same as the cost in\nthe fixed charge problem.\nSuppose that x is feasible for the fixed charge problem.\nIf xi ≥ 1, then let wi = 1. Otherwise wi = 0.\n\nThen (x, w) is feasible for the IP, and the\nobjective value for the IP is the same as for\nthe fixed charge problem.\n\nWe say that (x, w) is a sensible if the following is true for each i:\nif xi = 0, then wi = 0.\n\nRemark: if (x, w) is not sensible, then it cannot be optimal.\nx is clearly feasible for the fixed charge problem.\nConsider x1.\nIf x1 ≥ 1, then w1 = 1 and the cost is -500 + 52x1.\n\nIf x1 = 0, then w1 =0 and the cost is 0.\n\nThus, the cost of x1 is the same for both problems.\nSimilarly, the cost of x2 and x3 are the same.\nSuppose that (x, w) is feasible for the IP.\nClaim. If (x, w) is feasible for the IP and if it is also\nsensible, then x is feasible for the fixed charge\nproblem, and the IP cost is the same as the cost in\nthe fixed charge problem.\n\nO.K. Shoot.\nIt's not nice to say\n\"shoot\" to a turkey.\n\nI think that I\nam starting to\nget it. But I\nhave a few\nquestions that I\nwould like to ask.\n\nFirst of all, I'm\nreally unsure\nabout what\ncoefficient\nvalues to use.\nIt seems very\nconfusing.\nAll that really matters is that the\nnumber is sufficiently high so that\nfor any feasible x for the fixed\ncharge problem, one can obtain a\nfeasible w for the IP.\nThe constraint: \"xj ≤ 10 wj \"\nisn't correct because x1 is\npermitted to be greater than 10 in\nthe fixed charge problem.\nOn the other hand, the constraint\n\"xj ≤ 1000 wj \" is correct.\nHowever, larger coefficients can\nmake problems harder to solve.\nWe say more about this in two\nlectures.\nxj ≤ 30 wj for j = 1, 2, 3\n\nModeling piecewise linear functions.\ny = 2 x if 0 ≤ x ≤ 3\ny = 9 - x if 4 ≤ x ≤ 7\ny = -5 + x if 8 ≤ x ≤ 9\nAssume that x is\ninteger valued.\ncost\nx\nWe will create an IP formulation so that the variable\ny is correctly modeled.\n\nCreate new binary and integer variables.\ny = 2 x if 0 ≤ x ≤ 3\ny = 9 - x if 4 ≤ x ≤ 7\ny = -5 + x if 8 ≤ x ≤ 9\nx is integer valued.\ncost\nx\nIf the variables are defined as above, then\ny = 2x1 + (9w2 - x2) + ( - 5 w3 + x3)\n\nAdd constraints\n4w2 ≤ x2 ≤ 7 w2\nw2 ∈ {0, 1}\n0 ≤ x1 ≤ 3 w1\nw1 ∈ {0, 1}\n8w3 ≤ x3 ≤ 9 w3\nw3 ∈ {0, 1}\nDefinitions of the variables.\nConstraints\nIf (x, w) satisfies the definitions, then it also satisfies the constraints.\n\nIf (x, w) satisfies the constraints, then it also satisfies the definitions.\nx = x1 + x2 + x3\nxi integer ∀ i\nw1 + w2 + w3 = 1\nSuppose that 0 ≤ x ≤ 9, x integer.\n\nNot simple!\n\nDo you\nreally\nexpect\nstudents to\nlearn that?\nIt's not\nreally hard.\nIt's just\nclever. I\nlike that in a\nformulation.\n\nIt's another IP formulation\ntrick, and it's a very useful\none.\nBy the way, on the quiz\nand midterm, most of the\nformulation techniques\nwill be on a sheet of notes\nthat will be given to you.\n\nGraph Coloring\nThis is a map of the counties in Colorado. What is the fewest\nnumber of colors need to color all of the counties so that no\ncounties with a common border have the same color?\nPublic domain image.\n\nGraph Coloring AdamsAlamosaArapahoeArchuletaBacaBentBoulderChaffeeCheyenneClearCreekConejosCostillaCrowleyCusterDeltaDenverDoloresDouglasEagleElbertEl PasoFremontGarfieldGilpinGrandGunnisonHinsdaleHuerfanoJacksonJeffersonKiowaKit CarsonLakeLa PlataLarimerLas AnimasLincolnLoganMesaMineralMoffatMontezumaMontroseMorganOteroOurayParkPhillipsPitkinProwersPuebloRio BlancoRio GrandeRouttSaguacheSanJuanSan MiguelSedgwickSummitTellerWashingtonWeldYuma\nHere is a four coloring of the map.\n\nGraph Coloring Problem AdamsAlamosaArapahoeArchuletaBacaBentBoulderChaffeeCheyenneClearCreekConejosCostillaCrowleyCusterDeltaDenverDoloresDouglasEagleElbertEl PasoFremontGarfieldGilpinGrandGunnisonHinsdaleHuerfanoJacksonJeffersonKiowaKit CarsonLakeLa PlataLarimerLas AnimasLincolnLoganMesaMineralMoffatMontezumaMontroseMorganOteroOurayParkPhillipsPitkinProwersPuebloRio BlancoRio GrandeRouttSaguacheSanJuanSan MiguelSedgwickSummitTellerWashingtonWeldYuma\nExercise: write an integer program whose solution\ngives the minimum number of colors to color a map.\nG = (N, A)\nN = {1, 2, 3, ... n}\nset of counties\nA = set of arcs.\n(i, j) ∈ A if counties\ni and j are adjacent.\ny\nk =\n1 if color k is used\n0 if color k is not used\ni\ni\nii\nx\nik =\n1 if region i is given color k\n0 otherwise\ni\ni\ni\n\nThe Integer Programming Formulation\n1 if color k is used\ny\n\nk\n0 if color k is not used\n\nx\n\nif region i is given color k\nik\n\n0 otherwise\nMin\ns.t\ny k\nk\n\nxik x jk 1\nfor (i, j ) A and\nfor k 1 to 4\nxik y k\nfor i N and\nfor k 1 to 4\nx ik\nk\n\ni N\nxik {0,1}\ny k\nMinimize the number of colors.\nEach county is given a color.\nIf counties i and j share a common\nboundary, then they are not both\nassigned color k.\nIf county i is assigned color k, then\ncolor k is used.\n{0,1}\n\nAn Exam Scheduling Problem (coloring)\nThe University of Waterloo has to schedule 500 exams in 28\nexam periods so that there are no exam conflicts.\nG = (N, A)\nN = {1, 2, 3, ... n} set of exams. 28 periods.\nA = set of arcs.\n(i, j) ∈A if a person needs to take exam i and exam j.\n1 if exam i\n\nis assigned in period k\nx\n\nik\n\n0 otherwise\nx\nx\n1 for (i, j ) A and k [1, 28]\n\nik\njk\nEquivalently, can the exam conflict graph be colored with 28 colors?\n\nSummary\nIPs can model almost any combinatorial\noptimization problem.\n\nLots of transformation techniques.\n\nThe\ntechniques\nare really\nclever. Just\nlike me.\nNext lecture: how\nto solve integer\nprograms.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Integer programming formulations, again",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/80053298018fbaa72ced119401f8fa89_MIT15_053S13_lec14.pdf",
      "content": "15.053/8\n\nApril 9, 2013\nInteger Programming 5\n\n* Gomory cuts\n* Constraint generation\n* Formulations using set notations\n\n\"Mathematicians are like Frenchmen: whatever you\nsay to them, they translate into their own language,\nand forthwith it is something entirely different.\"\n\nJohann Wolfgang von Goethe\nQuote of the Day\n\nGomory Cuts\nGomory cuts is a general method for adding valid\ninequalities (also known as cuts) to all MIPs\n-\nGomory cuts are VERY useful to improve bounds.\n-\nGomory cuts are obtained from a single constraint of the\noptimal tableau for the LP relaxation.\n-\nAssume here that all variables must be integer valued.\nCase 1: All LHS coefficients are between 0 and 1.\n.2 x1 + .3 x2 + .3 x3 + .5 x4 + x5 = 1.8 (1)\nValid inequality (ignore contribution from x5) :\n.2 x1 + .3 x2 + .3 x3 + .5 x4 ≥ .8 (2)\n\nCase 2: LHS coefficients are ≥ 0.\nCase 2: all LHS coefficients are non-negative\n1.2 x1 + .3 x2 + 2.3 x3 + 2.5 x4 + x5 = 4.8 (1)\nValid inequality (focus on fractional parts):\n.2 x1 + . 3 x2 + .3 x3 + .5 x4 ≥ .8 (2)\nThe fractional part of\n\"1.2 x1 + .3 x2 + 2.3 x3 + 2.5 x4 + x5\"\nis the same as that of\n\".2 x1 + .3 x2 + .3 x3 + .5 x4\"\n\nGomory cuts: general case\nCase 3: General case\n1.2 x1 - 1.3 x2 - 2.4 x3 + 11.8 x4 + x5 = 2.9 (1)\nValid inequality: subtract (2) from (1):\n.2 x1 + . 7x2 + .6 x3 + .8 x4 ≥ .9 (3)\nRound down (be careful about negatives):\n1 x1 - 2 x2 - 3 x3 + 11 x4 + x5 ≤ 2 (2)\nThe coefficients of the valid inequality are:\n-\nfractional parts of (1)\n-\nnon-negative\n\nAnother Gomory Cut\nx1 + - 2.9 x2 + - 3.4 x3 + 2.7 x4 = 2.7 (1)\nRound down\nx1 + - 3 x2 + - 4 x3 + 2 x4 ≤ 2 (2)\nThen subtract (2) from (1) to get the Gomory cut\n.1 x2 + .6 x3 + .7 x4 ≥ .7 (3)\nNote: negative coefficients also get rounded down.\n\n✓\nx1\nx2\nx4\nx3\n1.6\n- 4.7\n-1.4\n3.2\n=\n9.4\nWhat is the Gomory Cut?\nx5\n1. x1 - 4 x2 + 3 x3 - x4 + x5 ≤ 9\n2. x1 - 5 x2 + 3 x3 - 2x4 + x5 ≤ 9\n3. .6 x1 - .7 x2 + .2 x3 - .4 x4 ≥ .4\n4. .6 x1 + .3 x2 + .2 x3 +.6 x4 ≥ .4\n5. none of the above\n\nDoes a Gomory cut always exist? Yes!\nx1\nx2\nx4\nx3\n1.6\n- 4.7\n-1.4\n3.2\n=\n9.4\nx5\nIf the RHS in the final tableau is integer, then the bfs\nis integer, and we have solved the LP.\nOtherwise, there is a non-integer in the RHS.\n9.4\nIf all coefficients on the LHS of this constraint are integer,\nthen there is no way of satisfying the constraint.\nTherefore, there are 1 or more fractional coefficients.\n1.6\n- 4.7\n-1.4\n3.2\nAll of these are for non-basic variables. These are used for\nthe Gomory cut.\n\nA brief history of Gomory cuts\nGomory -- 1963\nInitial use : solving IPs without Branch and Bound\n- too slow for this type of use\nConventional wisdom prior to 1990: Gomory cuts are not\nuseful in practice\nBalas, Ceria, Cornuejols tested Gomory cuts in the early\n1990s with great success.\nCurrent conventional wisdom: Gomory cuts are extremely\nuseful for solving IPs in practice.\n\nTraveling Salesman Problem (TSP)\nWhat is a minimum length tour that visits each\npoint?\n\nComments on the TSP\nVery well studied problem\nApplications: vehicle routing, laser drilling in\nintegrated circuits, manufacturing, and more.\nLarge instances have been solved optimally (5000\ncities and larger)\nVery large instances have been solved\napproximately (10 million cities to within a couple\nof percent of optimum.)\nWe will formulate it by adding constraints that look\nlike cuts\n\nAn Integer Programming Formulation\ncij = distance from city i to city j\nThe salesperson leaves\ncity i for each i.\nThe salesperson enters\ncity j for each j.\nIs this enough?\n\nConstraint?\n\nConstraint?\n\nobjective?\n\nThe previous IP needs more constraints\nWhat is the optimal\nsolution satisfying the IP\nconstraints?\nThe salesperson leaves each city.\nThe salesperson enters each city.\nBut the tour is not connected.\nIt consists of two subtours.\n\nSubtour elimination constraints\nTo ensure that 1-2-6 is not a subtour:\n-\nThere is at least one edge of the tour\nfrom city 1, 2 or 6 to city 3, 4 or 5.\nWe want to add\nconstraints so that no\nsubtour is feasible.\n\nSubtour elimination constraints:\ngeneral case\nFor any proper subset S of cities, there is an edge\nthat leaves S and enters N\\S.\nLet S ⊆ {1, 2, ..., n}, the set of cities. Let N\\S be the\nother cities.\n\nBut if there\nare 100\nvariables that\nmust be more\nthan a billion\nconstraints.\nActually, the number of\nconstraints is around 2100\n, which is more than a\nbillion times a billion\ntimes a billion.\nBut, these constraints\nare still useful in\npractice.\n\nAre you\ntrying to\nmake\nmy head\nhurt?\nThe reason it is useful in\npractice is that we only\ninclude constraints as\nthey are needed.\n\nConstraint generation\nWhen an LP has too many constraints, e.g., an\nexponentially large number, constraint generation can be\nused. Let C denote the set of all constraints.\nThe LP is solved with a subset S⊆C of the constraints.\nAn optimal solution x* is obtained to this LP.\nIf x* violates a constraint in C that are not in S, then this\nconstraint is added to S.\nThis approach works if one can efficiently find a violated\nconstraint in C\\S.\n\nConstraint generation for the LP\nrelaxation of the TSP\n0 ≤ xij ≤ 1 for all i, j\n(1)\n(2)\n(3)\n(4)\n(5)\nas needed\nSolve the LP relaxation\nwithout (5).\n\nIf the solution violates\nsome of the constraints of\n(5), add them to the LP and\nsolve again.\n\nContinue until we have no\nmore constraints to add.\n\nOften, this LP solution\nvalue is very close to the IP\noptimal solution value.\n(less than 2% error).\n\nAre you\nsaying that\nyou can really\nsolve an LP\neven though\nthere are\ntrillions of\nconstraints?\nYes! This technique really\nworks, and it is used in\npractice.\nThere are related approaches\nin which one can solve LPs\nwith trillions of variables.\nThey are called column\ngeneration approaches.\n\nMy head\nhurts.\nBut we have done enough\nfor today. If you want to\nlearn more, you can read\nabout column generation\ntechniques in AMP in the\nchapter on decomposition.\n\nMental Break\n\nRest of the lecture\nPractice with additional applications of IPs\n\nA common feature of the modeling: there is a focus on\nsubsets of a \"ground set.\"\n\nThen we will conclude the segment on integer\nprogramming\n\nSubsets of a ground set\nIn some problems, we start with a collection of items. This\nis called the ground set.\n- e.g., set of items to choose from for the knapsack\nproblem\nThe ground set is sometimes denoted as {1, 2, 3, ..., n}.\nSometimes, we formulate constraints using notation that\nrefers to subsets of the ground set; e.g., we may write the\nconstraint\n- \"x1 + x3 + x5 + x9 ≤ 1\" as\n\nwhere S = {1, 3, 5, 9}\n\n053 Chocolates\nLocate 053\nChocolate stores so\nthat each district\nhas a store in it or\nnext to it.\nMinimize the\nnumber of stores\nneeded.\nAmit and Mita have started\na new chocolate company.\n\nHow do we represent this as an IP?\nxj = 1 if a chocolate store\nis put in district j\nxj = 0 otherwise\nMinimize x1 + x2 + ... + x16\ns.t. x1 + x2 + x4 + x5 ≥ 1\nx1 + x2 + x3 + x5 + x6 ≥ 1\nx13 + x15 + x16 ≥ 1\nxj ∈ {0, 1} for each j.\nVariables\nObjective\nConstraints\n\nRepresentation as Set Covering Problem\n#\nSubset S(j)\n{1, 2, 4, 5}\nS(j) is j plus all of the\ndistricts that share a\nborder with j.\n\nPutting a chocolate store in\ndistrict j \"covers\" S(j).\n\nChoose a minimum number of\nsubsets that cover all of the\ndistricts.\n\nSet covering Problem\nLet S = {1, 2, ..., n}, and suppose Sj ⊆ S for each j.\nWe say that index set J is a cover of S if\nSet covering problem: find a minimum\ncardinality set cover of S.\nApplications\n- Locating fire stations.\n- Locating hospitals.\n- Locating Starbucks\nand many non-obvious applications.\n= S\n\nPacking diamonds into a Chinese checkerboard\n\nThe Diamond Packing Problem\nLet D be the collection of diamonds\nDecision variables: x d for d ∈ D\n- xd = 1 if diamond d is selected\n- xd = 0 if diamond d is not selected.\nd\nd'\nxd xd 1\nLet O be the pairs of diamonds that overlap.\n(d, d') ∈ O, implies that diamonds d and d' have at least\none point in common\n\nSet packing problem\nLet S = {1, 2, ..., n}, and suppose Sj ⊆ S for each j.\nWe say that index set J is a packing of S if\nSi ∩ Sj = ∅ for i, j ∈ J.\nSet packing problem: find a maximum cardinality set\ncover of S.\nCommon types of applications:\n- Schedule a number of activities at the same\ntime (activities cannot be scheduled at the\nsame time if they require the same resource).\n- Allocate building space\n\nFormulating the game of Sudoku as an IP\nEach row has each of the values in [1, 9]\nEach column has each of the values in [1, 9]\nEach of the nine 3 x 3 blocks has each of the\nvalues in [1, 9].\n\nLabels for cells in Sudoku\n1,1\n1,2\n1,3\n1,4\n1,5\n1,6\n1,7\n1,8\n1,9\n2,1\n2,2\n2,3\n2,4\n2,5\n2,6\n2,7\n2,8\n2,9\n3,1\n3,2\n3,3\n3,4\n3,5\n3,6\n3,7\n3,8\n3,9\n4,1\n4,2\n4,3\n4,4\n4,5\n4,6\n4,7\n4,8\n4,9\n5,1\n5,2\n5,3\n5,4\n5,5\n5,6\n5,7\n5,8\n5,9\n6,1\n6,2\n6,3\n6,4\n6,5\n6,6\n6,7\n6,8\n6,9\n7,1\n7,2\n7,3\n7,4\n7,5\n7,6\n7,7\n7,8\n7,9\n8,1\n8,2\n8,3\n8,4\n8,5\n8,6\n8,7\n8,8\n8,9\n9,1\n9,2\n9,3\n9,4\n9,5\n9,6\n9,7\n9,8\n9,9\n\nEach row has each of\nthe numbers 1 to 9\nfor each i ∈ [1,9] and\nfor each k ∈ [1,9]\nEach column has each\nof the numbers 1 to 9\nfor each j ∈ [1,9] and\nfor each k ∈ [1,9]\nEach \"block\" has each\nof the numbers 1 to 9\nCreate sets for each block.\nConstraint on next page.\nFormulate these 9 constraints using\ninteger programming\nFormulate these 9 constraints using\ninteger programming\nDon't bother with these yet.\nWe need more notation\n9 x 9 x 9 = 729 variables.\n\n1,1\n1,2\n1,3\n2,1\n2,2\n2,3\n3,1\n3,2\n3,3\n3r-2, 3c-2\n3r-2, 3c-1\n3r-2, 3c\n3r-1, 3c-2\n3r-1, 3c-1\n3r-1, 3c\n3r, 3c-2\n3r, 3c-1\n3r, 3c\nS1,1 = {(1,1), (1, 2), (1, 3),\n(2, 1), ..., (3, 3)}.\nSr,c =\nfor r = 1 to 3 and\nfor c = 1 to 3.\nfor each r = 1 to 3, c = 1 to 3, and\nand for each k ∈ [1, 9]\nDefine 9 blocks\nwithin the 9 x 9\nSudoku game.\nS1,1 S1,2\nS2,1\n\nWhat happens if an IP\ncannot be solved efficiently?\nSometimes, an IP cannot be solved efficiently.\n\nAlternative approaches:\n*Use Branch and Bound but be less restrictive.\nDon't ask for a guarantee of optimality.\nBe satisfied with 5% or 10% guarantees.\n*Use techniques from another field, such as\nartificial intelligence.\n*Rely on simple but practical heuristics for the\nproblem at hand. (Illustrated in the 3rd lecture\non networks.)\n\nFinal remarks on integer programming\nVery powerful modeling approach\n*Standard approach within math optimization\n*Can model virtually any combinatorial problem\n*Lots of techniques for modeling logical\nconstraints and non-linearities\n\nSolution technique of choice: Branch and bound\n*works well if nodes can be pruned early\n*better bounding helps early pruning\n*better bounding via valid inequalities\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Introduction",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/40d1bb14223439515ac3df1aa229ecdd_MIT15_053S13_lec1.pdf",
      "content": "15.053/8 February 5, 2013\nHandout: Lecture Notes\nOptimization Methods\nin Management Science\nand Operations Research\n\nClass website + more\nClass website\n- please log on as soon as possible\n- Problem Set 1 will be due next Tuesday\nLots of class information on website\nPiazza.com used for Q&A and discussions\nNo laptops permitted in class, except by permission\n\nlaptops\n\nWe will use clickers from Turning Technologies.\n\nIf you own one, please bring it to class with you,\nstarting Thursday.\n\nIf you don't own one, we will lend you one for the\nsemester.\n\nVideotapes of classes\nCurrent plan: start videotaping lectures starting\nToday (I think).\n\nIn addition, PowerPoint presentations will all be\navailable.\n\nExcel and Excel Solver\nDuring this semester, we will be using Excel\nSolver for solving optimization problems.\nWe assume some familiarity with Excel, but no\nfamiliarity with Excel Solver.\nHomework exercises involve Excel.\n- Versions A and B (experiment starting this year).\n- Excel Solver tutorial this Friday\n\nAn optimization problem\nGiven a collection of numbers, partition them into\ntwo groups such that the difference in the sums\nis as small as possible.\n\nExample: 7, 10, 13, 17, 20, 22\n\nThese numbers sum to 89\n\nI can split them into {7, 10, 13, 17} sum is 47\n{20, 22} sum is 42\nDifference\n\n= 5.\n\nCan we do better?\nExcel Example\n\nWhat is Operations Research?\nWhat is Management Science?\nWorld War II : British military leaders asked scientists\nand engineers to analyze several military problems\n- Deployment of radar\n- Management of convoy, bombing, antisubmarine, and\nmining operations.\nThe result was called Operations Research\nMIT was one of the birthplaces of OR\n- Professor Morse at MIT was a pioneer in the US\n- Founded MIT OR Center and helped to found ORSA\n\nWhat is Management Science\n(Operations Research)?\n\nOperations Research (O.R.) is the discipline of\napplying advanced analytical methods to help\nmake better decisions.\n\nO.R. is an engineering and scientific approach for\ndecision making.\n\nSome Skills for Operations Researchers\nModeling Skills\n- Take a real world\nsituation, and\nmodel it using\nmathematics\n\nMethodological\nToolkit\n- Optimization\n- Probabilistic\nModels\nNot this\ntype of\nmodeling\nNot this\nAdriana Lima\nPhoto of female\nmodel removed\ndue to copyright\nrestrictions.\nImages removed due to copyright restrictions. See images\nof domino mosaic art at http://www.dominoartwork.com/.\n\nThe Value of Operations Research and\nManagement Science\nMaking sense of data\n- big data\n- social network info, transactional data, polls\n\nDealing with complexity and uncertainty\n- understanding systems\n- making a good choice when there are billions of options\n(e.g., partitioning with 50 items)\n- making good choices in an uncertain world\n\nUsing mathematical models to augment our own\nthinking.\n- develop insights\n- develop plans\n\nPreview of Some Applications\n\nApplying LP and\nNLP to optimal\nradiation therapy.\nHow to set prices.\nPhoto courtesy of epSos.de on Flickr. License CC BY.\n\nPreview Continued\nFind the shortest path in a network\n(c) Google. All rights reserved. This content is excluded from our Creative Commons\nlicense. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nMore preview\nOptimal strategies\nagainst adversaries.\nHow to solve\nsome\nchallenging\npuzzles\nPhoto courtesy of Curtis Perry on Flickr.\n\nSome of the themes of 15.053/8\nOptimization is everywhere\n\nData, Models, Algorithms, Insights, and Decisions\n- DMAID\n\nOptimization is Everywhere\nPersonal choices\n- best career choices,\n- best use of our time\n- best strategies,\n- best value for the dollar\n\nCompany choices\n- maximize value to shareholders\n- determine optimal mix of products or services\n- minimize production costs\n- minimize cost of getting product to customers\n- maximize value of advertising\n- hire the best workers\n\nYour class partner\nIntroduce yourself to the person next to you (right or\nleft), who we refer to as your \"partner\" for today.\nThose on aisle ends may be in a group of size 3.\nThere will be a team project in which student groups\nwill solve or attempt to solve an optimization that is\nuseful in practice. This will involve collecting data,\nmaking a model and doing some analysis.\nTake 3 minutes with your partner to brainstorm on\nthe type of problems you might be interested in\ndoing a project on.\n\nSome initial ideas for projects\nWhat did you come up with?\n\nMidclass break\nWe searched Google for the number of pages\nwith the expression \"optimal X\"\n\nThere are at more than 10 expressions that have\nover 1 million hits. See if you can find them.\n\nOn 15.053/8 and Optimization Tools\nRest of the class\n- Introduce linear programming (LP) (also called linear\noptimization)\n- illustrates an important optimization tool for better\ndecision making.\n- Efficiently solvable. LPs form the basis for solving\nmore complex problems.\n\nThe optimization paradigm\nDecision variables: the elements that are under the\ncontrol of the decision maker.\n- The work schedules of each employee\n- The level of investments in a portfolio\n- what subjects a student should take in each semester\n\nA single objective function (of the decision variables)\n- minimize cost or ...\n- maximize expected return or ...\n- make the last semester as enjoyable as possible or ...\n\nThe optimization paradigm\nConstraints: restrictions on the decision variables\n- \"Business rules\"\n- no worker can work more than 5 consecutive days\n- There is at most 2% investment in any stock in the portfolio\n- students must take a prerequisite of a subject before taking\nthe subject\n- \"Physical laws\"\n- No worker can work a negative amount of time\n- The amount of a goods in inventory at the end of period j is\nthe amount of goods arriving during period j plus the\namount of goods in inventory in period j-1 minus the\namount of goods that are sold in the period.\n\nGeneric optimization model\n(usually called non-linear programming)\nLet x be the vector of decision variables:\nSuppose f, g1, g2, ... , gm are functions\n\nmax f(x)\n\nMaximize the objective\n\ns.t. gi(x) ≥ bi for each i = 1 to m\n\nSatisfy the constraints\n\nx ≥ 0\n\ntypically but not always the case.\n\nLinear Programming\nminimize or maximize a linear objective\nsubject to linear equalities and inequalities\n\nExample. Max is in a pie eating contest that lasts 1\nhour. Each torte that he eats takes 2 minutes. Each\napple pie that he eats takes 3 minutes. He receives\n4 points for each torte and 5 points for each pie.\nWhat should Max eat so as to get the most points?\n\nStep 1. Determine the decision variables\nLet x be the number of tortes eaten by Max.\nLet y be the number of pies eaten by Max.\n\nMax's linear program\nA feasible solution satisfies all of the constraints.\nx = 10, y = 10 is feasible; x = 10, y = 15 is infeasible.\nAn optimal solution is the best feasible solution.\nThe optimal solution is x = 30, y = 0, z = 120.\nStep 2. Determine the objective function\nMaximize z = 4x + 5y (objective function)\nsubject to\n2x + 3y ≤ 60 (constraint)\nx ≥ 0 ; y ≥ 0 (non-negativity constraints)\nStep 3. Determine the constraints\n\nTerminology\nDecision variables: e.g., x and y.\n- In general, these are quantities you can control to improve\nyour objective which should completely describe the set\nof decisions to be made.\n\nConstraints: e.g., 2x + 3y ≤ 60 , x ≥ 0 , y ≥ 0\n- Limitations on the values of the decision variables.\nObjective Function. e.g., 4x + 5y\n- Value measure used to rank alternatives\n- Seek to maximize or minimize this objective\n- examples: maximize NPV, minimize cost\n\nMaximize x1\n\n(A)\nsubject to 3x1 + 4x2 ≥ 7\n\n(B)\nx1 - 2x5 = 7\n\n(C)\n\nx1 ≥ 0, x2 ≥ 0\n\n(D)\nis referred to as\n\n1. Nonnegativity constraints\n2. An equality constraint\n3. The objective function\n4. An inequality constraint\n(D)\n(C)\n(B)\n(A)\n\nDavid's Tool Corporation (DTC)\nMotto: \"We may be no Goliath, but we think big.\"\n\nManufacturer of slingshots kits and stone\nshields.\n\nPublic domain image (painting by\nOsmar Schindler, 1888)\nPublic domain image (Wikimedia Commons)\n\nData for the DTC Problem\nSlingshot\nKits\n\nStone\nShields\nResources\n\nStone\nGathering\ntime\n2 hours\n3 hours\n100 hours\n\nStone\nSmoothing\n1 hour\n2 hours\n60 hours\n\nDelivery\ntime\n1 hour\n1 hour\n50 hours\n\nDemand\nProfit\n3 shekels\n5 shekels\n\nFormulating the DTC Problem as an LP\nStep 1: Determine Decision Variables\n\nK = number of slingshot kits manufactured\n\nS = number of stone shields manufactured\n\nStep 2: Write the Objective Function as a linear function\nof the decision variables\n\nMaximize Profit =\n\nStep 3: Write the constraints as linear functions of the\ndecision variables\n\nsubject to\n\nThe Formulation Continued\nStep 3: Determine Constraints\nStone gathering:\nSmoothing:\nDelivery:\nShield demand:\n\nWe will show how to solve this in Lecture 3.\nSlingshot demand:\n\nLinear Programs\nA linear function is a function of the form:\n\nf(x1, x2, . . . , xn) = c1x1 + c2x2 + . . . + cnxn\n\n= ∑i=1 to n cixi\n\ne.g., 3x1 + 4x2 - 3x4.\n\nA mathematical program is a linear program (LP) if the\nobjective is a linear function and the constraints are linear\nequalities or inequalities.\ne.g., 3x1 + 4x2 - 3x4 ≥ 7\n\nx1 - 2x5 = 7\n\nTypically, an LP has non-negativity constraints.\nStrict inequalities are not permitted. (x > 0 is not allowed.)\n\nMore on Linear Programs\nA linear program must have linear objectives and\nlinear equalities and inequalities to be considered\na linear program.\n\nMaximize x2\nsubject to x = 3\nMaximize x1\nsubject to 3x1 + 4x2 ≥ 7\nx1 - 2x5 = 7\n\n|x1| ≥ 0\nNot a linear\nprogram.\nNot a linear\nprogram.\n\nA non-linear program is permitted to have a\nnon-linear objective and constraints.\nmaximize f(x,y) = xy\nsubject to\nx - y2/2 ≥ 10\n\n3x - 4y ≤ 2\n\nx ≥ 0, y ≥ 0\nMinimize x\nsubject to x ≥ 3\nBoth a linear and\na non-linear\nprogram.\n\nAn integer program is a linear program plus\nconstraints that some or all of the variables\nare integer valued.\nMaximize\n3x1 + 4x2 - 3x3\n\n3x1 + 2x2 - x3 ≤ 17\n\n3x2 - x3 = 14\n\nx1 ≥ 0, x2 ≥ 0, x3 ≥ 0 and\n\nx1 , x2, x3 are all integers\n\nSummary\nMathematical models\n\nOptimization as a paradigm\n\nLinear programming\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Introduction to integer programming",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/994cbaeb3ba44ca864de668cdf3c3dcc_MIT15_053S13_lec10.pdf",
      "content": "15.053/8 March 14, 2013\nIntroduction to Integer Programming\n- Integer programming models\n\nQuotes of the Day\n\n\"Somebody who thinks logically is a nice\ncontrast to the real world.\"\n\n-- The Law of Thumb\n\n\"Take some more tea,\" the March Hare said to\nAlice, very earnestly.\n\n\"I've had nothing yet,\" Alice replied in an\noffended tone, \"so I can't take more.\"\n\n\"You mean you can't take less,\" said the Hatter.\n\"It's very easy to take more than nothing.\"\n\n-- Lewis Carroll in Alice in Wonderland\n\nCombinatorial optimization problems\nINPUT: A description of the data for an instance of the\nproblem\nFEASIBLE SOLUTIONS: there is a way of determining from\nthe input whether a given solution x' (assignment of values to\ndecision variables) is feasible. Typically in combinatorial\noptimization problems there is a finite number of possible\nsolutions.\n\nOBJECTIVE FUNCTION: For each feasible solution x' there is\nan associated objective f(x').\nMinimization problem. Find a feasible solution x* that minimizes\nf( ) among all feasible solutions.\n\nExample 1: Traveling Salesman Problem\nINPUT: a set N of n points in the plane\nFEASIBLE SOLUTION: a tour that passes\nthrough each point exactly once.\nOBJECTIVE: minimize the length of the tour.\n\nExample 2: Balanced Partition\nINPUT: A set of positive integers a1, ..., an\nFEASIBLE SOLUTION: a partition of {1, 2, ... n}\ninto two disjoint sets S and T.\n- S ∩ T = ∅, S∪T = {1, ... , n}\nOBJECTIVE : minimize | ∑i∈S ai - ∑i∈T ai |\nExample: 7, 10, 13, 17, 20, 22\n\nThese numbers sum to 89\n\nThe best split is {10, 13, 22} and {7, 17, 20}.\n\nExample 3. Exam Scheduling\nINPUT: a list of subjects with a final exam;\nclass lists for each of these subjects, and\na list of times that final exams can be scheduled.\nLet aij denote the number of students that are\ntaking subjects i and j.\nFEASIBLE SOLUTION: An assignment of\nsubjects to exam periods\nOBJECTIVE: minimize\n∑ {aij : i and j are scheduled at the same time}\n\nExample 4: Maximum Clique Problem\nINPUT: a friendship network G = (N, A). If\npersons i and j are friends, then (i, j) ∈ A.\nFEASIBLE SOLUTION: a set S of people such\nthat every pair of persons in S are friends.\nOBJECTIVE: maximize |S|\n\nExample 5: Integer programming\nINPUT: a set of variables x1, ..., xn and a set of\nlinear inequalities and equalities, and a subset of\nvariables that is required to be integer.\nFEASIBLE SOLUTION: a solution x' that satisfies\nall of the inequalities and equalities as well as the\nintegrality requirements.\nOBJECTIVE: maximize ∑i ci xi\nExample: maximize 3x + 4y\nsubject to 5x + 8y ≤ 24\nx, y ≥ 0 and integer\n\nWhich of the following is false?\n✓\n1. The Traveling Salesman Problem is a\ncombinatorial optimization problem.\n2. Integer Programming is a combinatorial\noptimization problem.\n3. Every instance of a combinatorial optimization\nproblem has data, a method for determining\nwhich solutions are feasible, and an objective\nfunction value for each feasible solution.\n4. Warren G. Harding was the greatest American\nPresident.\n\nThe advantages of integer programs\nRule of thumb: integer programming can model\nany of the variables and constraints that you\nreally want to put into an LP, but can't.\nBinary variables\n- xi = 1 if we decide to do project i (else, it is 0)\n- xi = 1 if node i is selected in the graph (else 0)\n- xij\n= 1 if we carry out task j after task i (else, 0)\n- xit = 1 if we take subject i in semester t (else, 0)\n\nExamples of constraints\nIf project i is selected, then project j is not selected.\nIf x1 > 0, then x1 ≥ 10.\nx3 ≥ 5 or x4 ≥ 8.\nx1, x2, x3, x4, x5, are all different integers in {1, 2, 3, 4, 5}\nx is divisible by 7\nx is either 1 or 2 or 4 or 8 or 32\n\nNonlinear functions can be modeled using\ninteger programming\ny = 2 x if 0 ≤ x ≤ 3\ny = 9 - x if 3 ≤ x ≤ 7\ny = -5 + x if 7 ≤ x ≤ 9\ny\nx\nf(x)\nx\n\nYou mean, that\nyou can write\nall of those\nconstraints in\nan integer\nprogram.\nThat's so easy.\nNo. That's not what we mean! We\nmean that we can take any of these\nconstraints, and there is a way of\ncreating integer programming\nconstraints that are mathematically\nequivalent. It's not so easy at first,\nbut it gets easier after you see some\nexamples.\nWe'll show you how to do\nthis one step at a time. But\nfirst, we'll review what we\nmean by integer programs.\n\nInteger Programs\n\nInteger programs: a linear program plus the\nadditional constraints that some or all of the\nvariables must be integer valued.\n\nWe also permit \"xj ∈{0,1},\" or equivalently,\n\"xj is binary\"\n\nThis is a shortcut for writing the constraints:\n\n0 ≤ xj ≤ 1 and xj integer.\n\nTypes of Integer Programs\n0-1 Integer\nPrograms\nPure Integer Programs\nMixed integer linear\nprograms\n(MILPs or MIPs)\nxj ∈ {0,1} for every j.\nxj ≥ 0 and integer for every j.\nxj ≥ 0 and integer for some or all j.\nNote, pure integer programming instances that are unbounded\ncan have an infinite number of solutions. But they have a\nfinite number of solutions if the variables are bounded.\n\nGoals of lectures on Integer Programming.\nLectures 1 and 2\n- Introduce integer programming\n- Techniques (or tricks) for formulating\ncombinatorial optimization problems as IPs\nLectures 3 and 4.\n- How integer programs are solved (and why\nthey are hard to solve).\n- Rely on solving LPs fast\n- Branch and bound and cutting planes\nLecture 5. Review and modeling practice\n\nA 2-Variable Integer program\nmaximize 3x + 4y\nsubject to 5x + 8y ≤ 24\nx, y ≥ 0 and integer\n\nWhat is the optimal solution?\n\nThe Feasible Region\n0 1 2 3 4 5\n0 1 2 3 4 5\nQuestion: What is the\noptimal integer solution?\nWhat is the optimal linear\nsolution?\nCan one use linear\nprogramming to solve the\ninteger program?\n\nA rounding technique that sometimes\nis useful, and sometimes not.\n0 1 2 3 4 5\n0 1 2 3 4 5\nSolve LP (ignore\nintegrality) get x=24/5,\ny=0 and z =14 2/5.\nRound, get x=5, y=0,\ninfeasible!\nTruncate, get x=4, y=0,\nand z =12\nSame solution value at\nx=0, y=3.\nOptimal is x=3, y=1, and\nz =13\n\nConsider the feasible regions for the\ntwo integer programs on this slide.\n0 1 2 3 4 5\n0 1 2 3 4 5\n0 1 2 3 4 5\n0 1 2 3 4 5\nmax 3x + 4y\ns.t. 5x + 8y ≤ 24\nx, y ≥ 0 and integer\nmax 3x + 4y\ns.t. x + y ≤ 4\n2x + 3y ≤ 9\nx, y ≥ 0 and integer\n\nWhich of the following is false for the two\ninteger programs on the previous slide?\n✓\n1. The two models are the same in that they\nhave the same feasible regions and the\nsame objective function.\n2. Model 1 will be solved faster because it\nhas fewer constraints.\n3. If we removed the integrality constraints\nfrom both models, they would become\ntwo different linear programs.\n4. Model 1 has the fewest number of\nconstraints for an IP with this feasible\nregion.\n\nWhy integer programs?\nAdvantages of restricting variables to take on\ninteger values\n- More realistic\n- More flexibility\n\nDisadvantages\n- More difficult to model\n- Can be much more difficult to solve\n\nOn computation for IPs\nMuch, much harder than solving LPs\n\nVery good solvers can solve large problems\n- e.g., 50,000 columns 2 million non-zeros\n\nHard to predict what will be solved quickly and\nwhat will take a long time.\n\nRunning time to optimality (CPLEX)\nnumber of rows\nnumber of columns\n1,000\n10,000\n100,000\n1,000,000\n1,000\n10,000\n100,000\n1,000,000\n< 1 Hour\n> 1 hour\nNot yet solved\nInstances are taken\nfrom MIP Lib\n\nMental Break\n\nOn formulating integer programs\nConsider an instance of a combinatorial optimization\nproblem (COP).\n\nWhen we form the integer program (IP), we usually\nwant the following:\n1.\nIf x is feasible for the COP, then x is feasible for the IP.\n2.\nIf x is feasible for the IP, then x is feasible for the COP.\n3.\nIf x is feasible, then its objective function value is the same\nfor both the IP and COP.\n\nNote: We often need to add variables to the COP\n(especially 0-1 variables), when formulating integer\nprograms.\n\nExample : Maximum Clique Problem\nINPUT: a friendship network\nG = (N, A). If persons i and j\nare friends, then (i, j) ∈ A.\nFEASIBLE SOLUTION: a set\nS of people such that every\npair of persons in S are\nfriends.\nOBJECTIVE: maximize |S|\nDecision variables\n\nThe Game of Fiver.\nClick on a circle, and\nflip its color and that\nof adjacent colors.\nCan you make all of\nthe circles red?\n\nThe game of fiver.\nClick on (3, 3)\n\nThe game of fiver.\nClick on (3, 1)\nClick on (4, 4)\n\nThe game of fiver.\nNext: an\noptimization\nproblem whose\nsolution solves\nthe problem in\nthe fewest\nmoves.\n\nOn forming Integer programs\n1.\nFirst select the set of decision variables.\n\nIt turns out that timing does not matter in this\ngame. All that matters is what square are\nclicked on.\n2.\nWrite the objective.\n3.\nWrite the constraints. If it is easier to express it\nusing non-linear constraints, or logical\nconstraints, then do this first.\n\nOptimizing the game of fiver.\nLet x(i,j) = 1 if I click on\nthe square in row i and\ncolumn j.\nx(i,j) = 0 otherwise.\n\nLet's write the formulation\nx(i,j) = 1 if I click on the square in row i and\n\ncolumn j.\nx(i,j) = 0 otherwise.\n\nOptimizing the game of fiver\n\nMinimize i,j=1 to 5 x(i, j)\n\ns.t. x(i, j) + x(i, j-1) + x(i, j+1) + x(i-1, j)\n+ x(i+1, j) is odd for all i, j = 1 to 5.\nx(i, j) is 0 or 1 for all i, j = 1 to 5.\nx(i, j) = 0 otherwise.\n\nThis (with a little modification) is an integer program.\n\nOptimizing the game of fiver\n\nMinimize i,j=1 to 5 x(i, j)\n\ns.t. x(i, j) + x(i, j-1) + x(i, j+1) + x(i-1, j)\n+ x(i+1, j)\nx(i, j) is 0 or 1 for all i, j = 1 to 5.\nx(i, j) = 0 otherwise\nThis is an integer program.\n0 ≤ y(i, j) ≤ 2; y(i, j) integer for i, j = 1 to 5.\n- 2 y(i, j) = 1 for all i, j = 1 to 5.\nx is odd if there is an integer y such that x - 2y = 1.\n\nShould I give away the solution?\n\nTrading for Profit\n\nNooz is a contestant on Trading for Profits. Its main\nslogan is\n\n\"I Trading for Profit\"\n\nNooz has just won 14 IHTFP points. We now join the\nquiz show to see what the 14 points are worth.\n\n3 points\n6 points\n4 points\n7 points\n4 points\n5 points\niPad\nData server\nMIT 'Brass Rat'\nring\n$500 gift\ncertificate to\nAu Bon Pain\nTutoring in 6.041\nProbabilistic\nSystems Analysis\nDinner with Prof.\nOrlin and the\n15.053 TAs\n\nNooz determines what\neach prize is worth to\nhim. He measure\neverything in \"utils\" on a\nscale from 1 to 25.\n4 points\n6 points\n11 utils\n19 utils\n4 points\n7 points\n5 points\n16 utils\n12 utils\n22 utils\n8 utils\niPad\nData server\nMIT 'Brass Rat'\nring\n$500 gift\ncertificate to\nAu Bon Pain\nTutoring in\n6.041\nProbabilistic\nSystems\nAnalysis\nDinner with\nProf. Orlin and\nthe 15.053 TAs\n3 points\n\n1 if prize i is selected\nLet\n0 otherwise\nix\n\nWrite Nooz's problem as an integer program.\nBudget: 14 IHTFP points.\nPrize\nPoints\nUtility\niPad\nserver\nBrass\nRat\nAu Bon\nPain\n6.041\ntutoring\n15.053\ndinner\n\nInteger Programming Formulation\nMax 16x1+ 22x2+ 12x3+ 8x4+ 11x5+ 19x6\n\n5x1+ 7x2+ 4x3+ 3x4+ 4x5+ 6x6 ≤ 14\nxj∈ {0,1} for each j = 1 to 6\nObjective and Constraints?\nWe will solve this problem in two lectures.\n\nKnapsack or Capital Budgeting\nYou have n items to choose from to put into your\nknapsack.\nItem i has weight wi, and it has value ci.\nThe maximum weight your knapsack (or you) can\nhold is b.\nFormulate the knapsack problem.\n\nThe mystery of integer programming\nSome integer programs are easy (we can solve\nproblems with millions of variables)\nSome integer programs are hard (even 100\nvariables can be challenging)\nIt takes expertise and experience to know which\nis which\nIt's an active area of research at MIT and\nelsewhere\n\nUsing Excel Solver to Solve Integer\nPrograms\nAdd the integrality constraints (or add that a variable is\nbinary)\nSet the Solver Tolerance. (Integer optimality %)\n(The tolerance is the percentage deviation from optimality\nallowed by solver in solving Integer Programs.)\n- The default used to be 5%.\n- A 5% default is way too high\n- It often finds the optimum for small problems\n\nSome Comments on IP models\nThere are often multiple ways of modeling the\nsame integer program.\n\nSolvers for integer programs are extremely\nsensitive to the formulation. (not true for LPs)\n\nSummary on Integer Programming\nDramatically improves the modeling capability\n- Economic indivisibilities\n- Logical constraints\n- capital budgeting\n- games\nNot as easy to model\nNot as easy to solve.\nNext lecture: more IP formulations\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "IP reference guide",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/86d472ffa3f1c341c586cb26ba1093c1_MIT15_053S13_iprefguide.pdf",
      "content": "IP Reference guide for integer programming formulations.\nby James B. Orlin\nfor 15.053 and 15.058\nThis document is intended as a compact (or relatively compact) guide to the formulation of integer\nprograms. For more detailed explanations, see the PowerPoint tutorial on integer programming.\n\nThe following are techniques for transforming a problem described logically or in words into an\ninteger program. In most cases, the transformation is the simplest to describe. Unfortunately,\nsimplest is not the same as \"best.\" It is widely accepted that the best integer programming\nformulations are those that result in fast solutions by integer programming solvers. In general, these\nare the integer programs for which the linear programming relaxation provides a good bound.\n\nSection 1. Subset selection problems.\n\nOften, models are based on selecting a subset of elements. For example, in the knapsack problem, one\nwants to select a subset of items to put into a knapsack so as to maximize the value while not going\nover a specified weight. Or one wants to select a subset of potential products in which to invest. Or,\none has a set of different integers, and one wants to select a subset that sums to a value K. In these\ncases, it is typical for the integer variables to be as follows:\n\n⎧⎪ 1 if element i is selected\nxi = ⎨\n\n⎪0 otherwise.\n⎩\n\nExample: knapsack/capital budgeting. In this example, there are six items to select from.\n\nItem\nCost\nValue\n\nProblem: choose items whose cost sums to at most 14 so as to maximize the utility.\n\nmaximize\n16x1 + 22x2 +12x3 + 8x4 +11x5 +19x6\nFormulation:\nsubject to\n5x1 + 7x2 + 4x3 + 3x4 + 4x5 + 6x6 ≤ 14\nxi ∈{0,1} for i = 1 to 6.\n\nIn general:\n\nMaximize the value of the selected items such that the weight is at most b.\nCi = value of item i for i = 1 to n.\nai = weight of item i for i = 1 to n.\nb = bound on total weight.\nn\nmaximize\n∑cixi\ni=1\nn\nsubject to\n∑aixi ≤ b\n\ni=1\nxi ∈{0,1} for i = 1 to n.\n\nCovering and packing problems.\nIn some selection problems, each item is associated with a subset of a larger set. The larger set is\nusually referred to as the ground set. For example, suppose that there is a collection of n sets 51, \",\n5n where for i = 1 to n 5i is a subset of the ground set {1, 2, 3, \", m}. Associated with each set 5i is a\ncost Ci.\n⎧\n⎧\n⎪ 1 if i ∈S j\n⎪ 1 if set S j is selected\nLet aij = ⎨\nLet x j = ⎨\n⎪ 0 otherwise.\n⎪ 0 otherwise.\n⎩\n⎩\nThe set paCking problem is the problem of selecting the maximum cost subcollection of sets, no two of which\nshare a common element. The set Covering problem is the problem of selecting the minimum cost\nsubcollection of sets, so that each element i E {1, 2, \", m} is in one of the sets.\nMaximize ∑\nn c jx j\nj=1\nsubject to ∑\nn\nj=1 aijx j ≤ 1 for each i ∈{1,...,m}\nSet Packing Problem\nx j ∈{0,1} for each j ∈{1,...,n}.\nMinimize ∑\nn c jx j\nj=1\nsubject to ∑\nn\nj=1 aijx j ≥ 1 for each i ∈{1,...,m}\nSet Covering Problem\nx j ∈{0,1} for each j ∈{1,...,n}.\nFor example, consider the following map of the counties of Colorado.\nFigure 1. The counties of Colorado.\nSuppose that we want to select a minimum cardinality subset C of counties such that each county\neither was in C or shared a common boundary with a county in C. In this case, we would let\n\n5j = {j} U {i: county i shares a boundary with county j}. We let Cj = 1 for each j. We would then solve\nthe min cost covering problem.\nHere is a related problem. Select the largest subset C of counties such that no two counties of CC\nshare a common border. We refer to this problem as P1. Although P1 is a set packing problem (as\nyou shall soon see) it is not the set packing problem defined on the sets S1, S2, \", Sn . To see why not,\nconsider the following example. Suppose that county 1 bordered on county 2, which bordered on\ncounty 3, but that counties 1 and 3 had no common border. Then one can include both county 1 and\ncounty 3 in CC. But 2 E S1 n S3, and so it would not be possible to select S1 and S3 for the set packing\nproblem.\nProblem P1 can be formulated as follows:\nMaximize ∑\nn x j\nj=1\nsubject to xi + x j ≤ 1\nwhenever aij = 1 (i.e., i ∈S j )\nProblem P1\nx j ∈{0,1}\nfor each j ∈{1,...,n}.\nSection 2. Modular arithmetic.\nIn this very brief section, we show how to constrain a variable x to be odd or even, and we show how\nto constraint x to be a mod(b). (That is, there is an integer q such that a + qb = x.) In each case, we\nneed to add a new variable w, where w E 0 and integer.\nConstraint.\nIP Constraint\nx is odd.\nx - 2w = 1.\nx is even.\nx - 2w = 0.\nx = a (mod b)\nx - bw = a.\nTable 1. Modular arithmetic formulations.\nSection 3. Simple logical constraints.\nHere we address different logical constraints that can be transformed into integer programming\nconstraints.\nIn the first set, we describe the logical constraints in terms of selection of items from a subset.\n\nE\n\nE\n\nLogical Constraint.\nIP Constraint\nIf item i is selected, then item j is also selected.\nxi - xj : 0\nEither item i is selected or item j is selected, but not both.\nxi + xj = 1\nItem i is selected or item j is selected or both.\nxi + xj\nIf item i is selected, then item j is not selected.\nxi + xj : 1\nIf item i is not selected, then item j is not selected.\n-xi +xj : 0\nAt most one of items i, j, and k are selected.\nxi + xj + xk : 1\nAt most two of items i, j, and k are selected.\nxi + xj + xk : 2\nExactly one of items i, j, and k are selected.\nxi + xj + xk = 1\nAt least one of items i, j and k are selected.\nxi + xj + xk\nTable 2. Simple constraints involving two or three binary variables.\nRestricting a variable to take on one of several values.\nSuppose that we wanted to restrict x to be one of the elements {4, 8, 13}. This is accomplished as\nfollows.\nx = 4 w1 + 8 w2 + 13 w3\nw1 + w2 + w3 = 1\nwi E {0, 1} for i = 1 to 4.\nIf we wanted to restrict x to be one of the elements {0, 4, 8, 13}, it suffices to use the above\nformulation with the equality constraint changed to \"w1 + w2 + w3 : 1.\"\nSection 4. Other logical constraints, and the big M method.\nBinary variables that are 1 when a constraint is satisfied.\nWe next consider binary variables that are defined to be 1 if a constraint is satisfied, and 0\notherwise. In each case, we need bounds on how much the constraint could be violated in a solution\nthat satisfies every other constraint of the problem.\n⎧⎪ 1 if x ≥ 1\nExample 1.\nw = ⎨⎪ 0 if x = 0.\n⎩\nIn this example, x is an integer variable. And suppose that we know x is bounded above by 100. (We\nmay know the bound on x because it is one of the constraints of the problem. We may also know the\nbound of 100 on x because it is implied by one or more of the other constraints. For example,\nsuppose that one of the constraints was \"3x + 4y + w : 300.\" We could infer from this constraint\nthat 3x : 300 and thus x : 100.\n\nE\n\nE\n\nEquivalent constraint:\nw : x : 100w.\nw E {0,1}.\nIn any feasible solution, the definition of w is correct. If x 1, then the first constraint is satisfied\nwhether w = 0 or w = 1, and the second constraint forces w to be 1. If x = 0, then the first constraint\nforces w to be 0, and the second constraint is satisfied.\nExample 2.\nw =\n⎧⎪⎨⎪⎩\n1 if x ≥ 7\n0 otherwise.\nAgain, we assume here that x is an integer variable, and that x is bounded above by 100.\nEquivalent constraints:\nx : 7 - 7(1-w)\nx : 6 + 94 w\nw E {0,1}.\nIn any feasible solution, the definition of w is correct. If x 7, then the first constraint is satisfied\nwhether w = 0 or w = 1, and the second constraint forces w to be 1. If x : 6, then the first constraint\nforces w to be 0, and the second constraint is satisfied.\nBig M: example 1.\nw =\n⎧⎪⎨⎪⎩\n1 if x ≥ 7\n0 otherwise.\nHere we assume that x is an integer variable that is bounded from above, but we donCt specify the\nbound.\nEquivalent constraints:\nx : 7 - M(1-w)\nx : 6 + Mw\nw E {0,1},\nwhere M is chosen sufficiently large. In this way, we donCt concern ourselves with the value of the\nbound. We just write M. In fact, we could have written 7 instead of M in the first constraint, and it\nwould have also been valid. But writing big M means not having to think about the best bound.\nThe disadvantage of this approach is that the running time of the integer programming algorithm\nmay depend on the choice of M. Choosing M very large (e.g., M = 1 trillion) will lead to valid\nformulations, but the overly large value of M may slow down the solution procedure.\nBig M: example 2.\nw =\n⎧⎪⎨⎪⎩\n1 if x ≥ a\n0 otherwise.\nHere we assume that x is an integer variable that is bounded from above, but we donCt specify the\nbound.\nEquivalent constraints:\nx : a - M(1-w)\nx : (a-1) + Mw\nw E {0,1},\n\nE\n\nE\n\nwhere M is chosen sufficiently large. In any feasible solution, the definition of w is correct. If x\na,\nthen the first constraint is satisfied whether w = 0 or w = 1, and the second constraint forces w to be\n1. If x : a-1, then the first constraint forces w to be 0, and the second constraint is satisfied.\n⎧⎪ 1 if x ≤ a\nBig M: example 3.\nw = ⎨⎪ 0 otherwise.\n⎩\nHere we assume that x is an integer variable that is bounded from above, but we donCt specify the\nbound.\nEquivalent constraints:\nx 5 a - M(1-w)\nx\n(a+1) + Mw\nw E {0,1},\nwhere M is chosen sufficiently large.\nIn the case that w depends on an inequality constraint involving more than one variable, the\nprevious two transformations can modified in a straightforward manner.\n⎧\n∑\nn\n⎪ 1 if\naixi ≤ b\nBig M: example 4.\nw = ⎨\ni=1\n⎪ 0 otherwise.\n⎩\nHere we assume that ∑\nn aixi is integer valued and is bounded from above, but we donCt specify the\ni=1\nbound.\n∑\nn aixi ≤ b + M (1- w).\ni=1\nEquivalent constraints:\n∑\nn aixi ≥ b +1- Mw.\ni=1\nw ∈{0,1}.\nIn any feasible solution, the definition of w is correct. If ∑i\nn\n=1 aixi ≤ b, , then the first constraint is\nsatisfied whether w = 0 or w = 1, and the second constraint forces w to be 1. If ∑\nn aixi ≥ b +1, , then\ni=1\nthe first constraint forces w to be 0, and the second constraint is\nsatisfied.\nAt least one of three inequalities is satisfied.\nSuppose that we wanted to model the logical constraint that at least one of three inequalities is\nsatisfied. For example,\n≥\n\n+ 4\n+ 2\n≥ 7 or 3\n-‐ 5\n≤ 12 or 2\n+\n≥ 6.\nWe\nthe\n\nf\nt\no\nhe\nx1\nx\nllo\nn\nw\ncr\nin\ne\ng\na\n\nt\nsy\ne\nt\nx4\nst\nh\ne\nre\nm\ne\n\no\nnew bina\nx\nr\nx2\nx2\nx3\nf logical, l\ny\nin\nv\ne\na\na\nr\nr,\nia\na\nb\nn\nle\nd\ns\ni\nw\nnt\ne\n, w\nge\nr\n, a\nco\nn\nn\nd\ns\nw\ntr\na\n\ni\nan\nnt\nd\ns.\n\nreformulate the above constraint as\n\nIf\nIf\n\n= 1, the\nIf\n\nw1\n2 = 1,\nn\n\nthen 3\nx1\nx\nw\n3 = 1, then 2\nx\nw\n+ 4 2\n\nw\n-‐ 5x\nx\nx\n+\nw\nw\n≥\n≤\n2 + 3\n6.\n12.\nx4 ≥\n\n7.\nw\ni\n+\n2 +\n∈ {0,1} f\n\no\n≥\nr\n1.\ni =\n\n1 to 3.\nTh\n\nis above\nx\nsy\nx\nstem\nx\nof constra\nM\nints\nw\nis equivalent to the following.\n\n1 + 4\n3x1\n-‐ 5\n+\n+\nx\n2 +\n\n2 4\nx\nx\n≥ 7 -‐\n(1-‐\n)\nw\nw\nw\n≤ 12\nwi\n∈\n\n+\ni\n≥\n≥\n\n1.\n\n-‐\n+\n\nM(1\n(1\n)\n\n{0,1\nfor\n(U\nM\n-‐\n}\n= 1 to 3.\ns\n\nin\n-‐w\ng\nw\na\n3)\nn\n\nequality would also be valid.)\n\nAt\n\nleast\nth\nIn\na\nt\nt\nhe\nw\nc\ne\na\none of two inequa\nw\nse\na\n\nn\no\nt\nf\nto\ntw\nx\nsa\no i\nt\nne\nisf\nx\nqua\ny th\nl\ne\nit\nx\nf\nie\nli\ns\nt\nll\n, i\nie\no\nt\ns\no\nw\ns\nis\nt fi\ni\nuff\nsa is ed.\nng\ni\nl\nc\no\nx\ne\ng\ns\ni\nt\nc\no\nal\nc\nx\nc\nr\no\ne\nn\na\nd\nte\nit\na\nion\nsin\n. A\ngl\nt\ne\nl\nn\ne\ne\na\nw\nst o\nvariable . For example, suppose\n\nis satisfied:\n1 + 4 2 + 2 4 ≥ 7 or 3 1 -‐ 5\n12.\ne of th\nw\n2 ≤\nn\ne following two constraints\nTh\n\nis log\nx\nical co\nx\nndition is equivalent to:\n\nx\n\nw\nx\n+ 4 2\n∈\n+ 2\n≥\n\n-‐\n\n{0\n5x\n,\n\n}\n≤\n\n7 -‐\n+\nMw\nM(1\n\n-‐w)\n\nSec\nHe\ntion\n\ncon\nr\ns\ne\ni\n\nd\nw\ne\ne\n5.\nr\nco\nth\nn\nF\nsid\nix\ne\ne\nr\nd\na\n\nn\nc\n\no\nin\nst\nte\ns\ng\n\ne following inte\ne\ng\nr\ne\np\nr\nr\np\no\nr\ng\no\nr\ng\na\nr\nm\nam\nin\n:\nwhich there are fixed costs on variables. For example,\n\nMaximize f (x1) + f2(x2) + f3(x3)\nsubject to 2x1 + 4x2 +5x3 ≤100\nx1 + x2 +\nx3 ≤30\n\n10x1 +5x2 + 2x3 ≤204\n\nwhere\nxi ≥0 and integer for i = 1 to 3.\n\n⎧⎪52x1 -500 if x\nif x\n⎧\n1 ≥1\n⎧⎪30x2 -400\n2 ≥1\n⎪20x3 -300 if x\nf1(\n1) = ⎨\nf (x ) = ⎨\nf (x ) =\n3 ≥1\nx\n⎨\n⎪\nif x1 = 0\n,\n⎪\nif x = 0\n,\n⎪ 0\nif x\n\n⎩\n\n3 = 0\n\n⎩\n\n⎩\n.\n\nThe IP formulation is as follows:\nMaximize\n52x1 - 500w1 + 30x2 - 400w2 + 20x3 - 300w3\nsubject to\n2x1 + 4x2 + 5x3 ≤ 100\nx1 + x2 + x3 ≤ 30\n10x1 + 5x2 + 2x3 ≤ 204\nxi ≤ Mwi for i = 1 to 3\nxi ≥ 0 and integer for i = 1 to 3.\nThe constraint xi : Mwi forces wi = 1 whenever xi > 0. The model may look incorrect because it\npermits the possibility that xi = 0 and wi = 1. It is true that the IP model allows more feasible\nsolutions than it should. However, if xi = 0 in an optimal solution, then wi = 0 as well because its\nobjective value coefficient is less than 0. Because the integer program gives optimal solutions, if xi =\n0, then wi = 0.\nSection 6. Piecewise linear functions.\nInteger programming can be used to model functions that are piecewise linear. For example,\nconsider the following function.\n⎧\n2x if 0 ≤ x ≤ 3\n⎪\ny = ⎨\n9 - x if 4 ≤ x ≤ 7\n⎪ -5+ x if 8 ≤ x ≤ 9.\n⎩\nOne can model y in several different ways. Here is one of them. We first define two new variables\nfor every piece of the curve.\n⎧\n⎧\nw1 = ⎨\nx1 = ⎨\n⎪ 0 otherwise.\n⎪ 0 otherwise.\n⎪ 1\nif 0 ≤ x ≤ 3\n⎪ x if 0 ≤ x ≤ 3\n⎩\n⎩\n⎧\n⎧\n⎪ 1\nif 4 ≤ x ≤ 7\n⎪ x if 4 ≤ x ≤ 7\nw2 = ⎨\nx2 = ⎨\n⎪ 0 otherwise.\n0 otherwise.\n⎩\n⎪⎩\n⎧\n⎧\nw3 = ⎨\nx3 = ⎨\n⎪ 0 otherwise.\n0 otherwise.\n⎪ 1\nif 8 ≤ x ≤ 9\n⎪ x if 8 ≤ x ≤ 9\n⎩\n⎩⎪\n\nWe complete the model as follows.\nIP formulation\ny = 2x1 + 9w2 - x2 -5w3 + x3\n0 : x1 : 3w1\n4w2 : x2 : 7w2\n8w3 : x3 : 9w3\nw1 + w2 + w3 = 1\nx = x1 + x2 + x3\nwi E {0, 1} for i = 1 to 3.\nFor any choice of w1, w2, and w3, the variables x and y are correctly defined.\nSection 7. The traveling salesman problem\nIn this section, we give the standard model for the traveling salesman problem. It has an exponential\nnumber of constraints, which may seem quite unusual for an integer programming model. We\nexplain how it can be implemented so as to be practical.\nWe assume that there are n cities, and that Cij denotes the distance from city i to city j.\nIn this model, the following are the variables:\n⎧⎪ 1 if city i is immediately followed by city j on the tour\n= ⎨\nxij\n⎪ 0 otherwise.\n⎩\nThe formulation is as follows:\nn\nn\nMinimize\n∑∑cijxij\ni=1 j=1\nn\nsubject to\n∑xij = 1 for all i = 1 to n\nj=1\nn\n∑xij = 1 for all j = 1 to n\ni=1\n∑\n≥ 1 for all S ⊂ {1,2,...,n} with 1 ≤ S ≤ n -1\nxij\ni∈S , j∈N \\S\n∈{0,1},\nfor all i, j = 1 to n.\nxij\nThe first set of constraints ensures that there is some city that follows city i in the solution. The\nsecond set of constraints ensures that there is some city that precedes city j in the solution.\n\nE\n\nUnfortunately, there are not enough constraints to ensure that the solution is a tour. For example, a\nfeasible solution to the first two sets of constraints for the six city problem consists of x12 = x23 = x31 =\n1, and x45 = x56 = x64 = 1. This \"solution\" to the first two sets of constraints corresponds to the cycles\n1-2-3-1 and 4-5-6-4. A tour should be one cycle only.\nThe third set of constraints guarantees the following. For any non-empty subset 5 of cities with LSL M\nn, there must be some city not in 5 that follows some city that is in 5. This set of constraints is known\nas the subtour elimination Constraints.\nWith all of the constraints listed above, every feasible solution corresponds to a tour.\nImplementation details.\nSuppose that one wanted to solve the linear programming relaxation of the TSPN that is, we solve the\nproblem obtained from the above constraints if we drop the integrality constraints, and merely\nrequire that xij 0 for each i and j. (We wonCt deal with solving the integer program here.) We refer\nto this linear program as LPO.\nAt first it appears that there is no way of solving LPO for any large values of n, say n > 100. For any\nTSP instance with more than 100 cities, there are more than 2100 different subtour elimination\nconstraints. Listing all of the constraints would take more than all of the computer memory in the\nentire world.\nInstead, LPO is solved using a \"constraint generation approach.\" LP(0) is obtained from LPO by\ndropping all of the subtour elimination constraints. An optimal solution x0 is obtained for LP(0). If\nx0 is feasible for LPO, then it is also optimal for LPO. If not, then some subtour elimination constraint\nthat x0 violates is identified and added to LP(0), resulting in LP(1). ItCs not obvious how one can\ndetermine a subtour elimination constraint that is violated, but there are efficient approaches for\nfinding a violated subtour elimination constraint.\nAn optimal solution x1 is obtained for LP(1). If x1 is feasible for LPO, then it is also optimal for LPO. If\nnot, then some subtour elimination constraint that x1 violates is identified and added to LP(1),\nresulting in LP(2).\nThis process continues until there is an optimal solution for LP(k) for some k that is feasible for LPO\nand hence optimal for LPO. Or else, the solver takes so much time, that it is stopped before reaching\noptimality. In practice, the technique works quite well, and finds an optimal solution for LPO in a\nshort amount of time.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Sensitivity analysis and shadow prices",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/8fead641e2eee52dc7de15c68a9effab_MIT15_053S13_lec6.pdf",
      "content": "15.053/8 February 26, 2013\nSensitivity analysis and shadow prices\n\nspecial thanks to Ella,\nCathy, McGraph, Nooz,\nStan and Tom\n\nQuotes of the Day\n\"If the facts don't fit the theory, change the facts.\"\n\n-- Albert Einstein (attributed)\n\"What's the use of a good quotation if you can't\nchange it?\"\n\n-- Doctor Who\n\"What's the use of a good quotation if you\ncan't change it, and then claim credit for it?\"\n\n-- Professor Orlin\n\nThis lecture is about\nsensitivity analysis.\nWhat happens to the\noptimal solution\nvalue if one number\nin the data is\nchanged?\nIt's great to\nhave the\nwhole gang\nhelp with a\nlecture.\nWe're going\nto help with\ntechnical\ndetails.\nAnd we will give\nsome pointers on\nhow this can be\nused in practice.\nI'm going to\nask insightful\nquestions.\nI'm going\nto be\ncute and\nsensitive.\n\nMIT Computer Corporation (mc2)\nmotto: transforming Mass., energizing the world\n\nThe following is a fictional case. It is based on\nthe DEC case, developed by Rob Freund and\nBrian Shannahan in 1988.\n\nIt demonstrates the use of linear programming for\nplanning the \"ramping\" of new computer\nhardware.\n\nBackground\n\nMIT Computer Corp (mc2) announced a new family of tablet\ncomputers and e-readers in the second quarter of 2010.\nShipments began in the 3rd quarter of 2010. The tablet\ncomputers and e-readers had the following code names:\n-\nAardvark. A high-end, general purpose tablet computer, with touch\nscreen and with large memory disk space.\n-\nBison. A medium-end, general purpose tablet computer with touch\nscreen\n-\nCougar. A general purpose tablet computer requiring a tablet pen\n-\nDeer. A high-end e-reader with many additional functionalities\n-\nEmu. An e-reader.\n\nThe Aardvark required newly developed high speed memory, which was in\nlimited supply.\nAll of the Bisons, half of the Deers, and 20% of the Aardvarks required a\nnew type of disk drive, which was in limited supply.\n\nItem Demand\n(in 1000s)\nA\nC\nTablets 38\ne-readers 32\nA\nB\nC\nD\nE\nAmount\n(in 1000s)\nHigh Cap\nMem. Chips\nLow Cap\nMem. Chips\nAvg. # of\nnew disk drives\n.2\n.5\nList Price\n(in $1000s)\n1.2\n.8\n.6\n.6\n.3\n\nA Number of Aardvarks manufactured (in 1000s)\nB Number of Bisons manufactured (in 1000s)\nC, D, E ...\nA, B, C, D, E ≥ 0\nA\n\n≤ 18\nC\n\n≤ 3\nA + B + C\n≤ 38\nD + E ≤ 32\nMax 1.2 A + .8 B + .6 C + .6 D + .3 E\ns.t 2 A ≤ 40\n2 B + 2 C + 2 D + E ≤ 240\n.2 A + B + .5 D ≤ 20\n\nOriginal Spreadsheet: the solution\nA\nB\nC\nD\nE\nDecision Variables\n16.4\nProfit\n$46.12 in $ millions\nConstraints\n\nHigh Cap Memory\n≤\nLow Cap Memory\n70.8\n≤\nNew Drives\n≤\nbinding\nMax for A\n≤\nbinding\nMax for C\n≤\nbinding\nMax for tablets\n37.4\n≤\nMax for e-readers\n≤\nbinding\n\nA\nB\nC\nD\nE\nS1\nS2\nS3\nS4\nS5\nS6\nS7\nRHS\nGeneral rule: if there are small changes in the data,\nthe optimal set of basic variables does not change.\n-0.1\n-0.8\n-1.04\n-0.6\n-0.3\n-46.12\n0.5\n-0.2\n16.4\n-2\n-2\n0.4\n-2\n-1\n169.2\n-0.5\n-1\n-0.8\n-1\n0.6\nA\nB\nC\nD\nE\nS1\nS2\nS3\nS4\nS5\nS6\nS7\nRHS\n1.2\n0.8\n0.6\n0.6\n0.3\n0.2\n0.5\nFirst tableau\nOptimal and final tableau\n\nThe structure of the solution stays the\nsame with small changes of data\nThe basic feasible solution is obtained by\nsolving linear systems of equations.\nWith small changes in data, we solve\nalmost the same system.\n-\nIf the RHS changes, the solution and\nthe optimal objective change linearly.\n-\nIf the cost coefficients change, the\noptimal solution stays the same.\n-\nThe sensitivity report puts lots of this\ninformation in a useful format.\n\nSensitivity Report (SR) Part 1\n\nName\nFinal\nValue\nReduced\nCost\nObjective\nCoef\nAllowable\nIncrease\nAllowable\nDecrease\nA\n1.2\n1.00E+30\n1.04\nB\n16.4\n0.8\n5.2\n0.2\nC\n0.6\n1.00E+30\n0.6\nD\n-0.1\n0.6\n0.1\n1.00E+30\nE\n0.3\n1.00E+30\n0.1\n\nSensitivity Report (SR) Part 2\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\nHigh Cap\nMemory\n1.00E+30\nLow Cap\nMemory\n70.8\n1.00E+30\n169.2\nNew Drives\n0.8\n0.6\n16.4\nMax for A\n1.04\n0.75\nMax for C\n0.6\n0.6\nMax for\ntablets\n37.4\n1.00E+30\n0.6\nMax for\ne-readers\n0.3\n169.2\n\nWhat is the optimal solution?\nThe optimal solution is in the original\nspreadsheet.\nA\nB\nC\nD\nE\nDecision Variables\n16.4\nProfit\n$46.12 in $ millions\nIt is also in SR part 1, in the column labeled\n\"final value.\"\nNote: the SR report does not have the profit.\n\nTroubleshooting tip #1\nShadow\nPrice\n0.8\n1.04\n0.6\n0.3\nIf you see \"Lagrange multiplier\"\ninstead of \"shadow price\" in the\nSR, it is because you forgot to\nclick on \"simplex\" as the solver,\nor you forgot to click on \"assume\nlinear mode\" in the former version\nof Excel.\n\nLagrange\nMultiplier\n0.8\n1.04\n0.6\n0.3\n\nChanges that we will consider\n1.\nChange the cost coefficient of a variable\n2.\nChange the RHS of a constraint\n-\nChanging the initial conditions\n-\nPurchasing resources at a cost\n3.\nIntroducing a new product\n-\nReduced costs\n\nWhy do we\nneed to use a\nreport? Can't\nwe just solve\nthe problem\nmany times\nusing Solver?\n\nTom\nCathy\nSolving the\nproblem\nmultiple times\nis OK for small\nspreadsheets,\nbut there are\nadvantages of\nunderstanding\nthe SR.\n\nThe SR is a compact\nway of storing\ninformation.\nLP Solvers generate\nlots of useful\ninformation with a\nsingle report.\nSolving multiple times\nis not practical if there\nare 1000s of\nconstraints.\nIn addition, it is\nneeded to understand\nLP theory.\nFinally, it will be on\nthe first midterm.\n\nAnd why aren't we\nconsidering changes\nin the rest of the\ndata, such as the\ncoefficients that\nmake up the LHS of\nconstraints?\n\nTom\nCathy\nThe SR reports can be\nused to investigate\nchanges in these\ncoefficients for nonbasic\nvariables, but not for\nbasic variables. I'll try\nto explain this once we\nknow about reduced\ncosts.\n\nChanging the cost coefficient of a\nbasic variable\n\nmc2 is uncertain as to whether the Aardvark is\npriced to high. They are considering lowering the\nprice from $1200 to $1000. What will be the\nimpact on the total revenue?\nIn practice, lowering the price\nshould result in an increase in\ndemand. But here we assume\ndemand is unchanged. In this\nsensitivity analysis, we change\nonly one number in the data at a\ntime, and assume all other data is\nunchanged.\n\nThe analysis\nFor very small changes in the cost coefficients,\nthe optimal solution is unchanged.\nCheck the allowable increase and decrease of the\ncost coefficient to see if the solution changes.\nIf the optimal solution is unchanged, then you\ncan compute the new objective value.\nA\n1.2\n1.00E+30\n1.04\n\nName\nFinal\nValue\nReduced\nCost\nObjective\nCoef\nAllowable\nIncrease\nAllowable\nDecrease\n\n✓\nQUESTION FOR STUDENTS\n\nSuppose that the list price of the Aardvark is\nchanged from $1,200 to $11,200. What is the best\nanswer below?\n\n1. The sensitivity report says that the optimal\nsolution will not change.\n2. The objective value will increase by $180 million.\n3. The model becomes very inaccurate since it\nassumes that demand for Aardvarks does not\nchange.\n4. All of the above.\n\n✓\nCurrently, there are no Deer being\nproduced. What would be the list price\nat which deer would be produced?\n1.\n$100\n2.\n$500\n3.\n$700\n4.\nDeer would never be produced\nD\n-0.1\n0.6\n0.1\n1.00E+30\n\nName\nFinal\nValue\nReduced\nCost\nObjective\nCoef\nAllowable\nIncrease\nAllowable\nDecrease\n\nI noticed that the\n\"reduced cost\" is the\nnegative of allowable\nincrease for D. Is that a\ncoincidence?\nTom\nCathy\nTom, that is not a\ncoincidence. We'll\nreturn to that later when\nwe discuss reduced\ncosts.\n\nChanging the RHS of a constraint\nmc2 expects to receive 20,000 new drives.\nHowever, the drives are manufactured in a\ncountry experiencing labor strikes. What would\nbe the impact on the optimal solution value if only\n15,000 new drives were available?\nWe want to find out how the optimal\nplan would change if the number of\ndrives were 15,000.\nIf we learned about labor strikes after\nstarting to implement a plan, things\nwould be far worse since it is costly to\nchange a plan after it is implemented.\n\nShadow Prices\nDefinition:\n- The shadow price of a constraint of a linear program is\nthe increase in the optimal objective value per unit\nincrease in the RHS of the constraint.\n\nVERY IMPORTANT:\n- The Shadow Price of the i-th constraint is ONLY valid\nwithin the RHS range of the\ni-th constraint.\n\nNew Drives\n0.8\n0.6\n16.4\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\n\nOn the shadow price for new drives\nNew Drives\n0.8\n0.6\n16.4\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\nShadow Price\n= .8\nShadow Price is valid if the RHS\nnumber ND of new drives satisfies:\n3.6 ≤ ND ≤ 20.6\nThe SR report tells how the objective value\nchanges, but does not say what the new\nsolution is.\nIt also doesn't tell you what happens if the\nRHS change is not in the allowable range.\nNooz\n\n✓\nQuestion. What is the \"increase\" in the\noptimal objective value if the number of\ndisk drives is reduced to 15,000?\n1.\nIt cannot be determined from the data\n2.\n$4,000\n3.\n-$4,000\n4.\n$4,000,000\n5.\n-$4,000,000\n6.\n$12,000,000\n\nOn the demand for tablet computers\nThe total demand for tablets (A, B, C) is currently\n38,000. What would be the value of increasing\nthe demand to 40,000, possibly via a marketing\ncampaign?\nMax for\ntablets\n37.4\n1.00E+30\n0.6\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\nIf an inequality constraint does not hold\nwith equality in the optimum solution, the\nconstraint is non-binding. The shadow\nprice of each non-binding constraint is 0.\n\n✓\nQuestion: mc2 is considering an advertizing campaign that\nwill increase the demand of Aardvarks to 18,500. The cost\nof the campaign is $400,000. Is it worthwhile?\n1.\nYes\n2.\nNo\n3.\nCannot be determined from the available data.\nMax for A\n1.04\n0.75\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\n\n✓\nQuestion: mc2 is considering an advertizing campaign that\nwill increase the demand of Aardvarks to 20,000. The cost\nof the campaign is $1,000,000. Is it worthwhile?\n1.\nYes\n2.\nNo\n3.\nCannot be determined from the available data.\nMax for A\n1.04\n0.75\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\n\nThe real change in Z as the bound\non A increases\n46.5\n47.5\n48.5\n22Slope is 1.04Slope is .88\nSlope is 0\n\nMidclass Break\n\nSimultaneous Changes in the RHS\nOne of the forecasters at mc2 is pessimistic about\nthe demand forecasts. One can't rely on the\ndemand for A and C to be as high as predicted. It\nis much safer to use estimates of 15 and 2.\n\nWhat will be the impact on the optimum objective\nvalue if the maximum value of A is reduced to 15\nand the maximum value of C is reduced to 2?\nMax for A\n1.04\n0.75\nMax for C\n0.6\n0.6\n\nName\nFinal\nValue\nShadow\nPrice\nConstraint\nR.H. Side\nAllowable\nIncrease\nAllowable\nDecrease\n\nI know this one.\nThere is not enough\ninformation to know.\n\nElla\nTom\nTom, it turns out that there\nis a rule that I haven't\nmentioned yet. It's called\nthe 100% rule. And it will\nhelp answer the question\nabout changes of demand.\n\nA rule for two changes in RHS\nMax for A\n1.04\n0.75\nMax for C\n0.6\n0.6\n\nName\nShadow\nPrice\nR.H.S\nAllowable\nIncrease\nAllowable\nDecrease\nA\nC\n(-18,0)\n(0,-3)\nThe red dots are\npermissible\nchanges.\nSo is the region in\nyellow.\n(0,.6)\n\nThe 100% for two changes in RHS\nMax for A\n1.04\n0.75\nMax for C\n0.6\n0.6\n\nName\nShadow\nPrice\nR.H.S\nAllowable\nIncrease\nAllowable\nDecrease\n100% allowable\ndecrease of A\nThe red dots are\npermissible\nchanges.\n100% allowable\nincrease of C\n100% allowable\nincrease of A\n100% allowable\ndecrease of C\n\nPoints satisfying\nthe 100% rule\nThe 100% rule illustrated\nA\ndecrease\nC increase\n-18\n-3\n.6\nC decrease\nA\nincrease\n.75\nThe red dots are\npermissible changes.\n\nPoints satisfying\nthe 100% rule\nThe actual increases in A and C so that\nthe basis does not change.\nA\ndecrease\nC increase\n-18\n-3\nThe red dots are\npermissible changes.\n.6\nC decrease\nA\nincrease\n.75\nPoints at which the\nshadow prices\nremain valid\n\nThe 100% rule\nFor each RHS that changes, compute the amount\nof change divided by the total allowable change.\nAdd up these fractions. If the total value is less\nthan 1, then the shadow prices are valid.\nMax for A\n1.04\n0.75\nMax for C\n0.6\n0.6\nShadow\nAllowable Allowable\nName\nPrice\nR.H.S\nIncrease\nDecrease\nProposed\nDecrease\nproposed\n/allowable\n1/6\n1/3\nTotal 1/2\nObjective \"increases\" by\n-3 × 1.04 + -1 × .6 = -3.72\nRevenue decreases by\n$3.72 million\nYou can learn\nmore about the\n100% rule in\nSection 3.7 of\nAMP.\n\n✓\nQuestion. Suppose that the Maximum for A\nDecreased by 1000 (to 17,000), and the Maximum\nfor C increased by 500 (to 3500). What would be\nthe increase in the optimum revenue?\n1.\nIt cannot be determined from the data\n2.\n- $.74 million\n3.\n$1.34 million\n4.\n-$1.34 million\nMax for A\n1.04\n0.75\nMax for C\n0.6\n0.6\n\nName\nShadow\nPrice\nR.H.S\nAllowable\nIncrease\nAllowable\nDecrease\n\nName\nFinal\nValue\nReduced\nCost\nObjective\nCoef\nAllowable\nIncrease\nAllowable\nDecrease\nD\n-0.1\n0.6\n0.1\n1.00E+30\nE\n0.3\n1.00E+30\n0.1\nI'm ready to hear\nabout reduced\ncosts. What are\nthey?\nIf you understand\nreduced costs\nyou really\nunderstand linear\nprogramming.\nThere are several\nequivalent\ndefinitions.\n\nName\nFinal\nValue\nReduced\nCost\nObjective\nCoef\nAllowable\nIncrease\nAllowable\nDecrease\nD\n-0.1\n0.6\n0.1\n1.00E+30\nE\n0.3\n1.00E+30\n0.1\nIf we change the constraint\n\"D ≥ 0\" to D ≥ 1\" the\nobjective \"increases\" by -0.1\n\nIf we change the constraint\n\"E ≥ 0\" to E ≥ 1\" the objective\n\"increases\" by 0.\nDefinition 1. The reduced cost for a\nvariable is the shadow price for the non-\nnegativity constraint.\n\nName\nFinal\nValue\nReduced\nCost\nObjective\nCoef\nAllowable\nIncrease\nAllowable\nDecrease\nD\n-0.1\n0.6\n0.1\n1.00E+30\nE\n0.3\n1.00E+30\n0.1\nIf we increase the profit of D\nby less than .1, the same\nsolution stays optimal. If we\nincrease it by more than .1,\nthen the solution will change.\nIn this case, D will be positive\nin the new optimal solution.\nAlthough the reduced cost is a kind of shadow price, the\nallowable increase column refers to the change that can\nbe made in the cost while keeping the same solution\noptimal.\n\nThe second definition is that the reduced cost is the\nobjective value coefficient of a variable in the final and\noptimal tableau.\nWow. I am dumbfounded by\nthe interconnections.\n-z\nA\nB\nC\nD\nE\n-0.1\nThe objective row of the final tableau.\n\nReduced costs are the costs in the z-row.\nx3\n=\nx4\n-1\n-2\n=\nx1\n=\nBasic Var\n-z\nx1\nx2\nx3\nx4\nx5\nRHS\n-z\n-2\n=\n-11\nx5\n0.5\n=\nx4\n=\nx1\n-1.5\n=\nBasic Var\n-z\nx1\nx2\nx3\nx4\nx5\nRHS\n-z\n-8\n-3\n=\n-23\n15.053\nThe reduced costs in the S.A. refer to the optimal\nreduced costs (those of the optimal tableau).\n\nThe third definition is that the reduced cost is the\nobjective coefficient obtained after pricing out the\nconstraints.\nWow! I have no clue what\nyou are talking about.\n-z\nA\nB\nC\nD\nE\n-0.1\nThe objective row of the final tableau.\n\nPricing Out\nD\nE\nShadow\nPrice\nPricing out\nD\nPricing\nout E\nobj.\n0.6\n0.3\n.6\n.3\n- 0 × 0\n- 0 × 0\n- 2 × 0\n- 1 × 0\n0.5\n0.8\n- .5 × .8\n- 0 × .8\n1.04\n- 0 × 1.04\n- 0 × 1.04\n0.6\n- 0 × .6\n- 0 × .6\n- 0 × 0\n- 0 × 0\n0.3\n- 1 × .3\n- 1 × .3\nred.\ncost\n-.1\n= -.1\n= 0\noriginal objective value minus the\nsumproduct of the RHS and the\nconstraint coefficients for the variable.\nReduced cost of D =\n\nPricing Out the Constraints\nA\nB\nShadow\nPrice\nPricing out\nA\nPricing\nout B\nobj.\n1.2\n0.8\n- × 0\n- × 0\n- × 0\n- × 0\n0.2\n0.8\n- × .8\n- × .8\n1.04\n- × 1.04\n- × 1.04\n0.6\n- × .6\n- × .6\n- × 0\n- × 0\n0.3\n- × .3\n- × .3\nred.\ncost\n=\n=\n\nPricing Out a new Variable\nF\nShadow\nPrice\nPricing out\nF\n.65\n- × 0\n- × 0\n0.4\n0.8\n- × .8\n1.04\n- × 1.04\n0.6\n- × .6\n- × 0\n0.3\n- × .3\n=\nSuppose that a new e-\nreader is introduced,\ncodenamed the fox.\n\nF uses 2 low capacity\nmemory chips and has\n.4 new hard drives on\naverage.\n\nIt lists for $650. Is it\nprofitable to produce\nF?\n\nSummary\nShadow Prices\n\nRanges\n\nReduced costs\n\nPricing out\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 1: Introduction to LP formulations",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/c1de066ab3ec192e5c1e74d398978e5a_MIT15_053S13_tut01.pdf",
      "content": "Linear Programming\nOptimization is an important and fascinating area of management science\nand operations research. It helps to do less work, but gain more.\nApplicability: There are many real-\nworld applications that can be\nmodeled as linear programming;\nSolvability: There are theoretically\nand practically efficient techniques\nfor solving large-scale problems.\nHi! My name is Cathy. I will guide you in tutorials during the\nsemester.\nIn this tutorial, we introduce the basic elements of an LP and\npresent some examples that can be modeled as an LP. In the\nnext tutorials, we will discuss solution techniques.\nLinear programming (LP) is a\ncentral topic in optimization. It\nprovides a powerful tool in\nmodeling many applications. LP\nhas attracted most of its attention\nin optimization during the last six\ndecades for two main reasons:\n\nBasic Components of an LP:\nEach optimization problem consists of three elements:\ndecision variables: describe our choices that are under our control;\nobjective function: describes a criterion that we wish to minimize\n(e.g., cost) or maximize (e.g., profit);\nconstraints: describe the limitations that restrict our choices for\ndecision variables.\nFormally, we use the term \"linear programming (LP)\"\nto refer to an optimization problem in which the objective\nfunction is linear and each constraint is a linear inequality\nor equality. I'll discuss these features soon.\n\nAn Introductory Example\nI am a bit confused about the LP\nelements. Can you give me more\ndetails.\nLet's start with an example. I'll describe it first in words, and then\nwe'll translate it into a linear program.\nOh! I forgot to introduce myself. I am Tom; a\nnew member of the 15.053 class. I am\ninterested in learning linear programming. I\nwill be with you during the tutorials.\n\nAn Introductory Example\nProblem Statement: A company makes two products (say, P and Q)\nusing two machines (say, A and B). Each unit of P that is produced\nrequires 50 minutes processing time on machine A and 30 minutes\nprocessing time on machine B. Each unit of Q that is produced requires\n24 minutes processing time on machine A and 33 minutes processing\ntime on machine B.\n\nMachine A is going to be available for 40 hours and machine B is available\nfor 35 hours. The profit per unit of P is $25 and the profit per unit of Q\nis $30. Company policy is to determine the production quantity of each\nproduct in such a way as to maximize the total profit given that the\navailable resources should not be exceeded\nTask: The aim is to formulate the problem of deciding how much of each product to\nmake in the current week as an LP.\n\nStep 1: Defining the Decision Variables\nThe company wants to determine the optimal\nproduct to make in the current week. So there are\ntwo decision variables:\n\nx: the number of units of P\n\ny: the number of units of Q\nWe often start with identifying decision variables (i.e., what we want\nto determine among those things which are under our control).\nTom! Can you identify the decision variables for our example?\nGood job! Let's move on to\nthe second step.\n\nStep 2: Choosing an Objective Function\nWe usually seek a criterion (or a measure) to compare alternative solutions. This\nyields the objective function.\nTom! It is now your turn to identify the objective function.\nNote that:\n1: The objective function is linear in terms of decision variables x and\ny (i.e., it is of the form ax + by, where a and b are constant).\n2: We typically use the variable z to denote the value of the objective.\nSo the objective function can be stated as:\nmax z=25x+30y\nWe want to maximize the total profit. The profit per each unit of\nproduct P is $25 and profit per each unit of product Q is $30.\nTherefore, the total profit is 25x+30y if we produce x units of P\nand y units of Q. This leads to the following objective function:\n\nmax 40x+35y\n\nStep 3: Identifying the Constraints\nIn many practical problems, there are limitations (such as resource / physical / strategic /\neconomical) that restrict our decisions. We describe these limitations using mathematical\nconstraints.\nTom! What are the constraints in our example?\nThese constrains are linear inequalities since in each constraint the\nleft-hand side of the inequality sign is a linear function in terms of the\ndecision variables x and y and the right hand side is constant.\nThe amount of time that machine A is available restricts the quantities to be\nmanufactured. If we produce x units of P and y units of Q, machine A should be\nused for 50x+24y minutes since each unit of P requires 50 minutes processing\ntime on machine A and each unit of Q requires 24 minutes processing time on\nmachine A. On the other hand, machine A is available for 40 hours or equivalently\nfor 2400 minutes. This imposes the following constraint:\n50x + 24y ≤ 2400.\n\nSimilarly, the amount of time that machine B is available imposes the following\nconstraint:\n30x + 33y ≤ 2100.\n\nStep 3: Identifying the Constraints\nNote: In most problems, the decision variables are required to be\nnonnegative, and this should be explicitly included in the formulation.\nThis is the case here. So you need to include the following two non-\nnegativity constraints as well:\nx ≥0 and y ≥0\nI see your point. So the constraints we are subject to (s.t.)\nare :\n\n50x + 24y ≤ 2400, (machine A time)\n\n30x + 33y ≤ 2100, (machine B time)\n\nx ≥ 0,\n\ny ≥ 0.\n\nLP for the Example\nWell done Tom! You did a good job. Now, write the LP by putting all the LP elements\ntogether.\nNow let's consider a generalization of this example in order to test whether you have\nunderstood the concepts.\nNote: To be realistic, we would require integrality for the decision variables x and y.\nIt will lead to an integer program if we include integrality. Integer programs are harder\nto solve and we will consider them in later lectures. For the moment, we leave out\nintegrality and consider this LP in this tutorial.\nHere is the LP:\nmax\nz= 25x + 30y\ns.t.\n50x + 24y ≤ 2400,\n\n30x + 33y ≤ 2100,\n\nx ≥ 0,\n\ny ≥ 0.\n\nA Manufacturing Example\nProblem Statement: An operations manager is trying to determine a\nproduction plan for the next week. There are three products (say, P, Q,\nand Q) to produce using four machines (say, A and B, C, and D). Each of\nthe four machines performs a unique process. There is one machine of\neach type, and each machine is available for 2400 minutes per week. The\nunit processing times for each machine is given in Table 1.\nTable 1: Machine Data\nUnit Processing Time (min)\nMachine\nProduct P\nProduct Q\nProduct R\nAvailability (min)\nA\nB\nC\nD\nTotal processing time\n\nA Manufacturing Example\nProblem Statement (cont.): The unit revenues and maximum sales for\nthe week are indicated in Table 2. Storage from one week to the next is\nnot permitted. The operating expenses associated with the plant are\n$6000 per week, regardless of how many components and products are\nmade. The $6000 includes all expenses except for material costs.\nTable 2: Product Data\nTask: Here we seek the \"optimal\" product mix-- that is, the amount of each product that\nshould be manufactured during the present week in order to maximize profits. Formulate\nthis as an LP.\nItem\nProduct P\nProduct Q\nProduct R\nRevenue per unit\n$90\n$100\n$70\nMaterial cost per unit\n$45\n$40\n$20\nProfit per unit\n$45\n$60\n$50\nMaximum sales\n\nStep 1: Defining the Decision Variables\nWe are trying to select the optimal product mix,\nso we define three decision variables as follows:\n\np: number of units of product P to produce,\n\nq: number of units of product Q to produce,\n\nr: number of units of product R to produce.\nTom! You are supposed to do this example by yourself. Remember\nthat the first step is to define the decision variables. Try to come up\nwith the correct definition.\nIf you need help or want to check your solution, click here to see the\nanswer. Otherwise, you can continue by identifying the objective\nfunction.\nGood idea! Let me try. It should not\nbe a difficult task.\n\nStep 2: Choosing an Objective Function\nOur objective is to maximize profit:\nProfit = (90-45)p + (100-40)q + (70-20r - 6000\n\n= 45p + 60q + 50r - 6000\n\nNote: The operating costs are not a function of the variables in the problem. If\nwe were to drop the $6000 term from the profit function, we would still obtain\nthe same optimal mix of products. Thus, the objective function is\n\nz = 45p + 60q + 50r\nClick here to if you want to see the objective\nfunction. Otherwise, continue to describe the\nconstraints.\nLet me review the problem statement\nto write the constraints\n\nStep 3: Identifying the Constraints\nThe amount of time a machine is available and the maximum sales potential for each product\nrestrict the quantities to be manufactured. Since we know the unit processing times for each\nmachine, the constraints can be written as linear\ninequalities as follows:\n\n20p+10q +10r ≤ 2400\n(Machine A)\n12p+28q+16r ≤ 2400\n(Machine B)\n15p+6q+16r ≤ 2400\n(Machine C )\n10p+15q+0r ≤ 2400\n(Machine D)\n\nObserve that the unit for these constraints is minutes per week. Both sides of an inequality must\nbe in the same unit. The market limitations are written as simple upper bounds.\n\nMarket constraints: P ≤ 100, Q ≤ 40, R ≤ 60.\n\nLogic indicates that we should also include nonnegativity restrictions on the variables .\n\nNonnegativity constraints: P ≥ 0, Q ≥ 0, R ≥ 0.\nClick here to if you want to see\nthe constraints.\nIt is good to see the complete model now to see\nmy answer.\n\nA Manufacturing Example\nBy combining the objective function and the constraints, we obtain\nthe LP model as follows:\nmax z=45p+60q+50r\ns.t. 20p+10q+10r ≤ 2400\n\n12p+28q+16r ≤ 2400\n\n15p+6q+16r ≤ 2400\n\n10p+15q+0r ≤ 2400\n\n0 ≤ p ≤ 100\n\n0 ≤ q ≤ 40\n0 ≤ r ≤ 60\nClick here to if you want to see\ncomplete model.\nLet me review the problem statement to write\nthe constraints\n\nA Manufacturing Example: Optimal Solution\nMachine Available usage(min) Actual usage (min)\nA 2400 2400\nB 2400 2400\nC 2400 2285\nD 2400 1064\nProduct Maximum sales Units produced\nP 100 81.82\nQ 40 16.63\nR 60 60\nThe optimal solution to this LP is\nP=81.82,Q=16.36,R=60\nwith the corresponding objective value z=$7664. To compute the profit\nfor the week, we reduce this value by $6000 for operating expenses and\nget $1664. By setting the production quantities to the amount specified\nby the solution, we find machine usage as shown in the following table.\n\nPost Office Problem:\nProblem Statement: A post office requires different numbers of full-\ntime employees on different days of the week. Each full-time employee\nmust work five consecutive days and then receive two days off.\nIn the following table, the number of employees required on each day of\nthe week is specified.\nDay Number of full-time\nEmployees Required\n1=Monday 17\n2=Tuesday 13\n3=Wednesday 15\n4=Thursday 19\n5=Friday 14\n6=Saturday 16\n7=Sunday 11\nTask: Try to formulate\nan LP that the post office\ncan use to minimize the\nnumber\nof\nfull-time\nemployees\nwho\nare\nneeded to satisfy these\nconstraints.\nLet's consider one more example.\n\nStep 1: Defining the Decision Variables\nRemember that we often start with identifying decision variables. There\nmight be several ways for defining decision variables, and you should be\ncareful to pick the right one.\nIn our example, we want to decide home many employees we must hire.\nOne may think of defining decision variables as follows:\nyi: number of employees who work on day i.\nYou can check this is not the right choice. To see why, notice that we cannot enforce the\nconstraint that each employee works five consecutive days. In this case, there is a choice\nof decision variables that ensures we satisfy the constraint that each employee works five\nconsecutive days.\nTom! Can you come up with decision variables that can be used to formulate this\nproblem?\n\nStep 1: Defining the Decision Variables\nGreat choice! That's exactly what I was\nlooking for.\n\nNow, try to formulate the objective function\nand the constraints.\nCathy, I think I see what you mean. I think we need to\ndefine seven decision variables as follows:\nxi: number of employees whose five consecutive days of\nwork begin on day i. (They work on days i, i+1, i+2, i+3,\nand i+4). We define it for i=1,2,...,7.\n\nFor example, x1 is the number of people beginning work\non Monday.\n\nStep 2 & 3: Choosing an Objective and Identifying the\nConstraints\nWell done, Tom. You can now put together all the constraints and the\nobjective function to have an LP for the post office problem.\nOur aim is to minimize the number of hired\nemployees. The objective function is\nmin z= x1+x2+x3+x4+x5+x6+x7\nThe post office must ensure that enough employees are\nworking on each day of the week. For example, at least\n17 employees must be working on Monday. To ensure that\nat least 17 employees are working on Monday ,we require\nthat the constraint\nx1+x4+x5+x6+x7 ≥ 17\nbe satisfied. We have similar constraints for other days.\n\nThe LP Model for the Post Office Problem\nHaving formulated the LP as above, I am\ncurious what the optimal solution is.\nmin z= x1+x2+x3+x4+x5+x6+x7\ns.t. x1 +x4+x5+x6+x7 ≥ 17 (Monday constraint)\nx1+x2 +x5+x6+x7 ≥ 13 (Tuesday constraint)\nx1+x2+x3 +x6+x7 ≥ 15 (Wednesday constraint)\nx1+x2+x3+x4 +x7 ≥ 19 (Thursday constraint)\nx1+x2+x3+x4+x5 ≥ 14 (Friday constraint)\nx2+x3+x4+x5+x6 ≥ 16\n(Saturday constraint)\nx3+x4+x5+x6+x7 ≥ 11\n(Sunday constraint)\nxi ≥ 0 for i=1,2,...,7 (Nonnegativity constraints)\n\nOptimal Solution for the Post Office Problem\nThe optimal solution to this LP is\nz=67/3, x1=4/3, x2=10/3, x3=2,\nx4=22/3, x5=0 , x6=10/3, x7=5.\n\nBecause we are only allowing full-time employees, however, the variables\nmust be integers (to be realistic). If we include integrality, we get an\ninteger program.\n\nInteger programming techniques can be used to show that an optimal solution to the post\noffice problem is\nz=23, x1=4, x2=4, x3=2, x4=6, x5=0, x6=6, x7=3.\n\nNote: Bartholdi, Orlin and Ratliff (1980) have developed an efficient technique to\ndetermine the minimum number of employees required when each worker receives two\nconsecutive days off.\n\nCreating a Fair Schedule for Employees\nGood point Tom! By rotating the schedules of the employees over a 23-\nweek period, a fairer schedule can be obtained. To see how this is done,\nconsider the following schedule:\n\nWeeks 1-4: start on Monday\nWeeks 5-8: start on Tuesday\nWeeks 9-10: start on Wednesday\nWeeks 11-16: start on Thursday\nWeeks 17- 20: start on Saturday\nWeeks 21-23: start on Sunday\nThe optimal solution we found requires 4\nworkers to start on Monday, 4 on Tuesday, and so\non. The workers who starts on Saturday will be\nunhappy because they never receive a weekend\nday off. This is not fair.\n\nCreating a Fair Schedule for Employees (cont.)\nEmployee 1 follows this schedule for a 23-week period. Employee 2 starts with week 2\nof the schedule (starting on Monday for 3 weeks, then on Tuesday for 4 weeks, and\nclosing with 3 weeks starting on Sunday and 1 week on Monday).We continue in this\nfashion to generate a 23-week schedule for each employee.\nFor example, employee 13 will have the following schedule :\nWeeks 1-4 : start on Thursday\nWeeks 5-8: start on Saturday\nWeeks 9-11: start on Sunday\nWeeks 12-15: start on Monday\nWeeks 16-19 :start on Tuesday\nWeeks 20-21:start on Wednesday\nWeeks 22-23 :start on Thursday\n\nThis method of scheduling treats each employee equally.\n\nSo, is there anything\nmore to say?\nWe will continue our discussion on algebraic\nformulation of linear programming in the\nsecond tutorial. We can say goodbye to the\nstudents and wish them well.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 2: Algebraic formulations",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/d44b5624eda2f08da1832ba640b6cfa0_MIT15_053S13_tut02.pdf",
      "content": "Algebraic Formulations\nUsually in class, we describe linear programs by writing them out fully. This is\nfine for small linear programs, but it does not work when the linear programs\nare very large. In that case, it helps to use algebraic formulations.\nAlgebraic formulations sound hard. But\nthey are not so hard. However, they do\ntake a while to get used to.\nIn this tutorial, we will explain\nalgebraic formulations with\nsome examples. Algebraic\n\nOn Creating Algebraic Formulations\nmin 500 x1 + 200 x2 + 250 x3 + 125 x4\ns.t.\n50,000 x1 + 25,000 x2 + 20,000 x3 + 15,000 x4 ≥ 1,500,000\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 10\n0 ≤ x4 ≤ 15\nWhen we create algebraic formulations, we rely on substituting notations for\nsome of the coefficients. Let's start with an example of a linear program.\nThis is the MSR example which is described on the next slide.\n\nMSR Marketing Inc.\nadapted from Frontline Systems\n-Need to choose ads to reach at least 1.5 million people\n-Minimize Cost\n-Upper bound on number of ads of each type\n\nTV\n\nRadio\n\nMail\n\nNewspaper\n\nAudience Size\n\n50,000\n\n25,000\n\n20,000\n\n15,000\n\nCost/Impression\n\n$500\n\n$200\n\n$250\n\n$125\n\nMax # of ads\n\nDecision variables:\n-\nx1 is the number of TV ads.\n-\nx2 is the number of radio ads.\n-\nx3 is the number of mail ads.\n-\nx4 is the number of newspaper ads.\n\nThe LP Formulation again\nmin\n500 x1 + 200 x2 + 250 x3 + 125 x4\ns.t.\n50,000 x1 + 25,000 x2 + 20,000 x3 + 15,000 x4 ≥ 1,500,000\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 10\n0 ≤ x4 ≤ 15\nIllustration of the objective function and constraints:\n-\nThe objective is to minimize the cost of advertising.\n-\nThe first constraint says that the number of people who see the\nads is at least 1.5 million.\n-\nThe remaining four constraints give upper and lower bounds\non the number of showings of each of the four ads.\n\nTransforming into an algebraic problem\nmin\n500 x1 + 200 x2 + 250 x3 + 125 x4\ns.t. 50,000 x1 + 25,000 x2 + 20,000 x3 + 15,000 x4 ≥ 1,500,000\n0 ≤ x1 ≤ 20; 0 ≤ x2 ≤ 15; 0 ≤ x3 ≤ 10; 0 ≤ x4 ≤ 15\n0 ≤ xj ≤ dj for j = 1 to 4.\nWe'll transform this problem into an algebraic version in a couple\nof stages. Then we'll show how to do it all at once.\nSo, let's start with the four upper bound constraints. Suppose that\nwe let d = (d1, d2, d3, d4) = (20, 15, 10, 15). We can then write\nthe linear program as follows:\nIs dj decision variable?\nIt looks like dj is a variable, but it isn't. It's called a\n\"parameter\" and it means that there is an associated value\nstored for it somewhere, perhaps in a spreadsheet, perhaps\nin a database.\n\nParameters versus decision variables\nI don't get it.\nThe d's don't\nlook like\nnumbers to me.\nMost students (and others) find this\nconfusing at the beginning. But after a\nwhile, one gets used to it.\nFor students who have seen linear\nalgebra, it's pretty similar to when one\nfirst sees a system of linear equations\nexpressed as Ax = b.\nRemember that even in Algebra 1, the equation for a line\nis often represented as\n\"ax + by = c.\"\n\nMore on the algebraic formulation\nmin\n500 x1 + 200 x2 + 250 x3 + 125 x4\ns.t.\n50,000 x1 + 25,000 x2 + 20,000 x3 + 15,000 x4 ≥ 1,500,000\n0 ≤ xj ≤ dj for j = 1 to 4.\nThe key advantage of the algebraic formulation is that\nthe formulation becomes \"independent\" of the data.\nFor example, if we were to change the upper bounds\non the x's, this more algebraic version would still be\nvalid. You will see more advantages in the next slides.\nActually, it won't be the algebraic version until we get\nrid of almost all of the numbers. We will permit the\nnumber 0 at times, plus numbers for the indices. The\nabove formulation is not yet the algebraic formulation.\nWe next make the remaining constraints more\nalgebraic.\nAlgebraic formulation\nseems hard and I do\nnot get what is the\nadvantage of doing it\nin this form.\n\nMaking the remaining constraint more algebraic\nmin\n500 x1 + 200 x2 + 250 x3 + 125 x4\n50,000 x1 + 25,000 x2 + 20,000 x3 + 15,000 x4 ≥ 1,500,000\n0 ≤ xj ≤ dj for j = 1 to 4.\ns.t.\na1 x1 + a2 x2 + a3 x3 + a4 x4 ≥ b\nLet aj be the audience size of the j-th ad type, which is the coefficient of\nxj in the constraint. And let b denote the required number of people\nreached by the ads. We then can rewrite the constraint.\nIt doesn't look simpler than the old version. But it\nwould if there were 1000 variables instead of just 4.\nIt is not yet an algebraic formulation, and we still need\nto write the objective function in an algebraic form.\n\nTransforming the cost coefficients\nmin\n500 x1 + 200 x2 + 250 x3 + 125 x4\n0 ≤ xj ≤ dj for j = 1 to 4.\ns.t.\na1 x1 + a2 x2 + a3 x3 + a4 x4 ≥ b\nc1 x1 + c2 x2 + c3 x3 + c4 x4\nLet cj be the cost of an ad of type j, which is the cost coefficient of xj. We\nnow rewrite the objective.\nThis is a valid algebraic representation of the problem\nif we know that there are exactly four variables. But\nwe can carry it a step further.\n\nUsing Summation Notation\nmin\n0 ≤ xj ≤ dj for j = 1 to 4.\ns.t.\na1 x1 + a2 x2 + a3 x3 + a4 x4 ≥ b\nc1 x1 + c2 x2 + c3 x3 + c4 x4\nNext we use summation notation and rewrite the LP formulation as\nfollows:\n\nReplacing the number of variables.\nMinimize\nsubject to\nYes. I know it looks\nmuch more abstract\nthan the original\nformulation. But the\nabstraction means\nthat this formulation\nis correct for many\ndifferent possible\nchoices of the data.\nNext Finally, we use n to\nrepresent the number of\nvariables.\n\nSummary of the transformation\nMinimize\nsubject to\nMinimize\n500 x1 + 200 x2 + 250 x3 + 125 x4\nsubject to\n50,000 x1 + 25,000 x2 + 20,000 x3 + 15,000 x4 ≥ 1,500,000\n0 ≤ x1 ≤ 20;\n0 ≤ x2 ≤ 15;\n0 ≤ x3 ≤ 10;\n0 ≤ x4 ≤ 15;\n-\nLet xj be the number of ads purchased of type j for j = 1 to n.\n-\nLet aj be the number of persons who view one ad of type j\n-\nLet b be the required number of viewers to see the ads. (That is, the total number of\nviewers must be at least b)\n-\nLet dj be an upper bound on the number of ads purchased of type j.\n\nOn the reason for algebraic formulations\nThe notation is also\nvery useful when we\ndescribe the simplex\nalgorithm for linear\nprograms.\n-\nRemember that the advantage of algebraic formulations is in their ability to describe very\nlarge problems in a very compact manner. This is critical if one is to model large\nproblems, involving thousands or perhaps millions of variables.\n\n-\nFor small problems, it seems unnecessarily cumbersome and difficult.\nWe next formulate the problem\nfor DTC, David's Tool Company\n\nFormulation of the DTC Problem\n(David's Tool Company)\nz = 3 K + 5 S\nMaximize\n2 K + 3 S δ 100\nK + 2 S δ 60\nK + S δ 50\nGathering time:\nSmoothing time:\nDelivery time:\nsubject to\nResource\nConstraints\nK,S ≥ 0\nS δ 30\nK δ 40\nShield demand:\nSlingshot demand:\nNon-negativity:\nBounds on\nvariables.\nDecision Variables:\n-\nK is number of kits made\n-\nS is number of shields made\nWe will write the linear program as if up the constraints are broken into two\nparts, the demand constraints and the resource constraints.\n\nBefore checking out\nthe next page, try it\nfor yourself. There\nare several correct\nanswers. We will\nshow one soon.\nDon't ask me. I have\nno clue what is going\non. But I like\nwatching others\nexplain math.\n\nz = 3 K + 5 S\nMaximize\nThe algebraic formulation\nz = 3 x1 + 5 x2\n2 K + 3 S δ 100\nK + 2 S δ 60\nK + S δ 50\nGathering time:\nSmoothing time:\nDelivery time:\nsubject to\nResource\nConstraints\nK,S ≥ 0\nS δ 30\nK δ 40\nShield demand:\nSlingshot demand:\nNon-negativity:\nBounds on\nvariables.\nLet xj be the number of items of type i that are produced. In the above\nformulation we have replaced K by x1 and S by x2. This will make it more easily\ndescribed using algebraic notation.\n\nFor now, we will keep the number of variables as 2. Later on, we will write the\nformulation so that the number of variables is n. This will be more general.\n\nIn linear programming, \"n\" is often used to represent the number of decision\nvariables. And \"m\" usually represents the number of constraints (excluding the\n\"≥ 0\" constraints).\nAlso, the variables are often represented by letters near the end of\nthe alphabet such as w, x, y, and z. This convention is not always\nfollowed, but it is used a lot.\nSome hints\n\nResource Constraints\n2 K + 3 S δ 100\nK + 2 S δ 60\nK + S δ 50\nGathering time:\nSmoothing time:\nDelivery time:\nsubject to\nResource\nConstraints\na11 x1 + a12 x2 ≤ b1\na21 x1 + a22 x2 ≤ b2\na31 x1 + a32 x2 ≤ b3\nGathering time:\nSmoothing time:\nDelivery time:\nResource\nConstraints\nThere are three resources: gathering time, smoothing time, and delivery time. We will let\nthe limits (upper bounds) on these three resources be denoted as b1, b2, and b3.\n\nWe let ai1 be the amount of resource i used in the making of one Kit. We let ai2 be the\namount of resource i used in making one shield.\n\nResource Constraints\na11 x1 + a12 x2 ≤ b1\na21 x1 + a22 x2 ≤ b2\na31 x1 + a32 x2 ≤ b3\nGathering time:\nSmoothing time:\nDelivery time:\nResource\nConstraints\nMy personal preference is\nto write them using\nsummation notation. It\ngets even more concise,\nand is easy once you get\nused to it.\nGathering time:\nSmoothing time:\nDelivery time:\nResource\nConstraints\nMy head\nhurts.\n\nz = 3 x1 + 5 x2\nMaximize\n2 x1 + 3 x2 ≤ 100\nx1 + 2 x2 ≤ 60\nx1 + x2 ≤ 50\nGathering time:\nSmoothing time:\nDelivery time:\nsubject to\nResource\nConstraints\nx1, x2 ≥ 0\nx2 ≤ 30\nx1 ≤ 40\nShield demand:\nSlingshot demand:\nNon-negativity:\nBounds on\nvariables.\nThe complete algebraic formulation\nIn this formulation:\ndj :\nan upper bound on the demand for item j.\nn :\nthe number of items.\naij :\nthe amount of resource i used up by one unit of item j.\nm :\nthe number of different resources.\npj :\nthe profit from making one unit of item j\nShield demand:\nSlingshot demand:\nNon-negativity:\nBounds on\nvariables.\n0 ≤ xj ≤ dj\nfor j = 1 to n.\nGathering time:\nSmoothing time:\nDelivery time:\nResource\nConstraints\n\nAnother Practice Example\nAn iron foundry has a firm order to produce 1000 pounds of castings containing at least\n0.45 percent manganese and between 3.25 percent and 5.50 percent silicon. As these\nparticular castings are a special order, there are no suitable castings on hand. The castings\nsell for $0.45 per pound. The foundry has three types of pig iron available in essentially\nunlimited amounts, with the following properties:\n\n-\nPure manganese can be purchased at $8/pound.\n-\nThe cost of melting pig iron is .5 cents per pound.\n-\nLet xA, xB, xC denote the amount of pig iron A, B, and C used.\n-\nLet xM be the amount of manganese used.\nThe following example called \"Charging a Blast Furnace\" is from Section 1.3 of Applied\nMathematical Programming.\nBefore going to the\nnext slide, try to\nformulate the linear\nprogram.\n\nThe LP formulation\nmaximize profit = revenue minus cost =\n450 - 26xA - 30xB - 20xC - 8xM.\ns.t. The mixture weighs 1000 pounds.\n1000xA + 1000xB + 1000xB + xM = 1000.\nThe mixture has at least 4.5 pounds of manganese.\n4.5xA + 5.0xB + 4.0xC + xM ≥ 4.5.\nThe amount of silicon is between 32.5 and 55 pounds.\n40xA + 10xB + 6xC ≤ 32.5\n40xA + 10xB + 6xC ≥ 55\n\nEach variable is nonnegative.\nxA ≥ ,0 xB ≥ 0, xC ≥ 0, xM ≥ 0\nTo see the\nmodel, just\nkeep on\nclicking.\nObjective\nWeight constraint\nManganese constraint\nSilicon constraints\nThe constraints that must always be remembered\n\nAn Algebraic Version\n-\nLet xi be the amount of pig iron i used in the mixture.\n-\nLet Mj be the amount of pure material j used that is\npurchased and used in the mixture\nLet's consider an algebraic version of the example.\nAn iron foundry has a firm order to produce P pounds of castings\ncontaining at least bj pounds of material j and at most uj pounds of\nthe material j for j = 1 to m. The castings sell for $d per pound.\nThe foundry has n types of pig iron available in essentially unlimited\namounts, with the following properties: Pig iron i costs ci dollars\nper pound and the percentage of material j in the iron is aij. In\naddition, the firm can purchase material j in its pure form for mi\ndollars per bound. The cost of melting pig iron is $p per pound\nregardless of the type of pig iron.\nBefore going to the\nnext slide, try to\nformulate the linear\nprogram.\n\nThe LP formulation\nmaximize profit = Pd - Pp - ∑i ci xi - ∑j mj Mj\ns.t. The mixture weighs P pounds.\n∑i xi + ∑j Mj = P\nThe mixture has at least bj pounds of material j\nand at most uj pounds of material j.\n∑i aij xi + ∑ Mj ≥ bj for j = 1 to m\n∑i aij xi + ∑ Mj ≤ uj for j = 1 to m\nEach variable is nonnegative.\nxi ≥ 0 for i = 1 to n\nMj ≥ 0 for j = 1 to m\nTo see the\nmodel, just\nkeep on\nclicking.\nObjective\nWeight constraint\nMaterial constraints\nThe constraints that must always be remembered\n\nI hope that you are\ngetting the hang of\nthis now. If not, all\nit takes is some more\npractice.\nIf it helps, you can\nrepresent the\nnotation so that it is\neasier to remember\n(but longer to write).\nWe'll do this on the\nnext slide.\nThis is the manner in which it\nis usually described to a\n\"modeling language\", which then\nrewrites the LP in a format\nthat can be solved by a\ncomputer. We won't be using\nmodeling languages, but it is\nworth knowing that they exist.\n\nSETS:\n\nIRONS: Set of pig irons\n\nMATERIALS: Set of materials\n\nVARIABLES:\n\nIronUsed(j): amount of iron i used, for j ∈ IRONS.\n\nPurchased(i) : = amount of material j purchased, for i ∈ MATERIALS\n\nPARAMETERS (Data)\n\nCastingRevenue: The price per pound for selling castings\n\nPigIronCost(j):\nCost per pound of pig iron j for j ∈ IRONS\n\nMaterialCost(i):\nCost per pound of material i for i ∈ MATERIALS\n\nMeltingCost = Cost per pound of melting any of the pig irons\n\nTotalCastings = number of pounds of castings to be sold\nMaterials_Per_Iron(i,\nj) = The amount of material i in pig iron j\n\nfor i ∈ MATERIALS and j ∈ IRONS.\n\nLowerLimit(i): The minimum fraction of Material i needed in the\n\nmixture\n\nUpperLimit(i): The maximum fraction of material i allowedin the\n\nmixture\n\nLowerLimit(i) ≤ ∑j∈IRONS Materials_Per_Iron(i, j) × IronUsed(j) +\n\n∑i∈MATERIALS Purchased(i) ≤ UpperLimit(i)\n\nfor i ∈ Materials\nThe LP formulation, for the last time\nmax\nTotalCastings × CastingRevenue\n\n- ∑j∈IRONS [ MeltingCost(j) + PigIronCost(j)] IronUsed(j)\n\n- ∑i∈MATERIALS MaterialCost(i) × Purchased(i)\ns.t.\n∑j∈IRONS IronUsed(j) + ∑i∈MATERIALS Purchased(i) = TotalCastings\nIronUsed(j) ≥ 0 for j ∈ IRONS\nPurchased(i) ≥ 0 for i ∈ MATERIALS\nObjective\nWeight constraint\nMaterial constraints\nThe constraints that must always be remembered\n\nThe huge advantage of the\nprevious formulation is that it is\nmuch easier to debug and\nextremely flexible. Notation is\nconsistently used. Sets are well\ndefined. Sets, Variables, and\nParameters are all defined using\neasily understood terms.\n\nThe presumption is that the data\nis all stored in a database that the\n\"modeling language\" can directly\naccess.\nIf I don't understand things\nin three different ways, am\nI doing better or worse?\n\nNotation for linear programs in standard form\n-\nFinally, we show some conventions that are used in describing a linear\nprogramming in standard form. The conventions are used in 15.053.\n\n-\nThere are usually n variables and m equality constraints\n-\nThe variables are usually x1, ..., xn.\n-\nThe cost coefficients are usually c1, ..., cn. (Objective function coefficients\nare often called cost coefficients even if one is maximizing profit. It is\nwidely agreed that this is a weird convention, but it is commonly done in\nany case.)\n-\nThe coefficient for xj in constraint i is aij. The RHS is bi.\n-\nThen the LP in \"standard form\" can be written as follows:\n\nLast slide\nIn case you were\nwondering, there are\ndifferent ways of\nwriting algebraic\nformulations. You can\nchoose notation\ndifferently, and you\ncan combine groups of\nconstraints\ndifferently.\n\nYou will have a chance to\npractice algebraic\nformulations on the homework\nsets.\n\nAnd that's the end of this\ntutorial. I hope it was of value\nto you. Bye!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 3: Microsoft® Excel Solver techniques",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/d906211f43ab4e481dc98e2f160ba1d9_MIT15_053S13_tut03.pdf",
      "content": "Images of Microsoft(r) Excel dialog boxes (c) Microsoft. All rights reserved. This content is excluded from our\nCreative Commons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nTool for Solving a Linear Program:\nExcel has the capability to solve linear (and often nonlinear) programming\nproblems. The SOLVER tool in Excel:\nMay be used to solve linear and nonlinear optimization problems\nAllows integer or binary restrictions to be placed on decision variables\nCan be used to solve problems with up to 200 decision variables\n\nHow to Install SOLVER:\nThe SOLVER Add-in is a Microsoft Office Excel add-in program that is\navailable when you install Microsoft Office or Excel. To use the Solver Add-in,\nhowever, you first need to load it in Excel. The process is slightly different for\nMac or PC users.\n\nMAC:\n1. Open Excel for Mac 2011 and begin by clicking on the Tools menu.\n2. Click Add-Ins, and then in the Add-Ins box, check Solver.xlam and then click OK.\n3. After restarting Excel for Mac 2011 (fully Quit Excel 2011), select the Data tab, then select\nSolver to launch\n\nMicrosoft:\n1. Click the Microsoft Office Button , and then click Excel Options.\n2. Click Add-Ins, and then in the Manage box, select Excel Add-ins and click Go.\n3. In the Add-Ins available box, select the Solver Add-in check box, and then click OK.\n\nIf Solver Add-in is not listed in the Add-Ins available box, click Browse to locate the add-in.\n\nIf you get prompted that Solver is not currently installed, click Yes to install it.\n4. After you load Solver, the Solver command is available in the Analysis group on the Data tab.\n\nHow to Use SOLVER:\nThe key to solving an LP on a spreadsheet is:\nSet up a spreadsheet that tracks everything of interest\n(e.g., costs, profits, resource usage)\nIdentify the decision variables that can be varied. These\nare called Changing Cells\nIdentify the cell that contains your objective function as\nthe Target Cell\nIdentify the constraints and tell SOLVER to solve the\nproblem\nAt this point, the optimal solution to our problem will be placed\non the spreadsheet\n\nLP Solutions with SOLVER, an Example:\nConsider the problem of diet optimization. There are four different types of food:\nBrownies, Ice Cream, Cola, and Cheese Cake. The nutrition values and cost per unit are\nas follows:\n\nThe objective is to find a minimum-cost diet that contains at least 500 calories, at least\n6 grams of chocolate, at least 10 grams of sugar, and at least 8 grams of fat.\nBrownies\nIce Cream\nCola\nCheese Cake\nCalories\nChocolate\nSugar\nFat\nCost\n$0.50\n$0.20\n$0.30\n$0.80\n\nLP Solutions with SOLVER, an Example:\nSTEP 1: Decision Variables\nTo begin we enter heading for each type of food in B2:E2.\nIn the range B3:E3, we input trial values for the amount of each food eaten. (Any\nvalues will work, but at least one should be positive.)\nFor example, here we indicate that we are considering eating three brownies, no scoops\nof chocolate ice cream, one bottle of cola, and seven pieces of pineapple cheesecake.\n\nA\nB\nC\nD\nE\nDECISION VARIABLES\nBrownies\nIce Cream\nCola\nCheese Cake\nEaten\n\nLP Solutions with SOLVER, an Example:\nSTEP 2: Objective Function\nTo see if the diet is optimal, we must determine its cost as well as the calories,\nchocolate, sugar, and fat it provides.\nIn the range B7:E7,we reference the number of units and in B8:E8 we input the per\nunit cost for each available food. Then we compute the cost of the diet in cell B10 with\nthe formula\n\n= B7*B8 + C7*C8 +D7*D8+ E7*E8\nBut it is usually easier to enter the formula\n\n= SUMPRODUCT (B7:E7, B8:E8)\nAnd this is much easier to understand for anyone reading the spreadsheet. The\n=SUMPRODUCT function requires two ranges as inputs. The first cell in the first\nrange is multiplied by the first cell in the second range, then the second cell in the first\nrange is multiplied by the second cell in the second range, and so on. All of these\nproducts are then added. Thus, in cell B10 the =SUMPRODUCT function computes\ntotal cost as (3)(50)+(0)(20)+(1)(30)+(7)(80) = 740 cents.\n\nLP Solutions with SOLVER, an Example:\nSTEP 2: Objective Function (cont.)\n\nA\nB\nC\nD\nE\nDECISION VARIABLES\nBrownies\nIce Cream\nCola\nCheese Cake\nEaten\nOBJECTIVE FUNCTION\nBrownies\nIce Cream\nCola\nCheese Cake\nEaten\n=B3\n=C3\n=D3\n=E3\nCost\n10 Total\n= SUMPRODUCT ( B7:E7, B8:E8)\n\nLP Solutions with SOLVER, an Example:\nSTEP 3: Constraints\nThe final step required to set up our LP in Excel is to set up our constraints for\ncalories, chocolate, sugar, and fat.\nTo begin, we recreate the table in Excel that defines how many calories and units of\nchocolate, sugar, and fat are in each type of dessert. We can use this information to\ncalculate the total amount based on the number of items from our decision variables.\nAs an example, we can take the =SUMPRODUCT of the number of items and the\nnumber of calories in each to calculate all the calories in our dessert selection.\n\n= SUMPRODUCT (B7:E7, B14:E14)\nFinally, we want to indicate the limitations highlighted in the problem. We add a >= or\n<= to identify if it is a maximum or minimum constraint in Column G, and use\nColumn H to indicate those limits.\n\nLP Solutions with SOLVER, an Example:\nSTEP 3: Constraints Formulas (cont.)\n\nA\nB\nC\nD\nE\nF\nG\nH\n12 CONSTRAINTS\nBrownies Ice Cream Cola Cheese Cake\nTotals\nRequired\n14 Calories\n=SUMPRODUCT($B$7:$E$7,B14:E14) >=\n15 Chocolate\n=SUMPRODUCT($B$7:$E$7,B15:E15) >=\n16 Sugar\n=SUMPRODUCT($B$7:$E$7,B16:E16) >=\n17 Fat\n=SUMPRODUCT($B$7:$E$7,B17:E17) >=\n\nLP Solutions with SOLVER, an Example:\nSTEP 3: Constraints Values Shown (cont.)\n\nA\nB\nC\nD\nE\nF\nG\nH\n12 CONSTRAINTS\nBrownies Ice Cream\nCola\nCheese Cake\nTotals\nRequired\n14 Calories\n>=\n15 Chocolate\n>=\n16 Sugar\n>=\n17 Fat\n>=\n\nLP Solutions with SOLVER, an Example:\nCOMPLETE LP:\n\nA\nB\nC\nD\nE\nF\nG\nH\n1 DECISION VARIABLES\nBrownies\nIce Cream\nCola\nCheese Cake\n3 Eaten\n5 OBJECTIVE FUNCTION\nBrownies\nIce Cream\nCola\nCheese Cake\n7 Eaten\n8 Cost\n10 Total\n12 CONSTRAINTS\nBrownies\nIce Cream\nCola\nCheese Cake\nTotals\nRequired\n14 Calories\n>=\n15 Chocolate\n>=\n16 Sugar\n>=\n17 Fat\n>=\n\nThe SOLVER Parameters Dialog Box\nSTEP 1:\nThe SOLVER Parameters\nDialog Box is used to\ndescribe the optimization\nproblem to Excel.\n\nClicking on Data > Solver,\nthe following will open:\n\nThe SOLVER Parameters Dialog Box\nSTEP 2:\nThe way we set up the problem in Excel will make it easy for us to fill in each of the\ncomponents of this Parameters Dialog Box so SOLVER can identify the optimal\nsolution.\nFirst, we fill in the Set Objective box by clicking on the cell in our spreadsheet that\ncalculates our objective function. In this case, Cell B10.\nNext, we use the radio buttons below to identify the type of problem we are solving, a\nMAX or MIN. Here we want to minimize total cost and select Min.\n\nThe SOLVER Parameters Dialog Box\nSTEP 3:\nNext, we need to identify the decision variables. SOLVER terms these as variable cells.\nAfter clicking into the By Changing Variable Cells box, we can select the decision\nvariable cells in our LP, B3:E3. This tells SOLVER that it can change the number of\nbrownies, scoops of ice cream, sodas, and pieces of cheese cake to reach an optimal\nsolution.\n\nThe SOLVER Parameters Dialog Box\nSTEP 4:\nWe need to add our constraints to SOLVER to ensure our solution does not violate any\nof them. On the right-hand side of the window, there is a button to Add a constraint.\nAfter clicking on this, a box will appear that allows us to add our constraints.\nWe can use the Cell Reference box to input the totals for each constraint that we\ncalculated. Using Calories as an example, we would click on Cell F14, which\ncomputed the total calories from all our desserts.\nThere are several options for constraint type: <=, >=, =, int (integer), bin (binary),\nor dif (all different, e.g., assignment, TSP). After adjusting the constraint type to be\ngreater than or equal to (>=) we can click on the cell referencing the minimum\nquantity permitted, Cell H14. Instead of a reference, we can also enter a specific\nnumber. The complete constraint looks as follows:\n\nThe SOLVER Parameters Dialog Box\nSTEP 4 (cont.):\nThe Add button will allow us to include all the other constraints to SOLVER.\nWhen you have constraints structured in the same way (like these are), there is a faster\nway to add them all to SOLVER. Instead of entering each constraint individually, you\ncan instead add them in one step.\nIn the Cell Reference box and Constraint box, you can also specify an array of cell\nreferences. If both the Cell Reference and Constraint are specified using an array of cell\nreferences, the length of the arrays must match and Solver treats this constraint as n\nindividual constraints, where n is the length of each array.\n\nThe SOLVER Parameters Dialog Box\nSTEP 4 (cont.):\nWe have now created four Constraints. SOLVER will ensure that the changing cells are\nchosen so F14>=H14, F15>=H15, F16>=H16, and F17>=H17. In short, the diet\nwill be chosen to ensure that enough calories, chocolate, sugar, and fat are eaten.\n\nThe Change button allows you to modify a constraint already entered and Delete\nallows you to delete a previously entered constraint. If you need to add more\nconstraints, choose Add.\n-OR-\n\nThe SOLVER Parameters Dialog Box\nSTEP 5:\nAfter adding all our constraints, here is the SOLVER Parameters Dialog Box:\nNote the checked box titled Make\nUnconstrained Variables Non-\nNegative. This allows us to capture\nnon-negativity constraints. (Actually,\nall variables will be constrained to be\n>= 0).\nAdditionally, you should change the\nSelect a Solving Method to\nSIMPLEX LP when you are solving a\nlinear program. The other options\nallow for solutions for nonlinear\nprograms.\nFinally, click Solve for your solution.\n\nThe SOLVER Parameters Dialog Box\nSOLUTION:\nAfter you Solve, the Parameters Dialog Box will close and the decision variables will\nchange to the optimal solution. Because we referenced these cells in all our\ncalculations, the objective function and constraints will also change.\n\nA\nB\nC\nD\nE\nF\nG\nH\n1 DECISION VARIABLES\nBrownies\nIce Cream\nCola\nCheese Cake\n3 Eaten\n5 OBJECTIVE FUNCTION\nBrownies\nIce Cream\nCola\nCheese Cake\n7 Eaten\n8 Cost\n10 Total\n12 CONSTRAINTS\nBrownies\nIce Cream\nCola\nCheese Cake\nTotals\nRequired\n14 Calories\n>=\n15 Chocolate\n>=\n16 Sugar\n>=\n17 Fat\n>=\n\nThe SOLVER Parameters Dialog Box\nOPTIONS:\nThe Parameters Dialog Box also has a number of options on how to calculate solutions.\nConstraint Precision is the degree of accuracy of\nthe Solver algorithm (for example, how close does the\nvalue of the LHS of a constraint have to be before it is\nconsidered equal to the RHS).\nMax Time allows you to set the number of seconds\nbefore Solver will stop.\nIterations, similar to Max Time, allows you to\nspecify the maximum number of iterations (steps of\nthe Solver algorithm) before stopping.\nIf you want to learn about other options in SOLVER,\nplease reference the SOLVER website:\n\nwww.solver.com\n\nSOLVER Practice Problem\nYou create your own start-up company that caters high-quality organic food directly to a number of customers. You receive a\nnumber of tentative orders and you now have to tell your customers which orders you are going to take. Before embarking\non this journey, you first want to allocate your production capabilities in order to devise a feasible daily production plan that\nmaximizes your profit.\nThere are only three different kinds of food that you order at this early stage of the company: Hummus (H) with garlic pitas,\nan excellent Moussaka (M), and a traditional Tabouleh (T) with parsley and mint.\nEach meal has to be cooked, packaged and delivered. Each operation is run by yourself. You have to deliver between 12PM\nand 2PM everyday, and the food is made on the same day, therefore you estimate that the total number of available cooking\nhours is 4, the total number of packaging hours is 2, and the total number of delivery hours is 2.\nCooking sufficient Hummus for 10 portions requires 1 hour of time, packaging is done at the rate of 20 portions per hour,\nand delivery at the rate of 30 per hour. The cost of the ingredients for 1 portion is $1, and each packaged portion can be sold\nfor $7.\nMoussaka takes more time to prepare: in one hour, the food cooking team can prepare 5 portions. Packaging is done at the\nrate of 15 portions per hour. Since the Moussaka has to be delivered while still warm out of the oven, it is delivered in\nsmaller batches, therefore only 15 portions can be delivered in one hour. The cost of the ingredients for 1 portion is $2, and\nit can be sold for $12.\nFinally, Tabouleh can be prepared at the rate of 15 portions per hour, it can be packaged at the rate of 25 portions per hour,\nand delivered at the rate of 30 per hour. Tabouleh is very inexpensive and one portion only costs $0.5 in raw ingredients, and\ncan be sold for $5. Customers expressed interest in having the following products delivered every day: 20 Hummus meals,\n10 Moussaka meals, and 30 Tabouleh meals.\nNow that we have gone through the basics of SOLVER, please try this practice problem to check\nthat you understand how to set up and solve a Linear Program:\n\nSOLVER Practice Problem\nSOLUTION:\n\nA\nB\nC\nD\nF\nG\nH\n1 DECISION VARIABLES\nHummus\nMoussaka\nTabouleh\n3 Orders\n5 COST AND/OR PROFIT DATA\nHummus\nMoussaka\nTabouleh\n7 Orders\n8 Profit\n4.5\n9 OBJECTIVE\nFUNCTION\n10 Total\n12 CONSTRAINTS\nHummus\nMoussaka\nTabouleh\nTotals\nMaximum\n14 Cooking\n0.100\n0.200\n0.067\n4.000\n<=\n15 Packaging\n0.050\n0.067\n0.040\n2.000\n<=\n16 Delivery\n0.033\n0.067\n0.033\n1.667\n<=\n17 Demand H\n<=\n18 Demand M\n<=\n19 Demand T\n<=\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 4: LP transformation techniques",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/ba190b2b34486b543cc1769a64e3b700_MIT15_053S13_tut04.pdf",
      "content": "LP Transformation Techniques\nThe tutorial will show three\ndifferent types of non-linear\nconstraints that can be transformed\ninto linear constraints. This is\nimportant since linear programs are\nso much easier to solve than non-\nlinear programs.\n\nHello friends. Mita and I\nare here again to introduce\na tutorial on LP\ntransformation techniques\n1.\n\nAmit\nMita\n1 Donald Knuth\nclaimed that a\n\"technique\" is a\ntrick that is used\nmore than once.\nKnuth was the\ndeveloper of TeX,\nand one of the\ngreatest\ncomputer\nscientists of the\n20th century.\nDonald E. Knuth\nPhoto of Donald Knuth\nremoved due to\ncopyright restrictions.\n\nMinimize\n500 x1 + 200 x2 + 250 x3 + 125 x4\nsubject to\n50 x1 + 25 x2 + 20x3 + 15 x4 ≥ 1,500\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 25\n0 ≤ x4 ≤ 15\n\nTV\n\nRadio\n\nMail\n\nNewspaper\n\nAudience Size\n(in 1000s)\n\nCost/Impression\n\n$500\n\n$200\n\n$250\n\n$125\n\nMax # of ads\n\nElla\nWe'll begin with the MSR example which was described\nin the tutorial on algebraic formulations. The goal is to\nminimize the cost of reaching 1.5 million people using\nads of different types.\n\nMinimize\n500 x1 + 200 x2 + 250 x3 + 125 x4\nsubject to\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 25\n0 ≤ x4 ≤ 15\n\nTV\n\nRadio\n\nMail\n\nNewspaper\n\nAudience Size\n\n50,000\n\n25,000\n\n20,000\n\n15,000\n\nCost/Impression\n\n$500\n\n$200\n\n$250\n\n$125\n\nMax # of ads\n\nElla\n|x1 + x2 - x3 - x4| ≤ 5.\nWe are now going to introduce a non-linear constraint.\nSuppose that we require that the total of ads from the\nelectronic media is within 5 of the number of ads of\npaper-based media. This can be modeled as follows:\n|x1 + x2 - x3 - x4| ≤ 5.\n50 x1 + 25 x2 + 20x3 + 15 x4 ≥ 1,500\n\nThe constraint \"|x1 + x2 - x3 - x4| ≤ 5\" is not a linear\nconstraint. However, the constraint can be transformed\ninto linear constraints using a simple trick. Er, I mean\n\"technique\".\nThe constraint \"|x1 + x2 - x3 - x4| ≤ 5\" is equivalent to the\nfollowing two constraints:\n1. x1 + x2 - x3 - x4 ≤ 5 and\n2. -x1 - x2 + x3 + x4 ≤ 5\n\nIf you replace the original constraint by these two\nconstraints, you obtain a linear program that is\nequivalent to the original non-linear program.\n\nMinimize\n500 x1 + 200 x2 + 250 x3 + 125 x4\nsubject to\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 25\n0 ≤ x4 ≤ 15\n|x1 + x2 - x3 - x4| ≤ 5.\nMinimize\n500 x1 + 200 x2 + 250 x3 + 125 x4\nsubject to\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 25\n0 ≤ x4 ≤ 15\nx1 + x2 - x3 - x4 ≤ 5\n-x1 - x2 + x3 + x4 ≤ 5\nThe non-linear program above is equivalent to the linear program\nbelow.\n50 x1 + 25 x2 + 20x3 + 15 x4 ≥ 1,500\n50 x1 + 25 x2 + 20x3 + 15 x4 ≥ 1,500\n\nI think I understand. But\nthe two optimization\nproblems still look different\nto me. What do you mean by\nequivalent?\nTom\nThe optimization problems\nare equivalent in the sense\nthat any feasible solution\nfor the non-linear program\nis feasible for the linear\nprogram, and vice versa.\nThat is, the feasible regions\nare exactly the same.\nStan\nDinosaurs are not feasible\nany more. We are extinct.\nThe set of living dinosaurs is\nequivalent to a linear\nprogram with no feasible\nsolutions.\n\nI really like this trick. Can\nyou always use the trick to\ntransform problems involving\nabsolute values to a linear\nprogram?\nTom\nUnfortunately, we can't. Consider the case in\nwhich we want the number of radio and TV ads\nto differ by at least 2. This corresponds to\nthe constraint \"|x1 - x2 | ≥ 2.\" This is\nequivalent to \"x1 - x2 ≥ 2 OR -x1 + x2 ≥ 2\". But\nit cannot be made linear.\nDinosaurs are absolutely\nextinct.\n\nHow can you prove that it\ncan't be done? How do you\nknow that someone clever\nwon't figure out a\ntransformation?\nYou can see it can't be done in general by\nconsidering the feasible region consisting\nonly of the constraints \"|x1 - x2 | ≥ 2\",\nand 0 ≤ x1 ≤ 4, and 0 ≤ x2 ≤ 4. The feasible\nregion is graphed below, as you can see.\n(after you click)\nThe feasible region is in yellow. It's\nin two separate pieces. But a linear\nprogramming feasible region is always\nconnected. In fact, it's always\nconvex. That is, if two points are\nfeasible, then so is the line segment\njoining the two points.\nx1\nx2\n\nPersonally, I like the next\ntrick even more. It can be\nused when you want to\nminimize the max of two\nobjective functions, or to\nmaximize the minimum of\ntwo functions.\nWhat does it mean to\nminimize the max or\nmaximize the min?\n\"You get the max for the\nminimum at TJ Maxx.\"TM\n\nLet's start with a simple example.\nConsider the following problem:\nmaximize min {3x - 2, -2x + 2}\nsubject to 0 ≤ x ≤ 4\n\nI like examples with\nonly one variable.\nI've graphed it\nhere. Now do\nyou see what I\nmean?\n\nI understand it. But I\nthink you should say\nmore. I'm really\nthinking about Stan\nand want him to\nunderstand it.\nx\n-2x + 2\n3x - 2\n-1\n-2\n\nThe key is to recognize that the minimum\nof these two functions of x can be\ngraphed. The minimum of the red line and\ngreen line is the black function, graphed\nbelow. (Click and you'll see it.)\n\nx\n-2x + 2\n3x - 2\nI get it. The\nmaximum of the\ntwo minimums\noccurs at the top\nof the black curve.\nYes. That's exactly\nright. It occurs where\n-2x + 2 = 3x -2. That\nis, x = 4/5. And the\nmax of the min is 2/5.\n-1\n-2\n\nConsider the MSR problem again.\nBut in this case, we want to\nmaximize the minimum of\n{50x1, 25x2, 20x3, 15x4}.\n\nWhat does it mean? And\nhow can you possibly draw\nthe graph. It involves four\nvariables.\n\nThe minimum of\n{50x1, 25x2, 50x3, 15x4} is the smallest\nnumber of persons reached by one of the\nfour media, as measured in 1000s. We want\nto find the maximum value of z such that\neach medium reaches at least 1000 z people.\nI'll show you how to do it on the next slide.\n\nMinimize\n500 x1 + 200 x2 + 250 x3 + 125 x4\nsubject to\n0 ≤ x1 ≤ 20\n0 ≤ x2 ≤ 15\n0 ≤ x3 ≤ 25\n0 ≤ x4 ≤ 15\nThe previous linear\nprogram is given\nbelow. Now we want\nto maximize z subject\nto the constraint\nthat z is at most the\nnumber of ads seen\nfor each media. Click\nand you'll see.\n\nmaximize z\nz ≤ 50x1, z ≤ 25x2, z ≤ 20x3, z ≤ 15x4\nThis technique works\nwhenever you need to\nmaximize the\nminimum of linear\nfunctions. A similar\ntrick works whenever\nyou want to minimize\nthe maximum of\nlinear functions.\n50 x1 + 25 x2 + 20 x3 + 15 x4 ≥ 1,500\n\nTry it yourself.\nSuppose that you\nwant to minimize the\nmaximum of 3x + 1,\nand 4y - 2, subject to\nlinear constraints.\nHow would you do it?\nClick to find out.\nMinimize\nmax {3x + 1, 4y - 2}\nsubject to\n<linear constraints>\nx ≥ 0, y ≥ 0\nMinimize\nz\nsubject to\n<linear constraints>\nx ≥ 0, y ≥ 0\nz ≥ 3x + 1\nz ≥ 4y - 2\nIt's so simple\nthat even\nsomeone with\na brain the\nsize of a\nwalnut could\ndo it.\nHowever, I\ncan't figure\nout what is\ngoing on.\n\nIf you want to try\nanother exercise,\nyou can try exercise\n28 parts b and c on\npage 36 of Applied\nMathematical\nProgramming.\n\nIt shows that linear\nprogramming can be\nused in data analysis\nas well.\n\nProblem 28 is given\nbelow and continued\non the next slide.\nhttp://web.mit.edu/15.053/www/AMP-Chapter-01.pdf\nProblem statement (c) S. P. Bradley, A. C. Hax, and T. L. Magnanti, from Applied Mathematical Programming, 1977. All rights reserved.\nThis content is excluded from our Creative Commons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nParts b and c rely on\nthe same techniques\nused earlier in this\ntutorial.\nProblem statement (c) S. P. Bradley, A. C. Hax, and T. L. Magnanti, from Applied Mathematical\nProgramming,1977. All rights reserved. This content is excluded from our Creative Commons\nlicense. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nI have one\nmore trick to\nshow you. This\ninvolves \"ratio\nconstraints.\"\nHow come I\nnever get to\nshow the\ntricks. Dogs\nlove tricks.\nMcGraph\nOK. This\none is yours\nto show.\n\nHi everyone, I'm\ngoing to teach you\na new trick.\nThis proves that an old\ndog can teach you a new\ntrick.\nMoving on....\nSuppose that we wanted to\nadd the restriction that at\nleast 20% of all ads had to\nbe by mail. The constraint\nis written below\nx1/(x1 + x2 + x3 + x4) ≥ .2\n\nAs you can see,\nthe constraint is\nnot linear. But if\nwe multiply by the\ndenominator, the\nconstraint\nbecomes linear.\nx1/(x1 + x2 + x3 + x4) ≥ .2\nx1 ≥ .2 (x1 + x2 + x3 + x4)\nEquivalently,\n.8x1 - .2 x2 - .2 x3 - .2 x4 ≥ 0\nBut be careful. You\ncan only multiply by\nthe denominator if\nyou know that the\nvalue of the\ndenominator is\npositive for all\npossible choices of x.\nIf you multiplied both\nsides of an inequality\nby a negative number,\nthe direction of the\ninequality reverses.\nThe new\nconstraint also is\nvalid if x = 0. So,\nyou don't need to\nworry about this\nspecial case.\n\nMost of the time, if\nthere is a constraint\nor objective that\nisn't linear, it\ncannot be\ntransformed into a\nconstraint or\nobjective that is\nlinear.\nBut sometimes transformations into\nlinear programs can be done. As we\nshowed you in this tutorial, you can\ntransform some constraints or\nobjectives involving absolute values\ninto linear constraints and\nobjectives. You can transform\nmaximizing the min of linear\nfunctions or minimizing the max of\nlinear functions. And you can\ntransform ratio constraints into\nlinear constraints. These techniques\nare really useful.\n\nI agree with Nooz.\nThese transformations\nare really useful. And\nthey are not tricky,\nonce you use them a\ncouple of times.\nThat's all for the tutorial on\ntransformations into linear\nprograms. We hope you found it\nworthwhile.\nAmit and I wish you a very good\nday and/or night. We hope to\nsee you again soon.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 5: Sensitivity analysis in 2 dimensions",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/f545165925c65b805a9be141cf52f05e_MIT15_053S13_tut05.pdf",
      "content": "Mita, an MIT\nBeaver\nAmit, an MIT Beaver\nHi, welcome to a\ntutorial on sensitivity\nanalysis for linear\nprograms with two\nvariables.\n\nIt's good to see you\nagain.\n\nFor our running example, we will use David's Tool Company\n(DTC). You may recall that DTC makes slingshot kits and\nshields. They have time constraints for gathering stones,\nsmoothing stones, and delivery. They also have upper bounds\non the total demand for slingshot kits and shields. We use days\ninstead of hours as the unit of time. We assume that each\nperson works for 10 hours per day.\nPack of 10\nSlingshot\nKits\n\nPack of 10\nStone\nShields\nResources\n\nStone Gathering\ntime\n2 days\n3 days\n10 days\n\nStone Smoothing\n1 day\n2 days\n6 days\n\nDelivery time\n1 day\n1 days\n5 days\n\nDemand\n4 packs\n3 packs\nProfit\n30 shekels\n50 shekels\n\nK + S = 5\nThe feasible region is in yellow. The optimal solution is at (2,2).\nThe optimal objective value is z = 160. Sensitivity analysis deals\nwith the following question: how does the optimal solution value\nchange as the data for the problem changes. For example,\nsuppose that we had 11 days of gathering time instead of 10\ndays. By how much would the optimum objective value\nimprove?\nK\nS\nK + 2 S = 6\n2K + 3 S = 10\noptimal solution\n\nWhy should we\nwant to change\nthe data? If we\nare using data,\nthen aren't the\nnumbers correct?\nWe all wish that numbers were correct, but\nthey almost never are. They usually are\nestimates, and sometimes they are very bad\nestimates. For example, we write that it\ntakes 2 days to smooth 10 shields. But this\nis at best an estimate based on previous\nexperience. Each shield may take a\ndifferent amount of time, and the time it\ntakes may depend on how tired the stone\nsmoother is.\nThe upper bound on demand is also an\nestimate, or forecast. And forecasts\nare often terrible. And don't even get\nme started on measures of costs. In\nlarge firms, everyone computes costs a\nlittle differently.\n\nI don't\nunderstand. If\nthe numbers are\nnot correct,\nwon't the\nanswers be\ngarbage? And\nwhat is the point\nof sensitivity\nanalysis on bad\ndata?\nI said that the numbers were usually estimates, not that they\nwere \"garbage.\" By solving the LP, you often get a solution\nthat is useful. It is usually far better than doing nothing or\nrelying entirely on intuition.\n\nAs for sensitivity analysis, it has many uses. You can determine\nhow sensitive the solution is to the data. For example, suppose\nthat changing the demand of slingshot kits by 1 increased the\nprofit by a lot. Then we may want to put some effort into\nadvertising to increase demand. Or perhaps we would do\nsurveys to better estimate the demand.\nOn the other hand, suppose that\nincreased demand of slingshot kits\ndoes not improve the profit. Then\nthere is no advantage in trying to\nincrease the demand. And we\nprobably would not be interested in\nsurveys.\n\nNow I'm even\nmore confused.\nMarketing and\nsurveys are not\npart of the DTC\nproblem.\nOften linear programs are solved in order to gain insights.\nOnce the insights are gained, the problem becomes a little\ndifferent. Management might consider different options.\n\nAnd sensitivity analysis has other uses as well. For example,\nthe DTC problem can be viewed as a \"production mix\" problem.\nIn production mix problems, one may want to check to see if the\noptimal solution for the original problem is a good solution under\na number of different scenarios.\n\nWe'll talk more about sensitivity analysis later in this course.\nOK. I think I\nget it. But why\nare we limiting\nourselves to 2\nvariables and 2\ndimensions?\nBy restricting\nattention to 2\ndimensions, we\ncan use\ngeometrical\ninsights to help\nus understand\nsensitivity\nanalysis.\n\nI really like Tom, but I am\nalso glad to be able to\nstop answering his\nquestions and move on\nto the actual tutorial.\nI wish I could\nask questions\nas good as\nthe ones that\nTom asked.\nTurkeys are\nso smart.\nOur first topic is \"shadow\nprices.\" The shadow price\nof a constraint is the\nchange in the optimal\nobjective function if the\nRHS of the constraint is\nincreased by 1. 1\n1 This definition is usually correct. But we will make it even\nmore precise later on.\n\nIn order to motivate shadow prices,\nconsider the following situation.\nSuppose that one of the children in\ntown, say Beth, volunteered to do\nstone gathering for one day. What\nwould be the extra profit for David,\nassuming that he does not pay her?\nWe could easily solve the linear\nprogram a second time with\nmodified RHS and answer the\nquestion. But instead, we will\ncarefully look at the graphical\nsolution and see what insights\nwe can obtain.\nIn order to do the\nanalysis, we will assume\nthat Beth's ability to do\nstone gathering is the\nsame as given in the\noriginal data.\n\nThe original objective\nobjective function was\n160. The new optimum\nobjective value is 170.\nThus, the shadow price is\n170 - 160 = 10.\nK\nS\nK + 2 S = 6\n2K + 3 S = 10\nK\nS\nK + 2 S = 6\n2K + 3 S = 11\nWe've drawn the feasible region\nbelow. In the first case, there is a\nconstraint 2K + 3S = 10. The optimal\nsolution is at (2, 2). In the second\ncase, we increased the RHS of this\nconstraint to 11, and kept all other\ndata constant. Notice that the\nfeasible region got bigger. The new\noptimal solution is now at (4, 1).\nMaximize 30K + 50S\n\nK\nS\nK + 2 S = 6\n2K + 3 S = 10\nK\nS\nK + 2 S = 6\n2K + 3 S = 11\nBefore going any further about\nshadow prices or their interpretation,\nlet's focus on the optimum solution.\nIn the original problem, the optimum\nsolution was at the intersection of the\nred and blue lines. When we increase\nthe gathering time to 11, the optimum\nsolution is still at the intersection of\nthe red and blue lines.\nAnd if we had increased the\namount of gathering time to\na value between 10 and 11,\nthe optimum solution will still\nbe at the intersection of the\nred and blue lines. Next,\nwe'll compute the optimum\nsolution for any RHS.\n\nK\nS\nK + 2 S = 6\n2K + 3 S = 10 + Δ\nSuppose that the amount of\ngathering time is changed to 10 +\nΔ, where 0 ≤ Δ ≤ 1. The blue line\nbecomes 2K + 3 S = 10 + Δ.\nThe red line is K + 2S = 6. The\nintersection of the two lines\n(expressed as a function of Δ) is\nK = 2 + 2Δ; S = 2 - Δ. The\nobjective value is 30K + 50S =\n160 + 10Δ.\n\nCathy does\nthose\ncalculations in\nher head.\nWow!\nHere is a key point. So long as\n0 ≤ Δ ≤ 1, the optimal solution\nwill be K = 2 + 2Δ; S = 2 - Δ,\nand the optimum objective\nvalue will be 160 + 10Δ. If we\nlet Δ = .6, then the objective\nvalue is 166. Thus, the\nincrease in the optimum\nobjective value is 6 = .6 times\nthe price. Thus the increase in\noptimal objective value is\nproportional to the increase in\nRHS.\nΔ,\n\nK\nS\nK + 2 S = 6\n2K + 3 S = 10 + Δ\nThis is worth repeating. The\noptimal solution is K = 2 + 2Δ; S\n= 2 - Δ. The objective value is\n30K + 50S = 160 + 10Δ.\n\nI said before that this solution is\noptimal so long as 0 ≤ Δ ≤ 1.\nActually, it is optimal so long as -\n1 ≤ Δ ≤ 1, which is exactly the\nsame range as where the\nsolution is feasible.\n\nIf Δ < -1, then K = 2 + 2 Δ < 0,\nwhich is infeasible. If Δ > 1,\nthen K = 2 + 2 Δ > 4, which\nviolates the constraint \"K ≤ 4.\"\nFor all values in between, the\nsolution is optimal, and the\nobjective value is z(Δ) = 160 +\n10Δ.\nΔ,\nBefore we said that\nthe shadow price is\nthe change in z if we\nincrease the RHS by\n1, which is 10 in this\ncase. You can see\nthat the shadow price\nis also the derivative\nof the optimal value\nfunction z(Δ).\n\nWe have illustrated shadow prices on\none example with two variables. But\nwhat we have said is true for any linear\nprogram.\n\nSuppose that the right hand side of\nsome constraint (say constraint C) is\nincreased by Δ, and all other data is\nunchanged. Then the optimal solution\nwill be a linear function of Δ. And the\noptimal objective value z(Δ) will also be\na linear function of Δ.\n\nThe shadow price of constraint C will be\nz(1) - z(0), which is also the derivative of\nz(Δ) at Δ = 0 (assuming that the derivative\nexists).\n\nAnd the shadow price will be valid for all\nΔ such that the solution is feasible.\n\nIn your example, the\nsolution was the\nintersection of the red\nand blue lines. But\nwhat are you talking\nabout for other linear\nprograms?\n\nGreat question, Tom.\n\nIn two dimensional examples (that is,\nwhen there are two variables), the\noptimal solution can be described as\nthe intersection of two lines. As Δ is\nincreased or decreased from 0, the\noptimal solution is still the\nintersection of these two lines;\nhowever, now the solution will be a\nlinear function of Δ.\n\nBut you still haven't\nanswered my question.\nWhat happens if there are\nthree or more variables?\nTom, I'll answer that\nquestion when we\nreturn to the subject\nof sensitivity\nanalysis after\nshowing how to\nsolve linear\nprograms with 3 or\nmore variables. For\nnow, I ask you to\nhave some patience\nand trust.\n\nWe turkeys are very\ntrusting and patient.\n\nThis is a good\ntime to try it on\nyour own. Can\nyou determine\nthe shadow\nprice of the\nsecond\nconstraint?\nI'll get you started.\nConsider what happens\nwhen the second\nconstraint becomes \"K +\n2S = 6 + Δ\". Then find the\nsolution to the equations \"\n\"2K + 3S = 10\"\n\" K + 2S = 6 + Δ\",\nand express the solution\nas a function of Δ. Also\ncompute the optimal\nobjective value z(Δ).\nI'll give you a hint.\n\nThe shadow price\nis 10.\nNooz, that\nisn't a hint.\nThat's the\nanswer.\nBut I really want\nstudents to see\nhow to do the\nwork. By giving\nthem the\nanswer, they\ncan verify that\nthey did it\ncorrectly.\nThat's\npretty foxy.\n\nThe interval in which the\nshadow price is valid is\nthe interval in which the\nsolution is feasible. In\nthis case, the shadow\nprice is not valid if Δ = 1.\nRecall that I first defined the shadow price\nof a constraint to be the change in the\noptimal objective function if the RHS of the\nconstraint is increased by 1. Now you can\nsee why that wasn't quite precise. This\ndefinition is valid so long as the interval in\nwhich the shadow price is valid contains\n\"1\". But the definition is close enough to\nthe truth that it was worth stating.\n\nI'm beginning to\nunderstand. But I still\ndon't get why we are\ndoing this. If I want to\nfind out what happens if\nwe change part of the\ndata, it is really easy to\nsolve a second linear\nprogram.\nTom, I'll answer that question\nwhen we return to the subject of\nsensitivity analysis after showing\nhow to solve linear programs with\n3 or more variables. For now, I\nask you to have some patience\nand trust.\nI just got a\nfeeling of deja\nvu.\n\nOK. I'll try to be\npatient.\n\nSummary for changes in RHS coefficients\n-\nDetermine the binding constraints, that is, the constraints that hold with equality.\n-\nDetermine the change in the \"corner point solution\" as a function of Δ.\n-\nCompute the largest and smallest values of Δ so that the solution stays feasible.\n-\nThe shadow price is valid so long as the \"corner point solution\" remains optimal,\nwhich is so long as it is feasible.\n-\nIf there are three binding constraints, then choose two of these to get the two\nequations to solve, and the technique still works. (But the shadow prices and\nranges depends on which two constraints are chosen.)\nAnd here is a shortcut. Determine the\nbinding constraints, and determine the\nsolution to the constraints if the RHS is\nincreased by 1. (Don't worry about\nfeasibility). The shadow price is the increase\nin the objective value.\n\nWe are going to cover one other type of\nsensitivity analysis in this tutorial. What is the\neffect on the optimum objective function of\nchanging the cost coefficient of one of the\nvariables?\nRemember that the optimal solution\noccurs at a corner point. In this case,\nthe optimum solution was (2, 2),\nwhich was the intersection of the red\nand green line. What do you think\nwill be the new optimal solution if the\nrevenue from shields changes just a\nlittle bit?\n\nIf you answered\nthat the optimal\nsolution changes\njust a little bit, you\nare nearly right.\nElla is being tactful.\nActually, that\nanswer would be\nwrong.\nIf you answered that the\noptimal solution will not\nchange, then you are\ncompletely right.\nBut this raises another\nquestion. How much can\nyou change the cost\ncoefficient so that the\noptimum solution stays the\nsame?\n\nMore on Cost Sensitivity Analysis\nSuppose the objective function is changed to\nz = 30 K + 51 S\n\nK\nS\n2 K + 3 S = 10\nK + 2 S = 6\nIf the same solution K = 2, S = 2, stays optimal, then the optimal\nobjective value increases from 160 to 162. (Note that the increase is the\noptimal value for S).\nIf the cost coefficient of S is\nincreased by Δ, then the\nrevised objective function is\nz = 30 K + (50 + Δ) S\nAssuming that the current\noptimal solution stays\noptimal, then the objective\nincreases to\nz = 160 + 2Δ\nThe key issue is the following: how large and small can Δ be\nso that the optimal solution remains optimal?\n\nDetermining Bounds on Cost Coefficients\nSuppose the objective function is changed to\nz = 30 K + (50 + Δ) S\nAs Δ increases or decreases, the slope of the objective line changes.\nCurrently the optimum solution is at the corner point (2, 2). If the slope\nof the objective function changes enough, then the optimum solution\nwill become an adjacent corner point, either (0, 3) or (4, 1).\n\nK\nS\n2 K + 3 S = 10\nK + 2 S = 6\nTo figure out the answer,\nremember the geometric method\nfor solving a 2-variable LP. One\nshifts the isoprofit line until it\nreaches the maximum level that\ntouches the feasible region.\n\nDetermining Bounds on Cost Coefficients\nIf Δ = -5, the objective is parallel to 2 K + 3 S = 10\nSo (2, 2) remains optimal if -5 ≤ Δ ≤ 10.\n\nK\nS\n2 K + 3 S = 10\nK + 2 S = 6\nIf Δ = 10, the objective is parallel\nto \"K + 2 S = 6\". When Δ = 10,\nthen, every point on the line\nsegment from (0,3) to (2, 2) is\noptimal.\n\nSuppose the objective function is changed to\nz = 30 K + (50 + Δ) S\nIf Δ = 0, the optimal solution is (2, 2). This\nsolution stays optimal for small positive Δ so\nlong as Δ < 10.\n\nWhen Δ = 10, the isoprofit line is\n30K + 60S = 180. This is the\nsame line as K + 2S = 6.\n\nDetermining Bounds on Cost Coefficients\nIf Δ = -5, the objective is parallel to 2 K + 3 S = 10\nSo (2, 2) remains optimal if -5 ≤ Δ ≤ 10.\n\nK\nS\n2 K + 3 S = 10\nK + 2 S = 6\nWhen Δ = -5, the isoprofit line is\n30 K + 45 S = 150.\nThis is the same line as\n2K + 3S = 10.\nWe still assume that the objective function is\nz = 30 K + (50 + Δ) S.\nIf Δ is between 0 and -5, the optimal solution\nis (2, 2). If Δ = -5, then, every point on the line\nsegment from (2, 2) to (4, 1) is optimal.\n\nAs Δ changes from -inf to inf, each\nof the five corner points will be\noptimal within a segment.\n\nSummary for Changes in the Cost Coefficients\nSuppose that we want to modify the cost coefficient for a variable xj. We\nwant to increase it from cj to cj + Δ.\n-\nDetermine the binding constraints and the current corner point\nsolution, say x*.\n-\nCompute the largest and smallest values of Δ so that the x* remains\noptimal. In two dimensions, this will occur when the revised objective\nfunction is parallel to one of the constraints.\n\nI really like 2 variable LPs! They are my\nfavorite LPs, except possibly for LPs with only\none variable.\n\nLast Slide\nBy the way, 2-D LPs are\nnot so important in and of\nthemselves. But by\nknowing how to do\nsensitivity analysis in 2-D,\nit's easier to understand\nwhat happens with\nproblems with more\nvariables.\nThat concludes this tutorial\nof sensitivity analysis for\nLinear Programming in two\ndimensions.\nI hope it was helpful. So\nlong!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 6: Converting a linear program to standard form",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/257e9a3322667b121cb3a8498523e6f2_MIT15_053S13_tut06.pdf",
      "content": "Converting a Linear Program to Standard Form\nMita, an MIT\nBeaver\nAmit, an MIT Beaver\nHi, welcome to a\ntutorial on converting\nan LP to Standard\nForm.\n\nWe hope that you\nenjoy it and find it\nuseful.\n\nLinear Programs in Standard Form\nmax z = 3x1 + 2x2 - x3 + x4\n\nx1 + 2x2 + x3 - x4 ≤ 5 ;\n\n-2x1 - 4x2 + x3 + x4 ≤ -1;\n\nx1 ≥ 0, x2 ≤ 0\nAn LP not in Standard Form\nnot equality\nnot equality, and negative RHS\nx2 is required to be nonpositive;\nx3 and x4 may be positive or\nnegative.\nWe say that a linear program is in standard form if\nthe following are all true:\n1. Non-negativity constraints for all variables.\n2. All remaining constraints are expressed as\nequality constraints.\n3. The right hand side vector, b, is non-\nnegative.\nElla\nI think it is really cool\nthat when Ella speaks,\nsome of her words are\nin red, and some are\nunderlined. I wish I\ncould do that.\nStan\n\nWhy do students need\nto know how to convert\na linear program to\nstandard form?\nWhat's so special\nabout standard form?\nThe main reason that we care about\nstandard form is that this form is the starting\npoint for the simplex method, which is the\nprimary method for solving linear programs.\nStudents will learn about the simplex\nalgorithm very soon.\n\nIn addition, it is good practice for students to\nthink about transformations, which is one of\nthe key techniques used in mathematical\nmodeling.\nNext we will show\nsome techniques\n(or tricks) for\ntransforming an\nLP into standard\nform.\nTom\n\nConverting a \"≤\" constraint into standard form\nWe first consider a simple\ninequality constraint. The\nfirst inequality constraint of\nthe previous LP is\nx1 + 2x2 + x3 - x4 ≤ 5\nNooz can speak in red,\njust like Ella. How\ndoes he do that?\nWow! I just\nspoke in\nboldface. Cool!\nTo convert a \"≤\" constraint to\nan equality, add a slack\nvariable. In this case, the\ninequality constraint becomes\nthe equality constraint:\nx1 + 2x2 + x3 - x4 +s1 = 5.\nWe also require that the slack\nvariable is non-negative. That\nis s1 ≥ 0.\n\ns1 is called a slack\nvariable, which measures\nthe amount of \"unused\nresource.\" Note that\ns1 = 5 - x1 - 2x2 - x3 + x4.\n\nConverting a \"≥\" constraint into standard form, and\nconverting inequalities with a negative RHS.\nTo convert a \"≥\" constraint to an\nequality, add a surplus variable.\nWe next consider the\nconstraint\n-2x1 - 4x2 + x3 + x4 ≤ -1\nI know how to do that\none. Just add a slack\nvariable, like we did on\nthe last slide.\nNice try, Tom, but incorrect.\nFirst we have to multiply\nthe inequality by -1 in order\nto obtain a positive RHS.\nThen we get\n2x1 + 4x2 - x3 - x4 ≥ 1.\nThen we add a surplus\nvariable and get\n2x1 + 4x2 - x3 - x4 - s2 = 1.\n\ns2 is called a surplus\nvariable, which\nmeasures the amount by\nwhich the LHS exceeds\nthe RHS. Note that\ns2 = 2x1 + 4x2 - x3 - x4 -1\nTo convert a \"≤\" constraint to an\nequality, add a slack variable.\n\nGetting Rid of Negative Variables\nNext, I'll show you how to\ntransform the constraint\nconstraint: x2 ≤ 0\ninto standard form.\n\nCan't we just\nwrite:\nx2 + s3 = 0 and\ns3 ≥ 0?\nTom, what you wrote is correct, but it doesn't help.\nStandard form requires all variables to be non-negative.\nBut after your proposed change, it is still true that x2 ≤ 0.\nThe solution in this case is a substitution of variables.\nWe let y2 = -x2. Then y2 ≥ 0. And we substitute -y2 for\nx2 wherever x2 appears in the LP. The resulting LP is\ngiven below. (after you click.)\n\nmax z = 3x1 + 2x2 - x3 + x4\n\nx1 + 2x2 + x3 - x4 + s1 = 5 ;\n\n2x1 + 4x2 - x3 - x4 - s2 = 1;\n\nx1 ≥ 0, x2 ≤ 0, s1 ≥ 0, s2 ≥ 0\n- 2y2\n- 2y2\n- 4y2\ny2 ≥ 0\n\nGetting Rid of Variables that are\nUnconstrained in Sign\nNext, we'll show\nyou how to get rid\nof a variable that\nis unconstrained\nin sign. That is, it\ncan be positive or\nnegative.\n\nActually, we'll show you two ways. The first way is\nsubstitution. For example, x3 below is unconstrained\nin sign. (Sometimes we call this a free variable.)\nNotice that the second constraint can be rewritten as:\nx3 = 2x1 - 4y2 - x4 - s2 - 1.\n\nNow substitute 2x1 - 4y2 - x4 - s2 - 1 for x3 into the\ncurrent linear program. Notice that you get an\nequivalent linear program without x3. You can see it on\nthe next slide.\n\nmax z = 3x1 - 2y2 - x3 + x4\n\nx1 - 2y2 + x3 - x4 + s1 = 5 ;\n\n2x1 - 4y2 - x3 - x4 - s2 = 1;\n\nx1 ≥ 0, y2 ≥ 0, s1 ≥ 0, s2 ≥ 0\n\nGetting Rid of Free Variables by Substitution\nmax z = 3x1 - 2y2 - x3 + x4\n\nx1 - 2y2 + x3 - x4 + s1 = 5 ;\n\n2x1 - 4y2 - x3 - x4 - s2 = 1;\n\nx1 ≥ 0, y2 ≥ 0, s1 ≥ 0, s2 ≥ 0\nmax z = 1x1 + 2y2 + 2x4 + s2 + 1\n\n3x1 - 6y2 - 2x4 + s1 + s2 = 5 ;\n\nx1 ≥ 0, y2 ≥ 0, s1 ≥ 0, s2 ≥ 0\nWhen we substitute 2x1 - 4y2 - x4 - s2 - 1\nfor x3 here is what we get. (Click now.)\n\nThe variable x4 is also unconstrained in\nsign. You can substitute for it as well.\nAfter this substitution, all that will remain\nis an objective function and non-negativity\nconstraints for x1, y2, s1 and s2.\n\nCathy\nThis trick only works for variables that are\nunconstrained in sign. If you tried\neliminating x1 instead of x3 by substitution,\nthe optimal solution for the resulting LP\nwould not necessarily satisfy the original\nconstraint x1 ≥ 0. So eliminating x1 in this\nmanner would not create an equivalent\nLP.\n\nGetting Rid of Free Variables: Version 2\nmax z = 3x1 - 2y2 - x3 + x4\n\nx1 - 2y2 + x3 - x4 + s1 = 5 ;\n\n2x1 - 4y2 - x3 - x4 - s2 = 1;\nx1 ≥ 0, y2 ≥ 0, s1 ≥ 0, s2 ≥ 0\nThere is an even simpler way of getting\nrid of free variables. We replace a free\nvariable by the difference of two non-\nnegative variables. For example, we\nreplace x3 by y3 - w3, and require y3 and\nw3 to be non-negative. (Click now.) You\ncan then substitute y4 - w4 for x4.\n\nAfter solving this new linear\nprogram, we can find the\nsolution to the original linear\nprogram. For example,\nx3 = y3 - w3 and\nx4 = y4 - w4.\n\nmax z = 3x1 - 2y2 - y3 + w3 + x4\n\nx1 - 2y2 + y3 - w3 - x4 + s1 = 5 ;\n\n2x1 - 4y2 - y3 + w3 - x4 - s2 = 1;\nx1 ≥ 0, y2 ≥ 0, y3 ≥ 0, w3 ≥ 0, s1 ≥ 0, s2 ≥ 0\n\nGetting Rid of Free Variables: Version 2\nmax z = 3x1 - 2y2 - x3 + x4\n\nx1 - 2y2 + x3 - x4 + s1 = 5 ;\n\n2x1 - 4y2 - x3 - x4 - s2 = 1;\nx1 ≥ 0, y2 ≥ 0, s1 ≥ 0, s2 ≥ 0\nThis doesn't make sense\nto me. Before we had a\nvariable x3, and now we\nhave two variables y3 and\nw3. How can two\nvariables be the same as\na single variable?\n\nmax z = 3x1 - 2y2 - y3 + w3 + x4\n\nx1 - 2y2 + y3 - w3 - x4 + s1 = 5 ;\n\n2x1 - 4y2 - y3 + w3 - x4 - s2 = 1;\nx1 ≥ 0, y2 ≥ 0, y3 ≥ 0, w3 ≥ 0, s1 ≥ 0, s2 ≥ 0\nIt depends on what you mean by \"the same.\" Here\nis what we mean. For every solution to the original\nLP, there is a solution to the transformed LP with\nthe same objective value. For example, if there is a\nfeasible solution with x3 = -4, then there is a feasible\nsolution to the transformed problem with the same\nobjective value. In this case, let y3 = 0 and w3 = 4.\n\nSimilarly, if there is a feasible solution for the\ntransformed problem, then there is a feasible\nsolution for the original problem with the same\nobjective value. For example, if there is a\nfeasible solution with y3 = 1, and w3 = 5, then there\nis a feasible solution for the original problem with\nthe same objective value. In this case, let x3 = -4.\nBut for every solution to the\noriginal problem, there are an\ninfinite number of solutions to\nthe transformed problem. If\nx3 = -4, we could have\nchosen y3 = 2 and w3 = 6, or\nany other solution such that\ny3 - w3 = -4.\nTom, that's true. But every one of those\nsolutions will still have the same objective\nfunction value. In each case - y3 + w3 = 4. So,\neven though the two linear programs differ in\nsome ways, they are equivalent in the most\nimportant way. An optimal solution for the original\nproblem can be transformed into an optimal\nsolution for the transformed problem. And an\noptimal solution for the transformed problem can\nbe transformed into an optimal solution for the\noriginal problem.\n\nTransforming Max to Min\nWe still have one last pair of\ntransformations. We will show\nyou how to transform a\nmaximization problem into a\nminimization problem, and how to\ntransform a minimization problem\ninto a maximization problem.\nThis is not part of converting to\nstandard form, but it is still useful.\nmax z = 3x1 + 2x2 - x3 + x4\n\nx1 + 2x2 + x3 - x4 ≤ 5 ;\n\n-2x1 - 4x2 + x3 + x4 ≤ -1;\n\nx1 ≥ 0, x2 ≤ 0\nmin -z = -3x1 - 2x2 + x3 - x4\nWe illustrate with our original linear\nprogram, which is given below. All\nyou need to know is that if we\nmaximize z, then we are minimizing\n-z, and vice versa. See if you can\nuse this hint to figure out how to\nchange the problem to a minimization\nproblem. Then click to see if you are\nright.\nMcGraph\n\nHere is an example\nfor which you can test\nout these techniques.\nConsider the LP to\nthe right. See if you\ncan transform it to\nstandard form, with\nmaximization instead\nof minimization.\nmin z = x1 - x2 + x3\n\nx1 + 2x2 - x3 ≤ 3\n\n- x1 + x2 + x3 ≥ 2\n\nx1 - x2 = 10\n\nx1 ≥ 0, x2 ≤ 0\nmax -z = -x1 - y2 - (y3 - y4)\n\nx1 - 2y2 - (y3 - y4) + s1 = 3\n\n- x1 - y2 + (y3 - y4) - s2 = 2\n\nx1 + y2\n= 10\nx1 ≥ 0, y2 ≥ 0, y3 ≥ 0, y4 ≥ 0, s1 ≥ 0, s2 ≥ 0\nTransformations.\ns1 = slack variable for 1st constraint.\ns2 = surplus variable for 2nd constraint.\ny2 = - x2\ny3 - y4 = x3.\nTo see the\nnew\nvariables,\nclick once.\nTo see the\ntransformed\nproblem,\nclick again.\n\nLast Slide\nRemember that the major reason we do\nthis is because the simplex method\nstarts with a linear program in standard\nform. But it turns out that these types\nof transformation are useful for other\ntypes of algorithms too. Perhaps we\nshall see their usefulness again some\ntime later in this course.\nWell, that\nconcludes this\ntutorial on\ntransforming a\nlinear program into\nstandard form. We\nhope to see you\nagain soon.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 7: Degeneracy in linear programming",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/1542510abf20fa6145dfb0b1551be6c2_MIT15_053S13_tut07.pdf",
      "content": "Degeneracy in Linear Programming\nStan\nEllen DeGeneres\nPat Robertson\nI heard that\ntoday's tutorial is\nall about Ellen\nDeGeneres\nSorry, Stan. But the\ntopic is just as\ninteresting. It's\nabout degeneracy in\nLinear Programming.\nDegeneracy? Students at\nMIT shouldn't learn about\ndegeneracy. And I heard\nthat 15.053 students have\nalready studied convicts'\nsex.\nActually, they studied\nconvex sets.\nPhoto removed due\nto copyright\nrestrictions.\nPhoto removed due\nto copyright\nrestrictions.\n\nWhat is degeneracy?\n-\nAs you know, the simplex algorithm starts at a corner point and moves\nto an adjacent corner point by increasing the value of a non-basic\nvariable xs with a positive cost coefficient.\n\n-\nTypically, the entering variable xs does increase in value, and the\nobjective value z improves. But it is possible that xs does not increase\nat all. This situation can occur when one of the RHS coefficients is 0.\n\n-\nIn this case, the objective value and solution does not change, but\nthere is an exiting variable. This situation is called degeneracy.\nx1\n-3\n-4\n=\n=\nx2\nx4\nx3\n-3\n-z\n=\n-2\nA basic feasible solution is\ncalled degenerate if one\nof its RHS coefficients\n(excluding the objective\nvalue) is 0.\nThis bfs is degenerate.\n\nNooz\nElla\nThanks. That was a\nshort tutorial.\nNo, Nooz**. This tutorial\nhas many more slides.\nDegeneracy adds\ncomplications to the simplex\nalgorithm. And if you\nunderstand what occurs\nunder degeneracy, you really\nunderstand what is going on\nwith the simplex algorithm.\n\n** As you know, \"No,\nNooz\" is good news.\"\nIncidentally, if you are\nreading this tutorial before\nyou have understood the\nsimplex algorithm, you\nshould stop reading. You\nreally need to understand\nthe simplex algorithm in\norder to understand this\ntutorial.\n\nDegeneracy and Basic Feasible Solutions\n-\nWe may think that every two distinct bases lead to two different\nsolutions. This would be true if there was no degeneracy. But with\ndegeneracy, we can have two different bases, and the same feasible\nsolution.\nWe now pivot on the \"2\" in\nConstraint 2 and obtain a second\ntableau.\nx1\n-3\n-1\n=\n=\nx2\nx4\nx3\n-3\n-z\n=\n-2\nx1\n-3\n-1\n=\n=\nx2\nx4\nx3\n-3\n-z\n=\n-2\n-2\n-1\n-2\n-3/2\n-3/2\nBoth tableaus correspond to the\nsame feasible solution with z = 2,\nx1 = x2 = x4 = 0; x3 = 6. But the\nbasic variables and the coefficients\nof the two tableaus are different.\n-1/2\n1/2\n\nx1\n-3\n-4\n=\n=\nx2\nx4\nx3\n-2\nz\n=\nx1\n-3\n-1\n=\n=\nx2\nx4\nx3\n-2\nz\n=\n-1/2\n1/2\n-3/2\n-3/2\nNot only are the two tableaus different, but the second tableau satisfies the\noptimality conditions. This means that the first basic feasible solution was\noptimal, even though we were not aware that this solution was optimal when\nwe looked at the first tableau.\nTom\nBut this all seems\nvery technical. Is it\nreally important?\nTom, it turns out to be very\nimportant. We can show that the\nsimplex algorithm is finite and\nguaranteed to be valid when there is\nno degeneracy. When there is\ndegeneracy, we have to modify the\nalgorithm to guarantee finiteness.\n\nI'm now going to reveal a\nsecret. The definition\nof degeneracy given here\nis slightly different than\nthe one given in the\nlecture on geometry. To\nthe right is a picture of\nwhat I said in that\nlecture.\nWhen a corner point is the\nsolution of two different sets\nof equality constraints, then\nthis is called degeneracy. This\nwill turn out to be important\nfor the simplex algorithm.\nIt wasn't that I\nwas misinforming\nyou. There just\nwasn't a better\nway of describing\nthe situation\nduring that lecture.\nFrom\nLecture 3.\n\nx1\n-3\n-1\n=\n=\nx2\nx4\nx3\n-3\n-z\n=\n-2\nx1\n-3\n-1\n=\n=\nx2\nx4\nx3\n-3\n-z\n=\n-2\n-2\n-1\n-2\n-3/2\n-3/2\n-1/2\n1/2\nBut it is possible for\nthe RHS to be 0, and\nfor there still to be\nonly one basis for that\nsolution. The tableau\nto my right illustrates\nthis point.\nWhenever two\ndifferent bases\ncorrespond to the\nsame basic solution,\nthen some basic\nvariable must be 0.\n(If variable xs is\npivoted in, its value\nwill change unless\nthe RHS is 0.)\nx1\n-3\n-1\n=\n=\nx2\nx3\n-3\n-z\n=\n-2\n-2\n-2\n-3/2\nWe say that we say that a basis is\ndegenerate if a basic variable is\n0. This is far simpler than the\nalternative definition in which one\nneeds to check if there are two\nbases corresponding to the same\nsolution..\n\nThe Finiteness of the Simplex Algorithm\nwhen there is no degeneracy\nRecall that the simplex algorithm tries to increase a non-basic variable xs. If there is\nno degeneracy, then xs will be positive after the pivot, and the objective value\nwill improve.\n\nRecall also that each solution produced by the simplex algorithm is a basic feasible\nsolution with m basic variables, where m is the number of constraints. There are\na finite number of ways of choosing the basic variables. (An upper bound is n! /\n(n-m)! m! , which is the number of ways of selecting m basic variables out of n.)\n\nSo, the simplex algorithm moves from bfs to bfs. And it never repeats a bfs because\nthe objective is constantly improving. This shows that the simplex method is\nfinite, so long as there is no degeneracy.\n\nCycling\n-\nIf a sequence of pivots starting from some basic feasible solution\nends up at the exact same basic feasible solution, then we refer to this\nas \"cycling.\" If the simplex method cycles, it can cycle forever.\n\n-\nKlee and Minty [1972] gave an example in which the simplex algorithm\nreally does cycle. Here is their example, with the pivot elements\noutlined.\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n3/4\n-20\n1/2\n-6\n-3\n1/4\n-8\n-1\n1/2\n-12\n- 1/2\nInitial tableau\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n3 1/2\n-33\n-3\n-3\n-32\n-4\n1 1/2\n-15\n-2\nAfter 1 pivot\n\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n-18\n-1\n-1\n-3\n-84\n-12\n3/8\n-3 3/4\n- 1/2\n1/4\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n1/2\n-16\n-1\n-3\n-2 1/2\n-6\n- 1/4\n5 1/3\n1/3\n- 2/3\n2 1/2\n-56\n-2\nCycling Example Continued\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n- 1/4\n-3\n-3\n1/8\n-10 1/2\n-1 1/2\n- 3/64\n3/16\n1/16\n- 1/8\n- 1/8\n10 1/2\n1 1/2\n-1\nAfter 2 pivots\nAfter 3 pivots\nAfter 4 pivots\n\nCycling Example Continued\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n1 3/4\n-44\n- 1/2\n-3\n-1 1/4\n1/2\n-3\n1/6\n-4\n- 1/6\n1/3\n-z\nx1\nx2\nx3\nx4\nx5\nx6\nx7\nRHS\n3/4\n-20\n1/2\n-6\n-3\n1/4\n-8\n-1\n1/2\n-12\n- 1/2\nAfter 5 pivots\nAfter 6 pivots\nAnd Klee and Minty said \"The first\nshall be last and the last shall be\nfirst\", and they saw that their\nexample of cycling was good.\n\nI have another\nadmission. In the\nlecture on geometry, I\nsaid that the simplex\nmethod was finite. But\nit's only finite if we are\nguaranteed not to repeat\nsolutions. In particular,\nit is finite if there is no\ndegeneracy.\nI still don't understand\nwhat you are talking\nabout. But I am very\nsaddened that you didn't\ntell the truth in the\nother lecture.\nCheer up, Stan. There is a technique\nthat prevents bases from repeating\nin the simplex method, even if they\nare degenerate bases. This will\nguarantee the finiteness of the\nsimplex algorithm, provided that the\ntechnique is used.\n\nIs the simplex method finite?\nSo, how do we\nknow that the\nsimplex method\nwill terminate if\nthere is\ndegeneracy?\nThere are several approaches to\nguaranteeing that the simplex method will\nbe finite, including one developed by\nProfessors Magnanti and Orlin. And there\nis the perturbation technique that entirely\navoids degeneracy. But we're going to\nshow you Bland's rule, developed by Bob\nBland. It's the simplest rule to guarantee\nfiniteness of the simplex method.\nBob Bland\nPhoto of Bob Bland\nremoved due to\ncopyright restrictions.\n\nx1\n-1\n=\n=\n=\nx2\nx4\nx3\n-z\n=\n-20\nBland's Rule.\n1.The entering variable should be the lowest\nindex variable with positive reduced cost.\n2.The leaving variable (in case of a tie in the\nmin ratio test) should be the lowest index row.\n(It is the row closest to the top, regardless of\nthe leaving variable.)\nx6\nx5\nVariables x1, x2,\nand x7 are all\neligible to enter\nthe basis. We\nchoose the\nlowest index\none, which is x1.\n{click now}\n\nWe can pivot on\nthe \"4\" in the\ncolumn for x1.\nOr we can pivot\non the 1. We\npivot on the 4\nbecause it is the\nrow that is\ncloses to the\ntop.\n\nMore on Bland's rule\nIf you use Bland's rule,\nthe simplex algorithm will\nnever repeat a basis.\nBut no one knows why it\nworks. It remains a\nmystery to this day.\nNooz is not being serious. I proved\nthat using the rule will prevent\nbases from repeating. I know why\nit works, and so does anyone who\nhas read my proof.\nBut the proof is too complicated\nto present here. So, please take\nour word for it.\nThis seems both\neasy and practical.\nBut why does it\nwork?\nBob Bland\nPhoto of Bob Bland\nremoved due to\ncopyright restrictions.\n\nDegeneracy and the Simplex Algorithm\nThe simplex method\nwithout degeneracy\nThe simplex method with\ndegeneracy\nThe solution changes after each pivot.\nThe objective value strictly improves\nafter a pivot.\nThe solution may stay the same after\na pivot. The objective value may stay\nthe same.\nThe simplex method is guaranteed to\nbe finite.\nThe simplex method may cycle and\nbe infinite. But it becomes finite if we\nuse the Bland's rule or several other\napproaches.\nTwo different tableaus in canonical\nform give two different solutions.\nIt is possible that there are two\ndifferent sets of basic variables that\ngive the same solution.\n\nDegeneracy vs. Alternative Optima\n-1\n=\n=\nx2\nx4\nx3\n-4\n-z\n=\n-8\nx1\nThe optimal solution is: z = 8,\nx1 = x2 = 0, x3 = 6, and x4 = 2.\nx1 is nonbasic, and its cost\ncoefficient is 0. Increasing x1\n(and adjusting x3 and x4) does\nnot change z, and so the\nsolution value remains optimal.\nFinally, degeneracy is similar to but\ndifferent from the condition for\nalternate optima. In degeneracy,\none of the RHS values is 0. For\nalternate optima, in an optimal\ntableau one of the non-basic cost\ncoefficients is 0.\n\nSummary\n-\nDegeneracy is important because we want the simplex method to be finite,\nand the generic simplex method is not finite if bases are permitted to be\ndegenerate.\n\n-\nIn principle, cycling can occur if there is degeneracy. In practice, cycling\ndoes not arise, but no one really knows why not. Perhaps it does occur, but\npeople assume that the simplex algorithm is just taking too long for some\nother reason, and they never discover the cycling.\n\n-\nResearchers have developed several different approaches to ensure the\nfiniteness of the simplex method, even if the bases can be degenerate. Bob\nBland developed a very simple rule that prevents cycling.\n\nIt also turns out that one can test a\nstudent's knowledge of the simplex\nalgorithm by asking questions about what\nwill happen if the current bfs is\ndegenerate.\nDoes this mean that\nwe can expect\nquestions on a test\nthat involve\ndegeneracy?\nThat is\nexactly what\nI mean.\nI'm sure that the 15.053 students will\nunderstand it well. As for me, I'm\nnot taking 15.053 for credit.\n\nLast Slide\nAnd that is all for our tutorial\non degeneracy. We hope to\nsee you again for our next\ntutorial.\nWe thank Stan, Tom, Ella, and\nNooz for sharing all of their\ninsights on degeneracy. I also\nwant to thank Ellen DeGeneres for\nmaking a cameo appearance.\nAmit\nMita\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 8: 2-person 0-sum games",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/2e66a9d9a74dc5c11b620f70663400da_MIT15_053S13_tut08.pdf",
      "content": "Diagram\nshowi\nng t\nhe rules of\nthe rock, pap\ner, scissors game.\nImage by MIT OpenCourseWare.\n\n2-person 0-sum Games\nGame theory is a branch of Mathematics with a wide variety of applications in\neconomics, management science, political science, and engineering. It aims to\nmodels situations in which multiple participants interact or affect each other's\noutcome.\nThe 2-person 0-sum game is a basic\nmodel in game theory. There are two\nplayers, each with an associated set of\nstrategies. While one player aims to\nmaximize her payoff, the other player\nattempts to take an action to minimize\nthis payoff. In fact, the gain of a player is\nthe loss of another.\nIn this tutorial, we introduce 2-\nperson 0-sum game theory,\npresent some useful concepts,\nand discuss how each player can\ndetermine her optimal strategy.\n\nKey elements of a 2-person game:\nOh, great! I\nlove games.\nEach 2-person game consists of\n2 players;\nStrategies available to each player;\nPayoffs for each player;\n-\nthe payoff is the amount of benefit or loss that a\nplayer derives if a particular outcome happens.\n-\nthe payoff of each player depends on her\nchoice, and also depends on the choice of the\nother player.\n\n2-person 0-sum Games:\nIn 2-person 0-sum games the payoff function f can be represented\nas follows.\n\nIf Player 1 chooses strategy s1 and Player 2 selects strategy s2, then\nPlayer 1 will get f (s1,s2) and Player 2 will get -f (s1,s2). We will\nrefer to f (s1,s2) as the value of the game. Player 1 aims to\nmaximize f (s1,s2), while Player 2 attempts to minimize this value.\n\nEven-or-Odd Game:\nLet's play a\ngame!\nThat sounds\ngreat! Where\ndoes one get\nthese dollars?\nOK. This game is called \"evens and\nodds\" and it is also called \"coin\nmatching.\" I'll describe it on the\nnext slide.\nAt the end of the tutorial, I'll let\nyou know how to play the game\noptimally. If you can guess the\noptimum strategy before then,\nthat would be very cool.\n\n2-person 0-sum games\nCoin Matching Problem (Even-Odd Game)\nThere are two players: Player 1 (the row player)\nand Player 2 (the column player);\nEach player simultaneously shows a coin.\nIf both coins are showing are heads, then Player\n1 wins $2 (paid by Player 2). If both coins are\ntails, then Player 1 wins $4. If the coins do not\nmatch, then Player 1 loses $3.\nHere is another\nexample of a game.\n\nDescribing a game\nIs each game completely\ndescribed by the payoff\nmatrix?\nThat's right! Here is a more formal\ndescription.\nNormal-form is a simple way to describe a 2-person 0-sum game by using a so-\ncalled payoff matrix:\n\nEach row (column) of the matrix corresponds to a strategy available to\nPlayer 1 (Player 2). In this case, we refer to Player 1 as the row player (or\nsimply R) and Player 2 as the column player (or simply C).\n\nThe i-j element of the matrix gives the payoff to the row player if she\nchooses i-th row and the column player selects j-th column. The matrix is\ncalled a payoff matrix.\n\nA payoff matrix\nTom\nChaty\n-3\n-3\nHere is a payoff matrix\nfor the Even-Odd game.\nIt is a good way\nto view all the\nbasic elements\nof a game.\nYes, it is! In the rest of the\ntutorial, we will use this way to\nrepresent a game.\n\nPlayer C\nPlayer\nR\n-2\n-1\n-2\nHere is one more example. Each player has three\nstrategies:\n- Player R chooses a row: either row 1, or\nrow 2, or row 3;\n- Player C chooses a column: either column\n1, or column 2, or column 3.\nWe will later refer to these as pure strategies,\nfor reasons that will become apparent when we\ndescribe mixed strategies\nA payoff matrix\nThis matrix is the payoff matrix for Player R, and Player C gets\nthe negative).\nHow much do R and C get if R chooses 1 and C selects 2?\nHow much do R and C get if R chooses 3 and C selects 3?\n\nPlayer C\nPlayer\nR\n-2\n-1\n-2\nHere is one more example. Each player has three\nstrategies:\n- Player R chooses a row: either row 1, or\nrow 2, or row 3;\n- Player C chooses a column: either column\n1, or column 2, or column 3.\nWe will later refer to these as pure strategies,\nfor reasons that will become apparent when we\ndescribe mixed strategies\nA payoff matrix\nThis matrix is the payoff matrix for Player R, and Player C gets\nthe negative). For example,\n-\nIf R chooses 1 and C selects 2, then R gets +1 and C get -1\n-\nIf R chooses 3 and C selects 3, then R gets -2 and C get +2.\n\nBut for the purpose of this example, suppose that Player R were forced to announce a\nrow before Player C makes her decision. If Player R announces\n-\nRow 1, then the player's C best response is Column 1 and R will get -2;\n-\nRow 2, then the player's C best response is Column 2 and R will get -1;\n-\nRow 3, then the player's C best response is Column 3 and R will get -2;\nPlayer R wishes to maximize her payoff and her best pure choice is to announce Row 2.\nIn fact, she takes a maximin strategy to maximize her minimum payoff. This gurantees a\npayoff of at least -1 to Player R, regardless of the player's C strategy.\nWho goes\nfirst?\nPlayer C\nPlayer\nR\n-2\n-1\n-2\nA guaranteed payoff for the Row Player\nIn games, two players make decision at the same\ntime.\n\nBut what if the\ncolumn player\nannounced her\nstrategy first?\nPlayer C\nPlayer R\n-2\n-1\n-2\nA guaranteed maximum payoff to the Row Player\nIf Player C announces\n-\nColumn 1, then R's best response is Row 2 and R gets 2.\n-\nColumn 2, then R's best response is Row 1 and R gets 1.\n-\nColumn 3, then R's best response is Row 1 and R gets 2.\nPlayer C wants to minimize the payoff of Player R, and thus her\nbest pure strategy (if she went first) is to announce Column 2. This\nstrategy is called a minimax pure strategy. It minimizes the\nmaximum payoff from Player C. This shows that the value of the\ngame for the Row Player can always be limited to at most 1.\n\nGood point. And it implies an important mathematical result.\nIf Player R chooses a strategy before Player C, R can guarantee\na payoff of at least\n\nIf Player C chooses a stategy before Player R, then C can\nguarentee that R receives at most\n\nThis implies that\n\nIt seems that\ngoing first is\nalways a\ndisadvantage.\nIf one player chooses prior to the other.\n\nYes! It may be the case that the lower bound and the upper\nbound on the value of the game coincide. In this case, there\nare strategies such that\n\nThe pair is called a saddle point of the game. It is\nalso called a pure Nash equilibrium since no player has an\nintensive to change her strategy.\nCan the\nequality hold in\nsome games?\nSaddle-point\nPlayer C\nPlayer\nR\n-1 -2 -1\n2 2 1\n-1 -1 0\nIn this example, the\npure Nash equilibrium\noccurs when Player R\nchooses 2 and C selects\n3.\n\nProb\nPlayer C\nPlayer\nR\n0.5\n-2\n0.5\n-1\n-2\nMixed strategies\nSince R and C go at the same\ntime, it would seem pretty\ndumb for R to announce in\nadvance what she will choose.\nAnd she needs to mix it up.\nWhat would happen if she used\na coin to decide whether to\nselect Row 1 or 2?\nWhat you said is a mixed (also called randomized)\nstrategy since R assigns a probability to each row and\nselects a row accordingly. This plays a key role in game\ntheory. In this case, R might do pretty well even if she\n(stupidly) announced her strategy in advance, so long as\nC couldn't see the result of the coin flip. Let's see what is\nshe Player's C best response. If C chooses Column\n-\n1, then R gets -2 with probability 0.5 or 2 with\nprobability 0.5; So R's expected payoff is 0.\n-\n2, then R gets 1 with probability 0.5 or 1 with\nprobability 0.5; So R's expected payoff is 0.\n-\n3, then R gets 0 with probability 0.5 or 2 with\nprobability 0.5; So R's expected payoff is 1.\nSince C aims to minimize the player's R payoff, she will\nchoose Column1 or Column 2. Thus, R can guarantee an\nexpected payoff of at least 0, which is much better than\nshe could guarantee before.\n\nYes. Here is the way to model the problem of finding her best strategy.\nFor each row i, let the decision variable xi be the probability of selecting\nrow i. If C chooses\n- Column 1, then R's expected value is P1:=(-2)x1+2x2+1x3=-\n2x1+2x2+x3;\n- Column 2, then R's expected value is\nP2:= 1x1+(-1)x2+2(0)x3=x1-x2;\n- Column 3, then R's expected value is\nP3:= 2x1+(0)x2+(-2)x3=2x1-2x3.\nThus Player R's expected value is at least\nmin{P1, P2, P3}.\nPlayer R will assign the probabilities x1,x2 and x3 in such a way to\nmaximize min{P1, P2, P3} in order to determine her best mixed\nstrategy.\nGreat!\nCan she\ndo even\nbetter?\n\nProb\nPlayer C\nPlayer\nR\nx1\n-2\nx2\n-1 0\nx3\n0 -2\nOptimal\nmixed\nstrategies\n\nYes it is. Here is the optimization problem:\nmax min{P1,P2,P3}\nP1=-2x1+2x2+x3,\nP2= x1-x2,\nP3=x2+2x3,\nx1+x2+x3=1,\n\nx1,x2,x3≥0.\nNotice that probabilities must sum to 1, since Player R is obligated to\nchoose a row. In addition, probabilities can never be negative! These are\nour constraints.\nIntroduce a new variable z to be min={P1,P2,P3}.\nThen, we can express the above problem as a linear program.\nmax z\n\nz ≤ -2x1+2x2+x3,\n\nz ≤ x1-x2,\n\nz ≤ x2+2x3,\n\nx1+x2+x3=1,\n\nx1,x2,x3 ≥ 0.\n\nI see that\ncomputing the best\nmixed strategy for\nPlayer R is an\noptimization\nproblem. Is it a\nlinear program?\n\nThe optimal solution is x1= 7/18, x2=5/18, x3=1/3 with\noptimal value Z=1/9 .\nSo, with a mixed strategy R guarantees obtaining at least 1/9.\n\nAs we have already observed an upper\nbound for R (or equivalently a lower\nbound for C) can be computed if Player R\nis in a position to take her strategy after\nhearing the Player's C strategy.\nHow can we obtain an upper\nbound for R when she is\npermitted to choose a mixed\nstrategy?\n\nPlayer C\nProb\ny1\ny2\ny3\nPlayer\nR\n-2\n-1\n-2\nLet yj be the probability of selecting column j, for j=1,2,3. If R chooses\n- Row 1, then R's expected payoff is P1:= (-2)y1+y2+(2)y3=-2y1+y2+2y3;\n- Row 2, then R's expected payoff is P2:= 2y1+(-1)y2+(0)y3= 2y1-y2 ;\n- Row 3, then R's expected payoff is P3:= (1)y1+(0)y2+(-2)y3=y1-2y3.\nPlayer R wants to maximize her expected payoff, so Player R max expected payoff is\nmax{P1, P2, P3}.\nTherefore, Player C must assign the probabilities y1,y2 and y3 in such a way to minimize\nmax{P1, P2, P3} in order to determine her best mixed strategy.\n\nThanks! I think we can write a linear\nproblem to determine an optimal\nmixed strategy for Player C in the same\nmanner.\n\nExactly! Here is the linear program:\nmin w\n\nw ≥ -2y1+y2+2y3;\nw ≥ 2y1-y2 ;\nw ≥ y1-2y3,\n\ny1+y2+y3 = 1,\n\ny1,y2,y3 ≥ 0.\n\nThe optimal solution is y1= 1/3, y2=5/9, y3=1/9 with\noptimal value w=1/9 .\nSo, with this random strategy R gets only 1/9.\n\nWait a moment! I see that the payoff for\nplayer R is the same, whether Player R\nannounces her strategy first or Player C. Is\nthat a coincidence?\nIt's no coincidence that the optimal average payoff to the game is 1/9,\nassuming that both players play optimally, and it does not matter who goes\nfirst. This result holds for 2-person 0-sum games in general:\n\nFor 2-person 0-sum games, the maximum payoff that R can guarantee\nby choosing a random strategy is the minimum payoff to R that C can\nguarantee by choosing a random strategy.\n\n2-person 0-sum games in general\n-\nLet x denote a random strategy for R, with value z(x) and let y denote a random\nstrategy for C with value w(y). Then\nz(x) ≤ w(y) for all x, y.\n-\nThe optimum x* can be obtained by solving an LP. So can the optimum y*. In addition,\nz(x*) = w(y*).\n-\nIn other words, the maximum payoff that R can guarantee by choosing a random\nstrategy is the minimum payoff to R that C can guarantee by choosing a mixed strategy.\n\n-\nNotice that z(x*) is an upper bound on the payoff of Player R and w(y*) is a lower\nbound on the payoff of Player C. Player R wishes to maximize her payoff, while Player C\nattempts to minimize her payoff. Since z(x*) = w(y*), neither player can benefit by a\nunilateral change in strategy, even when each player is aware of the other player's\nstrategy. In this case, the pair (x*,y*) is called a mixed Nash equilibrium.\n\nA 2-dimensional view of game theory\nNotice that\n- if R goes first and decides on a strategy\nof choosing row 1 with probability p\nand row 2 with probability 1-p, then\nthe strategy for C is easily determined.\n- so R can determine the payoff as a\nfunction of p, and then choose p to\nmaximize the payoff.\nFollow me in the next slides to illustrate this\nmethod with the Even-or-Odd game.\nIn the class, I heard we\ncan easily to solve 2-\nperson 0-sum game\ngraphically theory\nwhen there are two\nstrategies per player.\nHow does it work?\n\nThanks! Learning from examples is my\nfavorite way of learning. It is way\nmore fun than learning from mistakes.\n\n-1\n-2\n-3\n-4\n-1\n-2\n-3\n-4\nprobability of selecting no. 1 by Tom\npayoff\nI want to minimize the payoff. What\nwould my optimal strategy be?\nWe graph the payoff as a function of\nthe probability p given that I select\nRow 1.\n-4\n-2\nCathy\nTom\nI'll choose column 1 with\nprobability p and column 2\nwith probability 1-p.\nPayoff for Row\n1.\n\n-1\n-2\n-3\n-4\n-1\n-2\n-3\n-4\npayoff\nWe graph the payoff for Row 2 as p\ngoes from 0 to 1.\nHere is the payoff if you choose\nRow 2.\n\n-4\n-2\nCathy\nTom\nprobability of selecting no. 1 by Tom\nPayoff for Row\n2.\n\n-1\n-2\n-3\n-4\n-1\n-2\n-3\n-4\npayoff\nSo, what\ncolumn\nshould I\npick?\nI want to maximize the payoff to me. So here is my\nstrategy as a function of p:\n-\nif p<7/12, my best response is Row 1;\n-\nIf p>7/12, my best response will be Row 2;\nSince you want to minimize my payoff, your best strategy\nis to set p=7/12. This guarantees that you can limit my\nexpected winnings to at most 1/12.\n-4\n-2\nCathy\nTom\n7/12\nprobability of selecting no. 1 by Tom\n\n-1\n-2\n-3\n-4\n-1\n-2\n-3\n-4\npayoff\nBut what's the best that\nyou can do?\nIt now my turn to choose an optimal\nstrategy. I'll let q denote the probability\nthat I select Row 1. I need to figure out\nthe best choice of q.\nHere is my payoff if you select Column 1.\n-4\n-2\nCathy\nTom\nq = Prob(Cathy selects Row 1)\nPayoff for Column 1.\n\n-1\n-2\n-3\n-4\n-1\n-2\n-3\n-4\npayoff\nI see! You take a similar\napproach.\nHere is my payoff if you call out 2.\n-4\n-2\nCathy\nTom\nRemember that your strategy is minimax,\nbut mine is maximin.\nprobability of selecting no. 1 by Cathy\nPayoff for Column 2.\n\n-1\n-2\n-3\n-4\n-1\n-2\n-3\n-4\npayoff\n-4\n-2\nCathy\nTom\n7/12\nI can tell you now what is your best strategy:\nI want to minimize the payoff. So here is my strategy as a\nfunction of q:\n-\nif q<7/12, my best response is Column 1;\n-\nIf q>7/12, my best response will be Column 2;\nSince you want to maximize the payoff, the best strategy is to\nset q=7/12. This guarantees you can get at least 1/12.\nprobability of selecting no. 1 by Cathy\nPayoff for Column 1.\nPayoff for Column 2.\n\nDid I do a good job?\nTom, you always do a good job.\nIf we were playing for\nreal, I wouldn't like this\ngame because I would\nlose on average.\nThat's true. If I choose my strategy optimality, I can\nguarantee a minimum payoff 1/12. The best you can do\nis to choose your optimum strategy as well, and\nguarantee that I get no more than 1/12 on average. If\nwe had an equal chance of winning, it would have been\ncalled a fair game. But this game wasn't fair.\n\nShhh. Don't\nlet them know\nthat we're\nhere.\nSo, is there anything\nmore to say?\nWe can say goodbye to the students and\nwish them well.\nI thought that was Amit\nand Mita's job. Where\nare they anyway?\nI don't know. I haven't seen them in ages. Do you\nthink that they may be hiding from us?\n\nNo. They would never do that.\n\nGoodbye everyone.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 9: Transformations in integer programming",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/5b3af480d3aacc8c345c9e0ecfdd4ba4_MIT15_053S13_tut09.pdf",
      "content": "Transformations in Integer Programming\nAmit\nHi, Mita and I are here to\nintroduce a tutorial on\ninteger programming\nmodeling.\n\nMita\nYou can think of it as\ntransformations. Our friends from\n15.053 will explain how to take\nconstraints that are easily\nunderstood and transform them into\ninteger programs.\n\nThis tutorial will include a\nmixture of techniques as well\nas lists of transformations.\nA more comprehensive\ndocument is also available. It\nis entitled \"IP Reference guide\nfor integer programming\nformulations.\" It has the\nfollowing sections.\nIP Reference Guide\n1.\nSubset selection problems.\n2.\nModular arithmetic\n3.\nSimple logical constraints\n4.\nOther logical constraints and\nthe big M method.\n5.\nFixed costs\n6.\nPiecewise linear functions\nand\n7.\nThe traveling salesman\nproblem.\n\nBut first, an important question.\nTom\nWow! That's a lot of\nproblems. Do you really\nexpect students to learn\nall of it?\nWe don't expect students to\nmemorize the techniques. We'll\nfocus on some problems. For\nothers, we will just refer to the\nguide. We'll also make subsets of\nthe guide available for quizzes and\nthe second midterm.\n\nTransforming Logical Conditions\nMax 16x1+ 22x2+ 12x3+ 8x4+ 11x5+ 19x6\n\n5x1+ 7x2+ 4x3+ 3x4+ 4x5+ 6x6 ≤ 14\nxj ∈ {0,1} for each j = 1 to 6\nNooz, the most\ntrusted name in fox.\nI'm going to pretend to add\nconditions on what I will\nchoose. We will then model\nthese logical constraints\nusing integer programming.\nHere is the integer program\nused in the first integer\nprogramming lecture. As you\nrecall, it's based on a game\nshow that I was on.\n\nMax 16x1+ 22x2+ 12x3+ 8x4+ 11x5+ 19x6\n\n5x1+ 7x2+ 4x3+ 3x4+ 4x5+ 6x6 ≤ 14\nxj ∈ {0,1} for each j = 1 to 6\nSuppose that I\nrefuse to select item\n5 if I have also\nselected item 1.\nIn this case, the\nfeasible solutions\nfor Nooz will permit\nx1 = 1 or x5 = 1, but\nnot both.\nThis can be\nmodeled via the\nlinear constraint,\nx1 + x5 ≤ 1\n\nElla\n\nI don't get it. The\nlinear constraint\ndoesn't look anything\nlike the logical\nconstraint.\n.\nWell, Tom. The important\nthing isn't whether it \"makes\nsense\" as a logical constraint.\nThe important thing is that an\noptimal solution for the\ninteger program will produce\nan optimal solution for the\noriginal problem.\n\nBut how will\nwe know\nthat?\nIn this case, we need only focus on\nvariables x1 and x5 to see that the\nconstraint works. We don't need to think\nabout the other variables.\n\nYou see, Nooz just wants to eliminate the\npossibility that items 1 and 5 are both\nselected. In other words, we cannot have\nx1 = 1 and x5 = 1. The linear constraint\naccomplishes the same thing, taking into\naccount that x1 and x5 are both binary.\n\nAnother logical constraint\nMax 16x1+ 22x2+ 12x3+ 8x4+ 11x5+ 19x6\n\n5x1+ 7x2+ 4x3+ 3x4+ 4x5+ 6x6 ≤ 14\nxj ∈ {0,1} for each j = 1 to 6\nSuppose in this\nillustration that I will\ntake item 3 if and only\nif I take item 4. How\ndo we model that?\nIn this case, the feasible\nsolutions for Nooz will\npermit x3 = 1 and x4 = 1,\nor else x3 = 0 and x4 = 0,\nWe can model it as the\nlinear constraint x3 = x4.\n\nCan you\nexplain it to\nme. I liked\nyour last\nexplanation.\nWell, Tom. Before Nooz added the requirement,\nthere were four possibilities for variables x3 and x4:\nx3 = 0, x4= 0; or x3 = 0, x4= 1; or\nx3 = 1, x4= 0; or x3 = 1, x4= 1. But after Nooz added\nhis new restriction, there were only two possibilities:\nx3 = 0, x4= 0; or x3 = 1, x4= 1;\n\nWhen we added the linear constraint\n\"x3 = x4\"\nwe left the same two possible solutions for x3 and x4.\nSo, our integer linear constraints modeled Nooz's new\nproblem.\n\nOne more logical constraint\nMax 16x1+ 22x2+ 12x3+ 8x4+ 11x5+ 19x6\n\n5x1+ 7x2+ 4x3+ 3x4+ 4x5+ 6x6 ≤ 14\nxj ∈ {0,1} for each j = 1 to 6\nOK. This will be my last\npractice exercise for\nmy game show problem.\nSuppose that I add the\nconstraint that I\nchoose exactly 3 items.\nIn this case, Nooz's constraint\nsounds like a linear constraint.\nAnd it can be modeled with the\nconstraint.\nx1 + x2 + x3 + x4 + x5 + x6 = 3.\n\nElla, this is great. I\nthink I now know how to\nmodel logical\nconstraints for integer\nprogramming.\nWell, Tom. I'm really glad you\nunderstand what we've done so far. But\nfor the first examples, we only modeled\nconstraints involving two binary variables.\nIt turns out that other types of logical\nconstraints require other types of\nmodeling techniques. Nooz will show you\nanother couple of examples.\n\nTransforming \"Non-Exclusive OR\" Constraints\nEither 2x1 + x2 ≥ 5 or 2x3 - x4 ≤ 2 or both\n\nSuppose that we have\nalready modeled a problem\nas a linear program, and\nwe now want to add the\nlogical constraints\n2x1 + x2 ≥ 5 or\n2x3 - x4 ≤ 2 or both\nThis situation is more complicated,\nbut there is a standard technique for\ndoing it.\nWe are not assuming here that xi is\nbinary. In fact, we are not even\nassuming that it is required to be\ninteger valued. But for our\ntransformation to work, we do need\nto require it to be bounded. So we\nwill assume that\nxi ≤ 100 for each i.\n\nThe Transformation\nEither 2x1 + x2 ≥ 5 or 2x3 - x4 ≤ 2 or both\n\n2x1 + x2 ≥ 5 - My1\n2x3 - x4 ≤ 2 + M(1- y1)\n\ny1 ∈ {0, 1}\n\nwhere M is a constant that is sufficiently\nlarge. In this case, we could choose M to be\n200 or anything larger.\nIn order to model this \"either-\nor\" constraint, we add a\nvariable y1, which is required\nto be binary, and we add two\nnew constraints to our original\nlinear program.\n\n2x1 + x2 ≥ 5 - My1\n2x3 - x4 ≤ 2 + M(1- y1)\ny1 ∈ {0, 1}\nEither 2x1 + x2 ≥ 5 or 2x3 - x4 ≤ 2 or both\n\nI'm lost\nagain.\nDon't worry. I'll explain it to you.\nJust think about the integer\nprogram. The feasible region is the\nunion of the feasible region with\ny1 = 0 and the feasible region with\ny1 = 1.\n\nIf y1 = 0, the feasible region includes\nthe constraints:\n2x1 + x2 ≥ 5 and 2x3 - x4 ≤ 2 + M.\nBut because x3 ≤ 100 and we will\nchoose M ≥ 200. The second\nconstraint is automatically satisfied.\nThis leaves us with\ny1 = 0, 2x1 + x2 ≥ 5\n\n2x1 + x2 ≥ 5 - My1\n2x3 - x4 ≤ 2 + M(1- y1)\ny1 ∈ {0, 1}\nEither 2x1 + x2 ≥ 5 or 2x3 - x4 ≤ 2 or both\n\nGo on.\nIf y1 = 1, the feasible region includes the\nconstraints:\n\n2x1 + x2 ≥ 5 - M and 2x3 - x4 ≤ 2. But\nbecause variables are nonnegative and\nM ≥ 5, the first constraint is automatically\nsatisfied. This leaves us with\ny1 = 1, 2x3 - x4 ≤ 2.\n\nPutting the two cases together, we conclude\nthat the constraints are equivalent to\n2x1 + x2 ≥ 5 or 2x3 - x4 ≤ 2 or both.\n\nTransforming If-Then Constraints\nIf 2x1 + x2 ≤ 5 then 2x3 - x4 ≥ 2.\n\nSuppose that we have a linear program, but we want to add\nthe constraint\n\"If 2x1 + x2 ≤ 5 then 2x3 - x4 ≥ 2 \". How can we do\nthis using integer variables plus linear constraints?\nThis situation is very similar to the previous one, because\nthe \"if-then constraint\" is equivalent to writing\n2x1 + x2 > 5 or 2x3 - x4 ≥ 2 or both.\nBut there is an added complication. We don't like a strict\ninequality constraint. So, we will show how to carry out the\ntransformation in the special case that x1 and x2 are integer\nvalued. In this case\n2x1 + x2 > 5 if and only if 2x1 + x2 ≥ 6 .\n\nTransforming the \"if-then\" constraint.\nIf 2x1 + x2 ≤ 5 then 2x3 - x4 ≥ 2\nis equivalent in this case to\n2x1 + x2 ≥ 6 or 2x3 - x4 ≥ 2 or both.\n\nThis is equivalent to\n2x1 + x2 ≥ 6 - My1\n2x3 - x4 ≥ 2 - M(1- y1)\ny1 ∈ {0, 1}\n\nBut this time, we leave\nit as an exercise to the\nstudent to fill in the\ndetails of why it works.\nAs before, we assume\nthat all variables are\nbounded by 100. In\nthis case, we can let\nM be 200 or higher.\nIt's all intuitively obvious\nto the casual observer.\nBy the way, if x1 and x2\nwere not integer\nvalued, one cannot\nmodel the \"if then\nconstraints\" correctly\nusing integer and\nlinear constraints.\n\nNon-linear Objectives\nAnother great application\nof integer programming is\nnon-linear objectives.\nMany times in practice, the costs\nare non-linear. This can be due\nto \"fixed costs\" or quantity\ndiscounts, or increasing marginal\ncosts or decreasing marginal\ncosts.\nOur friends will present\na couple of techniques\nfor modeling non-linear\nobjectives.\n\nZor's original problem\nMaximize 52 x1 + 30 x2 + 20 x3\nsubject to 2 x1 + 4 x2 + 5 x3 ≤ 100\n\n1 x1 + 1 x2 + 1 x3 ≤ 30\n10 x1 + 5 x2 + 2 x3 ≤ 204\nx1, x2 , x3 ≥ 0 integer\nI hope you remember\nZor's problem. But\neven if you don't, you\ncan follow what I'm\ngoing to say. We are\ngoing to consider a\nnew (revised) problem\nin which the objective\nis f1(x1) + f2(x2) + f3(x3),\ndefined as follows.\n\nx\nw\nx\n\nx\nw\nx\n\nx\nw\nx\n\nThe new variables represent \"fixed costs\". If x1 = 0 and no gold is\nproduced, the cost is 0. Otherwise, Zor has to pay a fixed cost of 500\nEuros before doing any production and before getting any revenue.\nIn order to model fixed costs using integer variables and\nlinear constraints, we create new variables. In this case,\nwe create binary variables w1, w2, and w3. We will then\ncreate linear constraints (on the next slide) that ensures\nthat w1, w2 and w3 take on the values that we want.\n\nModeling Fixed Charges\nWe need upper bounds on the\nvariables x1, x2 and x3 in order to\ncreate the IP model. Because of\nthe constraint x1 + x2 + x3 ≤ 30,\nwe can conclude that xi ≤ 30 for i =\n1, 2 and 3. We can obtain better\n(that is, tighter) bounds if we were\nto analyze the other two linear\nconstraints. But, these bounds are\ngood enough for our purposes.\nWe then add the following\nconstraints to the integer\nprogram:\n\nx1 ≤ 30 w1\n\nx2 ≤ 30 w2\n\nx3 ≤ 30 w3\nw1, w2, w3 binary\n\nWe just need to add these\nconstraints to the previous IP.\nThese constraints ensure that wi = 1\nwhenever xi > 0.\n\nNooz, it looks like you\nhave an error. I agree\nthat that wi = 1\nwhenever xi > 0.\nHowever, your\nformulation also permits\nthat wi = 1 even if xi = 0.\nYour feasible region is\ntoo big.\nMy feasible region may be\ntoo big. But the procedure\nwould never produce a\nsolution with wi = 1 and\nxi = 0. It would always\nproduce a higher profit to\nhave wi = 0 whenever\nxi = 0.\n\nThe Geometry Again\nx1\nw1\nAbove is the feasible region for the constraint: If you\ngraph the constraint: x1 ≤ 30 w1. You will notice that\nthe black points are all feasible. These are the points\nwe wanted to be feasible when we defined w1, except\nfor the point (0,1). But (0,0) has more profit than (0,1).\nThe red points are all infeasible, which is also what we\nwanted.\n\nWe can now put\neverything together. We\nhave to write the\nobjective in terms of the\nold and new variables.\nWe need to include all of\nthe original constraints.\nAnd we need to include\nthe new constraints.\nHere is what we get.\nMax -500 w1 + 52 x1 - 300 w2\n+ 30 x2 - 200 w3 + 20 x3\n\ns.t 2 x1 + 4 x2 + 5 x3 ≤ 100\n1 x1 + 1 x2 + 1 x3 ≤ 30\n10 x1 + 5 x2 + 2 x3 ≤ 204\nx1 ≤ 30w1\nx2 ≤ 30 w2\nx3 ≤ 30 w3\nx1, x2 , x3 ≥ 0 integer\nw1, w2, w3 binary\nZor's problem with fixed\ncosts\nIt's a little tricky, but I like it.\n\nWe're not done yet.\nNext we are going to\nshow you how to model\nan even more\ncomplicated non-linear\nfunction. It's a piecewise\nlinear function.\ny = 2 x if 0 ≤ x ≤ 3\ny = 9 - x if 4 ≤ x ≤ 7\ny = -5 + x if 8 ≤ x ≤ 9\nAssume that x is integer\nvalued.\ncost\nx\n\nIn order to model the non-linear function f(x) using integer and linear\nvariables and using linear constraints, we will introduce 6 new\nvariables. We want them to be defined as follows.\ny = 2 x if 0 ≤ x ≤ 3\ny = 9 - x if 4 ≤ x ≤ 7\ny = -5 + x if 8 ≤ x ≤ 9\n\nAnd here are\nthe constraints\nthat are\nequivalent to\nthe definitions\nof the six\nvariables.\n0 ≤ x1 ≤ 3 w1\nw1 + w2 + w3 = 1\n4w2 ≤ x2 ≤ 7 w2\n8w3 ≤ x3 ≤ 9 w3\nx = x1 + x2 + x3\nw1, w2, w3 binary, x1, x2, x3 integer\n\nTo complete the\nmodel, we need to\ntake the variable y,\nwhich was a\nnonlinear function\nof x, and model it\nlinearly using\nthese 6 variables.\n0 ≤ x1 ≤ 3 w1\nw1 + w2 + w3 = 1\n4w2 ≤ x2 ≤ 7 w2\n8w3 ≤ x3 ≤ 9 w3\nx = x1 + x2 + x3\nw1, w2, w3 binary,\nx1, x2, x3 ≥ 0 and integer\ny = 2x1 + (9w2 - x2) + (-5w3 + x3)\n\n0 ≤ x1 ≤ 3 w1\nw1 + w2 + w3 = 1\n4w2 ≤ x2 ≤ 7 w2\n8w3 ≤ x3 ≤ 9 w3\nz = 2x1 + (9w2 - x2) + (-5w3 + x3)\nCase 1: w1 = 1\nCase 2: w2 = 1\nCase 3: w3 = 1\n0 ≤ x1 ≤ 3 w1\ncost\nx\nx = x1 + x2 + x3\nx1\nx2\nx3\n\nCathy. Integer\nprogramming makes me\nnervous. I think that I\nunderstand the\nformulations. But there is\nno way that I could\npossibly have come up\nwith the formulations! Will I\nlearn how to model using\ninteger programming?\nTom, it's better than you\nfear. The same tricks get\nused over and over again.\nAnd with some practice,\nyou get used to it. In\naddition, I recommend\nthat you look at the\nreference guide for IP\nformulations that is with\nthe course materials.\n\nIt's time for one last formulation. We will consider the problem of\nforming 10 committees of 10 persons each from a group of 100\npeople so that\n1.Each person is on one committee and\n2.No committee has two persons who hate each other, and\n3.We ask everyone for their first five choices of committees. We\nassign everyone to one of their first five choices and try to give as\nmany people their first choice as possible.\nFirst, we need some notation for the data of the\nproblem.\nLet A = {(i, j) : persons i and j hate each other}\nLet B(k) = { i : person i can serve on committee k} (This\noccurs if i has chosen k as one of the top five choices.)\nLet dik = 1 if committee k is person i's first choice.\ndik = 0 otherwise.\n\nNow for the decision variables. These require what we refer to\nas \"assignment variables.\"\nLet xik = 1 if person i is assigned to committee k.\nxik = 0 otherwise.\nWe now have all the notation we need to formulate the problem.\n\nBye.\nThat's it for this tutorial.\nWe hope it was helpful.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Tutorial 10: Branch and bound",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/15-053-optimization-methods-in-management-science-spring-2013/72350db759d0557c9d44df4fe7263397_MIT15_053S13_tut10.pdf",
      "content": "Branch and Bound\nAmit\nHello friends, Mita and I\nare here again to\nintroduce to you a tutorial\non branch and bound.\n\nDid you know that beavers\nlike to use branches to\nbound water behind\ndams?\nMita\nYes, we sure do. Some people say that\nwe beavers are nature's engineers.\n\nBut Amit, this branch and bound refers\nto something else, namely a clever way\nof enumerating all solutions of an\ninteger program, to solve it more\nefficiently.\nWritten by Zach Leung with help\nfrom the 15.053/8 team of cartoon\ncharacters. April, 2012\n\nI still don't really understand how to use the Branch and\nBound algorithm. Ella, do you mind going through it once\nagain for me? Suppose I were a contestant on the famous\nTV game show \"I Heart Trading For Profit\" (IHTFP) that\nNooz was on recently (exclusively on the Fox TV\nnetwork). How would I use Branch and Bound in order to\nsolve the problem of what are the best items to pick to\nmaximize my utility?\nOf course we can\nhelp, that's what\nfriends are for.\n\nda da da da da, du du\ndu du du du du, Well\nyou came in loving\nme...\nmaximize 15x1 + 12x2 + 4x3 + 2x4\nsubject to 8x1 + 5x2 + 3x3 + 2x4 ≤ 10\nxk binary for k = 1 to 4\nNote: This example differs from\nthe one in the lecture. That is why\nthe trees are not the same.\n\nElla, what are\nyou singing? I\ndon't recognize\nthe song...\n\nOh the young ones, that was a song before your time...\nAnyhow, our starting point is the enumeration tree,\nwhich is a method to enumerate all possible solutions of\nan integer program.\nAt each node, we branch on an integer variable,\nwhere on each branch, the integer variable is restricted\nto take certain values.\nx2 = 0\n\nx2 = 0\n\nx2 = 1\n\nx2 = 1\n\nx1 = 1\n\nx1 = 0\n\nIf we are able to write\ndown all possible solutions\nin the enumeration tree,\nthen why don't we\ncompute the objective for\neach solution, and simply\npick the best one? This is a\nmethod so simple that\neven a cartoon turkey\ncould think of it!\nTom, you are right that the method of\ncomplete enumeration would work. But\nas the problems get bigger, complete\nenumeration would take too long\nbecause the number of possible solutions\nexplodes exponentially!\nDid I hear that a meteorite is about to\ncrash into earth and cause an exponential\nexplosion? I had better stay safe in my\nmeteorite shelter!\n\nThe enumeration tree\nexplodes exponentially?\nThat sounds rather\ndangerous. What should we\ndo to prevent this\ndangerous explosion?\nThe trick is to use the LP relaxation to\nbound the optimal integer solutions\nin a subtree of the enumeration tree,\nwhich allows us to eliminate many (in\nsome cases even 99.999999999%) of the\nenumeration tree.\nIt's too late for my dinosaur friends,\n99.9999999% of us have been eliminated.\nSigh.\n\nWhile there remain active nodes\nSelect an active node j and mark it as inactive\nLet x(j) and zLP(j) denote the optimal solution and\nobjective of the LP relaxation of Problem(j).\nCase 1: If z* ≥ zLP(j) then\nPrune node j\nCase 2: If z* < zLP(j) and x(j) is feasible for IP then\n\nReplace the incumbent by x(j)\n\nPrune node j\nCase 3: If z* < zLP(j) and x(j) is not feasible for IP then\n\nMark the direct descendants of node j as active\nEnd While\nEssential Branch and Bound\nI will summarize in one slide the branch and bound algorithm!\nTo start off, obtain somehow (e.g. by extortion, creativity, or magic)\na feasible solution x*. At each iteration of the algorithm, we will refer\nto x* as the incumbent solution and its objective value z* as the\nincumbent objective. Here, incumbent means \"best so far.\"\nNext, mark the root node as active.\n\nLet's get started! Big money,\nbig money, *spin*\n\nIn your case, Tom, we shall\nstart with the incumbent\nsolution x* = (0,0,0,0) and\nincumbent objective z* = 0.\nThat doesn't seem like a very good\nsolution. I would not be happy with this\nsolution at all, but go on. I'm sure things\nwill only get better from here.\nUnfortunately, my dinosaur friends are all\ngetting exactly zero.\n\nIncumbent\nx* = (0, 0, 0, 0)\nz* = 0\nLet's start at the very beginning, a very\ngood place to start. Our starting point is\nthe single node containing all feasible\nsolutions.\n\nxLP(1) = (5/8, 1 , 0, 0)\nzLP(1) = 21 3/8\nWe solve the LP relaxation of problem 1.\nSince we are in case 3, we branch on the\nnode and mark its children as active.\nIncumbent\nx* = (0, 0, 0, 0)\nz* = 0\nx1 = 1\nx1 = 0\n\nxLP(2) = (0, 1, 1, 1)\nzLP(2) = 18\nIncumbent\nx* = (0,1,1,1)\nz* = 18\nIncumbent\nx* = (0, 0, 0, 0)\nz* = 0\nWe solve the LP relaxation of problem 2.\nSince we are in case 2, we replace the\nincumbent with this better solution, and\nprune node 2.\nx1 = 1\nx1 = 0\n\nIncumbent\nx* = (0, 1, 1, 1)\nz* = 18\nxLP(3) = (5/8, 1, 0, 0)\nzLP(3) = 21 3/8\nWe solve the LP relaxation of problem 3.\nSince we are in case 3, we branch on the\nnode and mark its children as active.\nx1 = 1\nx1 = 0\nx2 = 1\nx2 = 0\n\nxLP(4) = (1, 0, 2/3, 0)\nzLP(4) = 17 2/3\nIncumbent\nx* = (0, 1, 1, 1)\nz* = 18\nWe solve the LP relaxation of problem 4.\nSince we are in case 1, we prune node 4.\nx2 = 1\nx2 = 0\nx1 = 1\nx1 = 0\n\nxLP(5) = infeasible\nzLP(5) = infeasible\nIncumbent\nx* = (0, 1, 1, 1)\nz* = 18\nWe solve the LP relaxation of problem 5.\nSince we are in case 1, we prune node 5.\nx1 = 1\nx1 = 0\nx2 = 1\nx2 = 0\n\nIncumbent\nx* = (0, 1, 1, 1)\nz* = 18\nYou're most welcome. That's what friends\nare for... do do do do do\nAnd we're done! Yahoo! Google! Bing!\nThank you Ella.\nx1 = 1\nx1 = 0\nx2 = 1\nx2 = 0\n\nAmit\nAlthough branch and bound looks\ndifficult at first, just like building dams,\nit gets easier with practice. To share a\nmotivating example from my own\nexperience: When I was younger, I\nthought building dams was dam hard,\nbut after working dam hard at it, I now\nfind it to be dam easy!\nMita\nThat's all for branch\nand bound. Bye!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n15.053 Optimization Methods in Management Science\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    }
  ]
}