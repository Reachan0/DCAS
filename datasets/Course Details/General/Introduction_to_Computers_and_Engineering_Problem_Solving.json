{
  "course_name": "Introduction to Computers and Engineering Problem Solving",
  "course_description": "This course presents the fundamentals of object-oriented software design and development, computational methods and sensing for engineering, and scientific and managerial applications. It cover topics, including design of classes, inheritance, graphical user interfaces, numerical methods, streams, threads, sensors, and data structures. Students use JavaÂ® programming language to complete weekly software assignments.\nHow is 1.00 different from other intro programming courses offered at MIT?\n1.00 is a first course in programming. It assumes no prior experience, and it focuses on the use of computation to solve problems in engineering, science and management. The audience for 1.00 is non-computer science majors. 1.00 does not focus on writing compilers or parsers or computing tools where the computer is the system; it focuses on engineering problems where the computer is part of the system, or is used to model a physical or logical system.\n1.00 teaches the Java programming language, and it focuses on the design and development of object-oriented software for technical problems. 1.00 is taught in an active learning style. Lecture segments alternating with laboratory exercises are used in every class to allow students to put concepts into practice immediately; this teaching style generates questions and feedback, and allows the teaching staff and students to interact when concepts are first introduced to ensure that core ideas are understood. Like many MIT classes, 1.00 has weekly assignments, which are programs based on actual engineering, science or management applications. The weekly assignments build on the class material from the previous week, and require students to put the concepts taught in the small in-class labs into a larger program that uses multiple elements of Java together.",
  "topics": [
    "Engineering",
    "Computer Science",
    "Programming Languages",
    "Software Design and Engineering",
    "Systems Engineering",
    "Computational Science and Engineering",
    "Engineering",
    "Computer Science",
    "Programming Languages",
    "Software Design and Engineering",
    "Systems Engineering",
    "Computational Science and Engineering"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 3 sessions / week, 1.5 hours / session\n\nRecitations: 1 session / week, 1 hour / session\n\nDescription\n\nThis course presents the fundamentals of object-oriented software design and development, computational methods and sensing for engineering, and scientific and managerial applications. It cover topics, including design of classes, inheritance, graphical user interfaces, numerical methods, streams, threads, sensors, and data structures. Students use JavaTM programming language to complete weekly software assignments.\n\nClass Format\n\nAll lectures are active learning sessions with lab exercises. Please bring your laptop computer to every class, and remember to sit in alternating rows. If you can't attend a lecture you must still do and hand in the active learning exercises by 7pm on the day of lecture. Active learning exercises are posted a week before lecture if you need to work on them early. Lecture notes and JavaTM files for each class are posted two or more days ahead of time. Please download the JavaTM files to your laptop before class. Solutions to lecture exercises and solution JavaTM files are posted about three hours after lecture on the same day.\n\nEach student will be assigned to a recitation section that will be held each week. Sections have up to 12 students. Attendance is mandatory. Please bring your laptop to your recitation section.\n\nPrerequisites\n\n18.01 (Single Variable Calculus)\n. We use calculus in class and homework.\n\nRegistration Requirements\n\nIf you are a graduate student, you must register for 1.001 or 1.002 instead of 1.00. 1.001 is a 9 unit \"G\" subject. If you are a grad student and need 12 units, you may register for 1.002. Undergrads must register for 1.00; you cannot register for 1.001/1.002.\n\nYou must add 1.00 to your registration in time to submit homework 1. Adds after that date are for exceptional circumstances only.\n\nTexts\n\nRecommended\n\nHorstmann, Cay.\nBig Java\n. 4th ed. Wiley, 2009. ISBN: 9780470509487. [Preview with\nGoogle Books\n]\n\nLook for discounted pricing, and you may be able to find it used. It's on reserve at Barker Engineering Library. You may use the 3rd edition.\n\nOptional\n\nPress, William, Saul Teukolsky, et al.\nNumerical Recipes in C: The Art of Scientific Computing\n. Cambridge University Press, 1992. ISBN: 9780521437202. [Preview with\nGoogle Books\n]\n\nThis is the source of the numerical methods we use; you should read the algorithm descriptions even if you don't wish to read the C code.\n\nLaptop Computers\n\nLaptop computers are required for class participation in 1.00, in all lecture/lab and recitation sessions. Please use your own laptop if you own one; you must download Java (J2SE), Javadoc and the Eclipse interactive development environment (IDE); see the\nTools section\nfor directions. A laptop with at least 1 GB of memory running Windows Vista, Windows 7, Mac OSX or Linux is needed to run the 1.00 software. A limited number of loaner laptop computers are available; please contact\nIS&T\nto request one. You may also share a laptop if necessary.\n\nGrading Policy\n\nGraded problem sets and quizzes will be returned in recitation about 10 days after they are submitted. Problem set grades, quiz and final exam grades will be available through class site gradebook. The 'late penalties' will not be reflected in the posted grades, but will be deducted from your total grade at the end of the term.\n\nACTIVITIES\n\nPERCENTAGES\n\n10 Problem Sets (each worth 4 points)\n\n40%\n\n30 Active Learning Exercise Sessions (each worth 1/3 of a point)\n\n10%\n\n2 In-class Quizzes (open book, open notes) (each worth 12 points)\n\n24%\n\nFinal Exam during Finals Period (open book, open notes) (worth 20 points)\n\n20%\n\nWeekly Recitations, Graded on Attendance and Participation\n\n6%\n\nAcademic Honesty\n\nAll 1.00/1.001/1.002 students are expected to adhere to the highest ethical standards in their work. Your conduct in 1.00/1.001/1.002 and more generally at MIT establishes habits of professional honesty that are likely to remain with you throughout your career.\n\n1.00 problem sets are individual assignments, not team projects. What you turn in must be your own work.\n\nRules for 1.00 problem sets are:\n\n1. You may work with other students in understanding the homework problem statement, and reviewing the lecture notes, readings and recitation notes.\n\n2. You may ask each other for assistance on questions of Java syntax and language features, but not on the program logic to answer homework questions. If discussions of syntax and language features involve examples, the examples must be different than the homework problem.\n\n3. You must write the Java program code on your own for each assignment. You are not allowed to look at other students' solutions, or show your solutions to other students. Sharing code fragments or viewing or copying each other's code is a violation of the academic honesty policy.\n\n4. If you need help to debug your program, obtain assistance from a TA during office hours. If you are working on the homework after office hours, you are allowed to ask other students for assistance in debugging your program. However, their assistance must be limited to determining what is wrong with your program. They may not correct or rewrite sections of it for you.\n\n5. You may copy and modify programs given in lecture or recitation notes or used in lecture or recitation by the instructors or TAs. You may also copy and modify programs from the text used in this subject.\n\nRules for 1.00 active learning exercises are:\n\n1. If you do the exercises in class, you may work together, up to three people. Each person in the group may turn in the same solutions if they worked together.\n\n2. If you do the exercises outside of class, you must do them individually. You may get help from other students as in homework sets, but what you turn in must be your own work.\n\nAny student that violates these guidelines may, at the discretion of the instructor-in-charge, receive an F as their final grade in 1.00/1.001/1.002. The 1.00 staff will also bring ethical violations to the attention of MIT authorities for appropriate disciplinary action.\n\nExtension Policy for Problem Sets\n\nProblem sets are due Friday at noon; they are submitted electronically on the course Web site. You will receive one penalty-free extension until the following Monday noon per semester. No extensions beyond that, except for medical or family emergencies, which generally require a note from the dean. See the instructor if this occurs. Late homework submitted after Friday noon and before Monday noon, beyond the one free extension, is penalized 30 points. Homework submitted after Monday noon receives no credit, since solutions are posted then. If Monday is a holiday, the late deadline is the next day classes are held.\n\nHomework and Active Learning Exercise Submission\n\nIf you hand in .class files (compiled code, not human readable) instead of .java files (source code, human readable), you will receive no credit. No exceptions. Double check what you hand in. If your submission is empty, even though you're sure you submitted it, you will receive no credit. No exceptions.\n\nMakeup Quiz Policy\n\nYou must request a makeup quiz at least two weeks before the quiz date, unless there is a medical or family emergency that arises after that. Email the head TA if you need a makeup quiz. Valid reasons include MIT-related travel and intercollegiate athletics. Schedule job and school interviews to avoid quiz dates; there are only two quizzes in 1.00 and you must be here for them. We do not automatically schedule makeup quizzes; if no one has requested one two weeks ahead of time, none will be offered (other than for medical or family emergency).\n\nCalendar\n\nSES #\n\nTOPICS\n\nKEY DATES\n\nControl and Scope\n\nL 1\n\nCourse Overview, Introduction to Java\n\nProblem Set 0 Out\n\nL 2\n\nInteractive Development Environment: Eclipse\n\nProblem Set 1 Out\n\nL 3\n\nOperators, Control Structures\n\nRecitation 1, Problem Set 0 Due\n\nL 4\n\nData Types, More Operators\n\n--\n\nL 5\n\nMore Data Types, Control Structures, Intro to Methods\n\nProblem Set 1 Due, Problem Set 2 Out\n\nL 6\n\nMethods and Scope\n\nRecitation 2\n\nClasses and Objects\n\nL 7\n\nClasses and Objects\n\n--\n\nL 8\n\nClasses II\n\nProblem Set 2 Due, Problem Set 3 Out\n\nL 9\n\nMethods and Objects, Access\n\nRecitation 3\n\nL 10\n\nStatic Methods and Data\n\n--\n\nL 11\n\nArrays, Arraylists\n\nProblem Set 3 Due, Problem Set 4 Out\n\nL 12\n\nRecursion\n\nRecitation 4\n\nInheritance\n\nL 13\n\nInheritance: Subclasses\n\nQuiz 1 Review\n\n--\n\nQUIZ I\n\n--\n\nL 14\n\nInheritance II: Abstract Classes, Methods\n\nRecitation 5\n\nL 15\n\nInheritance III: Interfaces\n\n--\n\nL 16\n\nDesign Lab I - Inheritance\n\n--\n\nGraphical User Interfaces\n\nL 17\n\nIntroduction to Swing\n\nRecitation 6\n\nL 18\n\nSwing Event Model\n\n--\n\nL 19\n\nInner Classes, Layout Managers\n\nProblem Set 5 Due, Problem Set 6 Out\n\nL 20\n\nModel-View-Controller, Timers\n\nRecitation 7\n\nL 21\n\n2D API, 2D Transformations\n\n--\n\nL 22\n\nDesign Lab II- Swing\n\nProblem Set 6 Due, Problem Set 7 Out\n\nStreams (Input/Output) and Exceptions\n\nL 23\n\nStreams I, Exceptions\n\nRecitation 8. Set up sensor kit in recitation.\n\nL 24\n\nStreams II\n\nQuiz 2 Review\n\n--\n\nQUIZ II\n\n--\n\nSensors and Threads\n\nL 25\n\nSensors I\n\n--\n\nL 26\n\nSensors II\n\nProblem Set 7 Due, Problem Set 8 Out\n\nL 27\n\nDesign Lab III - Sensors\n\nRecitation 9\n\nL 28\n\nThreads\n\n--\n\nL 29\n\nThreads and Sensors\n\nProblem Set 8 Due, Problem Set 9 Out\n\nNumerical Methods\n\nL 30\n\nMatrices\n\nRecitation 10\n\nL 31\n\nLinear Systems\n\n--\n\nL 32\n\nIntegration\n\nProblem Set 9 Due, Problem Set 10 Out\n\nL 33\n\nRoot Finding\n\nRecitation 11\n\nData Structures\n\nL 34\n\nSorting\n\n--\n\nL 35\n\nStacks, Queues\n\nProblem Set 10 Due. Practice-only Problem Set 11 Out.\n\nL 36\n\nLists\n\nRecitation 12\n\nL 37\n\nStoring Data: Trees, Hash Tables\n\nPractice-only Problem Set 11 solutions posted.",
  "files": [
    {
      "category": "Assignment",
      "title": "Problem Set 0",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/96183c403c93262e07eb9aa1f111b3c6_MIT1_00S12_PS_0.pdf",
      "content": "1.00/1.001/1.002\nProblem Set 0\n1/9\n1.00/1.001/1.002 - Spring 2012\nIntroduction to Computers and Engineering Problem Solving\nProblem Set 0\nDue: 12 noon, Monday February 13, 2011\n\nAll 1.00/1.001/1.002 students must complete Problem Set 0, which introduces\n1.00/1.001/1.002 software and procedures. Problem Set 0 will not be graded but must\nbe completed to make sure your software installation and account on the course website\nfunction properly. If you do not understand or cannot complete any part of the problem\nset, please speak to a 1.00/1.001/1.002 staff member as soon as possible. Instructors,\nTAs and their email addresses are on the 1.00 Website as well as in the printed\nmaterials handed out at the first class.\n\nProblem 1: Read Initial Handouts\n\nAll the initial handouts include\n\n- Syllabus/FAQ\n- Lecture Schedule\n- Academic Honesty Guidelines\n- How to Install Java\n- How to Install Eclipse\n- How to Submit Problem Sets\n\nYou are required to read the Guidelines on Academic Honesty. After reading them,\nyou should understand that you can receive an F for your final grade in 1.00 by\ncommitting an academic honesty violation. In order to take the class, you must sign and\nreturn to the 1.00 staff a hard copy of the Guidelines on Academic Honesty. Those forms\nare handed out at the first lecture, but ask a TA if you need another form.\n\n1.00/1.001/1.002\nProblem Set 0\n2/9\n\n1.00/1.001/1.002\nProblem Set 0\n3/9\nProblem 2: Sign Up for Recitation Section\n\nAll 1.00/1.001/1.002 students are required to sign up for a recitation section.\nSection assignments are on a first come first served basis, so please sign up as\nsoon as possible, after 8pm on Wednesday February 8. For detailed section\nassignments, please go to the course website.\n\nRecitations will last one hour and are held only on Mondays and Tuesdays. There is a\nmaximum capacity of 12 students in each section.\n\nBecause recitation capacity is limited, sign up as soon as possible.\nOnce you have joined a recitation section, you will be able to submit and download\nhomework in that section.\n\nYou must attend the first class of recitation section you signed up, which is either\non Monday, February 13 or Tuesday, February 14. If you decide to switch\nsections, you will only be able to do so through Wednesday, February 22.\n\n1.00/1.001/1.002\nProblem Set 0\n4/9\nProblem 3: Introduction to Eclipse\n\nPlease install Java, then Eclipse. For details, refer to the âHow toâ documents, which\ncan be found on the 1.00 website. Contact your TA for any installation problem.\n\nStep 1 - Start Eclipse\n\nIf you followed the âHow toâ, you should have an Eclipse shortcut on your desktop.\nDouble-click this icon and an Eclipse splash screen should appear while the program\nis loading. Or, you may double click on the Eclipse executable file. This file is located\nin the folder where you installed Eclipse. (You can create a shortcut to the Eclipse\nexecutable by right-clicking and dragging it to your desktop, where it will appear as an\nicon.)\n\nStep 2 - Creating a new project\n\nIn Eclipse, projects are used in order to organize the files in a program. The project\nwill include all the needed files for the program to run. To create a new project,\nchoose File New Project. A âNew Projectâ screen will appear:\n\nCourtesy of The Eclipse Foundation. Used with permission.\nMake sure 'Java Project' is highlighted. After clicking 'Next', a 'New Java Project'\nscreen will appear:\n\n1.00/1.001/1.002\nProblem Set 0\n5/9\nCourtesy of The Eclipse Foundation. Used with permission.\n\nUnder âProject nameâ, type âProblemSet0â.\n\nWe strongly recommend that you choose the \"Create project in workspace\" option,\nwhich will place your work in the folder:\n\nFor Windows 7/ Vista: C:\\Users\\<username>\\workspace\\\nFor Mac:\n\n/Users/<username>/Documents/workspace/\nFor Linux:\n\n/home/<username>/Documents/workspace/\n\nWhen you are done, click âFinishâ. If a dialog box appears, check the \"Do not show this\nmessage again\" box and hit âYesâ.\n\nStep 3 - Creating your first class\n\nSelect File New Class, or click on the âNEWâ icon,\n, then select class and hit\nâNextâ. On the âNew Java Classâ screen, type the name of the class, HelloWorld, in the\nName field and check the âpublic static void main(String[ ] args)â. Donât worry about\nother options on the screen for now.\n\nCourtesy of The Eclipse Foundation. Used with permission.\n\nStep 4 - HelloWorld.java\n\nEclipse will create and open a new file named âHelloWorld.javaâ. Add one line of\nJava code to the main() method so that it looks like:\n\npublic static void main(String[] args)\n{\nSystem.out.println(\"Hello world!\"); // Add this line\n}\n\nSave the edited version of HelloWorld.java by selecting File Save, or by clicking\non the save icon. Eclipse automatically compiles the file when it is saved. As you\nwrite longer programs in future problem sets, remember to save each file within the\nprogram as you write or edit it; otherwise other files that reference it will appear not to\nsee it, or not to see your latest changes.\n\n1.00/1.001/1.002\nProblem Set 0\n6/9\n\nStep 5 - Running the HelloWorld class\n\n1) From the Eclipse menu, Select Run Run As Java Application.\n2) Because weâve edited the program, Eclipse prompts us to save our changes before\nit runs the program. Click Ok.\n3) The Console displays our program output.\nCourtesy of The Eclipse Foundation. Used with permission.\n\nStep 6 - Checking your program\n\nYou are not done writing your program until you have checked it by examining its status\nas it proceeds from start to end, making sure that all variables and expressions have\ntheir intended values and behavior at each step.\n\nTo check (or, in the old-fashioned terminology used by Eclipse, debug) our program, we\nneed to set a breakpoint in our code so the program suspends execution and allows us\nto see its status. Without a breakpoint, the program will run to completion without letting\nus look at its status. To set a breakpoint, double-click in the gray margin on the left side\nof the editor next to the line at which youâd like program execution to stop. A blue dot will\nappear, indicating an active breakpoint. In this example, set the breakpoint at the line\nwith System.out.println(...)\n\nStarting the program to check is similar to running it. Eclipse provides two options: Use\nthe full-service Run Debug menu selection to use a launch configuration, or use the\nexpress Run Debug As Java Application selection if the default options are OK.\nUse the Run Step Over or Run Step Into commands to step line by line through\nyour program. (Weâll describe this in more detail in lecture.)\n1.00/1.001/1.002\nProblem Set 0\n7/9\n\n1.00/1.001/1.002\nProblem Set 0\n8/9\n\nEclipse will show you the values of all variables, expressions, and other program\nstatus. Thereâs not much of it here, but there will be plenty even in Problem Set 1.\n\nCongratulations! You have just written your first Java program.\n\nMore Information on Eclipse\n\nEclipse documentation, including a âGetting Startedâ section can be found at:\nhttp://help.eclipse.org/ganymede/index.jsp. This offers a more detailed recitation than\nwhat weâve laid out here.\n\nCourtesy of The Eclipse Foundation. Used with permission.\n\n1.00/1.001/1.002\nProblem Set 0\n9/9\nProblem 4: Submitting Problem Set 0\n\nFor each problem set, you will electronically submit your Java code through our website.\nYou do not have to submit a printed copy of your homework.\n\nTo test that you understand homework submissions, try submitting HelloWorld.java\nas your solution to Problem Set 0. To do this, follow the instructions in the document\nâHow to Submit Assignments.â This document can be found on the course website.\nBring any questions or problems to your first recitation.\n\nPlease make sure you know how to submit your homework before recitation. If\nyou have any questions, bring them up during your first recitation or office hours.\n\nTurn In\n\n-\nTurn in electronic copies of all source code (.java files). No printed copies\nare required.\n\n-\nPlace a comment with your full name, recitation section, TAâs\nname, and assignment number at the beginning of all .java files in your solution.\nComments begin with a double slash (//).\n\n-\nPlace all of the files in your solution into a single zip file. Submit this single zip\nfile on the 1.00 Web site under the appropriate section and problem set number.\nFor directions, see 'How to Submit Assignments' on the 1.00 Web site.\n\n-\nYour solution is due at 12 noon. Your uploaded files should have a time stamp\nof no later than 12 noon on the due date.\n\n-\nDo not turn in compiled byte code (.class files) or backup source code\n(.java~ files).\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/c60c96fb43e476467440f73ad63870fc_MIT1_00S12_PS_1.pdf",
      "content": "Introduction to Computers and Engineering Problem Solving\nSpring 2012\nProblem Set 1: Calculating the inductance of an antenna\nDue: 12 noon, Friday, February 17, 2012\n\nIntroduction\n\nIn this problem set, we will explore how to perform a set of calculations. We will calculate the\nvalues of electromagnetic phenomena associated with antennae, when provided with the values\nof different parameters. We simplify the physics and don't state all the assumptions, though\nthose of you who took 8.02 can refer to your past notes for more background. The background is\nnot necessary to complete this assignment; we provide all definitions for the calculations that are\nrequired.\nMagnetic Inductance\n\nIn this homework, we will calculate the magnetic inductance of three types of antennae: line,\ncoil, and rectangular. The magnetic inductance equation for each is provided below.\n\nLine Antenna\nThe magnetic inductance around a straight, linear antenna is (Equation 1):\n\n//\nB =\n\n2nr\n\nwhere\n\nB= magnetic inductance (volt-seconds per meter squared)\n\nÎ¼= magnetic field constant (1.257 x 10-6 volt-seconds/ampere)\n\nI= current (amperes)\n\nr= distance from antenna (meters)\n\nIn this problem set, we will work with line antennae that receive 10mA of current.\nCoil Antenna\nThe magnetic inductance along the center line of a round coil antenna is (Equation 2):\n\n/\nB =\n\nwhere\n\nN= number of windings\n\nR= radius (meters)\n1/5\n\nL\nin\ne\ns\n\no\nf\n\nm\nagnetic flux around a cylindrical coil.\n\nx= distance from the center of the coil along the (vertical) center line; see the figure.\nWe assume the windings are spaced very closely; the figure exaggerates the spacing.\nIn this problem set we will work with coil antennae that have a current of 20mA.\nwhere\n\na= width of antenna (meters)\n\nb= length of antenna (meters)\n\nI= current (amperes)\n\nx=distance from antenna (meters)\n\nN=number of windings\n\nIn this problem set we will work with rectangular antennae that have a current of 30mA and only\nhave 1 winding.\n\nMutual Inductance\n\nWe will also calculate the mutual inductance of two combinations of antennae: two coil\nantennae, and a rectangular antenna adjacent to a straight antenna.\n\nTwo Coil Antennae\nThe mutual inductance of two coil antennae is given by (Equation 4):\n2/5\n\nImage by MIT OpenCourseWare. Adapted from Figure 4.2 Finkenzeller, Klaus\n(2003). RFID Handbook (2nd Edition). Wiley.\n\n(FIGURE FROM FINKENZELLER, RFID HANDBOOK. B= pH.)\nRectangular Antenna\nThe magnetic inductance along the center line of a rectangular antenna is (Equation 3):\n\n! =\n!\"#$%\n!\n!\n!\nâ( ! !\n! + ! !\n!\n)\n4! (!\n2) + (!\n2) + !\n(2) + !\n(2) + !\n\n3/5\n\nMutual ind\nuc\nta\nnce by the coupling of two coils via a partial magnetic flow.\nImage by MIT OpenCourseWare. Adapted from Figure 4.8 Finkenzeller,\nKlaus (2003). RFID Handbook (2nd Edition). Wiley.\n(FIGURE FROM FINKENZELLER)\n\nIn this problem set, when working with one coil antenna (when measuring magnetic inductance),\nwe will assume that it has:\nN1 = 100 windings\nR1 = 0.1m\n\nWhen working with a second antenna (when measuring mutual inductance) we will assume the\nsecond antenna has the following characteristics:\nN2 = 200 windings\nR2 = 0.15m\n\nRectangular Antenna adjacent to a Line Antenna\nThe mutual inductance of a line antenna and a rectangular antenna is given by (Equation 5):\n\nwhere\n! = !\"\n!\n2! ln ( + !\n!\n)\n!!\n!!\n\n!!!\nwhere\n!!!!!\n\nM = mutual inductance (volts-seconds per meter squared)\n! =\nN1 = number of windings in the smaller coil antenna 1\n2 (!!\n! + !!)!\nR1 = radius of the smaller coil antenna 1 (meters)\nN2 = number of windings in the larger coil antenna 2\nR2 = radius of the larger coil antenna 2 (meters)\n\nx= distance between the two coil antennae (meters)\n\nThe two coil antennae are in the same plane and nearby, as shown in the figure below.\n\nYou must calculate these different inductances for the antennae we have described (line, coil and\nrectangle). The calculations that you must implement are:\n- Line antenna:\no Compute magnetic inductance (equation 1)\n- Coil antenna:\no Compute magnetic inductance (equation 2)\no Compute mutual inductance with another coil antenna (equation 4)\n- Rectangle antenna:\no Compute magnetic inductance (equation 3)\no Compute mutual inductance with a line antenna (equation 5)\nOnly some of these calculations will need to be done - depending on the type of antenna\n2. Program\n\na= dimension of rectangle antenna parallel to line antenna (meters); assume this is also\nthe width of the antenna in equation 3.\nb= dimension of rectangle antenna perpendicular to line antenna (meters); assume this is\nalso the length of the antenna in equation 3.\nx= distance between rectangle antenna and line antenna (meters)\nSee the figure below.\nIn this assignment we have a rectangle antenna with the following specifications:\na= 0.3m\nb= 0.2m\n4/5\n\nYour program should:\n1. Allow the user to specify an antenna type using a JOptionPane.\n2. Given the selected antenna, prompt the user to enter a minimum and maximum distance\nvalue for the antenna type, r in equation 1, x in equations 2-5.\n3. With these user inputs, compute the associated inductance value(s) using the values\nprovided above. If either a coil or rectangle antenna is selected, both magnetic and mutu\ninductance should be computed at each distance value.\n4. Calculate and print the inductances for a range of distance values in 0.05m increments\nbetween the minimum and maximum distances.\n5. Prompt the user with a JOptionPane to either enter new inputs or quit. If the user\nchooses to enter new inputs, the program should start again from the beginning.\n\nal\nTurn In\nFor this problem set:\na. Place a comment with your full name, section, TA name and assignment number\nat the beginning of all .java files in your solution.\nb. Place all of the files in your solution in a single zip file.\n\nc. Do not turn in electronic or printed copies of compiled byte code (.class files) or backup\nsource code\n\n(.java~ files)\nd. Do not turn in printed copies of your solution.\n\n2. Submit this single zip file on the 1.00 Web site under the appropriate section and problem set\nnumber.\n\nFor directions see How To: Submit Homework on the 1.00 Web site.\n3. Your solution is due at noon. Your uploaded files should have a timestamp of no later than\nnoon on the due date.\n\n4. After you submit your solution, please recheck that you submitted your .java file. If you\n\nsubmitted your .class file, you will receive zero credit.\nPenalties\nFor each problem set:\n\n- 30 points off if you turn in your problem set after Friday noon but before noon on the\nfollowing Monday. You have one no-penalty late submission per term for a turn-in after\nFriday noon and before Monday noon.\n- Problem set 6 is due Wednesday noon because of a Friday holiday. You may turn it in\nfor the late penalty by the following Monday at noon.\n\n- No credit if you turn in your problem set after noon on the following Monday.\n\n5/5\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 2",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/ecfe2fa0005242f0fea2a3ff501960e6_MIT1_00S12_PS_2.pdf",
      "content": "Page 1 of 3\nIntroduction to Computers and Engineering Problem Solving\nSpring 2011\nProblem Set 2: Throwing a ball into a basket\nDue: 12 noon, February 24, 2012\nProblem statement\nYou learn in physics that projectiles follow a\nparabolic path through the air, due to the\nacceleration of gravity. In this problem set,\nyou will calculate the release angles and\nspeeds for throwing a ball into a basket.\nThe kinematic equations lead to an equation\ndescribing the relationship between release\nangle, Î¸, initial speed, v0, and distance, d:\nV2 sin 2e\nd =\n\ng\nwhere g = 9.8 m/s2 is the acceleration due to gravity. Let's assume you always throw the ball\nwith the same initial speed, v0, each time. There will then be a small range of angles at which the\nball can be released and still land within the diameter of the basket.\nIn order to ensure the ball doesn't hit the ceiling, we will also look at its maximum height, h, at\nthe top of the trajectory, given by:\n\nV2 sin2 e\no\n\nh =\n\n2g\nProgram\nDesign a Java class with a set of static methods to compute the optimal release angle, and the\nrange of acceptable angles, in order to toss a ball into a basket from a given distance. Your class\nwill have a main()method that will prompt the user for inputs, call the static methods to\nperform the calculations, and print the results. None of the calculations should be performed\ndirectly by the main() method.\nYour program should prompt the user for the following inputs:\n- distance, d, from thrower's hand to the center of the basket (in meters)\n- diameter of the basket (in meters)\n- initial ball speed v0 (in meters/second)\n- height of the ceiling from the basket (in meters)\nAssume that the ball is thrown exactly along the x axis. The size of the ball is much smaller than\nthe size of the basket, so you may ignore it. Trajectory of ball thrown into basket.\nh\nd\nvo\nÎ¸\nx\ny\nImage by MIT OpenCourseWare.\n\nPage 2 of 3\nWhen all the parameters have been entered correctly, your main() method should call a\nseparate static method to perform each of the following:\n1) Compute the optimal angle (in degrees) for releasing the ball, such that it lands in the\ncenter of the basket. Note that the trajectory angle equation is in radians.\n2) Compute the smallest angle (in degrees) that will still land the ball in the basket. Assume\nthe ball will go into the basket if the center of the ball hits the edge. You should not\nrewrite the contents of any methods you have already written.\n3) Compute the largest angle (in degrees) that will still land the ball in the basket. You\nshould not rewrite the contents of any methods you have already written.\n4) Determine whether or not the ball will hit the ceiling when thrown at the optimal angle.\n5) If the ball will hit the ceiling, you will need to throw the ball faster. Write a method that\ncontinuously increments the initial v0 by 0.1 and re-computes the angle and max height,\nuntil the height constraint is met. You should not rewrite the contents of any methods you\nhave already written. This method only needs to print to the console all the different\nvalues of v0 and Î¸ that are tried, and what max heights they corresponded to.\n\nPrint each of these results from the main() method. You may find built-in methods in the\nMath class useful for computing trigonometric values (for example, Math.cos(double a)\ncomputes the cosine of an angle in radians). A list of available methods is found here:\nhttp://docs.oracle.com/javase/6/docs/api/java/lang/Math.html\n\nExample Calculations and Outputs:\nConsider a 10cm diameter basket located 2m from the thrower, an initial speed of 5 m/s and a\nceiling height of 2m. Your program should print approximately the following. Do not worry\nabout numerical formatting.\n\nOptimal angle 25.814 degrees.\nRange of acceptable angles is from 24.927 degrees to 26.738 degrees.\nThe maximum height of the ball is 0.242 meters.\nWill the ball hit the ceiling? false\n\nIf we now move the basket to 15m from the thrower and throw the ball at an initial speed of 13\nm/s, the program should print approximately the following. Again, do not worry about numerical\nformatting.\n\nOptimal angle 30.219 degrees.\nRange of acceptable angles is from 30.052 degrees to 30.388 degrees.\nThe maximum height of the ball is 2.184m.\nWill the ball hit the ceiling? true\nTrying v0 13.1 mis, theta 29.468 degrees. Max height 2.119 meters\nTrying v0 13.2 mis, theta 28.765 degrees. Max height 2.059 meters\nTrying v0 13.3 mis, theta 28.102 degrees. Max height 2.002 meters\nTrying v0 13.4 mis, theta 27.476 degrees. Max height 1.950 meters\n\nPage 3 of 3\nTurn In\n1. Place a comment with your full name, section, TA name and assignment number\nat the beginning of the .java file for your solution.\n2. Place all of the files in your solution in a single zip file.\na. Do not turn in copies of compiled byte code or backup (.class or .java~\nfiles)\nb. Do not turn in printed copies of your solution.\n3. Submit the single zip file on the 1.00 Web site under the appropriate section. For\ndirections see How To: Submit Homework on the 1.00 Web site.\n4. Your uploaded files should have a timestamp of no later than noon on the due\ndate.\n5. After you submit your solution, please recheck that you submitted your .java file.\nIf you submitted your .class file, you will receive zero credit.\n\nPenalties\n\n- 30 points off if you turn in your problem set after Friday noon but before noon on\nthe following Monday. You have one no-penalty late submission per term for a\nturn-in after Friday noon and before Monday noon.\n\n- No credit if you turn in your problem set after noon on the following Monday.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 3",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/7dc9b4a42170a3df89677f6ec6b5345e_MIT1_00S12_PS_3.pdf",
      "content": "Page 1 of 3\nIntroduction to Computers and Engineering Problem Solving\nSpring 2012\nProblem Set 3: Buying a used car\nDue: 12 noon, March 2, 2012\n\nProblem statement\nYou want to buy a used car, but need help deciding, so you create a formula that will help you\nrate available used cars, given their characteristics and some user reviews that you find online:\nScore = (26,000 - Price)/3000 - 0.2*(Years old) + 0.2*(MPG-25) + Driver rating\nAssume that the Driver rating for a car is (G + (0.5*O) - B)/T, where G, O, B, and T are the\nnumber of Good, OK, Bad ratings, and Total number of ratings, respectively.\nPrice\nToyota\n18,000\nHonda\n20,000\nChevrolet\n17,000\nBMW\n26,000\nMPG\nDriver rating\nToyota\nHonda\nChevrolet\nBMW\nOK\nYears old\n0.5\nBad\nGood\nProgram\nYour assignment is to write a program containing classes and objects to decide which car to buy.\nYou will need the following classes:\n- A UsedCarLot class\n- A Car class\n- A DriverRating class\n- A test class that only has a main() method to create and use the necessary objects.\nThe UsedCarLot class has space for four Car items. Each Car has a DriverRating object\nthat contains the breakdown of the ratings given by reviewers. You must have a\nDriverRating class; you may not put the ratings directly in the Car class.\nYour main() method does not need to accept any user inputs. All data can be hard-wired into\nthe program. Add additional methods as appropriate in the classes listed above to enable your\nmain() method to accomplish the following tasks.\n\nPage 2 of 3\n1) Create the necessary UsedCarLot, Car and DriverRating objects. Create each object\nusing the data in the tables from the Problem Statement section above.\n2) Call a method in the appropriate class that will give the driver rating for each of the cars and\noutput the result to the console. For this part, access the Car objects through the\nUsedCarLot object.\n3) Call a method in the appropriate class that will compute the overall score for a given car. Call\nthis for each Car and output the result. For this part, access the Car objects directly.\n4) You read more reviews online, one Bad review for Chevrolet and three Good reviews for\nBMW. Call a method in the appropriate class that will update the appropriate data. Output\nthe new overall scores for these two Cars.\n5) Call a method that prints the make of the Cars in the UsedCarLot with an age of one year\nold or less, out of the set of four cars.\n6) Some people will want to avoid \"lemons\". Call a method that returns the percentage of bad\nreviews for each car.\nYour UsedCarLot, Cars and DriverRating classes must have the appropriate data\nmembers, constructors, getXXX() methods, setXXX() methods and other methods in order to\ncomplete the assignment. All data members must be private in all classes. You only need to write\nthe getXXX(), setXXX() and other methods required to produce the specific outputs for this\nhomework, as described above. You are welcome to use arrays if you are comfortable with them;\nthey are not required for this assignment.\nExample Output:\nDriver ratings:\n\nToyota: -0.16666666666666666\n\nHonda: 0.6666666666666666\n\nChevrolet: 0.6\n\nBMW: 0.875\n\nOver all scores:\n\nToyota: 2.6\n\nHonda: 2.466666666666667\nChevrolet: 3.8\n\nBMW: -0.325\n\nWith 1 additional bad review, the updated overall score for Chevrolet is: 3.654545454\n\nWith 3 additional good reviews, The updated overall score for BMW is: -0.2714285714\n\nCars in lot newer than one year:\n\nToyota\n\nHonda\n\nChevrolet\n\nPercent of bad ratings:\nToyota: 50.0%\n\nHonda: 11.11111111111111%\n\nChevrolet: 18.181818181818183%\n\nBMW: 0.0%\n\nTurn In\n1. Place a comment with your full name, secti on,\nTA name and assignment number\n\nat the beginni ng of the .ja va file for your solution.\n\n2. Place all of the files in your solution in a single zip file.\n\na. Do not turn in copies of compiled byte code or backup (.class or .java~\nfiles)\nb. Do not turn in printed copies of your solution.\n\n3. Submit the single zip file on the 1.00 Web site under the a ppropriate section. For\ndirections see How To: Submit Homework on the 1.00 Web site.\n\n4. Your uploaded files should have a timestamp of no later than noon on the due\ndate.\n5. After you submit your solution, please recheck that y ou submitted your .java file.\nIf you submitted your .class file, you will receive zero credit.\nPenalties\n- 30 points off if you turn in your problem set after Friday noon but before noon on\nthe following Monday. You have one no-penalty late submission per term for a\nturn-in after Friday noon an\nd before Monday noon.\n- No credit if you turn in your problem set after noon on the following Monday.\nPage 3 of 3\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 4",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/2f0cb947671082ca8941182cb54fbfc1_MIT1_00S12_PS_4.pdf",
      "content": "Page 1 of 3\nIntroduction to Computers and Engineering Problem Solving\nSpring 2012\nProblem Set 4: Scrabble word generator\nDue: 12 noon, March 16, 2012\n\nProblem statement\nYou will write a program to help find possible two and\nthree letter Scrabble words that one could make with a\ngiven 'hand' of 7 letters. The classes you should include\nare given, but you have freedom to design and\nimplement the remaining methods and logic as you\nchoose. We strongly encourage you to plan this\nassignment out on paper before you write your first line\nof code.\n\nThe list of all acceptable two and three letter Scrabble\nWords with Friends screenshot\nwords has been placed in a class called Dictionary,\nremoved due to copyright restrictions.\nThe Dictionary class contains\ntwo arrays: a 1D String array called\ntwoLetterWords in which each entry is a possible\ntwo-letter word, and a 2D String array called\nthreeLetterWords, in which there are 26 rows that\ncorrespond to the 26 letters in the alphabet from A-Z (in\norder), and each row contains an array of three letter word\nStrings that all begin with that corresponding letter. The\n\npublic methods getTwoLetterWords() and\ngetThreeLetterWords() can be used to retrieve these arrays in the dictionary.\n\nProgram\nYour program should contain:\nSolver class\n-\nThis class will contain the main()method, which runs the program.\n-\nYour main() method should prompt the user to enter the 7 letters, and then print the full\nlist of possible words. You may assume that the user will always enter the letters in all\ncapital letters.\nDictionary class\n-\nThis class contains the data members twoLetterWords and threeLetterWords,\nand the methods getTwoLetterWords() and getThreeLetterWords().\n\nfindWords() method\nThis method manages the search. Place it in an appropriate class. Given a user's hand of\nletters, it returns an ArrayList of Strings that correspond to possible valid two or three\nletter words the user can make.\nExample Outputs:\nIf your hand contains the letters: ZETRLCH, your program should output the following. Words\ncan be listed in any order.\nPossible two or three letter words are:\n\nET, ETH, ER, EL, EH, T\nEL, THE, RE, RET, REC, LEZ, LET, CEL, H\nE, HET, HER\nIf your hand contains the letters: RRRTTEZ, your program should output the following.\nDuplicate words in your solution are acceptable for this homework assignment.\n\nPossible two or three letter words are:\nRE, RET, TET, ER, ERR, ET\nHint 1:\nThe String class contains many methods you might need. Below are the method signatures of\nseveral methods in the String class that you might find useful in this assignment. Check the\nJavadoc to learn more.\npublic int length()\nReturns the number of characters in a String.\npublic char charAt(int index)\nReturns the character at the input index position of a String.\npublic String concat(String str)\nReturns a new String that is the result of the original string concatenated with the input\nString str. For example, if String a = 'hello', then a.concat('there')\nwould return 'hellothere'.\npublic String substring(int beginIndex, int endIndex)\nReturns a new String that is the substring of the original String, from index position\nbeginIndex to index position endIndex-1. For example, if String a =\n'hello', then a.substring(2,4) will return 'll'.\nHint 2:\nIf I have a variable letter that is of type char, the statement letter - 'A' will produce\nan integer value that reflects how many letters away letter is from 'A'. For example, if\nletter = 'C', then letter - 'A' will result in the integer 2.\nPage 2 of 3\n\nTurn In\n1. Place a comment with your full name, section, TA name and assignment number\nat the beginning of the .java file for your solution.\n2. Place all of the files in your solution in a single zip file.\na. Do not turn in copies of compiled byte code or backup (.class or .java~\nfiles)\nb. Do not turn in printed copies of your solution.\n3. Submit the single zip file on the 1.00 Web site under the appropriate section. For\ndirections see How To: Submit Homework on the 1.00 Web site.\n4. Your uploaded files should have a timestamp of no later than noon on the due\ndate.\n5. After you submit your solution, please recheck that you submitted your .java file.\nIf you submitted your .class file, you will receive zero credit.\nPenalties\n- 30 points off if you turn in your problem set after Friday noon but before noon on\nthe following Monday. You have one no-penalty late submission per term for a\nturn-in after Friday noon and before Monday noon.\n- No credit if you turn in your problem set after noon on the following Monday.\nPage 3 of 3\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 5",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/a94b1cd2a24b9986cba8010c5773f925_MIT1_00S12_PS_5.pdf",
      "content": "Introduction to Computers and Engineering Problem Solving\nSpring 2012\nProblem Set 5: MBTA routes\nDue: 12 noon, Friday, March 23\n\nProblem statement\n\na. Overview\n\nThe Massachusetts Bay Transportation Authority (MBTA) operates routes using three basic\ntechnologies:\n- Buses, which operate as single units with a driver\n- Urban rail, such as the Red, Orange, Blue and Green Lines, which operate trains\nconsisting of individual, powered cars; a train has an operator and may have additional\non-train staff.\n- Commuter rail, such as lines to Lowell or Providence, which operate trains consisting of\none engine and a number of unpowered cars; a train has an engineer in the engine, and\nadditional staff on the cars.\n\nA route must operate on at least one right-of-way (ROW) type:\n- Dedicated right of way, which has tracks or a busway separated from the street system,\nand stops only at stations. Most urban rail, some bus, and all commuter rail routes\noperate on a dedicated ROW.\n- Shared right of way, which operate together with or near private vehicle traffic on streets.\nMost bus routes and some urban rail routes operate on a shared ROW.\n- Mixed right of way, which is a hybrid of dedicated and shared. For example, the Silver\nLine bus to the airport operates in its own tunnel at South Station, which is a dedicated\nright of way, as well as on public streets to and from the airport, which is a shared right\nof way. Green Line routes operate on shared right of way at their outer ends, as well as in\ndedicated right of way (tunnel) on their inner portions.\n\nFor this homework, you will design and implement a set of classes and interfaces and use them\nto calculate the MBTA's resource requirements. Your classes will be quite short and will have\nlittle computation. You would generally not use a full inheritance structure for a problem this\nsimple, but if you were computing everything that the MBTA monitors on each route, this\nstructure would be appropriate. This homework can be viewed as the initial design for a much\nlarger system.\n\nb. Data members\n\nEach route has the following data:\n- Route name (String).\n- L= route length (double, miles)\n1/5\n\n- v= average speed (double, mph)\n- h= headway, or interval between buses or trains (double, minutes)\nEvery bus or train on a route has one operator: bus driver, urban rail operator, or commuter train\nengineer.\n\nEach urban rail route and commuter rail route has additional data members:\n- c= train length, measured in the number of vehicles in a train, assumed constant all day\n(int)\n- k= number of additional staff per train (e.g., conductors, ticket collectors) (int)\nBus routes have no data members for these items; there are no trains or extra staff on buses.\n\nEach route with dedicated right of way has, in addition:\n- b= number of stations (int)\n- m= number of staff per station (int)\n\nEach route with shared right of way has, in addition:\n- a= number of stops (int); these are very simple, and are different than stations\n- d= additional vehicles assigned to the route because of traffic delays; this is expressed as\na multiplier from a base, e.g., 1.25 (double).\n\nc. Methods: getVehicles() and getEngines()\n\nFor each route, you must implement a method called getVehicles(), which computes the number\nof vehicles required using the following equation:\n\ne = 2 * 60 * L * c * dj (v * h)\n(buses, urban rail cars, commuter rail cars)\nThe factor of 2 is because vehicles operate round trip on the route, and the factor of 60 converts\nbetween speed (mph) and headway (minutes) units. For buses, where the bus is a single unit,\nomit variable c in the equation above. For dedicated right of way services, omit d. (Do not just\nset c=1 or d=1.) For hybrid right of way services, do not omit d.\n\nAdditionally, each commuter rail route must have a method getEngines(), which returns the\nnumber of engines using an equation that is similar to the equation above. For commuter rail\nengines, since there is one engine per train, omit variable c in the equation above. Also, For\ndedicated right of way services, omit d. (Again, do not just set c=1 or d=1.) Therefore, commuter\nrail routes will have both a getVehicles() and a getEngines() method. getEngines() is:\n\ne\n=\n* 60 * L\nj (v * h)\n(commuter rail engines)\n\nd. Method: getStaff()\n\nFor each route, you must have a method getStaff(), which computes the number of staff as the\nsum of the number of operators, other train staff, and station staff\n\nThe number of operators f for a bus, urban rail, or commuter rail route is:\n2/5\n\nf = ejc\n\n(urban rail routes)\n\nf = e1\n\n(commuter rail routes)\n\nf = e\n\n(bus routes)\n\nThe number of other staff g on the train for urban rail and commuter rail is:\n\n*\ng =\n\nc\n\n(urban rail routes)\n\ng = k * e\n\n(commuter rail routes)\n\nwhere k is specific to each route, as shown in the table below, and is not defined for bus.\n\nThe number of station staff j for bus, urban rail or commuter rail routes that operate on a\ndedicated ROW is:\n\nj= b*m\n(for any route with a dedicated ROW)\n\nThe getStaff() method returns n= f + g + j.\n\ne. Data values\n\nYou are asked to calculate and output the number of vehicles required and the number of staff\nrequired for five MBTA routes using the data in the table below. \"na\" means not applicable.\n\nVariable Definition\nBus 77\nSilver\nLine bus\nRed Line\nGreen\nB\nLine Lowell Line\nL\nRoute length\nv\nAvg speed\na\nNbr stops\nna\nna\nb\nNbr stations\nna\nh\nHeadway\nc\nTrain length\nna\nna\n5 cars,\n1 engine\n\nOperator/train\n1 driver\n1 driver\n1 operator\n1 operator\n1 engineer\nk\nAdditional\nstaff/train\nna\nna\n1 other\n1 other\n2 other\nm\nStaff/station\nna\nd\nAddl vehicles\n1.20\n1.15\nna\n1.25\nna\n\nRoute Type\nBus\nBus\nUrban\nUrban\nCommuter\n\nROW Type\nShared\nHybrid\nDedicated\nHybrid\nDedicated\n\nf. Program\n3/5\n\nYour program must meet the following guidelines:\n- You must use at least one abstract class, with appropriate abstract and final methods, and\nat least one interface; you may wish to have several abstract classes and interfaces. You\nmust have at least one abstract method and one final method in at least one class.\n- You may not represent the route type (bus, urban rail or commuter rail) or the right of\nway type (shared or dedicated) as a data member.\n- Each subclass must inherit its data and methods from a superclass or an interface to the\nmaximum extent possible. Override superclass methods as needed.\n- Each subclass must not contain data that is not relevant. For example, the Red Line may\nnot have stops or additional vehicles, and the 77 bus may not have stations, staff per train,\nvehicles per train, or staff per station. A subclass must not have any data marked \"na\" in\nthe table above. You may not set \"na\" variables equal to one in a subclass that does not\nuse them; they must not be present.\n- If a route type has a certain data member, your design must require that it be present. For\nexample, your design must require all shared ROW routes to have a number of stops. All\nurban rail and commuter rail routes must have a number of stations, staff/station and\nstaff/train.\no An interface cannot force an implementing class to have a data member, but if the\ninterface has a method getX(), the implementing method will need to either have a\ndata member X or compute X. This meets the requirement of the problem set.\n- You may use protected access for data members to be inherited by subclasses, except that\nany data member managed by a final method must be private.\n- Data members and methods must be defined in the highest level of the inheritance tree\npossible. For example, the data members that exist for all routes must be defined in a\nRoute class, not in BusRoute, UrbanRailRoute or CommuterRail classes.\no All of your methods will be very simple; they should all be just one line.\n- You must write classes or subclasses for the combinations of Route and ROW listed at\nthe in the table above. You should not write any other combination of Route and ROW.\no You do not need to have a class for bus routes just on dedicated ROW\no You do not need to have a class for urban rail routes just on shared ROW\n- You must write a class RouteTest with only a main() method to test your software. In\nmain(), write code to:\n- Create objects for five routes: bus 77, Silver Line/Airport, Red Line, Green Line B\nand Lowell Line\n- Compute and output (System.out.println) the number of vehicles and staff required\nfor each route, including the number of engines for commuter rail routes. You will\nhave fractional values, which is fine.\n- Output the number of stops and/or stations for each route.\n- Compute and output the total number of vehicles for bus routes, for urban rail routes\nand for commuter rail routes. (This will be three totals) You must use the instanceOf\nkeyword in your loop to determine what kind of vehicle is used on a route, since all\nroutes have the same getVehicle() method. Include commuter rail engines, using\ngetEngine().\n- Compute and output the total staff across all routes.\n4/5\n\n- Remember to let Eclipse help you. Use its Source-> Generate... feature to write\nconstructors and inherited method signatures, as used in lecture. Use the @Override\nannotation to let the compiler detect errors. Eclipse (and Java annotations) can save\nyou a lot of time. Almost all of your code in this homework can be generated by\nEclipse, except for class RouteTest.\n\nSample output\n\nStaff: 8.57\nVehicles: 8.57 Stops: 40\nsilver\nStaff: 7.83\nVehicles: 4.83 Stations: 3\nStops: 5\nred\nStaff: 60.67\nVehicles: 80.0 Stations: 17\ngreen\nStaff: 58.0\nVehicles: 36.0 Stations: 11\nStops: 19\nlowell\nStaff: 16.0\nVehicles: 16.67 ngines: 3.33\nStations: 6\n\nTotal staff: 151.07\nBuses: 13.40\nUrban rail vehicles: 116.0\nTotal commuter rail vehicles: 16.67\nTotal commuter rail engines: 3.33\n\nTurn In\n1. Place a comment with your full name, section, TA name and assignment number\nat the beginning of the .java file for your solution.\n\n2. Place all of the files in your solution in a single zip file.\n\na. Do not turn in copies of compiled byte code or backup (.class or .java~ files)\n\nb. Do not turn in printed copies of your solution.\n3. Submit the single zip file on the 1.00 Web site under the appropriate section. For\ndirections see How To: Submit Homework on the 1.00 Web site.\n\n4. Your uploaded files should have a timestamp of no later than noon on the due date.\n\n5. After you submit your solution, please recheck that you submitted your .java file. If you\n\nsubmitted your .class file, you will receive zero credit.\n\nPenalties\n\n- 30 points off if you turn in your problem set after Friday noon but before noon on the\nfollowing Monday. You have one no-penalty late submission per term for a turn-in after\nFriday noon and before Monday noon.\n\n- No credit if you turn in your problem set after noon on the following Monday.\n\n5/5\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 6 and 7",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/a847272a5ca4f8ea3c53a8c97c789700_MIT1_00S12_PS_6and7.pdf",
      "content": "Introduction to Computers and Engineering Problem Solving\nSpring 2012\nProblem Sets 6 and 7: Antenna GUI\nDue: 12 noon, Friday, April 6, 2012 (Problem Set 6)\n\n12 noon, Friday, April 20, 2012 (Problem Set 7)\n\nProblem statement\n\nYou are to write a graphical user interface (GUI) to compute and display the magnetic\ninductance of line, coil and rectangular antennas. You'll do it in two stages, starting in\nhomework 6 and finishing in homework 7. We use exactly the same equations as in homework 1.\n\nYour GUI should resemble the picture below.\nRefer to homework 1 for the five equations for inductance of line, coil and rectangle antennae.\nYou must use the model-view-controller paradigm to write the GUI.\n1/4\n\nYou must design and write appropriate model classes, using inheritance to model the three types\nof antenna (line, coil and rectangle). The Antenna classes will contain the appropriate data\nmembers,set() ,and get() methods; they must not have extraneous data or methods that do not\napply to them. This is a generalization of the model-view-controller paradigm; in this homework\nyou will have multiple model classes.\n\nThe computational methods that you must implement are:\n- Line antenna:\no\nCompute magnetic inductance (equation 1)\n- Coil antenna:\no\nCompute magnetic inductance (equation 2)\no\nCompute mutual inductance with another coil antenna (equation 4)\n- Rectangle antenna:\no\nCompute magnetic inductance (equation 3)\no Compute mutual inductance with a line antenna (equation 5)\nThese methods take one argument, distance x, except for equation 4, which must also accept a\nreference to a second coil antenna. (In equation 1, the distance is r.)\n\nYou must also write a AntennaView class, which obtains all data and results from the model\nclasses needed to draw the antennas being analyzed, and to print the inductance computed from\nthe model. This class has a paintComponent() method as its key element. Its display should\ngenerally look like the figure above: it must show the relevant antennas and their characteristics.\n\nThird, you must write a AntennaController class. It must meet the following requirements:\n- It must have labels and text fields to allow the six inputs to be entered (current, number of\nwindings, coil radius, rectangle length and width, distance x), as appropriate\n- It must allow the user to select the analysis to be done; the 5 choices are the 5 equations.\nYou may use a combo box.\n- It must have \"Quit\" and \"Calculate\" buttons as shown in the figure above\n- It must use appropriate panels and layout managers to place the input components. Your\nGUI must resemble the example given above.\n- It must have appropriate anonymous inner classes as listeners for the buttons\no\nThe \"Calculate\" button listener should parse all the inputs, checking that all are\ngreater than zero, and set the model parameters to them. You may require all\ninputs to be present, even if the requested analysis does not use all of them, for\nsimplicity.\no\nThe \"Quit\" button should end the application.\n\nYour program must be a model-view-controller implementation. The model classes (Antenna\nand others) will perform the calculations. A view class (AntennaView) will draw the antennas\nand display the results of the calculations. A controller class (AntennaController) will\nallow user input and control program execution. As you develop your classes, keep in mind how\nthe model(s), the view and the controller need to interact.\n\n2/4\n\nUse the sample output and solution from homework 1 to check your model results.\n\nProblem Set 6\n\n1. Models\nWrite the Antenna classes to implement the equations. The classes must have appropriate\ndata members and methods to be used as the models in your final program. The controller\n(problem set 7) will need to transfer user input to the models. The view (problem set 7) will\nhave to get all the necessary data from the models to draw the antennas and display the\nanalysis results.\n\n2. Controller\nCreate a class AntennaController that extends JFrame.\na. The class should have the appropriate textboxes, combo box, and buttons displayed and\nfunctional. Use anonymous inner classes to listen for events.\nb. No antennas need to be drawn yet, and no analysis outputs need to be displayed. For now,\nyou may insert an empty JPanel in that area.\nc. The class should have a main(String[] args) method that creates and displays an\ninstance of the class.\nHand in the Antenna classes and the AntennaController class to complete problem set 6.\nYour program should work except that nothing is drawn or output when it is run.\n\nProblem Set 7\n\n3. View\nWrite a class AntennaView that extends JPanel.\na. You may set a fixed size for the panel.\nb. Apart from the constructor and perhaps a set() method, the only public method in this\nclass should be paintComponent(Graphics g), which draws the antenna(s) and\ndisplays the analysis results. It obtains the data values it needs by calling methods on the\nmodel classes. You are free to make changes to your model and controller classes from\nthose that you handed in for problem set 6. The antennas must be drawn approximately to\nscale.\n\nTo complete problem set 7, hand in the Antenna model classes, AntennaView, and\nAntennaController classes that make up the complete application.\n\n3/4\n\nTurn In\nFor each problem set:\na. Place a comment with your full name, section, TA name and assignment number\nat the beginning of all .java files in your solution.\n\nb. Place all of the files in your solution in a single zip file.\n\nc. Do not turn in electronic or printed copies of compiled byte code (.class files) or backup\nsource code\n\n(.java~ files)\nd. Do not turn in printed copies of your solution.\n\n2. Submit this single zip file on the 1.00 Web site under the appropriate section and problem set\nnumber.\n\nFor directions see How To: Submit Homework on the 1.00 Web site.\n3. Your solution is due at noon. Your uploaded files should have a timestamp of no later than\nnoon on the due date.\n\n4. After you submit your solution, please recheck that you submitted your .java file. If you\n\nsubmitted your .class file, you will receive\n\nzero credit.\nPenalties\nFor each problem set:\n\n- 30 points off if you turn in your problem set after Friday noon but before noon on the\nfollowing Monday. You have one no-penalty late submission per term for a turn-in after\nFriday noon and before Monday noon.\n- Problem set 6 is due Wednesday noon because of a Friday holiday. You may turn it in\nfor the late penalty by the following Monday at noon.\n\n- No credit if you turn in your problem set after noon on the following Monday.\n\n4/4\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Problem Set 8",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/cd5ff09089b5f7607af9c62290f5c630_MIT1_00S12_PS_8.pdf",
      "content": "Introduction to Computers and Engineering Problem Solving\nSpring 2012\nProblem Set 8: Rail switching\nDue: 12 noon, Friday, April 27, 2012\n1. Problem Statement\nRailroads use radio remote control systems for an operator on the ground to control\nengines switching cars in a rail yard. We will simulate a simple version of such a system\nin this homework, which will have just one track, one railroad car, and one engine. Your\nprogram will allow remote control of the engine speed, direction and coupling to a car. It\nmust have a safety feature that stops the engine if it detects a lighted object in its range,\nsuch as a car with an end marker.\nYou should base your program on the Phidget and Swing vehicle application from\nlecture, although you will need to make substantial modifications:\n- The slider sensor must control engine speed in either direction. A value near the\nmiddle is zero mph; allow a range (e.g., 450 to 550) to be zero speed. The high\nrange (550 to 1000) indicates positive speeds and the low range (0-450) indicates\nnegative speeds (going backwards). The GUI must show the engine moving\nacross the display.\n- You will have to keep moving the slider sensor to keep generating events so that\nthe engine keeps moving. This feature exists in real systems, and is both an\nannoyance and a safety feature: if the operator is incapacitated, the engine will\nstop.\n- The force sensor must be used to couple or uncouple a car from the engine. The\ncar and engine must be adjacent to be coupled or uncoupled, and the speed of the\nengine must be zero. Use a force threshold of 300.\n- The light sensor must be used to initiate an emergency stop. Cars and employees\nhave reflective surfaces and the engine has lights and a light sensor that detects\nreflected light. When the light sensor detects a high light reading, the engine\nspeed is immediately set to zero. The engine can be restarted only after the light\nsensor reading is low. Use a light sensor threshold of 300.\nIn a real system, you would use the Phidgets digital outputs to send digital signals to\ncontrol the engine. These are being simulated by calls to repaint() in the GUI in this\nhomework.\nThe figure below is a very simple example of the GUI. The engine is red, the car is black,\nand the track is blue. The figure shows the starting position, with the engine and car\nseparated. In the solution GUI, the car and engine are \"filled\" (rather than drawn) when\nthey are coupled. You must indicate when the car and engine are coupled, but you may\ndo it in any way that you wish.\n1.00 Spring 2012\n1/5\nProblem Set 8\n\nInitial position:\nAfter coupling:\nAfter the engine pulls and then decouples from the car:\n2. Program\nUse the basic structure from the vehicle example in lecture 26.\n- The GUI must show at least the track, the engine, and the car.\n- The display must show the location, direction and speed of the engine. No text is\nrequired; the display must show the movements of the engine and car.\n- After the engine has approached within a meter/pixel of the car, it can then be\ncoupled to the car by pushing the force sensor, but not otherwise.\n- When the engine and car are touching each other but are not coupled, moving the\nengine in the direction of the car should cause neither the engine nor the car to move.\n- The engine can be coupled to or uncoupled from the car by pushing the force sensor\nonly when the engine is stationary (i.e., only when the slider value is between 450 and\n550). Commands for coupling or uncoupling must be ignored when slider has a value\noutside the 450-550 range.\nÂ· You may get multiple coupling events when pushing the force sensor, since it\nwill generate a number of events at similar pressure values. Implement a simple\nway to limit this problem if you can see one; it's ok if the user needs to push the\nforce sensor a few times.\n- Your engine and car must stay on the track segments shown in the GUI. If they hit\nthe end of track, speed is set to zero. Have your track go from x=100 to x=800.\n- The GUI can be quite simple--it does not need to be beautiful, just functional.\n1.00 Spring 2012\n2/5\nProblem Set 8\n\n- Your application must use a model-view-controller pattern. The view just does the\ndrawing, as shown in the examples. The model computes speeds, locations, coupling,\netc. The controller draws the frame, opens and closes the Phidgets interface kit, and\nhandles sensor events. The controller should have a \"quit\" button so that the text file\nbeing written (see below) can be closed correctly.\nYou must write the key events from your simulation to a text file using a Java stream. Let\nthe x location of engine or car be its leftmost coordinate. You must write the following\ndata to the text file:\n- The engine's x location of any coupling event and uncoupling event.\n- The x location if the engine hits the start of the track.\n- The x location if the car hits the end of the track.\n- The engine's x location and sensor value of any light event that causes the engine\nto stop.\n- The final x locations of both engine and car.\nDecide the appropriate method and class design to write these events. Also:\n- Write the event type as well as the required data.\n- Call the file HW8Out.txt.\n- Minimize the number of duplicate entries in the text file. Use booleans to detect\nwhen you're in a given state, and only write to the text file when the state changes\n(e.g., if you're at end of track and stay there, write that event only once).\nWhen you run your program you must:\n- Move the engine next to the car.\n- Couple to the car.\n- Go to the right end of track.\n- Go to the left end of track.\n- Go back toward the center of the track.\n- Uncouple from the car.\n- Move the engine to the left, and stop it with a light sensor event.\nThese events must be recorded in the text file that you submit.\nYour sensors must be on the following analog ports:\n1. Force sensor\n2. (Rotation sensor--used only in extra credit)\n3. Light sensor\n4. Slider\nWe will deduct points if your sensors are not on these ports. (We need to be able to grade\nyour submissions on our test setup efficiently.)\nSample output is shown below. Yours will be different, based on how you manipulate\nyour sensors:\n1.00 Spring 2012\n3/5\nProblem Set 8\n\nCoupled at: 600\nEngine and car at end of track: 720\nEngine at start of track: 100\nUncoupled at: 394\nEngine at start of track: 100\nLight event: 205\nLast position of engine: 205\nLast position of car: 394\n3. Extra Credit\nIn addition to your solution above, you may implement additional functionality for this\nproblem set and get up to 40 extra credit points. You must first complete and submit\nthe entire standard solution as outlined above. Do not attempt to develop the extra\ncredit solution until you have completed the normal assignment since it will be graded\nseparately. When you submit your solution to the 1.00 Web site, first submit your\noriginal solution. Then upload your extra credit solution as a second .zip file. Both\nversions should contain all the files needed to compile and run your solution.\nYou can get extra credit on only one homework from problem sets 8 to 10. If you\ndon't have time do to the extra credit this time, you still have the opportunity to do so in\nthe future.\nFor extra credit, your program must have two cars on the track in addition to the engine.\nThe user must be able to couple and uncouple either of them, one at a time, with remote\ncontrol. Use the rotation sensor to select which car to couple or uncouple; place it on\nanalog port 2. Connect two LEDs to digital output ports 1 and 2, and turn the first LED\non if and only if engine and the first car are coupled; turn the second LED on if and only\nif the two cars are coupled. When you write the events to the text file, include which car\nis being coupled or uncoupled.\nFor the extra credit problem we provide images of the engine and car. See the homework\n8 download zip file. Instead of drawing rectangles, you must render pictures of the engine\nand cars and move them around. You are welcome to use your own images.\nImages courtesy of Ken Houghton Rail Images, via http://www.rrhistorical.com/\n1.00 Spring 2012\n4/5\nProblem Set 8\n\nFor methods of image loading and rendering, see online documentation at:\nhttp://docs.oracle.com/javase/tutorial/2d/images/index.html\nBelow is a snapshot of an engine and two cars when the engine and the first car are\ncoupled. You are welcome to add any additional cool features.\nTurn In\n1. Place a comment with your and your partner's full names, sections, TA names\nand assignment number at the beginning of all .java files in your solution. In this\nhomework, you will have multiple .java files.\n2. Place all of the files in your solution in a single zip file.\na. Do not turn in electronic or printed copies of compiled byte code (.class\nfiles) or backup source code (.java~ files)\nb. Do not turn in printed copies of your solution.\n3. Submit this single zip file on the 1.00 Web site under the appropriate section and\nproblem set number. For directions see How To: Submit Homework on the 1.00\nWeb site.\n4. Your solution is due at noon. Your uploaded files should have a timestamp of no later\nthan noon on the due date.\n5. After you submit your solution, please recheck that you submitted your .java file. If\nyou submitted your .class file, you will receive zero credit.\nPenalties\n- 30 points off if you turn in your problem set after Friday noon but before noon on\nthe following Monday. You have one no-penalty late submission per term for a\nturn-in after Friday noon and before Monday noon.\n- No credit if you turn in your problem set after noon on the following Monday.\n1.00 Spring 2012\n5/5\nProblem Set 8\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/7ac71f88476cd6ecc93742f54d8cd712_MIT1_00S12_Final_F10.pdf",
      "content": "1.00/1.001 - Fall 2010 - Final Exam\n1 / 15\n1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nFall 2010 - Final Exam\n\nName:\n\nMIT Email:\n\nTA:\n\nSection:\n\nYou have 3 hours to complete this exam. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary packages have already\nbeen imported. You may only add code inside the boxes. The code written outside the\nboxes may not be altered in any way. Good luck!\n\nQuestion 1\n/ 10\nQuestion 2\n/ 10\nQuestion 3\n/ 30\nQuestion 4\n/ 20\nQuestion 5\n/ 15\nQuestion 6\n/ 15\nTotal\n/ 100\n\n1.00/1.001 - Fall 2010 - Final Exam\n2 / 15\nQuestion 1 - Sorting (10 points)\n\nBelow is part of the code for class book. Implement the Comparable interface for this\nclass. The sort order should be first alphabetically by author, then by number of pages\n(largest number first), and then by book height (largest height first). Use the generic\nversion of the Comparable interface.\n\npublic class Book implements Comparable<Book> {\n\nprivate double height;\n\nprivate int pages;\n\nprivate String author;\n\nprivate String title;\n\npublic Book(String title, String author, double height,\nint pages){\n\nthis.title=title;\n\nthis.author=author;\n\nthis.height=height;\n\nthis.pages=pages;\n\n}\n\npublic double getHeight() {return height;}\n\npublic int getPages() {return pages;}\n\npublic String getAuthor() {return author;}\n\npublic String getTitle() {return title;}\n\npublic int compareTo(Book b){\n\n}\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n3 / 15\n\nQuestion 2 - Recursion (10 points)\n\nA less known contemporary of Fibonacci, Notsofibbi, invented a new sequence to make\nhimself famous. In this sequence, each term is the product of the preceding two terms.\nThe first terms of the Notsofibbi sequence are therefore: 2, 3, 6, 18, 108, 1944...\n\nComplete the notso(int n) method, which returns the nth Notsofibbi number using a\nrecursive algorithm. The sequence starts at index 0, which means that:\n\nnotso(0) returns 2\n\nnotso(1) returns 3\n\n...\n\nYou may assume that the method is always called with a non-negative integer\nargument.\n\npublic static int notso(int n){\n\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n4 / 15\nQuestion 3 - Class design (30 points)\n\nWe want to model a store. Someone has already written the following abstract Item\nclass:\n\npublic abstract class Item {\n\nprotected int id;\n\nprotected double price; // what a customer pays a store\n\nprotected double cost; // cost of producing an item\n\npublic Item(int i, double p, double c){\n\nid = i;\n\nprice = p;\n\ncost = c;\n\n}\n\npublic double getProfit() {return price - cost;}\n\npublic int getId() {return id;}\n\npublic abstract void checkItem();\n}\n\n3.a\nMany items in a store are perishable. Write an interface called Perishable that\ndefines a \"near expiration\" threshold NEAREXP to be 3 days, and a boolean\nmethod called nearExpired() that determines if something should be marked\nas being near expiration.\n\n1.00/1.001 - Fall 2010 - Final Exam\n5 / 15\n3.b\nNext, we want to model food items, which are perishable. Write a class Food that\ninherits from the code above. A Food object should keep track of its ID, price,\ncost, shelf life, and the number of days it has already spent on the store's shelf. A\nfood item's shelf life is always 10 days in this problem. All other values are\nassigned from the constructor's parameters. Allow future classes to inherit data\nmembers in Food.\n\nImplement all necessary methods in the Food class. If a food item is within\nNEAREXP days of its shelf life, it is marked as near expired. When a store\nmanager \"checks\" a food item, a food item that is marked near expired will be\nsold at a 20% discount.\n\npublic class Food\n\n{\n\n1.00/1.001 - Fall 2010 - Final Exam\n6 / 15\n3.c\nNow create a new class called Fruit. A fruit is a type of food, so inherit\nappropriately. When checking a fruit, if the fruit is near expired, its price will be\nreduced by half.\n\npublic class Fruit\n\n{\n\n}\n\n3.d\nThe store also sells electronics. All electronics in this store come with batteries.\nWhen checking an electronic item, if the battery capacity of the item is below\n1500 mAh, then the price of the item is discounted by $2. Fill in the code below\nwith the necessary methods. The battery capacity data member should be\nassigned from a parameter given to the constructor.\n\npublic class Electronics extends Item {\n\nprivate double battCap;\n\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n7 / 15\n3.e\nWe will now implement a store. This store currently sells only three items: an\napple (with ID 4001, price of $0.60, cost of $0.10, and having been on the shelf\nfor 6 days), a box of cereal (with ID 4002, price of $4.00, cost of $0.20, and\nhaving been on the shelf for 8 days), and a flashlight (with ID 9001, price of\n$10.00, cost of $5.00, and capacity of 2500 mAh). Add all items to the inventory.\nThen write the code that goes through the inventory, checks every item,\ncomputes the profit subtotal, and if it is perishable, prints out its ID and whether it\nis near expiration or not. Finally, print out the total store profit if everything sells\ntoday.\n\npublic class StoreTest {\n\npublic static void main(String[] args) {\n\nArrayList<Item> inventory = new ArrayList<Item>();\n\ninventory.add(new\n\n);\n\ninventory.add(new\n\n);\n\ninventory.add(new\n\n);\n\n}\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n8 / 15\nQuestion 4 - Dot Product (20 points)\n\nIn this question, you will implement a method to find the transpose of a matrix and a\nmethod to compute the dot product of two matrices. Recall the matrix class from lecture:\n\npublic class Matrix {\n\nprivate double[][] data;\n\npublic Matrix(int m, int n) {data = new double[m][n];}\n\npublic int getNumRows() {return data.length;}\n\npublic int getNumCols() {return data[0].length;}\n\npublic double getElement(int i, int j) {return data[i][j];}\n\npublic void setElement(int i, int j, double val) {\n\ndata[i][j] = val;\n\n}\n\npublic Matrix mult(Matrix b) {\n\nMatrix result = null;\n\nint nrows = data.length;\n\nint ncols = data[0].length;\n\nif(ncols == b.data.length) {\n\nresult = new Matrix(nrows, b.data[0].length);\n\nfor(int i=0; i<nrows; i++)\n\nfor(int j=0; j<result.data[0].length; j++) {\n\ndouble t = 0.0;\n\nfor(int k=0; k < ncols; k++)\n\nt += data[i][k] * b.data[k][j];\n\nresult.data[i][j]= t;\n\n}\n\n}\n\nreturn result;\n\n}\n\npublic Matrix getTranspose(){\n\n//Code completed in Part a.\n\n}\n\npublic double getDotProduct(Matrix m){\n\n//Code completed in Part b.\n\n}\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n9 / 15\n4.a\n\nFirst, we will write a method to find the transpose of a matrix.\n\nA matrix transpose can be found by writing the rows of a matrix as the columns of its\ntranspose. For example:\n\n.\n\nComplete the method getTranspose() that finds the transpose of a Matrix. Any matrix\nhas a transpose (not just square matrices).\n\npublic Matrix getTranspose()\n{\n\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n10 / 15\n4.b\n\nNow we will write a method for finding the dot product of two vectors (or row matrices).\n\nOne method for calculating the dot product of two matrices is the following:\n\nwhere AT is the transpose of the matrix A.\n\nUsing the getTranspose() method from Part a, complete the getDotProduct(..) method\nbelow for calculating the dot product of two matrices. Remember: You can only find the\ndot product of two vectors (or row matrices) of the same size. If the matrix argument\n(Matrix m) is not the same size as the matrix this method is being called on, this\nmethod should throw an ArithmeticException that will print to the console \"Dot Product\nRequires Vectors of the Same Size!\"\n\npublic double getDotProduct(Matrix m)\n{\n\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n11 / 15\nQuestion 5 - Streams (15 points)\n\nYou are given a text file which consists of a number of lines. Each line contains a\nvarying number of integers, separated by a space. An example file looks like this:\n\nWrite a method to read in all integers stored in a file and print them to the console in\nascending order. With the above input file, your program should print:\n\nYou can assume that there are no format errors in the input file and the total number of\nintegers stored in the file is less than 1000. You may assume appropriate packages are\nalready imported and you may write helper methods if you feel necessary. Your\nprogram should handle any input/output exception that may arise.\n\n1.00/1.001 - Fall 2010 - Final Exam\n12 / 15\npublic static void readAndPrint(String fileName){\n\n}\n\n1.00/1.001 - Fall 2010 - Final Exam\n13 / 15\nQuestion 6 - Linked Lists (15 points)\n\nYou are developing an electronic personal organizer that uses linked lists to handle\ntasks and events\n\nThe organizer keeps two lists: a list of events and a list of tasks.\n\nEach event has a name, a start time and an end time. The start and end times are\nrepresented as integers (e.g. 1030 means 10:30am, 1500 means 3:00pm). The list of\nevents is maintained in chronological order, with the earliest event first in the list. In this\nproblem, we assume that there is no time conflict between events: two events may be\nscheduled back-to-back, but they never overlap. The list only contains events for one\nparticular day.\n\nEach task has a name, and a task may have a deadline. When a task has a deadline, it\nis convenient for the user to see the deadline in the schedule of events. To do this, an\nevent representing the deadline is added to the event list. Such an event has the same\nname as the task and has start and end times both equal to the task deadline. The task\nlist is in no particular order. Assume that task deadlines do not fall within oter events.\n\nIn the example below, an MIT student has an 8.02 lecture from 9am to 10:30am and a\n1.00 lecture from 3pm to 4:30pm. He/she has a 1.00 homework due at 12noon. He/she\nalso needs to buy a printer cartridge, but there is no rush for that.\n\nOrganizer\n\"8.02 Lecture\"\n\"1.00 Pset due\"\n\"1.00 Lecture\"\n\"1.00 Pset due\"\n\"Buy printer cartridge\"\nTasks\nEvents\n\n1.00/1.001 - Fall 2010 - Final Exam\n14 / 15\nPart of the Organizer class has already been written. It has two inner classes to\nrepresent events and tasks. You need to implement the addTaskWithDeadline()\nmethod, which will be used to add a task and its corresponding deadline to the\norganizer lists. You will write the method in 3 steps:\n\n6.a\nCreate the Task and Event objects that need to be added to the organizer lists.\nMake sure to create the appropriate relationship between those objects.\n\n6.b\nAdd the Task object to the task list.\n\n6.c\nAdd the Event object to the event list, keeping the list in chronological order.\n\npublic class Organizer {\n\nprivate Event firstEvent;\n\nprivate Task firstTask;\n\nprivate class Event{\n\nprivate String name;\n\nprivate int start;\n\nprivate int end;\n\nprivate Event next;\n\npublic Event(String n, int s, int e){\n\nname = n;\n\nstart = s;\n\nend = e;\n\nnext = null;\n\n}\n\n}\n\nprivate class Task{\n\nprivate String name;\n\nprivate Event deadline;\n\nprivate Task next;\n\npublic Task(String n){\n\nname = n;\n\ndeadline = null;\n\nnext = null;\n\n}\n\n}\n\n// Organizer class continues next page\n\n1.00/1.001 - Fall 2010 - Final Exam\n15 / 15\n// takes in the name of the task (n) and the deadline (d)\npublic void addTaskWithDeadline(String n, int d){\n\n// a) create Task and Event objects\n\n// b) add Task object to task list\n\n// c) add Event object to event list\n\n}\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/321ace412571ca8cb0cd95f8d906827f_MIT1_00S12_Final_F11.pdf",
      "content": "1.00/1.001 - Fall 2011 - Final Exam\n1 / 15\n1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nFall 2011 - Final Exam\n\nName:\n\nMIT Email:\n\nTA:\n\nSection:\n\nYou have 3 hours to complete this exam. In all questions, you should assume that all\nnecessary packages have already been imported. For coding questions, you do not\nneed to include comments. You may only add code inside the boxes. The code written\noutside the boxes may not be altered in any way. Good luck!\n\nQuestion 1\n/ 10\nQuestion 2\n/ 20\nQuestion 3\n/ 20\nQuestion 4\n/ 30\nQuestion 5\n/ 20\nTotal\n/ 100\n\n1.00/1.001 - Fall 2011 - Final Exam\n2 / 15\n\nThis page is intentionally left blank.\n\n1.00/1.001 - Fall 2011 - Final Exam\n3 / 15\nQuestion 1 - True/False Questions (10 points)\n\nPlease circle your answer to the following questions.\n\n1). A single stream can be used as both an input stream and an output stream at the same time.\nTrue False\n\n2). There can be several catch blocks in a single try/catch structure.\nTrue False\n\n3). A method can throw more than one type of Exception.\nTrue False\n\n4). In Java, a class can extend any number of abstract classes and an abstract class can have any\nnumber of subclasses.\nTrue False\n\n5). Protected data members cannot be accessed by other classes in the same package.\nTrue False\n\n6). A final method cannot be overridden.\nTrue False\n\n7). An event listener can be registered with more than one event source to receive notifications\nabout specific types of events.\nTrue False\n\n8). Strings are immutable (implicitly final) in Java.\nTrue False\n\n9). When writing objects to file using ObjectOutputStream, the objects cannot have methods.\nTrue False\n\n10). A variable declared inside a \"for\" loop can be referenced outside the loop.\nTrue False\n\n1.00/1.001 - Fall 2011 - Final Exam\n4 / 15\nQuestion 2 - Data Structures (20 points)\n\n2.a Draw links (lines with arrows) to illustrate the process of inserting a node into a linked list\nbetween node i and node i+1. Use a cross (X) to denote removing a link. A step is a line of\ncode.\nNew Node\nitem\nnext\n...\n...\nAfter Step 1:\nNew Node\nitem\nnext\nNode i\nitem\nnext\nNode i+1\nitem\nnext\n...\n...\nInitially\nNew Node\nitem\nnext\n...\n...\nAfter Step 2:\nNode i\nitem\nnext\nNode i+1\nitem\nnext\nNode i\nitem\nnext\nNode i+1\nitem\nnext\na\na\na\n\n2.b Which data structure d is used in the following two operations (add() and remove())?\n\nPlease circle your answer: Stack Queue Array ArrayList\nd.add(3)\nd.remove()\n\n1.00/1.001 - Fall 2011 - Final Exam\n5 / 15\n2.c Draw the contents of the stack after the following operations are performed. (Show only the\ncontents that can be referenced.)\n\npush(\"s\")\npush(\"e\")\npop()\npush(\"e\")\npop()\npop()\npush(\"y\")\npush(\"a\")\npop()\n\n2.d In the following SLinkedList class, implement method public boolean\nclearRest(), which removes all the nodes in the linked list beyond the first one. The\nmethod should return true if nodes were removed, and false if no nodes were removed.\nMake sure first, last and length are set correctly. The linked list may be empty.\npublic class SLinkedList {\n\nprivate int length = 0;\n\nprivate Node first = null; //the first Node in the list\n\nprivate Node last = null; //the last Node in the list\n\nprivate static class Node {\n\nObject item;\n\nNode next;\n\nNode( Object o, Node n ) { item = o; next = n; }\n\n}\n\n// Other existing methods here...\n\npublic boolean clearRest() {\n\n}\n}\n\n1.00/1.001 - Fall 2011 - Final Exam\n6 / 15\nQuestion 3 - Matrices (20 points)\n\nRecall class Matrix, as presented in lecture:\n\npublic class Matrix {\n\nprivate double[][] data;\n\npublic Matrix(int m, int n) {\n\ndata = new double[m][n];\n\n}\n\npublic int getNumRows() {\n\nreturn data.length;\n\n}\n\npublic int getNumCols() {\n\nreturn data[0].length;\n\n}\n\npublic double getElement(int i, int j) {\n\nreturn data[i][j];\n\n}\n\n// And many other methods\n} // End of Matrix class\n\n1.00/1.001 - Fall 2011 - Final Exam\n7 / 15\n3.a Tridiagonal matrix. A tridiagonal matrix has nonzero elements only in the main diagonal,\nthe first diagonal below it, and the first diagonal above it:\n\n-\n-\n-\n-\n-\n-\n,1\n,1\n,2\nn\nn\nn\nn\nn\nn\na\na\na\na\na\na\na\na\na\na\na\na\na\n\nWrite a method in class Matrix to check if the matrix is tridiagonal. All elements in the main\ndiagonal and those immediately above and below it must be nonzero. All other elements must\nbe zero. Use a tolerance of 10-15 to check if an element is zero or not. Assume the matrix is\nsquare; you do not have to check.\n\npublic boolean isTridiagonal() {\n\n}\n\n1.00/1.001 - Fall 2011 - Final Exam\n8 / 15\n3.b Graph. A graph refers to a collection of nodes and a collection of edges that connect pairs of\nnodes. Graphs are used to model many engineering problems, including communication and\ntransportation networks. Simple graphs can be described by a special type of matrix called an\nadjacency matrix.\n\nAn example graph is shown below. It contains 3 nodes, represented by circles with their index\nnumbers in them. The network also has 3 edges between nodes; the edges allow flow in both\ndirections. The matrix on the right is the node-to-node adjacency matrix for the graph. Every\nentry aij refers to the edge between node i and j, where aij = aji = 1 if the edge exists and 0 if it\ndoes not.\nThe node-to-node adjacency matrix of a simple graph is square and symmetric. Each edge is\nrepresented twice, once from i to j and once from j to i. Node 0 has a \"self loop\" in this example.\n\nThe Graph class is shown below; it is identical to class Matrix except that it holds ints, not\ndoubles.\n\npublic class Graph {\n\nprivate int[][] data;\n\npublic Graph(int n) {\n\ndata = new int[n][n];\n\n}\n\npublic int getNumRows() {\n\nreturn data.length;\n\n}\n\npublic int getNumCols() {\n\nreturn data[0].length;\n\n}\npublic int getElement(int i, int j) {\n\nreturn data[i][j];\n\n}\n\n// And many other methods, with ints rather than doubles\n} // End of Graph class\nG\nr\na\nph\ns\nc\nh\ne\nm\na\nt\ni\nc\n.\nImage by MIT OpenCourseWare.\n\n1.00/1.001 - Fall 2011 - Final Exam\n9 / 15\nWrite a method getNumEdges(int j) for the Graph class that returns the total number of\nedges connected to node j. For example, getNumEdges(1) returns 2 for the graph above.\nYour method should print an error message and return -1 if argument j is invalid (out of\nrange).\n\npublic int getNumEdges(int j) {\n\n}\n\n1.00/1.001 - Fall 2011 - Final Exam\n10 / 15\nQuestion 4 - Streams (30 points)\n\nYou are given a text file (registration.txt) that contains lines of pairs of student IDs and course\nnames.\n\n2381, 1.001\n1812, 8.01T\n1812, 1.00\n2381, 18.06\n9091, 1.204\n1230, 1.264\n9279, 8.01T\n...\n\nEach line represents a separate instance of a student registration for a particular course. The\ncourse is a String; the student ID is an int. The delimiter is a comma. You do not know the\nlength of the file before you read all of it.\n\nYou are to write a program that:\n1. reads the file,\n2. counts the number of students registered in each course, and\n3. prints a list of all courses with their enrollment to the console.\nIn addition:\n1. Your program must handle any potential exceptions.\n2. Your program must use an appropriate data structure to keep track of the course\nregistrations, such as an array list, hash map or tree map.\n3. You may write all or most of your program in a main() method in your class, if you wish.\nYou may use a second class, if necessary. Give your class(es) descriptive name(s).\n4. You do not need to keep track of the courses that each student takes. You only need to\ncompute and output the number of students (enrollment) in each course.\n\n1.00/1.001 - Fall 2011 - Final Exam\n11 / 15\n\n1.00/1.001 - Fall 2011 - Final Exam\n12 / 15\n\n1.00/1.001 - Fall 2011 - Final Exam\n13 / 15\nQuestion 5 - Phidgets and Traffic Control (20 points)\n\nAs part of a research project, you will use Phidgets to implement various traffic signal control\npolicies at 77 Massachusetts Ave.\n\nCurrently, there are two signal phases:\n1. Phase A: Green signal for traffic flowing on Massachusetts Ave. and red light for\npedestrian crossing\n2. Phase B: Red signal for traffic flowing on Massachusetts Ave. and green light for\npedestrian crossing.\n\nFor simplicity we make the following assumptions.\n\n1. You do not need to consider the yellow light phase.\n2. Signal phases A and B alternate, with a total cycle time of 90 seconds and cycle split of\n2/3 for phase A and 1/3 for phase B. That is, phase A is on for 60 seconds, then phase B\nis on for 30 seconds, and so on...\n3. A push button for the pedestrian crossing will be added. When the button is pushed\nduring phase A and the remaining green time for traffic flowing on Massachusetts Ave. is\nmore than 30 seconds, pushing the button reduces that green time remaining to 30\nseconds for the current A phase.\n4. If the pedestrian button is pushed when there is less than 30 seconds of green time\nremaining in phase A, or in phase B, it has no effect.\n5. Phase A begins at time = 0 in your program.\n6. Assume the touch sensor generates an event reliably.\n\nA touch sensor is connected to port 0 on the input side of the Phidgets interface board. Four\nLEDs are connected to the output ports:\n\nLED Type\nOutput Port\nRepresenting\nRED\nRed signal for pedestrians, phase A (don't walk)\nGREEN\nGreen signal for traffic flow, phase A\nRED\nRed signal for traffic flow, phase B\nGREEN\nGreen signal for pedestrians, phase B (walk)\n\nYour task is to implement the signal system using Phidgets and Java. Read the code given below\nand complete the two methods (questions 5a and 5b) so that your program works in accordance\nto the specification above.\n\nThe Timer tick triggers an ActionEvent every second (1000 milliseconds). Handle\nexceptions where needed and print to console (System.out.println()) if exceptions occur\nduring runtime.\n\n1.00/1.001 - Fall 2011 - Final Exam\n14 / 15\npublic class TrafficControl {\n/* Static members */\nprivate static InterfaceKitPhidget interfaceKit;\nprivate static javax.swing.Timer tick;\nprivate static int counter; // Counts up from 0 seconds\n\npublic static void main (String[] args) throws Exception {\nopenIntfcKit();\ntick = new javax.swing.Timer(1000, new ActionListener(){\npublic void actionPerformed ( ActionEvent e ) {\n\n// Question 5a: Complete the anonymous inner class\n\n}});\ntick.start();\n// Code omitted to close the interface kit.\n} // End of main method\n// TrafficControl class continues on next page\n\n1.00/1.001 - Fall 2011 - Final Exam\n15 / 15\nprivate static void openIntfcKit() {\ntry {\ninterfaceKit = new InterfaceKitPhidget();\n\n// Question 5b: Write the event handler for touch sensor\n\ninterfaceKit.openAny();\ninterfaceKit.waitForAttachment();\ninterfaceKit.setRatiometric(true);\nwhile (!interfaceKit.getRatiometric());\n} catch (PhidgetException pe) {\nSystem.err.println(pe);\n}\n} // End of openIntfcKit() method\n} // End of Traffic Control class\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/1f4b860a7fffa2da6ac119e6cde09ed1_MIT1_00S12_Final_S10.pdf",
      "content": "1.00/1.001 - Spring 2010 - Final Exam\n1 / 22\n1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nSpring 2010 - Final Exam\n\nName:\n\nMIT Email:\n\nTA:\n\nSection:\n\nYou have 180 minutes to complete this exam. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary packages have already\nbeen imported. Good luck!\n\nQuestion 1\n\n/ 20\n\nQuestion 2\n\n/ 15\n\nQuestion 3\n\n/ 15\n\nQuestion 4\n\n/ 20\nQuestion 5\n/ 20\nQuestion 6\n/ 10\n\nTotal\n\n/ 100\n\n1.00/1.001 - Spring 2010 - Final Exam\n2 / 22\nQuestion 1 - Inheritance and Interfaces\n\nCongratulations! Hasbro wants to hire you to build a version of Monopoly(r) that people\ncan play on their computers. Using your extensive 1.00 knowledge, you set out to\ncomplete this task.\n\nAssume you initially start with a Player class that simply holds a player's name. The\nclass isn't important for this question, but we provide the code just to be complete.\n\npublic class Player {\n\nprivate String name;\n\npublic Player(String name){ this.name = name; }\n\npublic String getName() { return name; }\n}\n\nYou know, from the game, that the game board has two types of squares. There are\nproperty squares (squares that represent a certain street or railroad) and there are\naction squares (such as \"Go directly to jail\" or \"Pick a Chance card\"). You decide to\nuse inheritance to help model these board elements.\n\nThe first thing you do is create an abstract class called Property. You make it\nabstract because you realize there are many types of \"property\" in the game (players\ncan own locations on the board, houses, and hotels). The Property class contains:\n\n- A private String called name, that holds the name of this Property.\n- A private int called cost, that holds the cost to buy this Property.\n- A private Player object called owner. Initially the owner data member is\nset equal to null.\n- Public get() methods for the three private data members, along with a\nsetOwner() method.\n- An abstract method called costToOpponent(), which returns a value\nthat is used to calculate how much an opponent would owe the owner if\nhe/she landed on this piece of Property.\n\n1.00/1.001 - Spring 2010 - Final Exam\n3 / 22\npublic abstract class Property {\n\nprivate String name;\n\nprivate int cost;\n\nprivate Player owner;\n\npublic Property(String name, int cost){\n\nthis.name = name;\n\nthis.cost = cost;\n\nthis.owner = null;\n\n}\n\npublic String getName() { return name; }\n\npublic int getCost() { return cost; }\n\npublic Player getOwner(){ return owner; }\n\npublic void setOwner(Player buyer){ this.owner = buyer; }\n\npublic abstract int costToOpponent();\n}\n\n1.a\nThe next thing you need to do is create an interface for board squares. The\ninterface is called BoardSquare. Every square on the board must have a\nposition on the board (represented as an int). For example, Park Place is\nlocated at position 37 on a game board. Write a BoardSquare interface that\nguarantees that an object that implements BoardSquare will have a method\nthat returns its location.\n\n1.00/1.001 - Spring 2010 - Final Exam\n4 / 22\n1.b\nYou now put these parts together to create a concrete class called\nPropertySquare. This class is used to represent all the locations on the board\nthat can be bought by Players. Write the PropertySquare class so that:\n\n-\nIt inherits from the abstract Property class.\n-\nIt implements the BoardSquare interface.\nThe value a Player must pay, if he/she lands on the square, is equal to half the cost\nof buying the Property. (e.g., If it costs 350 dollars to buy \"Park Place\" then a player\nmust pay 175 dollars to the person who owns \"Park Place\").\n\npublic class PropertySquare\n\n{\n\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n5 / 22\nAssume that you have created another concrete class called ActionSquare that also\ninherits from the BoardSquare interface. All squares on the board are either of type\nActionSquare or PropertySquare.\n\n1.c You should also assume there is a class called Board that has methods that help\nrun the game. In the Board class, you want to write a public method called\nisUnownedSquare(BoardSquare square). The method should:\n\n-\nTake in a BoardSquare object.\n-\nReturn a boolean value of true if the square is a PropertySquare\nand does not have an owner. Otherwise, return false.\n\npublic boolean isUnownedSquare(BoardSquare square)\n{\n\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n6 / 22\nQuestion 2: Exceptions\n\nYou are writing a program that analyzes some geometrical data. The data is\nstored as pairs of points and values in the following class.\n\npublic class PointValue{\n\nprivate double x;\n\nprivate double y;\n\nprivate double value;\n\npublic PointValue(double x, double y, double v) {\n\nthis.x = x;\n\nthis.y = y;\n\nvalue = v;\n\n}\n\npublic double getX() {return x;}\n\npublic double getY() {return y;}\n\npublic double getValue() {return value;}\n}\n\nThere is also a class Polygon, which stores a sequence of points. It has a\nmethod which determines whether a point is inside the polygon or not.\n\npublic class Polygon{\n\n// implementation hidden: constructor, data members, etc.\n\npublic boolean contains(PointValue p){\n\n// implementation hidden\n\n// returns true if p is inside the Polygon\n\n// returns false if it is not\n\n}\n}\n\nYou need to write a class that will store some PointValue objects, but only if\nthey are inside a specified Polygon. You decide to store the PointValues in\nan ArrayList. You will create a PolygonList class that will only store\nPointValues inside a specific Polygon, which is specified when the object\nis created. You should not extend the ArrayList class, but instead you\nshould have an ArrayList inside your class. If someone tries to add a PointValue\nto the list that is not inside the Polygon, the add method should throw a\nPointOutOfBoundsException, defined as follows:\n\n1.00/1.001 - Spring 2010 - Final Exam\n7 / 22\npublic class PointOutOfBoundsException extends Exception {\n\npublic PointOutOfBoundsException() {super();}\n\npublic PointOutOfBoundsException(String s) {super(s);}\n}\n\nWrite class PolygonList below:\n\npublic class PolygonList {\n\n// 2.a Put data members here\n\n// 2.b Write the constructor here\n\n// 2.c The add method checks if the PointValue is actually\n// inside the polygon. If the point is inside the polygon,\n// add it to the list. Otherwise, throw a\n// PointOutOfBoundsException. Write the add method here\n\n1.00/1.001 - Spring 2010 - Final Exam\n8 / 22\n// 2.d Write a get(int n) method that returns the specified\n// point from the ArrayList. The get method in ArrayList\n// throws an IndexOutOfBoundsException exception in some\n// cases. Use a try/catch block to catch that exception and\n// return null\n\n}\n//end of PolygonList class\n\n1.00/1.001 - Spring 2010 - Final Exam\n9 / 22\nQuestion 3 - Sorting and Hashing\n\n3.a\nMany operations can be performed faster on sorted than on unsorted data. For\nwhich of the following operations is this the case? We do not count the sorting\noperation cost. Circle the ones which can perform faster on sorted data.\n\na.\nFinding the minimum value in the data\nb.\nComputing an average of values\nc.\nFinding the middle value (the median)\nd.\nFinding the range of the data (maximum - minimum)\n\n3.b\nTrue or False? (Circle one)\n\nThe running time of insertion sort O(n2) is always longer than the running time of\nquicksort O(n lg n) on the same set of elements.\n\nTRUE\n\nFALSE\n\nIf two objects have the same return value from their hashCode() methods, they are\nequal objects.\n\nTRUE\n\nFALSE\n\nQuick sort uses pivot elements and partitioning.\n\nTRUE\n\nFALSE\n\nWhen sorting on an already sorted data, quick sort runs more quickly than insertion sort\ndoes.\n\nTRUE\n\nFALSE\n\nTo sort a large set of randomly ordered data, quick sort on average runs faster than\ninsertion sort.\n\nTRUE\n\nFALSE\n\n1.00/1.001 - Spring 2010 - Final Exam\n10 / 22\n3.c\nWe are going to place the following values into a bad hash table, where chaining\nis not used. Instead, our hashing is implemented by two hash functions. The\nmain hash function is (value / 100) .The secondary hash function is used when\ntwo values are hashed into the same slot using the main hash function (i.e., a\ncollision occurs). The second hash function is (value % 100) / 10. The following\nelements (all integers) are to be inserted into a hashtable of size 10.\n\n47, 90, 426, 140, 135\n\n3.c.1 Draw the table after the above elements are inserted.\n\n3.c.2 The HashTable class below has a find method to check if a particular integer\nvalue has been stored in the table. Implement the find(int i)method so that\nit returns true if the integer value i is in the table, and false otherwise. Your\nmethod should not loop through the entire array holding the integers.\n\npublic class HashTable {\n\nprivate Integer[] table;\n\npublic HashTable(int capacity){\ntable= new Integer[capacity];\n}\n\npublic boolean find (int i){\n\n}\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n11 / 22\nQuestion 4 - Matrices and Recursion\n\nIn this question, you will implement a recursive method to compute the determinant of\nany square matrix, of any size.\n\n4.a\nYou first need to write a helper method, which will be used later by the method\nthat computes the determinant.\n\nThe kth submatrix Mk of a square matrix M is obtained by deleting the first row and the\nkth column from M, as shown in the example below:\n\ncolumn k\n\nrow 0\n\n-2\n\n-2\n\n-1\n-6\n\n-6\n\nMatrix M\n\nSubmatrix Mk\n\nThe dimension of a square matrix is its number of rows or its number of columns, which\nare equal. From a square matrix of dimension n, you can therefore extract n\nsubmatrices, each of dimension (n-1).\n\nYou are given a SquareMatrix class. It is similar to the Matrix class from lecture,\nbut can only be used to represent square matrices. For example, the SquareMatrix\nclass has a single getDimension() method, while the Matrix class had the pair of\nmethods getRows() and getCols().\n\nComplete the getSubMatrix(int k) method of the SquareMatrix class, which\nshould return the kth submatrix of the square matrix on which it is invoked. This first\nmethod does not have to be recursive, and you can assume that 0 â¤ k â¤ n.\n\n1.00/1.001 - Spring 2010 - Final Exam\n12 / 22\npublic class SquareMatrix {\n\nprivate double[][] data;\n\npublic SquareMatrix(int n){data = new double[n][n];}\n\npublic double getE(int i, int j){return data[i][j];}\n\npublic void setE(int i, int j, double value)\n{\ndata[i][j] = value;\n}\n\npublic int getDim(){return data.length;}\n\npublic SquareMatrix getSubMatrix(int k)\n\n{\n\n}\n// the getDeterminant()method (answer to next question)\n// goes here.\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n13 / 22\n4.b\nThe determinant |A| of a square matrix A of dimension n can be computed as:\n\nwhere:\n\n- a0k\nis the element of A located at row 0, column k.\n- |Ak|\nis the determinant of the submatrix Ak, which is extracted from A as\ndescribed above.\n\nFor example, the determinant of a 3-by-3 matrix is:\n\nWhile the matrix A is of dimension n, each submatrix Ak is of dimension (n-1).\nTherefore, the determinant of a large matrix can be computed a sum of determinants of\nsmaller matrices. When a matrix is small enough, its determinant can be computed\ndirectly. We know for example how to compute the determinant of a 2-by-2 matrix:\n\n= b00 b11 - b01 b10\n\nAnd the determinant of a 1-by-1 matrix is its only element:\n\n|c00| = c00\n\nComplete the getDeterminant() method of the SquareMatrix class, which should\nreturn the value of the determinant of the square matrix on which it is invoked. This\nmethod must be recursive. Remember that a recursive method should directly return\nthe result if the input is small enough to do so, but should call itself in order to solve for\na larger input.\nb00\nb01\nb10\nb11\na00\na01\na02\na10\na11\na12\na20\na21\na22\n\n= (-1)0 a00\na11\na12\n+ (-1)1 a01\na10\na12\n+ (-1)2 a02\na01 a11\na21\na22\na20\na22\na20 a21\n\n1.00/1.001 - Spring 2010 - Final Exam\n14 / 22\n// This method is in the SquareMatrix class\n\npublic double getDeterminant()\n// Must be recursive\n{\n\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n15 / 22\nQuestion 5 - Streams and Swing\n\nIt's time to get excited! This question combines two of your favorite subjects: streams\nand Swing. You will first be asked to write code that allows you to read and write files.\nYou will then be asked a question about the GUI that uses this code.\n\nImagine that you are building a small drawing program, where you use Line2D objects\nto draw shapes on a GUI (such as the house in the screenshot below).\n\nYou quickly realize that it is important to be able to save your drawing, and load\ndrawings into your program. You decide to store drawings as text files.\n\nLine2D objects will be stored as a single line separated by commas:\nExample: \"200,200,200,400\" defines a Line that starts at (200,200) and ends at\n(200,400).\n\nSo, the drawing of the house in the previous screenshot can be stored in a .txt file as:\n\n200,200,200,400\n400,200,400,400\n200,400,400,400\n175,200,425,200\n175,200,300,50\n425,200,300,50\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\n1.00/1.001 - Spring 2010 - Final Exam\n16 / 22\nYou now need to create a specialized JPanel that can both load and save these files.\nWe've provided a class called StreamPanel that extends JPanel. You will be asked\nto fill in the loadDrawingFromFile() and saveDrawingToFile() methods.\n\npublic class StreamPanel extends JPanel{\n\n// Name of file where drawings are saved to and loaded from\n\nprivate final String fileName = \"examp_points.txt\";\n\n// List of all the Lines to be drawn on the StreamPanel\n\nArrayList<Line2D> lines = new ArrayList<Line2D>();\n\npublic StreamPanel(){\n\nthis.setPreferredSize(new Dimension(600, 600));\n\n}\n\npublic void paintComponent(Graphics g){\n\nsuper.paintComponents(g);\n\nGraphics2D g2 = (Graphics2D) g;\n\n//draw all the lines\n\nfor (Line2D l: lines) g2.draw(l);\n\n}\n\n// Loads in a drawing\n\npublic void loadDrawingFromFile(){// FILL IN FOR PART 5A }\n\n// Saves the current drawing\n\npublic void saveDrawingToFile(){// FILL IN FOR PART 5B }\n\n// Returns a Line2D object represented by String values\n\nprivate Line2D makeLine(String x1, String y1, String x2,\nString y2){\n\nDouble x1Val = Double.parseDouble(x1);\n\nDouble y1Val = Double.parseDouble(y1);\n\nDouble x2Val = Double.parseDouble(x2);\n\nDouble y2Val = Double.parseDouble(y2);\n\nreturn new Line2D.Double(x1Val, y1Val, x2Val, y2Val);\n\n}\n\n// Takes in a Line2D object and returns a String\n// representation of it\n\nprivate String lineToString(Line2D l){\n\nString lString = l.getX1()+\",\"+l.getY1()+\",\"+\nl.getX2()+\",\"+l.getY2()+\"\\n\";\n\nreturn lString;\n\n}}\n\n1.00/1.001 - Spring 2010 - Final Exam\n17 / 22\n5.a\nIn the space below, fill in the loadDrawingFromFile() method for the\nStreamPanel class.\n\n- Be sure to use a BufferedReader to read in the Line2D objects from the file\nrepresented by the fileName data member.\n- Store each Line2D object in the lines data member (Hint: you may find the\nmakeLine() method useful for creating Line2D objects).\n- Catch and print to the console the possible IOException thrown by opening a\nstream.\n- Remember this is a comma delimited file. Also, assume the file is formatted\nproperly and that all values in the file are valid doubles.\n\npublic void loadDrawingFromFile(){\n\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n18 / 22\n5.b\nIn the space provided below, fill in the saveDrawingToFile() method for the\nStreamPanel class. The method should save all the Line2D objects in the\nlines list to the file represented by the fileName data member. Also,\nremember to catch the possible IOException thrown by opening a stream.\n\nHint: you may find the lineToString() method useful for creating a String\nrepresentation of each line.\n\npublic void saveDrawingToFile(){\n\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n19 / 22\n5.c\nImagine that you have a GUI called DrawingFrame that consists of a JFrame\nwith only a StreamPanel added to it. You've also been given a file whose\ncontents look like this:\n\n50,100,50,200\n50,100,400,100\n50,200,400,200\n400,100,400,50\n400,200,400,250\n400,50,550,150\n400,250,550,150\n\nSketch what the resulting DrawingFrame GUI would look like if you ran the GUI and\nloaded this file into the StreamPanel. The GUI size is 600x600.\n\n1.00/1.001 - Spring 2010 - Final Exam\n20 / 22\nQuestion 6 - Data Structures\n\nWe have used stacks in class, but one thing you might not have known is that stacks\ncan actually be implemented by using linked lists. In this question, you will build a stack\nclass using linked lists.\n\nWe provide a simple implementation of a linked list and an interface for stack here. You\nwill use these in the implementation of your stack.\n\npublic class LinkedList {\n\n//Adds an Object o to the end of the Linked List\n\npublic void add(Object o)\n\n{\n/* Implementation hidden */\n}\n\n//Adds an Object o at index position to the Linked List\n\npublic void add(Object o, int index)\n\n{\n/* Implementation hidden */\n}\n\n//Returns the Object stored at the index position\n\npublic Object get(int index)\n\n{\n/* Implementation hidden */\n}\n\n//Removes the Object stored at the index position\n\npublic void remove(int index)\n\n{\n/* Implementation hidden */\n}\n\n//Returns the number of Objects in the Linked List\n\npublic int size()\n\n{\n/* Implementation hidden */\n}\n\n//Removes all the Objects from the Linked List\n\npublic void clear()\n\n{\n/* Implementation hidden */\n}\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n21 / 22\npublic interface Stack\n{\npublic boolean isEmpty();\npublic void push( Object o );\npublic Object pop();\npublic void clear();\n}\n\n6.a\nComplete the implementation of LLStack given below. You may ignore the case\nof the pop() method being called on an empty stack.\n\npublic class LLStack implements Stack {\n\nprivate LinkedList ll;\n\n// Finish the rest of the implementation here\n\n}\n\n1.00/1.001 - Spring 2010 - Final Exam\n22 / 22\n6.b\nIndicate which data structure is the most appropriate representation for each of\nthese.\n\nHash Table\nStack\nQueue\nTree\nArrayList\nBriefly explain your choice\nWaiting list for a\nclass at Sloan\n\nThe people at the front of the waiting\nlist get taken off before the people\nafterwards\nCounting the\nnumber of\noccurrences of each\nword in an article\n\nThis is an association between a word\nand the number of occurrences\nThe order that you\nget dressed and\nundressed when it's\n-40 (F or C)\n\nThe first article of clothing you put on is\nthe last article of clothing you take off\nThe species in the\nPlant Kingdom\n\nThe species can be modeled as a\nhierarchy\nThe shortest path\nfrom MIT to many\npoints in Boston\n\nYour path can branch in many ways\ndepending on where you are going\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final_Review",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/3e60f7aef4d971bb3acaed8996c1d3b3_MIT1_00S12_Final_Review.pdf",
      "content": "5/16/2012\n1.00/1.001\nSpring 2012\nFinal Review\nCourse Topics Overview\nFinal\nz 2\nQuiz 1\n1. Control and scope\n2. Classes and objects\n3. Arrays, ArrayLists\n4. Recursion\n5 Inheritance\n7. Streams\n8. Exceptions\n9. Sensors\n10. Threads\n11 Numerical methods\nQuiz\n5. Inheritance\n6. Graphical user interfaces\n11. Numerical methods\n12. Data structures\n\n5/16/2012\n7. Streams\n1. Different kinds of streams\n2. Combining streams\n- FileReader BufferedReader\nFileReader, BufferedReader\n- FileWriter, PrintWriter\n3. Reading, writing text\n4. Parsing\ndata.csv\nbr\nresult.txt\nfw\npw\n3,5,2\n1,3\nfr\n2,7\nJava\nWhat does this\ncode do?\ntry{\nFileReader fr = new FileReader(\"data.csv\");\nBufferedReader br = new BufferedReader(fr);\nFileWriter fw = new FileWriter(\"result.txt\");\nPrintWriter pw = new PrintWriter(fw);\nString line;\nwhile((line = br.readLine())!=null){\nint value = 0;\nString[] svalues = line.split(\",\");\nfor(String svalue: svalues)\nvalue += Integer.parseInt(svalue);\npw.println(value);\n}\nbr.close();\npw.close();\n}\ncatch(IOException e){\nSystem.out.println(\"IO error occurred.\");\n}\n8. Exceptions\n1. Syntax\n- try\n- throw\nthrow\n- catch\n2. Inheritance\n3. Used with streams\npublic static void main(String[] args) {\ntry{\nsomeMethod( 2);\n}\ncatch(FavoriteException e){\nSystem.out.println(\"Ack!\");\n}\n}\npublic void someMethod(int a)\nthrows FavoriteException\n{\nif (a<0)\nWhat does this\nif (a<0)\nthrow new FavoriteException();\nSystem.out.println(a);\n}\nclass FavoriteException extends Exception {\npublic FavoriteException(){ }\n}\nWhat does this\ncode do?\n\n5/16/2012\n8. Exceptions\n1. Syntax\n- try\n- throw\nthrow\n- catch\n2. Inheritance\n3. Used with streams\npublic static void main(String[] args) {\ntry{\nsomeMethod( 2);\n}\n-\ncatch(FavoriteException e){\nSystem.out.println(\"Ack!\");\n}\n}\npublic void someMethod(int a)\nthrows FavoriteException\n{\nif (a<0)\nWhat does this\nif (a<0)\nthrow new FavoriteException();\nSystem.out.println(a);\n}\nclass FavoriteException extends Exception {\npublic FavoriteException(){ }\n}\nWhat does this\ncode do?\n8. Exceptions\n1. Syntax\n- try\n- throw\nthrow\n- catch\n2. Inheritance\n3. Used with streams\npublic static void main(String[] args) {\ntry{\nsomeMethod( 2);\n}\ncatch(Exception e){\nSystem.out.println(\"Oops!\");\n-\n}\ncatch(FavoriteException e){\nSystem.out.println(\"Ack!\");\n}\n}\npublic void someMethod(int a)\nthrows FavoriteException\n{\nif (a<0)\nWhat does this\nif (a<0)\nthrow new FavoriteException();\nSystem.out.println(a);\n}\nclass FavoriteException extends Exception {\npublic FavoriteException(){ }\n}\nWhat does this\ncode do?\n\n5/16/2012\n9. Sensors\n1. Sensor change listener\ninterfaceKit.addSensorChangeListener(new SensorChangeListener() {\npublic void sensorChanged(SensorChangeEvent se) {\nif (se.getIndex() == lightIndex)\nif (se.getValue() < 20) {\nSystem.out.println(\"Light low\");\n}\n}\n});\n2. C\nith\nti\nli t\nCompare with action listener\nbutton.addActionListener(new ActionListener(){\npublic void actionPerformed(ActionEvent ae){\nSystem.exit(0);\n}\n});\n10. Threads\n1. Process vs. thread\n2. Thread class\n3 Runnable interface\n3. Runnable interface\n4. Synchronization\npublic class Parallel extends Thread {\nprivate static int j = 1;\npublic static void main(String[] args) {\ndoThis(\"Main\");\ndoThis(\"Parallel\");\n}\npublic static void doThis(String a){\nf\n(i t i 1\ni< 200\ni++) {\nfor (int i=1; i<=200; i++) {\nSystem.out.println((j++) + \" \" + a);\n}\n}\n}\n\n5/16/2012\n10. Threads\n1. Process vs. thread\n2. Thread class\n3 Runnable interface\npublic class Parallel extends Thread {\nprivate static int j = 1;\npublic static void main(String[] args) {\nThread p = new Parallel();\n3. Runnable interface\n4. Synchronization\nThread p\nnew Parallel();\np.start();\ndoThis(\"Main\");\n}\npublic void run() {\ndoThis(\"Parallel\");\n}\npublic static void doThis(String a){\nf\n(i t i 1\ni< 200\ni++) {\nMake separate\nthread\nfor (int i=1; i<=200; i++) {\nSystem.out.println((j++) + \" \" + a);\n}\n}\n}\n10. Threads\n1. Process vs. thread\n2. Thread class\n3 Runnable interface\n3. Runnable interface\n4. Synchronization\nMake separate\nthread\nPause 20ms in\nloop\npublic class Parallel extends Thread {\nprivate static int j = 1;\npublic static void main(String[] args) {\nThread p = new Parallel();\nThread p\nnew Parallel();\np.start();\ndoThis(\"Main\");\n}\npublic void run() {\ndoThis(\"Parallel\");\n}\npublic static void doThis(String a){\nf\n(i t i 1\ni< 200\ni++) {\nfor (int i=1; i<=200; i++) {\nSystem.out.println((j++) + \" \" + a);\ntry {\nThread.sleep(20);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n}\n}\n\nic void doThis(String a){\n\n5/16/2012\n10. Threads\n1. Process vs. thread\n2. Thread class\n3 Runnable interface\n3. Runnable interface\n4. Synchronization\nMake separate\nthread\nPause 20ms in\nloop\nPrevent parallel\naccess to j\npublic class Parallel extends Thread {\nprivate static int j = 1;\npublic static void main(String[] args) {\nThread p = new Parallel();\nThread p\nnew Parallel();\np.start();\ndoThis(\"Main\");\n}\npublic void run() {\ndoThis(\"Parallel\");\n}\npublic stat\nf\n(i t i 1\ni< 200\ni++) {\nfor (int i=1; i<=200; i++) {\nSystem.out.println((j++) + \" \" + a);\ntry {\nThread.sleep(20);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n}\n}\n11. Numerical methods\n1. Matrices\n- Based on 2D array\n- Matrix manipulation\nMatrix manipulation\n2. Integration methods\n3. Root finding methods\nWhat does this\ncode do?\npublic class Matrix{\nprivate double[][] data;\n// other methods\npublic Matrix doSomething(){\nint rows = data.length;\nint cols = data[0].length;\nMatrix mat = new Matrix(rows,cols);\nfor (int i=0; i<rows; i++)\nfor (int j=0; j<cols; j++)\nmat.setElement(i,j, -data[i][j]);\nreturn mat;\n}\n}\n\n12. Data structures\n5/16/2012\nStack\nQueue\n1. Sorting\n- Comparable\ntop\nfront\nadd(8)\n- Comparator\nremove()\nComparator\nremove()\n2. Stacks and queues\nadd(0)\n3. LinkedList\nrear\n- List traversal\n4. TreeMap, HashMap\nStack\nQueue\n1. Sorting\n- Comparable\nadd(8)\nremove()\n- Comparator\nComparator\nremove()\nadd(0)\n2. Stacks and queues\n3. LinkedList\n- List traversal\n4. TreeMap, HashMap\n12. Data structures\n\n5/16/2012\n12. Data structures\n1. Sorting\n- Comparable\n- Comparator\nComparator\n2. Stacks and queues\n3. LinkedList\n- List traversal\n4. TreeMap, HashMap\ntemp\nwhile (temp != null) {\nS\nt\nt\ni tl (t\nl\n)\n= first;\nnext\nnext\nnext\nfirst\nnull\nSystem.out.println(temp.value);\ntemp = temp.next;\n}\nvalue\nvalue\nvalue\nPrevious Finals\nFall 2011\nSpring 2010\n1. True/false\n1. Classes, inheritance\n2. Data structures\n2. Exceptions\n3. Matrices\n3. Sorting, hashing\n4. Streams\n4. Matrices and recursion\n5.5. Sensors\n5. Streams and Swing\nSensors\n5. Streams and Swing\n6. Data structures\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Quiz 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/561aafb9f7305734646461c52ddf187f_MIT1_00S12_Quiz1_S10.pdf",
      "content": "1.00/1.001 - Spring 2010 - Quiz 1\n1 / 10\n1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nSpring 2010 - Quiz 1\n\nName:\n\nMIT Email:\n\nTA:\n\nSection:\n\nYou have 80 minutes to complete this exam. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary packages have already\nbeen imported. Good luck!\n\nQuestion 1\n\n/ 30\n\nQuestion 2\n\n/ 40\n\nQuestion 3\n\n/ 30\n\nTotal\n\n/ 100\n\n1.00/1.001 - Spring 2010 - Quiz 1\n2 / 10\nQuestion 1 - Control Structures, Operators, Access (30 points)\n\n1.a\nDoes the following code fragment compile?\n\nYES\nNO\n\nint y = 10;\n\ny = 4 * y * y + 25 / y;\n\nSystem.out.println(++y);\n\nIf it does compile, what is printed out to the console after running the three lines?\n\nIf it does not compile, circle the error in the code fragment.\n\n1.b\nYou are interested in writing a method that will print out all the factored versions\nof a square root. For example, the factored versions of\n36 are:\n\nYour method should take as an argument a number n and print out the factored\nversions of the square root of that number. Assume that n is a nonnegative integer. For\nexample, when n = 36, your method should print:\n\n2rt9\n3rt4\n\nComplete the method below:\n\npublic static void rootFactors(int n) {\n\n}\n\n1.00/1.001 - Spring 2010 - Quiz 1\n3 / 10\n1.c\nTwo classes are given below. The Student class is in the studentPKG\npackage, while the StudentTest class is in the default package. Check\nwhether the four numbered statements compile, and write down your answers on\nthe next page.\n\nStudent.java____________________________________________________________\n\npackage studentPKG;\n\npublic class Student{\n\npublic String name;\nprivate int studentID;\n\npublic Student(String name, int studentID){\nthis.name=name;\nsetID(studentID);\n// ......................... #1\n}\n\nprivate void setID(int sID){ studentID=sID;}\n\nint getID(){ return studentID;}\n}\n\nStudentTest.java________________________________________________________\n\nimport studentPKG.Student;\n\npublic class StudentTest {\n\npublic static void main(String[] args){\n\nStudent newStudent = new Student(\"\", 12); // #2\n\nint snumber = newStudent.getID(); // #3\n\nnewStudent.name = \"Jason Brine\"; // #4\n}\n}\n\n1.00/1.001 - Spring 2010 - Quiz 1\n4 / 10\nDoes statement #1 compile?\n\nYES\nNO\nIf no, why does it not compile?\n\nDoes statement #2 compile?\n\nYES\nNO\nIf no, why does it not compile?\n\nDoes statement #3 compile?\n\nYES\nNO\nIf no, why does it not compile?\n\nDoes statement #4 compile?\n\nYES\nNO\nIf no, why does it not compile?\n\n1.00/1.001 - Spring 2010 - Quiz 1\n5 / 10\nQuestion 2 - Classes and Objects (40 points)\n\nThe Harry Potter series may have ended but Harry Potter themed questions still exist.\nYou've decided to create a small wizard dueling game. All classes exist in the same\npackage. You've already been given code for a class called Spell. The Spell class\nconsists of three public data members:\n\n- NAME: the name of the spell\n- COST: the magical cost of casting this spell [range: 0-100]. This value is\nsubtracted from a wizard's magic level every time he/she casts this spell.\n- DAMAGE: the damage this spell does to an opponent's health [range: 0-100].\n\npublic class Spell\n{\n\npublic final String NAME;\n\npublic final int COST;\n\npublic final int DAMAGE;\n\npublic Spell(String name, int cost, int damage){\n\nNAME = name;\n\nCOST = cost;\n\nDAMAGE = damage;\n\n}\n}\n\n1.00/1.001 - Spring 2010 - Quiz 1\n6 / 10\n2.a\nYou now must create a Wizard class. The Wizard class has:\n-\nA private String data member called name, that holds the wizard's name.\n\n-\nA private integer data member called health, that holds the wizard's current\nhealth state (100=healthy | 0=dead).\n\n-\nA private integer data member called magic, that holds the wizard's current\nmagic state (100 = lots of magic | 0 = no magic).\n\n-\nA public constructor that only takes in a String for the wizard's name.\nWizards always start life with health=100 and magic=100.\n\n-\nA public method hitBySpell(Spell spell), that alters the wizard's\nhealth by subtracting the DAMAGE value held by the spell.\n\nComplete the Wizard class below:\n\npublic class Wizard {\n\n// Answer to question 2.b (next page) is inserted here.\n}\n\n1.00/1.001 - Spring 2010 - Quiz 1\n7 / 10\n2.b\nA wizard should also have the ability to cast a spell. The method is part of the\nWizard class and will take in a Spell along with a Wizard to cast that spell on.\nFill in the method castSpell(Spell spell, Wizard wizard) of the\nWizard class, so that:\n\n- The wizard casting the spell has the spell COST subtracted from his magic\ntotal.\n\n- The wizard who is getting the spell cast on him/her has his/her\nhitBySpell(Spell spell) method called.\n\n// The following method is in the Wizard class.\npublic void castSpell(Spell spell, Wizard wizard){\n\n}\n\n1.00/1.001 - Spring 2010 - Quiz 1\n8 / 10\n2.c\nWizards battle things out in an Arena. The Arena class just contains a\nmain(String[] args) method to simulate duels. Add code in the Arena\nclass to model this chain of events:\n-\nA Spell called wami is created, with:\n\n- name = \"WAMI\"\n\n- cost = 10\n\n- damage = 15\n\n-\nA Wizard called Ron is created, with:\n\n- name = \"Ron\"\n\n-\nA Wizard named Harry is created, with:\n\n- name = \"Harry\"\n\n-\nHarry casts the wami spell on Ron.\n\n-\nRon tries to retaliate, but accidently casts the wami spell on himself.\n\npublic class Arena\n{\n\npublic static void main(String[] args) {\n\n}\n}\n\n1.00/1.001 - Spring 2010 - Quiz 1\n9 / 10\nQuestion 3 - ArrayLists (30 points)\n\nEvery semester on add/drop day, you are going to help administrative officers to update\ncourse registration lists (adding and dropping students, changing registration status ...)\nwith a java program. The program has a Student class that is already written. Assume\nthat the registration status of a student in a course can only be \"P/D/F\" or \"credit\".\n\npublic class Student {\n\nprivate String name;\n\nprivate String regstatus;\n\nprivate static final String PDF=\"P/D/F\";\n\nprivate static final String CREDIT=\"credit\";\n\npublic Student(String name, String regstatus){\n\nthis.name=name;\n\nsetStatus(regstatus);\n}\n\npublic String getName(){ return name;}\n\npublic void setStatus(String regstatus){\n\nif (regstatus.equals(PDF)) this.regstatus=PDF;\nelse this.regstatus=CREDIT;\n}\n}\n\nA CourseList class is used to model the list of students registered for a particular\ncourse. You have to implement the addStudent and dropCourse methods of the\nCourseList class. CourseList has a data member (list) that keeps the list of the\nstudents registered for the course. The addStudent method has no return value and\ntakes in two arguments: a student name and his/her new registration status for this\ncourse. If the student is already in the list, the method will update the students' status;\notherwise it will add the student to the list. The Drop method deletes a list of students\nfrom the course list. The CourseList and Student classes are in the same package.\nComplete the addStudent and dropCourse methods of the CourseList class given\nnext page. Assume that no two students have the same name.\n\n1.00/1.001 - Spring 2010 - Quiz 1\n10 / 10\npublic class CourseList {\n\nArrayList<Student> list;\n\npublic CourseList(ArrayList<Student> courseList){\nthis.list=new ArrayList<Student>();\nfor (Student s: courseList){\nthis.list.add(s);\n}\n}\n\npublic void addStudent(String studentName, String regStatus){\n\n}\n\npublic void dropCourse(ArrayList<Student> s){\n\n}\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Quiz 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/3794cc0838232e0db3ccf2e183c73a6a_MIT1_00S12_Quiz1_S11.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nSpring 2011 - Quiz 1\nName:\nMIT Email:\nTA:\nSection:\nYou have 80 minutes to complete this exam. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary packages have already\nbeen imported. Do not write outside of the boxes provided for your answers throughout\nthis exam packet or modify provided examination code. Any modifications to provided\ncode will result in zero credit for that problem. Good luck!\nQuestion 1\n/ 35\nQuestion 2\n/ 30\nQuestion 3\n/ 35\nTotal\n/ 100\n1.00/1.001 - Spring 2011 - Quiz 1\n1 / 7\n\nQuestion 1 - Control Structures, Operators, Objects (35 points)\nYou have been hired by a company that makes spacecraft that will travel to Mars. They\nwant you to design a program to perform calculations to assist the spacecraft's pilots.\n1.a\nSome of the quantities of interest include the distance between Earth and Mars,\nwhich can vary from 56Ã106 kilometers to 401Ã106 kilometers, and the angles\nthat describe each planet's inclination: 0 to 7 degrees. The inclination quantities\nrequire 10 significant digits. Your program will need to handle both quantities with\na single data type. You will use two variables, one for each quantity.\nWhich of the following data types can handle both the distance and angular\nquantities and requires the lowest number of bits to store the variable? Circle the\ncorrect answer:\na. int\nb. double\nc. float\nd. short\n1.b\nTo conserve rocket fuel, the company directs its pilots to stay in Earth's orbit until\nMars is in the best possible position. The program must evaluate the distance\nbetween the Earth and Mars over a 100 day period and tell the pilot which day\nwill give the shortest distance between Earth and Mars.\nWhich type of control statement, alone, is best for computing each distance over\nall 100 days? Circle the correct answer:\na. if-else\nb. for\nc. continue\nd. return\n1.00/1.001 - Spring 2011 - Quiz 1\n2 / 7\n\n1.c\nComplete the class SpaceNav so that it finds the earliest day among the next\n100 days that has the shortest distance between Earth and Mars. Your program\nshould start at day 1. The static method getDist(int dayNumber)is written\nfor you. SpaceNav should print the earliest day that has the shortest distance\nbetween Earth and Mars. Distances within a tolerance of 1E-14 km are\nconsidered equal.\npublic class SpaceNav {\npublic static void main(String[] args) {\n}\npublic static double getDist(int dayNumber){\n//Method that determines the distance between Earth and\n//Mars for a given day.\n}\n}\n1.00/1.001 - Spring 2011 - Quiz 1\n3 / 7\n\nQuestion 2 - Access (30 points)\nTwo classes are given below. Class Student is in the package studentPKG, while class\nStudentTest is in the default package. Lines are labeled 1 through 28 in class Student\nand A through K in class StudentTest.\npackage studentPKG;\npublic class Student {\nint year;\nprivate String name;\nprivate int studentID;\npublic static int count = 0;\npublic Student(String name, int studentID){\nthis.name=name;\nthis.year = 0;\nsetID(studentID);\n++count;\n}\nvoid setID(int sID){ studentID=sID; }\nvoid setID(Student student){\nstudentID=student.studentID;\n}\nint getID(){ return studentID;}\n}\npublic static void setCount(int c){\ncount = c;\n}\nA\nimport studentPKG.Student;\nB\nC\npublic class StudentTest {\nD\npublic static void main(String[] args){\nE\nStudent newStudent=new Student(\"\", 12);\nF\nint snumber=newStudent.getID();\nG\nnewStudent.name=\"Jason Brine\";\nH\nint year = newStudent.year;\nI\nint count = Student.count;\nJ\nStudent.setCount(10000);\nK\n}}\n1.00/1.001 - Spring 2011 - Quiz 1\n4 / 7\n\nIndicate whether the following lines compile. You may assume the logic is correct in any\nline that compiles. If a line does not compile, explain how you would fix the problem by\nmodifying and/or adding code. Do not make changes to the code on page 4; write down\nyour changes in the table below. Indicate the number(s) and/or letter(s) of the line(s)\nyou modify. Use empty line number(s) and/letter(s) to indicate where you add code. If\nyou add code where there is no blank line, give the line number after which to insert the\ncode. You may not make any instance data member public.\nLine\nDoes the line\ncompile?\nIf the line does not compile, how would you fix the\nproblem?\nYES NO\nYES NO\nYES NO\nYES NO\nE\nYES NO\nF\nYES NO\nG\nYES NO\nH\nYES NO\nI\nYES NO\nJ\nYES\nNO\n1.00/1.001 - Spring 2011 - Quiz 1\n5 / 7\n\nQuestion 3 - Classes, Objects, Methods (35 points)\nYou are writing a Java application for an electronic book reader. A class to represent\nbook pages has already been written. The Page class has a String data member\nholding the text of the page and a show() method to display the page to the user of the\nelectronic book. The show() method prints the text of the page to the Java console.\npublic class Page {\n/* String with line breaks holding the entire page */\nprivate String text;\npublic Page(String t) {text = t;}\npublic void show() {System.out.println(text);}\n}\nYou decide to create a Chapter class to organize your pages into chapters. A\nChapter object holds an array of pages in natural order: the first page of the chapter is\nthe first element of the array. The Chapter class also has an integer to keep track of\nthe page that the user is currently reading in that chapter. Complete the Chapter class,\nas outlined below.\npublic class Chapter {\nprivate Page[] pages;\nprivate int currentPage;\npublic Chapter(Page[] p) {pages = p;}\n/* 3.a Complete the startReading() method, which should display the first page of\nthe chapter to the user and set the value of currentPage accordingly. Assume that a\nchapter has at least one page. */\npublic void startReading()\n{\n}\n1.00/1.001 - Spring 2011 - Quiz 1\n6 / 7\n\n/* 3.b Complete the nextPage() method, which should display the next page to the\nuser and return true if the end of the chapter has not been reached, and should\ndisplay nothing and return false otherwise.*/\npublic boolean nextPage()\n{\n}\n} //End of Chapter class.\nYou now need a class to represent an entire book. The EBook class has an array of\nChapter objects and an integer to keep track of the chapter that the user is currently\nreading. Complete the EBook class below.\npublic class EBook {\nprivate Chapter[] chapters;\nprivate int currentChap;\npublic EBook(Chapter[] c){chapters = c;}\n/* 3.c Complete the turnPage() method, which should display the next page of the\nbook to the user. When the end of a chapter is reached, the first page of the next\nchapter should be displayed. When the end of the last chapter is reached, the method\nshould print \"End of book\" to the console.*/\npublic void turnPage()\n{\n}}\n1.00/1.001 - Spring 2011 - Quiz 1\n7 / 7\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Quiz 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/b44dcc65b103568648b27ba58677968d_MIT1_00S12_Quiz_1_S12.pdf",
      "content": "1.00/1.001 - Spring 2012 - Quiz 1\n1 / 8\n1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nSpring 2012 - Quiz 1\n\nName:\n\nMIT Email:\n\nTA:\n\nSection:\n\nSolutions\n\nYou have 80 minutes to complete this exam. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary packages have already\nbeen imported. You may only add code inside the boxes. The code written\noutside the boxes may not be altered in any way. Good luck!\n\nQuestion 1\n\n/ 30\n\nQuestion 2\n\n/ 40\n\nQuestion 3\n\n/ 30\n\nTotal\n\n/ 100\n\n1.00/1.001 - Spring 2012 - Quiz 1\n2 / 8\nQuestion 1 - Control Structures, Operators (30 points)\n\n1.a\nWill these statements compile? Write \"Yes\" or \"No\" in the \"Compiles?\" column. If\nthe statements compile, write the exact output in the \"Program Output or\nExplanation\" column. If the statements do not compile, briefly explain the error.\n\nProgram code\n\nCompiles?\n[Yes/No]\n\nProgram Output\nor Explanation\n\npublic static void test(int a, double b){\n\nSystem.out.println(\"In: \" + a + \", \"+ b);\n}\npublic static void main(String[] args) {\n\ntest(6.55, 4.29);\n}\n\npublic static void main(String[] args) {\n\nint a = 100000000000;\n\nSystem.out.println(a);\n}\n\npublic static void main(String[] args) {\n\nint x = 8;\n\nx--;\n\nSystem.out.println(\"First: \" + x);\n\nx /= 2;\n\nSystem.out.println(\"Second: \" + x);\n}\n\npublic static void main(String[] args) {\n\nSystem.out.println(1 >= 2 && 3 < 7);\n}\n\n1.00/1.001 - Spring 2012 - Quiz 1\n3 / 8\n\n1.b\nPrograms are often used to find numerical solutions to differential equations. You\nwill model a simple differential equation, dx/dt=v, where x is position, t is time,\nand v is velocity. You can discretize the equation as: ( ) ,\n( ) , and so on.\n\nWrite the getPosition() method to find the approximate position (x) of a train\nat any given time t (in minutes). The train departs from the first station (x = 0) at\ntime t = 0. You have a database of the train's velocity (in kilometers/minute),\nrecorded every minute, and method getVelocity() to access this data is\nprovided. Assume that the train's velocity over each interval is constant. Your\nmethod must return the train's position in kilometers. Assume getVelocity()\nreturns zero for any negative input. The method getPosition()must return\nzero for any negative input.\n\npublic class Train{\n\npublic static double getPosition(int t){\n\n}\n\npublic static double getVelocity(int t){\n// Method body not shown\n\n// Method that finds the velocity at time t.\n\n// Returns answer in kilometers per minute.\n\n// Returns 0 if t < 0.\n\n// input: minutes\n\n// output: kilometers/minute\n\n}\n\n1.00/1.001 - Spring 2012 - Quiz 1\n4 / 8\n1.c\nYou are also interested in finding the average velocity (distance traveled / time)\nof the train until any given time point. Complete the method\ngetAverageVelocity(). Your method should return an answer in kilometers\nper hour (not kilometers/minute) and should return 0 for any non-positive t.\n\npublic static double getAverageVelocity(int t){\n\n}\n\n1.d\nWrite a main() method to display the position (in kilometers) and average\nvelocity (in kilometers per hour) of the train after 15 minutes. You may assume\nthe previous methods are implemented properly for this section.\n\npublic static void main(String[] args) {\n\n}\n}\n\n1.00/1.001 - Spring 2012 - Quiz 1\n5 / 8\nQuestion 2 - Classes and Objects (40 points)\n\nYou are asked to model a polling center for the presidential election within the state of\nMichigan. You are given the code for the class PoliticalParty.\n\npublic class PoliticalParty {\n\nString partyName;\n\npublic PoliticalParty(String nme){\n\npartyName = nme;\n\n}\n}\n\n2.a\nWrite a class to represent a presidential candidate called Candidate. Your class\nshould contain the following:\n-\nA String data member called name that can be accessed by any class in\nthe same package.\n-\nA PoliticalParty data member called party that can only be\naccessed by the Candidate class.\n-\nAn int data member called numberOfVotes that can only be accessed\nby the Candidate class\n-\nA constructor that initializes the name and the party of the Candidate\nwhen given a String and a PoliticalParty as input. Each\nCandidate should begin with zero numberOfVotes.\n-\nA public method called receivedAVote() that increases the\nnumberOfVotes by one.\n\npublic class Candidate {\n\n}\n\n1.00/1.001 - Spring 2012 - Quiz 1\n6 / 8\n\n2.b\nWrite a class called PollCenter. Your class should contain the following:\n-\nTwo Candidate data members, one called myCandidate and one\ncalled yourCandidate. All data members should have private access.\n-\nA constructor that takes two input arguments to initialize myCandidate\nand yourCandidate .\n-\nA public method called voteForMyCandidate() that increases the\nnumber of votes for myCandidate by one.\n-\nA public method called voteForYourCandidate() that increases the\nnumber of votes for yourCandidate by one.\n\npublic class PollCenter {\n\n}\n\n1.00/1.001 - Spring 2012 - Quiz 1\n7 / 8\n2.c\nThe following method is added to the class PollCenter. Can you identify any\nproblem(s) with the code?\n\npublic int viewPartyVotes(PoliticalParty p){\n\nif (myCandidate.party == p){\n\nreturn myCandidate;\n\n} else if (yourCandidate.party == p){\n\nreturn yourCandidate;\n\n} else\n\nreturn 0;\n}\n\nCircle all explanations that are applicable:\n\nA.\nNo problem; this is fine\n\nB.\nThe method has no return type\n\nC.\nThe method may not return a value of the correct type\nD.\nThe method tries to access variables that are not accessible by the class\nPollCenter\n\n1.00/1.001 - Spring 2012 - Quiz 1\n8 / 8\nQuestion 3 - Arrays (30 points)\n\n3.a\nGiven an integer array of size N, write a static method occurrenceK that\nreturns the number of occurrences of the integer at position k in that array, where\n. For example, occurrenceK({0,1,1,1},0) returns 1, and\noccurrenceK({3,1,2,1},1) returns 2.\n\nprivate static int occurrenceK(int[] array, int k){\n\n}\n\n3.b\nNow write a second static method maxOccurrence that returns the integer\nwhich has the highest number of occurrences in a given integer array. Assume\nthat the previous method has been correctly written and is in the same class as\nmaxOccurrence. Also assume there is always one such unique integer.\n\npublic static int maxOccurrence(int[] array){\n\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Quiz 1 review",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/b63ead922fe5d120ac3286db9ac494b1_MIT1_00S12_Quiz_1_Review.pdf",
      "content": "3/7/2012\n1.00/1.001\nSpring 2012\nQuiz 1 Review\nCourse Topics Overview\nQuiz 1\n1. Control and scope\n2. Classes and objects\nQuiz 2\n3. Arrays, ArrayLists\n4. Recursion\n5. Inheritance\n6. Graphical user interfaces\n7. Numerical methods\nFinal\n8. Input/output streams\n9. Sensors and threads\n10. Data structures\n\n- Argument passing\n- Variable scope\n\nType\nSize (bits)\nRange\nboolean\ntrue or false\nchar\nISO Unicode character set\nbyte\n-128 to 127\nshort\n-32,768 to 32,767\nint\n2 147 483 648 to 2 147 483 647\n-2,147,483,648 to 2,147,483,647\nlong\n-9,223,372,036,854,775,808L to\n9,223,372,036,854,775,807L\nfloat\n1.4E-45F to 3.4E+38F\n(6-7 significant digits)\ndouble\n4.9E-324 to 1.8E+308\n(15 significant digits)\n1. Control and Scope\n3/7/2012\n1. Data types\n- Promotion and casting\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\n- Argument passing\n- Variable scope\n1. Data types\n- Promotion and casting\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\n1. Control and Scope\n\n- Argument passing\n- Variable scope\n\n1. Control and Scope\n3/7/2012\n1. Data types\n- Promotion and casting\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\nPromotion example\n4 / 3 - 4 / 3.0\nint\nint\nint\ndouble\n-\n1.333\n0 333\nint\ndouble\ndouble\n- 0.333\nCasting example\n(double) 4 / 3 - 4 / 3.0\ndouble\nint\nint\ndouble\n1. Control and Scope\n1. Data types\n- Promotion and casting\n2 Operators\nArithmetic operators\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\nBoolean operators\nAssignment operator:\n=\n- Argument passing\n- Variable scope\nEqual\n==\nNot equal\n!=\nLess than\n<\nLess than or\nequal\n<=\nGreater than\n>\nGreater than\nor equal\n>=\nLogical and\n&&\nLogical or\n||\nNot\n!\nBoolean operators\n\n1. Control and Scope\n3/7/2012\n1. Data types\n- Promotion and casting\n2 Operators\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\n- Argument passing\n- Variable scope\nCommon problems\n- Integer divide\n- Divide by zero\n- 0 / 0 = NaN\n- Exceeding capacity of data type\n- Decimal imprecision and error\n1. Control and Scope\n1. Data types\n- Promotion and casting\n2 Operators\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\n- Argument passing\n- Variable scope\nif / else example\nboolean b = 3 > 4;\nString s = \"hello\";\nif (b) {\n...\n} else if (s.equals(\"bye\")){\n...\n} else {\n...\n}\n\n- Argument passing\n- Variable scope\n\n1. Control and Scope\n3/7/2012\n1. Data types\n- Promotion and casting\n2 Operators\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching (if/else)\n- Iteration (while/do while/for)\n4. Methods\nwhile example\nint i = 0;\nwhile (i<10) {\n...\ni++;\n}\n- Argument passing\n- Variable scope\nfor example\nfor (int i=0; i<10; i++){\n...\n}\n1. Control and Scope\n1. Data types\n- Promotion and casting\n2.2 Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching\n- Iteration\nWriting a method\nWriting a method\npublic static double power(double x, int n){\n}\nAccess\nReturn\ntype\nName\nArguments\n(input)\nObject or\nclass-based\n4. Methods\n\n1. Control and Scope\n3/7/2012\n1. Data types\n- Promotion and casting\n2 Operators\n2. Operators\n- Precedence\n- Numerical problems\n3. Control structures\n- Branching\n- Iteration\n4. Methods\n- Argument passing\n- Variable scope\nWriting a method\nDeclare local\nvariables\nWriting a method\npublic static double power(double x, int n){\n...\nreturn ...\n}\nCalling a method\npublic static void main(String[] args){\ndouble p = power(2, 3);\n}\nCall with values\n1. Control and Scope\n1. Data types\n2. Operators\npublic class Scope {\n- Precedence\n- Numerical problems\nnum = n;\n}\n3. Control structures\n- Branching\npublic double calcSomething(\na) {\nint\n- Iteration\nfor (int i = 1; i < a; i++) {\nresult += num * i;\nScope s = new Scope(n);\ndouble d = s.calcSomething( a ));\n}\n}\npublic static void main(String[] args) {\n- Promotion and casting\n2 Operators\npublic class\nprivate int num;\npublic Scope(int n) {\ndouble result = 0;\nint n = 4;\nScope {\n4. Methods\n}\nreturn result;\n}\n- Argument passing\n- Variable scope\nScope error!\n\n2. Classes and Objects\n3/7/2012\n1. Making a class\n- Data members\n- Constructor\nConstructor\n- Methods\n2. Creating objects\n- Memory allocation\n3. Calling methods\n- Passing object arguments\n4. Access\n5. Static vs. non-static\n1. Making a class\n- Constructor\nConstructor\n- Methods\n2. Creating objects\n3. Calling methods\n4. Access\n5. Static vs. non-static\n2. Classes and Objects\n-\n-\n-\nData members\npublic class Pie {\nprivate int apples;\nprivate double cupsSugar;\nprivate Crust myCrust;\npublic Pie(int a, double s, Crust c){\napples = a;\nMemory allocation\nPassing object arguments\napples = a;\ncupsSugar = s;\nmyCrust = c;\n}\npublic double calcWeight(){\ndouble appleWt = apples * 0.5;\ndouble sugarWt = cupsSugar * 0.3;\ndouble crustWt = myCrust.getWt();\nreturn appleWt + sugarWt + crustWt;\n}\n}\n\n=\n=\n\ndouble crustWt\nmyCrust.getWt();\n2. Classes and Objects\n3/7/2012\n1. Making a class\n- Data members\n- Constructor\nConstructor\n- Methods\n2. Creating objects\npublic class Test{\npublic static void main(String[] args){\nCrust lattice = new Crust(...);\nCrust flat = new Crust(...);\nPie p1 = new Pie(4, 1.5, lattice);\nPie p2 = new Pie(8\nflat);\nPie p2\nnew Pie(8, 3, flat);\n}\n}\n- Memory allocation\n3. Calling methods\n- Passing object arguments\n4. Access\nlattice\nflat\np1\n5. Static vs. non-static\np2\nimage of\ncrust lattice\nimage of\ncrust flat\nimage of pie p2\nImage of pie p1\n2. Classes and Objects\n1. Making a class\n- Data members\n- Constructor\npublic class Test{\npublic static void main(String[] args){\nCrust lattice = new Crust(...);\nCrust flat = new Crust(...);\nPie p1 = new Pie(4, 1.5, lattice);\nPie p2 = new Pie(8\nflat);\nConstructor\n- Methods\n2. Creating objects\n- Memory allocation\n3. Calling methods\n- Passing object arguments\nPie p2\nnew Pie(8, 3, flat);\ndouble w1 = p1.calcWeight();\n}\n}\np1\n4. Access\n5. Static vs. non-static\npublic double calcWeight(){\ndouble appleWt = apples * 0.5;\ndouble sugarWt = cupsSugar * 0.3;\n=\nreturn appleWt + sugarWt + crustWt;\n}\ndouble crustWt = myCrust.getWt();\npublic double getWt(){\nreturn ...;\n}\nimage of\ncrust lattice\nImage of pie p1\n\npublic class Test{\npublic static void main(String[] args){\nCrust lattice = new Crust(...);\nCrust flat = new Crust(...);\nPie p1 = new Pie(4, 1.5, lattice);\np1 setCrust(flat);\n2. Classes and Objects\n3/7/2012\nimage of\ncrust lattice\nimage of\ncrust flat\nImage of pie p1\nimage of pie p2\n2. Classes and Objects\n1. Making a class\n- Data members\n- Constructor\n- Constructor\n- Methods\n2. Creating objects\n- Memory allocation\n3. Calling methods\n- Passing object arguments\n4. Access\n5. Static vs. non-static\nPrivate: Access only within current class\nPublic: Access from all classes in project\nPackage (default): Access from all classes in same package\nProtected: Used with inheritance (covered later)\n1. Making a class\n- Data members\n- Constructor\nConstructor\n- Methods\n2. Creating objects\n- Memory allocation\n3. Calling methods\n- Passing object arguments\n4. Access\n5. Static vs. non-static\np1.setCrust(flat);\n}\n}\npublic class Pie {\n...\npublic void setCrust(Crust c){\nmyCrust = c;\n}\n}\nlattice\nflat\nc 1235\np1\n\n=\n=\n=\n=\n=\n=\n=\n\npublic class Ticket {\nprivate static int total = 0;\nprivate int num;\nbli\nTi k t() {\n2. Classes and Objects\n3/7/2012\n1. Making a class\n- Data members\n- Constructor\n- Constructor\npublic Ticket() {\nnum = 100 + total;\n- Methods\ntotal++;\n2. Creating objects\n}\n- Memory allocation\n...\ntotal\n3. Calling methods\n}\n- Passing object arguments\n4. Access\n5. Static vs. non-static\nTicket object 1\nTicket object 2\nTicket object 3\nnum 100\nnum 102\nnum 101\n3. Arrays and ArrayLists\n1. Differences between array and ArrayList\n2. Declaration and initialization\n3 Assigning / adding an element\n3. Assigning / adding an element\n4. Accessing an element\n5. Retrieving the number of elements\n6. Looping over elements\n\n3. Arrays and ArrayLists\n3/7/2012\n1. Differences between array and ArrayList\n2. Declaration and initialization\n3 Assigning / adding an element\n3. Assigning / adding an element\n4. Accessing an element\n5. Retrieving the number of elements\n6. Looping over elements\nArray\nArrayList\nAll about brackets [ ] !\nAll about methods!\n3. Arrays and ArrayLists\n1. Differences between array and ArrayList\n2. Declaration and initialization\n3 Assigning / adding an element\n3. Assigning / adding an element\n4. Accessing an element\n5. Retrieving the number of elements\n6. Looping over elements\nArray example\nArrayList example\ndouble[] d = new double[5];\nd[0] = 32.0; d[1] = 67.0; ...\nSystem.out.println(d[1]);\nint len = d.length;\nfor(double elem : d)\nSystem.out.println(elem);\nfor(int i=0; i<len; i++)\nSystem.out.println(d[i]);\nArrayList<Double> d = new ArrayList<Double>();\nd.add(32.0); d.add(67.0); ...\nSystem.out.println(d.get(1));\nint len = d.size();\nfor(double elem : d)\nSystem.out.println(elem);\nfor(int i=0; i<len; i++)\nSystem.out.println(d.get(i));\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Quiz 2",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/1e2a6b811f1fce7d4faedb24e67b8673_MIT1_00S12_Quiz2_F08.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nQuiz 2 / Fall 2008\nName:\nEmail Address:\nTA:\nSection:\nYou have 80 minutes to complete this quiz. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary files have already been\nimported.\nGood luck!\nQuestion\nPoints\nQuestion 1\n/30\nQuestion 2\n/20\nQuestion 3\n/30\nQuestion 4\n/20\nTotal\n/100\n1.00 Fall 2008 Quiz 2\n\nQuestion 1. ArrayLists (30 points)\nYou are the director of a large cruise ship. There are two classes in your program: Passenger\nand CruiseShip. The Passenger class, which represents a single passenger on the ship, has\nthree data members: the passenger's age, name, and a boolean variable stating whether the\npassenger is a first class passenger or not. Passenger is defined as follows:\npackage travel;\npublic class Passenger\n{\nString name;\nint age;\nboolean isFirstClass;\n//isFirstClass is true when the passenger is a first class\n//passenger, false otherwise\npublic Passenger(String n, int a, boolean c){\nname = n;\nage = a;\nisFirstClass = c;\n}\n}\nThe CruiseShip class contains an ArrayList of Passengers, a constructor, and two additional\nmethods.\n//code continued on next page\n1.00 Fall 2008 Quiz 2\n\nComplete the missing code for the methods as described in the comments above each.\npackage travel;\npublic class CruiseShip\n{\nArrayList<Passenger> passengers;\n/*\n* The constructor simply initializes passengers\n* to an empty ArrayList.\n*/\npublic CruiseShip(){\n}\n/*\n* This method adds the inputted Passenger p\n* to the ArrayList passengers.\n*/\npublic void addPassenger(Passenger p){\n}\n//code continued on next page\n1.00 Fall 2008 Quiz 2\n\n/*\n* This method returns an ArrayList of Passengers that meet the\n* criteria to have access to the cruise ship's exclusive club.\n* These passengers must have first class status, and must have an\n* age of at least 21\n*/\npublic ArrayList<Passenger> getExclusiveMembers() {\n}\n}\n1.00 Fall 2008 Quiz 2\n\nQuestion 2. Multiple Choice (20 points)\nCircle all answers that are correct.\n1. You always have to add a \"throws\" clause to a method signature if the method could\nthrow an exception.\nTRUE\nFALSE\n2. Consider the following code:\npublic class EnclosingClass {\nint counter;\nprivate static class MysteryClass {\npublic MysteryClass(){\ncounter++;\n}\n}\n}\na. Is MysteryClass an inner class or nested class\nInner Class\nNested Class\nb. This code will compile.\nTRUE\nFALSE\n3. A concrete class that extends an abstract class must implement all abstract methods.\nTRUE\nFALSE\n4. A class can extend multiple classes.\nTRUE\nFALSE\n5. A subclass can access _________ fields of its superclass in the same package.\nPublic\nProtected\nPrivate\nPackage\nNo\n1.00 Fall 2008 Quiz 2\n\n6. An abstract class may have\nPublic fields\nProtected fields\nPrivate fields\nAbstract methods\nConcrete methods\n1.00 Fall 2008 Quiz 2\n\nQuestion 3. Swing (30 points)\nRead the following program then answer the questions which involve drawing the JFrame\nQuirkyCalculator initially and after buttons are pressed. Assume all necessary classes\nhave been imported.\npublic class QuirkyCalculator extends JFrame implements\nActionListener{\nJPanel panel1 = new JPanel();\nJLabel totalLabel = new JLabel(\"total: 0\");\nJPanel panel2 = new JPanel();\nJPanel panel3 = new JPanel();\nint total=0;\nJButton a = new JButton(\"Button A\");\nJButton b = new JButton(\"Button B\");\nJButton c = new JButton(\"Button C\");\npublic QuirkyCalculator (String name) {\nsuper(name);\n}\npublic void addComponentsToPane(final Container pane) {\na.addActionListener(this);\nb.addActionListener(this);\nc.addActionListener(this);\npanel1.add(new JLabel(\"Pick one\"));\npanel2.add(a);\npanel2.add(b);\npanel2.add(c);\npanel3.add(totalLabel);\npane.add(panel2, BorderLayout.CENTER);\npane.add(panel1, BorderLayout.NORTH);\npane.add(panel3, BorderLayout.SOUTH);\n}\n//code continues on next page\n1.00 Fall 2008 Quiz 2\n\npublic void actionPerformed(ActionEvent e){\nif(e.getSource().equals(a)){\ntotal+=1;\n}\nif(e.getSource().equals(b)){\ntotal*=2;\ntotalLabel.setText(\"total: \"+total);\n}\nif(e.getSource().equals(c)){\ntotal-=1;\ntotalLabel.setText(\"total: \"+total);\n}\n}\npublic static void main(String[] args) {\nQuirkyCalculator frame = new QuirkyCalculator (\"Quirky\");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.addComponentsToPane(frame.getContentPane());\nframe.pack();\n}\n1.00 Fall 2008 Quiz 2\n\n1. Draw the JFrame as it initially appears. Be accurate about labels and layout. Indicate on\nyour drawing the names of all the JComponents.\n2. The user has clicked on Button C then Button B then Button A. Draw the JFrame as it\nnow appears. Be accurate about labels and layout. This time, you do not need to\nindicate on your drawing all the JComponents.\n1.00 Fall 2008 Quiz 2\n\nQuestion 4: Recursion (20 points)\n;\nRead the following methods and write either the expression implemented by the method (e.g.,\nor V Y) or the numerical value returned by the method call. Either will be counted as correct.\nAssume that x and y are positive. Show work for partial credit.\n1.\npublic static int methodA(int x, int y){\nif(y == 1){\nreturn x;\n}\nelse{\nreturn x + methodA(x, y - 1);\n}\n}\nmethodA(5,100);\n1.00 Fall 2008 Quiz 2\n\n2.\npublic static int methodB(int x, int y){\nif(x < y){\nreturn x;\n}\nelse{\nreturn methodB(x-y, y);\n}\n}\nmethodB(10000,3);\n1.00 Fall 2008 Quiz 2\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Quiz 2",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/7b90757c5746ad0dfa439389416a217d_MIT1_00S12_Quiz2_S10.pdf",
      "content": "1.00/1.001 - Spring 2010 - Quiz 2\n1 / 11\n1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\nSpring 2010 - Quiz 2\n\nName:\n\nMIT Email:\n\nTA:\n\nSection:\n\nYou have 80 minutes to complete this exam. For coding questions, you do not need to\ninclude comments, and you should assume that all necessary packages have already\nbeen imported. Good luck!\n\nQuestion 1\n\n/ 20\n\nQuestion 2\n\n/ 40\n\nQuestion 3\n\n/ 40\n\nTotal\n\n/ 100\n\n1.00/1.001 - Spring 2010 - Quiz 2\n2 / 11\nQuestion 1 - Recursion (20 points)\n\nWrite a recursive method to calculate the sum of all squares from 1 to n. For example,\nsumSquares(2) would return 5 = 22 + 12 and sumSquares(3) would return 14 = 32 + 22 +\n12.\n\nYou can assume that n will be greater than or equal to 1. You do not need to check to\nsee if this condition is met.\n\npublic int sumSquares(int n){\n\n}\n\n1.00/1.001 - Spring 2010 - Quiz 2\n3 / 11\nQuestion 2 - Swing (40 points)\n\nYou are entering the Swing portion of this quiz. You will be required to understand the\ncode provided to you and write some yourself.\n\nThe application we are building is a simple painting application. Whenever a user\ndraws a point on the panel (by dragging the mouse), a reflected point is drawn on the\nopposite half of the panel as well. Here is a screen-shot of what the panel would like if\nyour TA was trying to draw a pumpkin for Halloween:\n\nPart A:\n\nThe panel that draws these symmetric images is an extension of JPanel, and is called\nMirrorPanel. MirrorPanel has:\n- A private ArrayList<Point2D>, called paintPoints that contains all the\npoints created by dragging the mouse. paintPoints does NOT contain any of\nthe symmetric points.\n- A public method addPoint(Point2D pt) that adds a new point to the\npaintPoints ArrayList.\n- A public method clearPainting() that clears the paintPoints ArrayList.\n\nLook over the provided code. Two parts are missing in the paintComponent()\nmethod. You will be asked to fill them in the following question.\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\n1.00/1.001 - Spring 2010 - Quiz 2\n4 / 11\npublic class MirrorPanel extends JPanel{\n\n//List that holds all the paint points\n\nprivate ArrayList<Point2D> paintPoints;\n\n//Constructor for 800X400 pixel Mirror panel\n\npublic MirrorPanel(){\n\nsetPreferredSize(new Dimension(800, 400)); // Sets size of panel\n\npaintPoints = new ArrayList<Point2D>();\n\n}\n\npublic void paintComponent(Graphics g){\n\nsuper.paintComponents(g);\n\nGraphics2D g2 = (Graphics2D) g;\n\nint panelHalfWidth = this.getWidth()/2;\n// JPanel method\n\n//************************************************************\n//\n// PART 1: draw the line that divides the panel in half\n//\n//************************************************************\n\ng2.setColor(Color.RED);\n\n//Draw all the points and mirror points\n\nfor(Point2D pt: paintPoints){\n\nint x = (int) pt.getX();\nint y = (int) pt.getY();\n\n//******************************************************\n//\n// PART 2: draw the point and mirror-point as an ellipse\n//\n//******************************************************\n\n}\n\n}\n\npublic void addPoint(Point2D pt){\n\npaintPoints.add(pt);\n\n}\n\npublic void clearPainting(){\n\npaintPoints.clear();\n\n}\n}\n\n1.00/1.001 - Spring 2010 - Quiz 2\n5 / 11\nThe panel should have a vertical line drawn through its midpoint. Create a Line2D\nobject that starts at the panel's top midpoint and ends at the bottom midpoint (like the\nline shown in the screenshot). We have provided a variable called panelHalfWidth\nthat represents the midpoint (on the x-axis) for the panel. Use the g2.draw() function\nto draw the line.\n\nPart 1 code goes here:\n\nNow draw the paintPoints and the points that correspond to their reflection around\nthe middle dividing line. We've provided code that iterates through the list of points.\nYou should represent each point as a small circle. This can be done by filling in a small\nEllipse2D object with a height and width of 4 pixels for each point. Each Ellipse2D\nobject should be centered on the corresponding pt. You'll need to calculate the x-\ncoordinate for the reflected point. To test your math: if the panel width is 800, and a\npoint's x value = 150 then the mirror x value = 650.\n\nPart 2 code goes here:\n\n1.00/1.001 - Spring 2010 - Quiz 2\n6 / 11\nPart B:\n\nNow we are going to build a small JFrame class that uses the panel. The class is\ncalled TestClass and it extends JFrame. It contains:\n- A MirrorPanel called mirror.\n- A JButton called clearButton that is responsible for clearing the\nmirrorPanel's current paintPoints.\nRead over the provided code. You will be asked to add the mirror and clearButton\nobjects to the TestClass's ContentPane to make the application look like the screen\nshot above. You will also be asked to add an ActionListener for the clearButton\nobject.\n\npublic class TestClass extends JFrame{\n\nMirrorPanel mirror = new MirrorPanel();\n\nJButton clearButton = new JButton(\"Clear\");\n\npublic TestClass(){\n\nsuper(\"Mirror App\");\n\n//************************************************************\n//\n// PART 1: add the mirror and clearButton objects\n//\n//************************************************************\n\n//MouseMotionListener is a type of Listener that captures mouse drag\n//events on the mirror panel, and adds each mouse position point to the\n//mirror's list of draw points.\n\nmirror.addMouseMotionListener(new MouseAdapter() {\n\npublic void mouseDragged(MouseEvent e) {\n\nPoint2D mouseDragPoint = new\nPoint2D.Double(e.getX(), e.getY());\n\nmirror.addPoint(mouseDragPoint);\n\nrepaint();\n\n}\n\n});\n\n//************************************************************\n//\n// PART 2: add an ActionListener for clearButton\n//\n//************************************************************\n\n}\n\npublic static void main(String[] args) {\n\nTestClass frame = new TestClass();\n\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nframe.pack();\n\nframe.setVisible(true);\n\n}\n}\n\n1.00/1.001 - Spring 2010 - Quiz 2\n7 / 11\nWrite code so that the mirror and clearButton objects are added to the\nContentPane of the TestClass. You should write code so that the resulting layout\nwould resemble the layout of the screenshot at the beginning of this problem.\n\nPart 1 code goes here:\n\nUsing an anonymous inner class, add an ActionListener to the clearButton, so\nthat the mirror's paintPoints are erased and the frame is redrawn every time the\nbutton is clicked.\n\nPart 2 code goes here:\n\n1.00/1.001 - Spring 2010 - Quiz 2\n8 / 11\nQuestion 3 - Inheritance and Interfaces (35 points)\n\nA physical analysis program written in Java has a library of materials available to the\nengineer to model physical entities. The materials are organized in a hierarchy of\nclasses. Each material is eventually represented by an object holding the material\nproperties, such as the density, electrical conductivity and elasticity. You do not need to\nworry about the units when using the material properties in this problem.\n\nAll material classes are derived from the Material superclass.\n\npublic abstract class Material\n{\n\nprivate String name;\n\npublic Material(String name){this.name = name;}\n\npublic String getName() {return name;};\n\npublic abstract double getDensity();\n}\n\nInterfaces are used to describe specific material properties. The Conductor interface\nmust be implemented by all materials that can conduct electrical current.\n\npublic interface Conductor\n{\n\npublic double getConductivity();\n}\n\nThe Structural interface must be implemented by all structural materials.\n\npublic interface Structural\n{\n\npublic double getElasticity();\n}\n\n1.00/1.001 - Spring 2010 - Quiz 2\n9 / 11\n\nPart A\n\nMetals are materials conducting electrical current. Complete the Metal class below by\nfilling in the boxes you need.\n\npublic class Metal\n\n{\n// data members\n\n// constructor\npublic Metal(String name, double dens, double conduct)\n{\n\n}\n\n// other methods\n\n}\n\n1.00/1.001 - Spring 2010 - Quiz 2\n10 / 11\nPart B\n\nSteel is a metal widely used as a structural material. It has a density of 0.28 (pounds per\ncubic inch) and an elasticity of 29,000 (kilo-pound per square inch). Conductivity varies\nby type of steel. Complete the Steel class below by filling in the boxes you need.\n\npublic class Steel\n\n{\n\n// data members\n\n// constructor\npublic Steel(String name, double conduct)\n{\n\n}\n\n// other methods\n\n}\n\n1.00/1.001 - Spring 2010 - Quiz 2\n11 / 11\nPart C\n\nThe program also has classes to represent the physical entities made from the\nmaterials. You will write one such class to represent plates. A plate can only be made of\na structural material and has an area and a thickness. In addition, the Plate class has\na printResistance() method, which should do the following:\n- If the plate is made of a material conducting electrical current, print out the\nelectrical resistance of the plate, equal to: thickness / (area x conductivity).\n- If the plate is not made of a material conducting electrical current, throw an\nIllegalArgumentException.\nComplete the Plate class below by filling in the boxes you need.\n\npublic class Plate\n{\nprivate\n\nmaterial;\n\nprivate double area;\n\nprivate double thickness;\n\npublic Plate( m, double a, double t)\n\n{\n\nmaterial = m;\n\narea = a;\n\nthickness = t;\n\n}\n\npublic void printResistance()\n\n{\n\n}\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Arrays, Arraylists",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/0c1897fc7374a00343175ca331e2a75f_MIT1_00S12_Lec_11.pdf",
      "content": "1.00 Lecture 11\nArrays and ArrayLists\nReading for next time: Big Java: sections 13.1-13.4\nArrays\n- Arrays are a simple data structure\n- Arrays store a set of values of the same type\n- Built-in types (int, double, etc.) or\n- Objects (Students, Engines, etc.)\n- Arrays are part of the Java language\n- Arrays are objects, not primitives like int or double.\n- They are declared in the same way as other objects\nint[] intArray= new int[20]; //Irregular verb\n- The array object has an int data member, length, that\ngives the number of elements in the array:\nint aSize= intArray.length;\n// aSize= 20\n- Each value is accessed through an index\nintArray[0]= 4; intArray[1]= 77;\n\nArrays, p.2\n- Array index always starts at 0, not 1\n- An array with N slots has indices 0 through N-1\n- intArray has elements intArray[0] through intArra\n[19]\n- Array lengths cannot be changed once they are\ndeclared\n- Arrays can be initialized when declared\nint[] intArray= {5, 77, 4, 9, 28, 0, -9};\n// new is implicit (not needed) in this case\n- Arrays of numerical values are zero when\nconstructed\ny\n\nCopying arrays\n- To copy an array, use arraycopy( ) method of\nSystem class:\nint[] intArray= new int[20]; // Same as first slide\nint[] newArray= new int[intArray.length]\n\n// arraycopy(fromArray, fromIndex, toArray, toIndex, count)\nSystem.arraycopy(intArray, 0, newArray, 0, intArray.length);\n\n// Now intArray and newArray have separate copies of data\n\n// Arrays dont have to be same length as long as segment\n// copied fits into destination array\n\nCopying entire array\nint[ ] intArray= { 5, 77, 4, 9, 28, 0, 9 };\nint[ ] newArray = new int[ intArray.length ];\nSystem.arraycopy(intArray, 0, newArray, 0, intArray.length)\nintArray\nnewArray\nCopying an array reference\nintArray\nnewArray\nint[ ] intArray= {5, 77, 4, 9, 28, 0, 9};\nint[ ] newArray = intArray;\n\nLooping Over Arrays\n- If doubleArray is a reference to array of doubles,\nthere are two ways to iterate over it.\n- This way gives more control--you can loop over just part\nof it, and you know what element (i) is being computed:\n\ndouble sum = 0.0;\nfor( int i= 0; i < doubleArray.length; i++)\nsum += doubleArray[i];\n\n- This way is simpler but you can only iterate over the\nentire array, and you dont have a loop counter (e.g., i):\n\ndouble sum = 0.0;\n\n// for each double d in array doubleArray\n\nfor( double d : doubleArray)\n\nsum += d;\nTest Your Knowledge\n1.\n1. Which of the following expressions does not declare and\nWhich of the following expressions does not declare and\nconstruct an array?\nconstruct an array?\na. int[ ] arr = new int[4];\na. int[ ] arr = new int[4];\nb. int[ ] arr;\nb. int[ ] arr;\narr = new int [4];\narr = new int [4];\nc. int[ ] arr = {1,2,3,4};\nc. int[ ] arr = {1,2,3,4};\nd. int[ ] arr;\nd. int[ ] arr;\n2. Given this code fragment:\n2. Given this code fragment:\n\niint j= ?;\nint[] data = new int[10];\nSystem.out.print(data[ j ]);\nWhich of the following is a legal value of j?\nWhich of the following is a legal value of j?\na. -1\na. -1\nb. 0\nb. 0\nc. 1.5\nc. 1.5\nd. 10\nd. 10\n\nTest Your Knowledge\n3. Given this code fragment:\nWhat are the values of\nWhat are the values of\n\nthe elements in array\nthe elements in array A?\nA?\nint[] arrayA = new int[4];\na. unknown\na. unknown\nint[] arrayB;\nb. 0,0,0,0\nb. 0,0,0,0\narrayB = arrayA;\nc. 4,0,4,0\nc. 4,0,4,0\narrayB[2]=4;\nd. 4,0,0,0\nd. 4,0,0,0\narrayA[0]=arrayB[2];\n\n4. How many objects are present after\n4. How many objects are present after\na. 1\na. 1\nthe following code fragment has\nthe following code fragment has\nb. 2\nb. 2\nexecuted?\nexecuted?\nc. 10\nc. 10\n\ndouble[] arrayA=new double[10];\nd. 20\nd. 20\ndouble[] arrayB;\n\narrayB = arrayA;\n\nTest Your Knowledge\n. For which of these applications an array is NOT suitable?\n. For which of these applications an array is NOT suitable?\na. Holding the scores on 4 quarters of a Basketball game\na. Holding the scores on 4 quarters of a Basketball game\nb. Holding the name, account balance and account number\nb. Holding the name, account balance and account number\nof an individual\nof an individual\nc. Holding temperature readings taken every hour through\nc. Holding temperature readings taken every hour through\na day\na day\nd. Holding monthly expenses through a year\nd. Holding monthly expenses through a year\n. Given the following code fragment:\n. Given the following code fragment: a. int index = 4; index>0; index--\na. int index = 4; index>0; index--\nnt[] data = {1,3,5,7,11};\nb. int index=0; index<4; index++\nb. int index=0; index<4; index++\nor(______________________)\nc. int index=0; index<data.length();\nc. int index=0; index<data.length();\nystem.out.println(data\nindex++\nindex++\n[index] );\n\nd. int index=0; index<data.length;\nd. int index=0; index<data.length;\nill in the blanks so that the program\nill in the blanks so that the program\nindex++\nindex++\nement in the array\nement in the array\n\nii\nf\nS\nF\nprints out every el\nrints out every el\nin order\nin order\n\ni\nf\nS\nF\n\nTest Your Knowledge\n. What is the output of the following program?\na. value before:10\na. value before:10\nublic class Test{\nvalue after:0\nvalue after:0\npublic static void main ( String[] args ){ arr[0] before:10\narr[0] before:10\n\nint value = 10;\narr[0] after: 0\narr[0] after: 0\nint[] arr = {10,11,12,13};\nb. value before:10\nb. value before:10\nSystem.out.println(\"value before:\"+value);\nvalue after:10\nvalue after:10\nalterValue( value );\narr[0] before:10\narr[0] before:10\nSystem.out.println(\"value after:\"+value); arr[0] after: 10\narr[0] after: 10\n\nSystem.out.println(\"arr[0]before:\"+arr[0]); c. value before:10\nc. value before:10\nalterArray( arr );\nvalue after:10\nvalue after:10\nSystem.out.println(\"arr[0] after:\"+arr[0]); arr[0] before:10\narr[0] before:10\n}\narr[0] after: 0\narr[0] after: 0\npublic static void alterValue (int x ){\nd. value before:10\nd. value before:10\nx = 0; }\nvalue after:0\nvalue after:0\npublic static void alterArray (int[] a){\narr[0] before:10\narr[0] before:10\na[0] = 0; }\narr[0] after: 10\narr[0] after: 10\n\npp\n\n}\nExercise\n- Create a TemperatureTest class\n- Write a main() method to:\n- Declare and construct an array of doubles,\ncalled dailyTemp holding daily temperature\ndata\n- Use an initializer list with curly braces\n- Using a for loop, print every element of the\ndailyTemp array in order\n- Use the array length, not the constant 7, to control\nthe loop if you use the full control version\n- Or use the simpler style of for loop\nMon\nTue\nWed\nThu\nFri\nSat\nSun\n\nExercise, p.2\n- In class TemperatureTest, write a static method\nto find average weekly temperature:\npublic static double average(double[] aDouble) {\n// Declare a total variable, initialize it to 0\n// Loop thru aDouble and add each element to the total\n// Use the simple for (double d : aDouble) for loop\n// Divide by the number of elements, return the answer\n}\n\n- In the main() method, call the average method\nyou just wrote\n- Pass the dailyTemp array as the argument\n- Print the average temperature in main() as:\n- Average weekly temperature: 66\nArrayList Class\n- The ArrayList class IS COMPLETELY DIFFERENT\nTHAN an array.\n- Its a more flexible way to store data\n- ArrayList can grow automatically as needed\n- Has capacity that is increased when needed\n- Has size() method that returns actual number of\nelements in the ArrayList\n- ArrayList can hold elements of different types\n- As long as each is an Object (reference),\n- Technically an ArrayList cant hold a basic type (int,\ndouble, etc.)\n- But, conversion of primitive to an object happens\nautomatically. This is called auto-boxing.\n- Wrapper classes allow objects (e.g., Boolean or Double)\nthat hold basic types (e.g. boolean or double)\n- Think airplane vs bicycle as two ways to get from A to B\n- Bicycle is simple, airplane is complex, though both get you there\n- Squeeze hand brake doesnt apply to plane, adjust flaps to bicycle\n- So it is with arrays and ArrayLists: similar but quite different\n\nArrayLists\n- ArrayList class is not in the core Java language\n- It is in package java.util, which you must import:\nimport java.util.*; // At top of program\n- ArrayLists are slightly slower than arrays\n- This matters only in large numerical applications\n- ArrayList class has many methods that provide\nfunctionality beyond what arrays provide\n- You can declare an ArrayList as containing\nobjects of a particular type. Example:\nArrayList<Point> pList = new\n\nArrayList<Point>( );\nSome Methods of ArrayList\nboolean add (Object o)\nAdds object to end, increases size\nby one. Always returns true\nvoid add(int i, Object o) Inserts o at index i moving\nsubsequent elements to right\nObject get(int i)\nReturns object at index i\nint indexOf(Object o)\nFinds first occurrence of object;\n-1 if not found\nboolean isEmpty( )\nReturns true if ArrayList has no\nobjects, false otherwise\nvoid remove (int i)\nDeletes obj at index i moving\nsubsequent elements leftward\nvoid remove (Object o)\nDeletes first occurrence of o\nmoving subsequent elements\nleftward\nvoid set(int i,Object o) Sets element at index i to be the\nspecified object\nint size( )\nReturns size of ArrayList\n\nArrayList Example\nimport java.awt.*;\n// to use Point class\nimport java.util.*;\n// to use ArrayList class\n\npublic class ArrayListTest {\nstatic final int M = 100; // Max coordinate\n\npublic static void main(String args[]) {\nRandom r= new Random();\nint numPoints = r.nextInt(20);\n// Max 20 points\nArrayList<Point> points = new ArrayList<Point> ( );\n\nfor (int i=0; i< numPoints; i++) {\nPoint p = new Point( r.nextInt(M), r.nextInt(M));\npoints.add(p);\n}\n\nSystem.out.println(\"ArrayList size: + points.size());\nfor (Point pt : points)\nSystem.out.println(pt);\n}\n}\nAutomatic conversion of\nprimitives to objects\n- Java has boxing and unboxing:\n- When necessary, the compiler converts a primitive (e.g.,\nint or double) to the corresponding object type (e.g.,\nInteger or Double)\n- This lets us add primitive types to an ArrayList:\nArrayList<Integer> myAList = new\n\nArrayList<Integer>( );\nmyAList.add(1); // 1 is an int; its boxed\nmyAList.add(3); // same as myAList.add(new\n\n// Integer(3));\nmyAList.add(7);\n// retrieves Integer, unboxes to int\nint iValue = myAlist.get(1);\n\nTest Your Knowledge\nhich of the following statements is NOT true about\n1. W\nArrayLists?\na. ArrayLists are slightly faster than arrays.\nb. ArrayLists can store elements of different types.\nc. ArrayLists can increase in size to store more elements.\nd. ArrayLists have methods to manage their content.\n\nTest Your Knowledge\n2. Given the following code fragment:\nArrayList<String> myArrayList = new\nArrayList<String>( );\nmyArrayList.add(\"One\");\nmyArrayList.add(\"Two\");\nmyArrayList.add(\"Three\");\nmyArrayList.add(\"Four\");\n\nWhich of the following expressions will modify myArrayList so it\nlooks like:\n\na. myArrayList.remove (myArrayList.get(3));\nb. myArrayList.remove (myArrayList.indexOf(\"Three\"));\nc. myArrayList.remove (Three);\nd. myArrayList.remove (myArrayList.get(2));\n\nTest Your Knowledge\n3. Given the following code fragment (same as question 2):\nArrayList<String> myArrayList = new\nArrayList<String>( );\nmyArrayList.add(\"One\");\nmyArrayList.add(\"Two\");\nmyArrayList.add(\"Three\");\nmyArrayList.add(\"Four\");\n\nWhich of the following expressions will modify myArrayList so it\nlooks like:\n\na. myArrayList[3] = \"Five\"\nb. myArrayList[4] = \"Five\"\nc. myArrayList.set (myArrayList.indexOf(\"Four\"), Five);\nd. myArrayList.set (myArrayList.indexOf(\"Five\"), Four);\n\nTest Your Knowledge\n4. Given the following code fragment:\nArrayList<Integer> myArrayList = new\nArrayList<Integer>( );\nmyArrayList.add(1);\nmyArrayList.add(3);\nmyArrayList.add(7);\nWhich of the following expressions will modify myArrayList so it\nlooks like:\n\na. myArrayList.add (5);\nb. myArrayList.add (2, 5);\nc. myArrayList.add (4, 5);\nd. myArrayList.add (3, 5);\n\nArrays and ArrayLists\nArray\nArrayList\n- Capacity fixed at\n- Capacity increases as\ncreation\ndata is added\n- Accessed with z[i]\n- Accessed with z.get(i)\n- Constructor: new\n- Constructor: new\ndouble[30]\nArrayList<Bus>();\n- One data member:\n- No data members\nz.length\n\n- No methods\n- Many methods - z.size\n\n(), z.add(), z.get()\n- Slightly faster\n- More flexible\nExercise\nclass CourseTest:\nrt java.util.*; // 1st line in Cour\n- Create\n- impo\nseTest\n- In main():\n- Create an ArrayList<String> students\n- Add 4 students to the ArrayList:\n- Amy, Bob, Cindy and David\n- Add them to the ArrayList directly:\n\nstudents.add(\"Amy\");\n- Write method to print elements in the ArrayList\nand its size\npublic static void printOutArrayList(// Argument) {\n\n// Code goes here }\n- Call printOutArrayList() method from main()\n- Pass the ArrayList as the argument\n- Your output should be:\nAmy\nBob\nCindy\nDavid\nSize: 4\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Classes and Objects",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/800d897a4db6f41aed47b37f77b66520_MIT1_00S12_Lec_7.pdf",
      "content": "1.00 Lecture 7\nJava Classes and Objects\nReading for next time: Big Java: sections 8.1-8.5\nClasses\n- A class is a pattern or template from which objects\nare made\n- You may have many birds in a simulation\n- One bird class (or more if theres more than one type of bird)\n- Many bird objects (actual instances of birds)\n- Objects are instances of classes\n- Class: Student Object: Joe Smith Object: Jane Wang\n- Class: Building Object: Building 10 Object: Building 7\n- Class: Street\nObject: Mass Ave Object: Vassar St\n\nClass Definition\n- Classes contain:\n- Data (members, fields)\n- Simple data types, like int or double (e.g. bird weight)\n- Objects (e.g. bird beak)\n- Methods (functions, procedures)\n- Behaviors that an object can execute (e.g. bird flies/moves)\n- Special method: constructor (brings object into existence)\n- Classes come from:\n- Java class libraries: JOptionPane, System, Math, etc. There\nare several thousand classes (see Javadoc)\n- Class libraries from other sources: Web, fellow students\n- Classes that you write yourself\n- Classes are usually the nouns in a problem\nstatement (e.g. bird)\n- Data members are also nouns (e.g., weight)\n- Methods are usually the verbs (e.g. flies)\nBuilding Classes\n- Classes hide their implementation details from the\nuser (programmer using the already-written class):\n- Their data is not accessed directly, and the details are not\nknown to outside objects or programs.\n- Data is almost always private (keyword).\n- Objects are used by calling their methods/behaviors.\n- The outside user knows what methods the object has, and\nwhat results they return.\n- The details of how their methods are written are not known to\noutsiders\n- Methods are usually public (keyword).\n- By insulating the rest of the program from each objects details,\nit is much easier to build large programs correctly, and to reuse\nobjects from previous work.\n- This is called encapsulation or information hiding.\n- Access: public, private, (package, protected)\n\nTank Class\nTwo tanks, each with:\nt0\n\nt1\n- Radius R\n\n0.5m\n1.0m\n- Length L\n\n4.0m\n1.0m\n- Thickness t\n\n0.04m\n0.04m\n\n- How many classes?\n- How many objects?\nTank Class\npublic class Tank {\n// Data members--private. These are outside any method.\nprivate double radius;\nprivate double length;\nprivate double thickness;\n// Their scope is until ending } of class\n\n// Constructor or existence method--public (no return type ever)\npublic Tank(double r, double len, double t) {\n\nradius = r;\n\nlength = len;\n\nthickness = t;\n}\n// Methods on the next slide. There is no main() in this class.\n\nTank Class\n\n// Get methods--respond to messages from other objects--public\n\n// Cylinder wall mass= LÏ((R+t)2 - R2)\npublic double getMassCylinderWalls() {\n\ndouble mass= length*Math.PI*\n\n((radius + thickness)*(radius + thickness)- radius*radius\n\nreturn mass;\n}\n\n// Cylinder end mass= 2Ït(R+t)2\npublic double getMassEnds() {\n\ndouble mass= 2.0*Math.PI*thickness*\n\n(radius + thickness)*(radius + thickness);\n\nreturn mass;\n}\n\npublic double getMass() {\n// We ignore density\n\nreturn getMassCylinderWalls() + getMassEnds();\n}\n\n);\nTankTest Class\npublic class TankTest {\npublic static void main(String[] args) {\n\n// Create two Tank objects\n\nTank t0= new Tank(0.5, 4.0, 0.04);\n\nTank t1= new Tank(1.0, 1.0, 0.04);\n\n// Ask object t0 to tell you its mass\n\ndouble t0wall= t0.getMassCylinderWalls();\n\ndouble t0end= t0.getMassEnds();\n\ndouble t0mass= t0.getMass();\n\nSystem.out.println(\"t0: \"+ t0wall + \" \" + t0end +\n\n\" \" + t0mass);\n\n// Ask object t1 to tell you its mass\n\ndouble t1wall= t1.getMassCylinderWalls();\n\ndouble t1end= t1.getMassEnds();\n\ndouble t1mass= t1.getMass();\n\nSystem.out.println(\"t1: \"+ t1wall + \" \" + t1end +\n\n\" \" + t1mass);\n}\n}\n\nExercise, part 1\n- Download Tank and TankTest\n- In class Tank, implement additional\nmethods:\n- Compute volume V\n- V= ÏR2L\n- Compute weld length W\n- W= 2 [2ÏÏ(R+t)+ 2ÏR] = 8Ï(R+ t/2)\n- Compute tank cost C, using arguments c1, c2\n- C= c1M + c2 W\n\n(tank mass M)\n- Save/compile\n- Youll write a main() next that uses these\nmethods\nExercise, part 2\n- In class TankTest\n- Call your methods to compute volume, weld\nlength and cost on tanks t0 and t1\n- Cost of weld= $30/m\n- Cost of steel (mass)= $48,000/m3\n- Print out volume, weld length and cost for t0, t1\n- Save/compile and read with the debugger\nto make sure its working correctly\n\nExercise, part 3\n- In class Tank:\n- Write 3 additional methods:\n- public void setRadius(double r) {radius= r;}\n- And similar for length and thickness\n- In class TankTest\n- After all the existing code:\n- Change tank t1to have a radius of 0.8, and a length of 1.5\n- Leave thickness the same\n- Output the revised volume, mass, weld length and cost\n- (The new tank is almost the minimum cost tank for this\nvolume.)\n- Save, compile and read it with the debugger\nReview questions\n- Circle all true statements\n- A class is:\n- A group of methods\n- A pattern to make objects\n- The same thing as an object\n- A program\n- An object is:\n- A group of methods\n- The same thing as a class\n- A specific thing that follows a pattern defined by a class\n- A built-in data type, like int or double\n\nMore review questions\nA constructor is:\n- The method called when an object is created\n- A special data member defined at startup\n- A method that can be invoked on an object\n- A method whose name is the same as the class and has\nno return value\nA data member is:\n- A variable that describes an object, or thing, made using\nthe pattern of the class\n- A variable that is defined in a method of the class\n- A variable that can be seen by (is in scope for) all\nmethods of the class\n- A variable that cannot be used by any method\n-\n-\nStill more questions\n- The nnew operator:\n- Creates a new object and calls its constructor\n- Creates a new class\n- Is used to declare a new built-in data type\n- Is optional and may be used to create a class\n- Objects:\n- Cannot be data members in other objects\n- Cannot be passed as arguments to methods\n- Can be the return value of a method\n- Exist only in pre-written Java libraries and cannot be\ncreated by you\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Classes II",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/8979eefe96625266c98826edb07536c7_MIT1_00S12_Lec_8.pdf",
      "content": "1.00 Lecture 8\nClasses, continued\nReading for next time: Big Java: section 8.9\nBuilding Classes, cont.\n- From last time:\n- Tank is a Java class used by the TankTest\nclass\n- TankTest uses Tank objects:\n- First construct the objects and specify their initial\nstate\n- Constructors are special methods to construct and\ninitialize objects\n- They may take arguments\n- Then apply methods to the objects\n- This is the same as sending messages to them to invoke\ntheir behaviors\n- The messages respond with their return values\n\nConstructor for Tank Object\n- To construct a new Tank object, two things are\nrequired:\n- Create the object (using its constructor)\n\nnew Tank(0.5, 4.0, 0.04);\n// Use original example\n// new allocates memory and calls constructor\n- Give the object a name or identity:\nTank tank0;\n// Object name (tank0) is a reference to the object\n// Tank is the data type of tank0\n- Combine these two things into a single step:\nTank tank0= new Tank(0.5, 4.0, 0.04);\n- We now have a Tank object containing the values:\n- Radius 0.5 meters\n- Length 4.0 meters\n- Thickness 0.04 meters\n- We can now apply methods to it.\n\nUsing Methods\n- Methods are invoked using the dot (.) operator\n- Method always ends with parentheses\nTank tank0= new Tank(0.5, 4.0, 0.04);\nTank tank1= new Tank(1.0, 1.0, 0.04);\ndouble v= tank0.getVolume();\n// Dot operator\ndouble w= tank1.getWeldLength(); // Dot operator\n- Methods are usually public and can be invoked anywhere\n\n- Data fields are also invoked with the dot (.) operator\n- No parentheses after field name\n\ndouble r= tank0.radius;\n\ndouble t= tank0.thickness;\n- Private data fields cant be accessed outside their class\n- The data fields in our Tank example cannot be accessed this\nway in TankTest because theyre all private to Tank\n- If they were public in Tank, they could be seen from TankTest\n- Private fields can be accessed this way within class Tank\n\nGet() and Set() Methods\n- Weve seen get() methods\n- They ask an object to compute or return a fact\nabout itself\npublic double getVolume() {\nreturn Math.PI*radius*radius*length;\n}\npublic double getRadius() {return radius;}\n- Set() methods tell an object to change one\nif its data members\npublic void setRadius(double r) {\n\nradius= r;\n}\nGet() and Set() Methods 2\n- Weve seen get() methods\n- They ask an object to compute or return a fact\nabout itself\npublic double getVolume() {\nreturn Math.PI*radius*radius*length;\n}\npublic double getRadius() {return radius;}\n- Set() methods tell an object to change one\nif its data members\npublic void setRadius(double radius) {\n\nthis.radius= radius;\n} // this is keyword for current object\n\nObjects and Names\nnew Tank(0.5, 4.0, 0.04);\n\nTank\n0.5 4.0 0.04\nObjects and Names\nTank t0= new Tank(0.5, 4.0, 0.04);\n\nt0=\nTank\n0.5 4.0 0.04\n\nt0=\nTank\n0.5 4.0 0.04\np=\nPipe\n0.1 10.0\nObjects and Names\nTank t0= new Tank(0.5, 4.0, 0.04);\nPipe p= new Pipe(0.1, 10.0);\n// radius, length\nt0=\nTank\n0.5 4.0 0.04\np=\nPipe\nt1=\nTank\n1.0 1.0 0.04\n0.1 10.0\nObjects and Names\nTank t0= new Tank(0.5, 4.0, 0.04);\nPipe p= new Pipe(0.1, 10.0);\n// radius, length\nTank t1= new Tank(1.0, 1.0, 0.04);\n\nt0=\nTank\n0.5 4.0 0.04\np=\nPipe\nt1=\nTank\n1.0 1.0 0.04\n0.1 10.0\nt2=\nObjects and Names\nTank t0= new Tank(0.5, 4.0, 0.04);\nPipe p= new Pipe(0.1, 10.0);\n// radius, length\nTank t1= new Tank(1.0, 1.0, 0.04);\nTank t2;\n\nt0=\nTank\n0.5 4.0 0.04\np=\nPipe\nt1=\nTank\n1.0 1.0 0.04\n0.1 10.0\nt2=\nObjects and Names\n0= new Tank(0.5, 4.0, 0.04);\nTank t\nPipe p= new Pipe(0.1, 10.0);\n// radius, length\nTank t1= new Tank(1.0, 1.0, 0.04);\nTank t2;\nt2= t1;\n\nt0=\nTank\n0.5 4.0 0.04\n\np=\nPipe\nt1=\nTank\n1.0 1.1 0.04\n0.1 10.0\nt2=\n1.0\nObjects and Names\nnk t0= new Tank(0.5, 4.0, 0.04);\nTa\nPipe p= new Pipe(0.1, 10.0);\n// radius, length\nTank t1= new Tank(1.0, 1.0, 0.04);\nTank t2;\nt2= t1;\nt2.setRadius(1.1); // Easy to do accidentally\nPipe, Pipe2 class\nss Pipe {\n\n// Simple Pipe class\npublic cla\nprivate double radius;\nprivate double length;\npublic Pipe(double r, double len) {\n\nradius = r;\n\nlength = len;\n} }\n\npublic class Pipe2 {\n\n// Pipe attached to two Tanks\nprivate double length;\nprivate double radius;\nprivate Tank tank1;\n// Same Tank class as lecture 7\nprivate Tank tank2;\npublic Pipe2(double len, double r, Tank t1, Tank t2) {\n\nlength = len;\n\nradius = r;\n\ntank1 = t1;\n\ntank2 = t2;\n}\n\npublic double getSystemVolume() {\n\nreturn tank1.getVolume() + tank2.getVolume() +\n\nlength*Math.PI*radius*radius;\n} }\n\nt0=\nTank\n0.5 4.0 0.04\nt1=\nTank\n1.0 1.0 0.04\nDraw the picture\n// Assume t0 and t1 exist\nPipe2 p2= new Pipe2(0.1, 10.0, t0, t1);\n\nClass TankTest\npublic class TankTest {\npublic static void main(String[] args) {\n\nTank t0= new Tank(0.5, 4.0, 0.04);\n\nTank t1= new Tank(1.0, 1.0, 0.04);\n\nSystem.out.println(t0.getVolume()+\" \"+t1.getVolume());\n\nTank t2;\n\nt2= t1;\n\nt2.setRadius(1.1);\n// Easy to do accidentally\n\nSystem.out.println(t0.getVolume()+\" \"+t1.getVolume());\n\n// Note that t1s volume changed\n\nPipe2 p= new Pipe2(0.1, 10.0, t0, t1);\n\ndouble volume= p.getSystemVolume();\n\nSystem.out.println(\"System volume: \" + volume);\n}\n}\n// Same Tank class as lecture 7. See download.\n\nSummary-classes\n- Classes are a pattern for creating objects\n- Objects have:\n- A name (reference, which is actually a memory location)\n- A data type (their class)\n- We generalize this later; objects can be many types\n- A block of memory to hold their member data, allocated by\nthe new keyword\n- Member data, usually private, whose values are set by their\nconstructor, called when new is used\n- Member data can be built-in data types or objects of any kind\n- Member data is initialized to 0, 0.0 or false for primitive types\n- Member data is initialized to null (a keyword) for objects\n- Methods, usually public, to get and set member data\n- Methods, usually public, to do computation, using the\nmember data\nSummary- constructors\n- A constructor is a special method\n- Same name as the class\n- Has no return value (never responds)\n- Generally sets all data members to their initial values\n- Implements the existence behavior\n- Is called once when the object is first created with new i\na program that wants to use it\n- A class can have many constructors, though each must\nhave different arguments. For example:\npublic class Tank {\nprivate double radius;\nprivate double height;\npublic Tank() { height= 1.0; radius= 2.0;}\npublic Tank(double h) { height= h; radius= 2.0}\npublic Tank(double h, double r) {\n\nheight= h; radius= r; }\n...\nn\n\n}\n\nBuilding Classes\n- A window company has 3 plants\n- Parts plant A makes wood frames\n- Unit cost $25/frame\n- Parts plant B makes glass\n- Unit cost $5/pane\n- Assembly plant C, adjacent to plant B, assembles\nwindows\n- Unit assembly cost $12\n- How many classes? How many objects?\n- Well write the classes for this problem\n- There are many alternatives; we guide you to use a\nstraightforward one\n- This will not be a general solution. It will work only for one\nproduct, taking one frame and one pane of glass. It may\nseem too restrictive, but its a typical starting point.\n- Use the spiral model to make your solution more\ngeneral in a second or third pass.\nPartsPlant Class\n- Write the class PartsPlant for plants producing\none item: frames or glass. Ignore window assembl\nfor now. This is a recipe for making a plant\npublic class PartsPlant {\n// Data fields:\n_________________\n_________________\n// Constructor:\n_________________\n_________________\n_________________\n_________________\n\n// This is all outside the main() method. PartsPlant doesnt\n// have and doesnt need main(). Delete it if you have one.\ny\n\nPartsPlant Class Method\n- Dont write any set methods. The parts pl\ndata is set by the constructor and we wont\nchange it after that in this problem.\n// Get methods, for each private field:\n_________________\n_________________\n_________________\n_________________\n\ns\nant\n\nAssemblyPlant Class\n- We assemble one product from parts produced by\ntwo Plants. Write class AssemblyPlant:\nEclipse: New->Class: AssemblyPlant\n- This is a recipe for making an AssemblyPlant\npublic class AssemblyPlant {\n// Data fields: what is made, what parts plants are used, cost\n_________________\n_________________\n_________________\n_________________\n// Constructor\n_________________\n_________________\n_________________\n\nAssemblyPlant Class Methods\nDont write any set or get methods other than\nthe ones below.\n// Computational method (cost)\n_________________\n_________________\n_________________\n_________________\n_________________\n_________________\n_________________\n_________________\n// Get method to return name of product being\nassembled\n_________________\n_________________\n-\nmain()\nss, write a main() method to:\nparts plants. This uses their recipes to make\n- In a new cla\n- Create two\nobjects\n- Create assembly plant. This uses its recipe to make an objec\n- Find the cost of windows. Ask the AssemblyPlant object\n- Output window cost. Use System.out.println()\n- Output the name of the assembled product and its\ncomponents. Ask the objects; then use System.out.println()\npublic class GlassTest {\npublic static void main(String[] args) {\n_________________\n_________________\n_________________\n_________________\n_________________\n_________________\n}\nt\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Data Types, More Operators",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/1fd7b5cd647dac3dafd25a70bab14fb9_MIT1_00S12_Lec_4.pdf",
      "content": "1.00 Lecture 4\nData Types, Operators\nReading for next time: Big Java: sections 6.1-6.4\nPromotion\n\nData Type\nAllowed Promotions\n\ndouble\nNone\nincreasing capacity\n\nfloat\ndouble\n\nlong\nfloat,double\n\nint\nlong,float,double\n\nchar\nint,long,float,double\n\nshort\nint,long,float,double\n\nbyte\nshort,int,long,float,double\nJava performs promotions silently, from lower capacity\ntypes to higher capacity types, in operations and assignment (=)\nWhen doing binary operations, Java promotes byte or short to i\n- In all other cases it promotes the smaller to larger capacity\nDont mess around: just use int (long sometimes) and double\n-\n\n-\nnt\n-\n\nCasting\n- To convert a data type to a lower capacity type,\nyou must cast it explicitly\nlong s= 1000*1000*1000;\nint q= (int) s;\n- You are responsible for making sure the variable\nfits in the lower capacity representation\n- If it doesnt, you get no warning, and there is garbage in\nthe variable (more shortly on this topic)\n- You can cast variables into higher capacity types,\nif needed\n- In lecture 1, when computing the fraction grad students,\nyou could have cast int students to double\ndouble s2= (double) students;\nExercise\n- Create a new project Lecture4\n- Write a class CastTest\n- In the main() method:\n- Declare ints x1=17, x2=20 and x3=12\n- Try to declare an int 2x= 34. What happens?\n- Compute the average of x1, x2 and x3. Be careful.\n\n- Declare a long big= 9876543210L; (remember the L\n- Try to set int x4 = big and print x4. What happens?\n- Cast big to an int and see what happens.\n\nIf you have time:\n- Declare a double small= 2.0 -0.000000000000001\n- Enter number of zeros (14) exactly\n- Try to set int s= small. What happens?\n- Cast small to an int. Is this ok?\n)\n;\n\nArithmetic operators\nTable in precedence order, highest precedence at top\nOperators\nMeaning\nExample\nAssociativity\n++\nincrement\ni= d++; x= ++q;\nRight to left\n--\ndecrement\n--z; y= (a--) + b;\n\n+ (unary)\nunary +\nc= +d;\n- (unary)\nunary -\ne= -f;\n*\nmultiplication a= b * c * d;\nLeft to right\n/\ndivision\ne= f / g;\n%\nmodulo\nh= i % j;\n+\naddition\nk= m + n + p;\nLeft to right\n-\nsubtraction\nq= s - t;\n\n% operator defined only for integers\nArithmetic operator exercise\n- Create a class ArithmeticTest in Lecture4\n- Write a main() method in class ArithmeticTest\n- Set the number of 1.00 students to 136\n- Increment this by one, then decrement by one\n- Easy come, easy go, before add or drop date\n- Set the number of 1.001 students to 20\n- Find total students (1.00, 1.001), but increment the 1.00\nstudents by one first, all in one line\n- If we put students in groups of three, how many groups\nof three are there?\n- How many students are left over?\n- Use the debugger to see your answers\n- Dont write any System.out.println statements\n\n:\nPrecedence, associativity\n- Operator precedence is the order in which\noperators are applied. Do exercises on paper\n- Operators in same row have equal precedence\nint i=5; int j= 7; int k= 9; int m=11; int n;\nn= i + j * k - m;\n\n// n= ?\n- Associativity determines order in which\noperators of equal precedence are applied\nint i=5; int j= 7; int k= 9; int m=11; int n;\nn= i + j * k / m - k;\n\n// n= ?\n- Parentheses override order of precedence\nint i=5; int j= 7; int k= 9; int m=11; int n;\nn= (i + j) * (k - m)/k;\n// n= ?\nOperator exercises\n- What is the value of int n:\n- n= 1 + 2 - 11 / 3 * 5 % 4;\n\n// n= ?\n- n= 6 + 5 - 20 / 3 * 7 % 4;\n\n// n= ?\n- int i= 5; int j= 7; int k= 9;\n- n= 6 + 5 - ++j / 3 * --i % k--;\n\n//\nn= ?\n- i= 5;\n- n= i + ++i;\n\n// n= ?\n\n- // Dont ever do any of these!\n\nInteger arithmetic properties\n- Overflows occur from:\n- Division by zero, including 0/0 (undefined)\n- Programmer has responsibility to check and prevent\nthis\n- Java will warn you (by throwing an exception) if it cant\ndo an integer arithmetic operation\n- Accumulating results that exceed the capacity of\nthe integer type being used\n- Programmer has responsibility to check and prevent, as\nin zero divides\n- No warning is given by Java in this case\n\nFloating point exercise\n- Write a program to solve the following:\n- You have a 1 meter long bookshelf\n- There are things that are 0.1m, 0.2m, 0.3m, 0.4m and\n0.5m long\n- Starting with the smallest thing, place each on the\nbookshelf until you cant place any more\n- How many things can you put on the shelf?\n- How much space is left over?\n- Download BookshelfTest0, which has the\nskeleton of the code\n- This exercise demonstrates the imprecision of floating\npoint numbers\n- Java approximates the real number line with 264 integers\n\nFloating point exercise\npublic class BookshelfTest0 {\n\npublic static void main(String[] args) {\n\ndouble lengthLeft= 1.0;\n// Remaining space\n\nint booksPlaced= 0;\n\n// Books on shelf so far\n\ndouble length= 0.1;\n\n// Length of book\n\n// Your code here: try to place books of length 0.1, 0.2,\n\n// 0.3, 0.4, 0.5m on shelf. Loop while enough space\n\nSystem.out.println(Books placed: \"+ booksPlaced);\n\nSystem.out.println(\"Length left: \"+ lengthLeft);\n}\n}\n\nFloating point problem\n- How do we fix this?\n- Never use if (a == b) with floats or doubles\n- == is ok with integer types\n- Always use if (Math.abs(a - b) < TOLERANCE)\n- Where TOLERANCE is about 10-6 float or 10-15\ndouble\n- Or a variation on this if the operator is not ==\n- Add TOLERANCE to one side or the other in an\ninequality to accommodate the representation error\n- Correct the previous exercise\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Lab I - Inheritance",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/5d0d1cc6110d63ae6491835d50cbb7a7_MIT1_00S12_Lec_16.pdf",
      "content": "1.00 Lecture 16\nDesign Lab I\nReading for next time: Big Java: sections 2.11-2.13, 3.9\nDesign Lab\n- Focus is on problem formulation and design of\nclasses (data members and methods)\n- No solutions will be given in class\n- An example solution will be posted at 7pm tonight on\nthe Web site\n- Ask a lot of questions as you work through the\nlab\n- We encourage you to work with someone else\n- You do not have to finish the entire program\n- The emphasis is on the design choices and early stages\nof implementation\n\nExercise\n- Model the following:\n- A building contains a number of classrooms, faculty\noffices, and labs. It has a building number.\n- Each classroom has a number of seats, a number of\npower outlets,\n- And possibly a computer projector. Model this only if you\nhave time at the end.\n- Each faculty office holds two people (faculty and\nadministrator) and has a number of power outlets\n- Each lab holds a number of people and has a number of\npower outlets\n- And possibly lab equipment. Model this only if you have\ntime at the end.\n- Each room (classroom, office, lab) has a number.\n- The building has a wireless LAN.\nExercise, p. 2\n- Create methods, as appropriate, to:\n- Give the maximum number of people in the building.\n- Assume maximum classroom occupancy is the number of seats\n- At 10 seconds per occupant, give the evacuation time.\n- At 50 users per wireless LAN access point, give the\nnumber of access points needed\n- Give the number of power outlets in the building.\n- At 5 amps per outlet, projector, and wireless access\npoint, and 20 amps per piece of lab equipment, give the\ntotal power required in the building\n- Model the projector and lab equipment power only if you\nhave time at the end\n\nExercise, p.3\n- Write a test class with a main() method to:\n- Create one or more buildings\n- For each building:\n- Create one or more of each room type, with appropriate\ndata\n- Output the total power, LAN access points, evacuation\ntime and number of people/seats\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Lab II- Swing",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/5c7ac64e4599de6f0dc1b1082e5bf58a_MIT1_00S12_Lec_22.pdf",
      "content": "1.00 Lecture 22\nDesign Lab II\nReading for next time: Big Java 11.1, 19.1-19.2\nDesign Lab\n- Focus is on design and building of GUI\n- No solutions will be given in class\n- An example solution will be posted at 7pm tonight on\nthe Web site\n- Ask a lot of questions as you work through the\nlab\n- We encourage you to work with someone else\n- You do not have to finish the entire program\n- The emphasis is on the design choices and learning to\nuse Swing, not on the math.\n\nExercise\n-\nBuild an application to simulate the position of a ball in a box\n-\nThe GUI should allow the user to specify the height and\nwidth of the box. Use JTextFields.\n- The diameter of the ball is equal to the width of the box\n- Assume the user enters reasonable values\n-\nThe application should draw a visualization of the ball and\nbox whenever the user changes one of these values\n-\nIf you use model-view-controller, the model is very simple.\n- You dont have to use a model; you can have the view do any\ncalculations required. This program is just drawing, really computing.\n-\nNote the ambiguity in the problem, typical of real problems\n- Optional: Start the ball at the top of the box and use a timer to let it\nsettle to the bottom. (The compiler will ask you to make the Timer final,\nwhich is ok. See a TA if youre doing this.)\nYou dont\nhave to\nhandle this\none\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Lab III - Sensors",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/0f29b7c86bd518742650ff0ddcc2decd_MIT1_00S12_Lec_27.pdf",
      "content": "1.00 Lecture 27\nDesign Lab III\nReading for next time: Big Java 21.2-21.3\nDesign Lab\n- Focus is on design and building application with\nsensors and a GUI\n- No solutions will be given in class\n- An example solution will be posted at 8pm tonight on\nthe Web site\n- Ask a lot of questions as you work through the\nlab\n- We encourage you to work with someone else\n- You do not have to finish the entire program\n- The emphasis is on the design choices and learning to\nuse sensors and Swing, not on all the details.\n- One detail: ignore that the light sensor is not ratiometric\n- Put light sensor on port 3, slider on port 4\n- Put LEDs on digital ports 1 and 2\n\nExercise\nWrite lighting application with Phidgets and Swing:\n- Light sensor records the ambient light and provides input\nto the algorithm described below that decides whether to\nlight 1 or 2 LEDs.\n- Slider sensor (simulating an intelligent dimmer switch):\n- When slider level < 100, both LEDs are off.\n- When 100 <= slider level < 500, 1 LED is on.\n- When 500 <= slider level < 800, the number of LEDs turned on\ndepends on the light level reported by the light sensor.\n- Light level > 500 => 1 LED lit;\n- Otherwise both LEDs lit.\n- When slider level >= 800, both LEDs lit.\n- Swing GUI shows:\n- Current light sensor and slider sensor readings\n- Status of each LED: is it turned on or off?\n- Use g2.drawString() within paintComponent()\n-\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Inheritance II: Abstract classes, methods",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/c180189647d5d99c2a2120c61c263aa3_MIT1_00S12_Lec_14.pdf",
      "content": "1/21/12\n1.00 Lecture 14\nInheritance, part 2\nReading for next time: Big Java: sections 9.1-9.4\nExercise: Plants\n- Create a base class Plant: (File->New->Class)\n- Private Strings genus, species, boolean isAnnual\n- Write the constructor\npublic Plant( ...) { ... }\n- Create a derived class Tree: (File->New->Class)\n- Class declaration extends ________\n- Private data Strings barkColor, leafType\n- Write the constructor\npublic Tree( ...) { ... }\n- Use super( ... ) to call its superclass constructor\n- All trees are perennials\n\n1/21/12\nPlant Exercise, p.2\nCreate a derived class Flower: (File->New->Class)\n- Class declaration extends _______\n- Private data String petalColor\n- Write constructor\nCreate a derived class Rose: (File->New->Class)\n- Class declaration extends _____\n- Private data boolean isHybrid\n- Write constructor\n- All roses are perennials\n-\n-\nExercise, p.3\n- Write a class PlantTest\n- It has just a main() method, which:\n- Creates a Plant, Tree, Flower, Rose\n- Genus and species examples:\n- Rosa villosa (rose)\n- Quercus alba (white oak)\n- Narcissus jonquilla (daffodil)\n- Nabalus boottii (Bootts rattlesnake root)\n- The other data is:\n- Bark color= brown, leaf type= rounded for oak\n- Petal color= red for rose, yellow for daffodil\n- Rosa villosa is not hybrid\n- Nabalus is perennial, Narcissus is annual\n- Step through the debugger to see how the\nconstructors are called (Run->Debug as)\n\n1/21/12\nAbstract classes\n- Classes can be very general at the top of a class\nhierarchy.\n- For example, MIT could have a class PPerson, from\nwhich Employees, Students, Visitors, Faculty\ninherit\n- Person is too abstract a class for MIT to ever use in a\ncomputer system but it can hold name, address,\nbirthdate, etc. that is in common to all the subclasses\n- We can make Person an abstract class: Person objects\ncannot be created, but subclass objects, such as\nStudent, can be\n- Example:\npublic abstract class Person {\nprivate String name;\nprotected String address;\npublic Person(String n, String a) {\n\nname= n; address= a; }\n// And additional methods}\nAbstract classes, p.2\n- Another example (leading to graphics in the next\nlectures)\n- Shape class in a graphics system\n- Shapes are too general to draw; we only know how to\ndraw specific shapes like circles or rectangles\n- Shape abstract class can define a common set of\nmethods that all shapes must implement (e.g., draw()),\nso the graphics system can count on certain things\nbeing available in every concrete class\n- Shape abstract class can implement some methods that\nevery subclass must use, for consistency: e.g.,\ngetObjectID(), getForegroundColor()\n\n1/21/12\nShape class\npublic abstract class Shape {\npublic abstract void draw();\n// Drawing function must be implemented in each concrete\n// derived class but no default is possible: abstract\n\npublic void setVisible(boolean v) { ... }\n// setVisible function must be implemented in each derived\n// class and a default is available: non-abstract method\n\npublic final int objectID() { ... }\n// Object ID function: each derived class must have one\n// and must use this implementation: final method\n\n...};\n\npublic class Square extends Shape {...};\npublic class Circle extends Shape {...};\nAbstract class, method\n- Shape is an abstract class (keyword)\n- No objects of type Shape can be created\n- Shape has an abstract method draw()\n- draw() must be redeclared by any concrete (non-\nabstract) class that inherits it\n- There is no definition of draw() in Shape\n- This says that all Shapes must be drawable, but the\nShape class has no idea of how to draw specific shapes\n\n1/21/12\nNon-abstract method\n- Shape has a non-abstract method setVisible()\n- Each derived class may define its own setVisible method\nusing this signature, overriding the superclass method\n- Or it may use the super class implementation as a default\n- If it overrides the superclass method, it must have\nexactly the same signature as the superclass\nmethod\n- If you write a method with same name but different\narguments, its considered a new method in the subclass\n- Be careful. If new derived classes are added and you\nfail to review and, if needed, redefine non-abstract\nmethods, the default will be invoked but may do the\nwrong thing\n- E.g., kangaroos\nFinal method\n- Shape has a final method objectID\n- Final method is invariant across derived classes\n- Behavior is not supposed to change, no matter how\nspecialized the derived class becomes\n- Super classes should have a mix of methods\n- Dont make all abstract super class methods abstract\n- If you can make methods final, do so\nAn aside: final classes\n-\nTo prevent someone from inheriting from your class, declare it\nfinal:\npublic final class Grad extends Student { ...\n- This would not allow SpecGrad to be built\n- Class can have abstract, final or no keyword\n\n1/21/12\nExercise: Vehicle\npublic abstract class Vehicle {\n// In your download\nprivate int ID;\nprotected double mass;\nprotected double maxSpeed;\nprotected String name;\nprivate static int nextID= 1;\n\npublic Vehicle(double mass, double maxSpeed, String name) {\n\nID++;\n\nthis.mass = mass;\n\nthis.maxSpeed = maxSpeed;\n\nthis.name = name;\n}\n\n- Write abstract getSafetyRating() method\n- Write non-abstract getMaxEnergy() method\n- Returns 0.5*mass*maxSpeed2; used to design brakes\n- Write final method getID() that returns ID\nExercise, p.2\nconcrete Jeep class\nds Vehicle\n- Write a\n- Exten\n- Has additional private variable: double maxGrade (0-1.0)\n- Write constructor\n- Write getSafetyRating() method\n- Returns max( (100- 100*maxGrade - 0.5*maxSpeed), 0)\n- Must have same signature as base class (omit abstract)\n- What happens if you dont write one?\n- Write getMaxEnergy() method\n- Return 0.5*mass*maxSpeed2 + 9.8*mass*maxGrade*100\n- This reflects jeep use on steep grades\n- You are overriding the superclass method that Jeep inherits\nfrom Vehicle\n- You may call super.getMaxEnergy() but it is not mandatory\n- What happens if you dont write one?\n- Try to write a getID() method\n- What happens?\n\n1/21/12\nExercise, p.3\n- Write a class VehicleTest with main() that:\n- Tries to create a Vehicle object\n- What happens? Comment it out if it doesnt work.\n- Creates a Jeep object\n- Mass 2000 kg, maxSpeed 30 m/sec, max grade 0.2, jeep\n- Prints its safety rating\n- Prints its max energy\n- Prints its ID\nFun with animals\npublic class Bird {\npublic void fly();\n\n// Birds can fly\n// Method body omitted\n};\n\n1/21/12\nFun with animals\npublic class Bird {\npublic void fly();\n\n// Birds can fly\n// Method body omitted\n};\n\npublic class Ostrich extends Bird {\n// Ostriches are birds\n// Class body omitted\n};\n\nFun with animals\npublic class Bird {\npublic void fly();\n\n// Birds can fly\n// Method body omitted\n};\n\npublic class Ostrich extends Bird {\n// Ostriches are birds\n// Class body omitted\n};\n\n// Problems:\n// If superclass method fly() is final, Ostriches must fly\n\n// If superclass method fly() is abstract or non-abstract,\n// Ostrichs fly() can print an error, etc. Its clumsy\n\n// With inheritance, every subclass has every method and\n// data field in the superclass. You can never drop\n// anything. This is a design challenge in real systems.\n\n1/21/12\nPossible solutions\n\nBird\n\nBird\n\nOstrich\nRobin\nFlyingBird NonFlyingBird\n\nRobin\n\nOstrich\n\nDecision depends on use of system:\nIf youre studying feet, difference between\nflying and not flying may not matter\nMore issues\nQuadrilateral\nRectangle\n\n1/21/12\nMore issues\nmoveCorner()\nQuadrilateral\nRectangle\nMore issues\nQuadrilateral\nRectangle\nmoveCorner()\nmoveCorner()\n\n1/21/12\nMore issues\nQuadrilateral\nRectangle\nmoveCorner()\nmoveCorner()\nMust override the moveCorner() method in subclasses to move\nmultiple corners to preserve the correct shape\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Inheritance III: Interfaces",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/8ee550c82306ea4b562387c15d21db3d_MIT1_00S12_Lec_15.pdf",
      "content": "1.00 Lecture 15\nInterfaces, or\nWimpy Classes\nReading for next time: Big Java: sections 12.1-12.5\nInterfaces\n- Interface is an abstract base class with only:\n- Abstract methods\n- Constant (static final) data members\n- Interface is thus a wimpy superclass: just a set\nof abstract methods a subclass must implement\n- They are a to-do list for a subclass that implements them\n- A subclass that inherits from the interface must\nimplement all of its (abstract) methods, just as\nany (concrete) subclass inheriting an abstract\nmethod must implement it\n- You will use interfaces frequently in Swing (GUI),\nsensors, numerical methods and data structures\n\nInterfaces, p.2\n- Interface (wimpy class) is like an abstract class but:\n- If Java had only abstract classes, a subclass could only\ninherit from one superclass\n- Multiple interfaces (wimpy classes) can be implemented\n(inherited) in your class\n- Interfaces, such as Rotatable, cannot be instantiated\nRotatable shape1= new Rotatable(); // Error\n- You can declare objects to be of type interface\nRotatable shape1;\n\n// OK\n- They can be names for objects of a class that implements\nthe interface. If Rectangle implements Rotatable:\nRotatable shape1= new Rectangle(); // OK\n- Interfaces contain only abstract methods and constants\npublic interface Rotatable {\nvoid rotate(double theta); // Implicitly public\ndouble MAX_ROTATE= 360; } // Implicitly\n\n// public static final\nAbstract Classes vs. Interfaces\n- Abstract class has\n- Interface has\n- Static and instance\n- Only static final data\ndata members\nmembers (constant)\n- Concrete and/or\n- Only abstract methods\nabstract methods\n\n- Single inheritance\n- Multiple inheritance\n(via extends)\n(via implements)\n- Constructor\n- No constructor\n\nInterfaces and multiple\ninheritance\nBus\nLiquidFuel\nElectric\nID\ncapacity\ncost\nInterfaces and multiple\ninheritance\nBus\nLiquidFuel\nElectric\nID\ncapacity\ncost\nID\ncapacity\ncost\nrange\nemissionTier\nID\ncapacity\ncost\nvoltage\n\nInterfaces and multiple\ninheritance\nBus\nLiquidFuel\nElectric\nID\ncapacity\ncost\nID\ncapacity\ncost\nrange\nemissionTier\nID\ncapacity\ncost\nvoltage\nThe MBTA Silver Line to the airport is now built, and it uses dual mode\nbuses: electric in the South Station tunnel, and CNG powered the rest\nof the way to the airport.\nInterfaces and multiple\ninheritance\nBus\nLiquidFuel\nElectric\nID\ncapacity\ncost\nID\ncapacity\ncost\nrange\nemissionTier\nID\ncapacity\ncost\nvoltage\nHybrid\nWhat member data fields will Hybrid have (in C++)?\n\nInterfaces and multiple\ninheritance: methods\nBus\nLiquidFuel\nElectric\nID\ncapacity\ncost\ngetAccel();\nD\napacity\nost\nange\nmissionTier\netAccel() {}\nID\ncapacity\ncost\nvoltage\ngetAccel(){}\nHybrid\nWhich version of getAccel()\nshould Hybrid objects invoke?\nWhich does super.getAccel()\ncall?\nID\ncapacity\ncost\nrange\nemissionTier\nID\ncapacity\ncost\nvoltage\nI\nc\nc\nr\ne\ng\nInterfaces and multiple inheritance\n- Data members in classes with (C++) multiple\ninheritance can be duplicated in many cases\n- To prevent this, Java does not allow a class to extend\nmore than one class\n- A class may implement one or more interfaces\n- Java allows no data members in interfaces, only public\nstatic final (constant) fields that dont have this\ndifficulty\n- Which method to call in classes with multiple\ninheritance can be ambiguous\n- Java allows no concrete method bodies in interfaces,\nonly abstract methods that dont allow ambiguity\n- Both extend and implements inherit from a\nsuperclass\n- extend from a single full fledged class\n- implements from one or many wimpy classes\n\nJava interfaces\nBus\nLiquidFuel\nElectric\nID\ncapacity\ncost\ngetAccel();\ngetRange();\ngetEmissionTier();\nLOW_VOLTAGE\nHIGH_VOLTAGE\ngetVoltage();\nHybrid\nextends\nimplements\nHybrid inherits all fields, methods from super class, interfaces\nIt must declare range, emissionTier, voltage data members itself\nIt must have getRange(), getEmissionTier(), getVoltage(), getAccel() bodies\nQuestion: What happens if there is a getRange(); in Bus as well?\nInterface exercise\n// This abstract base class is in your Lecture 15 download\n\npublic abstract class Bus {\nprivate int ID;\nprivate int capacity;\nprivate double cost;\nprivate static int nextID= 1;\n\npublic Bus(int capacity, double cost) {\n\nID= nextID++;\n\nthis.capacity = capacity;\n\nthis.cost = cost;\n}\npublic abstract double getAccel();\npublic final int getID() {return ID;}\npublic int getCapacity() {return capacity;}\npublic double getCost() {return cost;}\n}\n\nInterface exercise, p.1\n- Download abstract base class Bus (previous slide)\n- Data members: ID, capacity, cost\n- Constructor\n- Abstract method double getAccel(), other getXXX() methods\n- Write interface LiquidFuel\n- In Eclipse: File->New->Interface\n- Write two method signatures:\n- double getRange(), int getEmissionTier()\n- Write interface Electric\n- In Eclipse: File->New->Interface\n- Write method signature double getVoltage()\n- Define constants HIGH_VOLTAGE=600, LOW_VOLTAGE=480\n- Both are doubles\nInterface exercise, p.2\n- Write a Hybrid class (File->New->Class, as usual)\n- extends _______ implements ________, ________\n- Data members voltage, range, emissionTier (plus inherited)\n- Write a constructor\n- Write getRange(), getEmissionTier(), getVoltage(), getAccel()\n- getAccel() always returns 4.0\n- Use Eclipse to help you:\n- After writing the data members, use Source-> Generate\nConstructor Using Fields\n- Click on the wavy red line under Hybrid and select Add\nunimplemented methods\n- Eclipse will add the method signatures to your class\n- It will also add an @Override annotation, which checks that the\nmethod signature matches the inherited signature\n\nInterface exercise, p.3\n- Write a CNGBus class (a liquid fueled bus)\n- Extend, implement appropriately\n- Data members: range, emissionTier (plus inherited)\n- Write constructor\n- Implement inherited abstract methods; getAccel()\nreturns 3.0\n- Use the same Eclipse features to help you:\n- Generate constructor\n- Add unimplemented methods\nInterface exercise, p.4\n- Write a BusTest class, with just a main method:\n- import java.util.*; at line 1 to be able to use ArrayList\n- Create one Hybrid and one CNGBus\n- CNG bus range 200 miles, emission tier 2, capacity 50, cost $1 million\n- Hybrid range 150 miles, emission tier 1, high voltage, capacity 45, cost\n$1.2 million (for each bus)\n- Create an ArrayList\n- ArrayList<what type?> arr= new ArrayList<what type?\n>();\n- Add the Hybrid and the CNGBus to the ArrayList\n- arr.add(h);\n- Loop through the ArrayList and invoke getEmissionTier()\nand getID() on each element, and print out the value\n- You must cast object types depending on the approach you use: either\n- ((LiquidFuel) b).getEmissionTier();\n// Or\n- ((Bus) liq).getID();\n\nInterface exercise p.5\n- Create new class ElectricBus that implements\nElectric\n- Use extends, implements appropriately\n- Data member voltage\n- Write constructor\n- Implement methods needed\n- getAccel() returns 5.0\n- Use Eclipse features to help you:\n- Generate constructor\n- Add unimplemented methods\nInterface exercise conclusion\n- Last, we create an ElectricBus object in BusTests\nmain()\n- Low voltage, capacity 55, cost $0.9 million\n- We add the ElectricBus object to the BusTest\nArrayList\n- We modify the ArrayList in BusTest, if necessary, so it can\nhold the ElectricBus object as well as the Hybrid and\nCNGBus.\n- Well need to have an ArrayList<Bus>\n- Java has a keyword instanceof\nif (b instanceof Electric)\ndouble v= ((Electric) b).getVoltage();\n- Print the voltage and/or emissionTier within the loop over\nArrayList in BusTes, as appropriate for each Bus object\n- Hybrid will have both, Electric just voltage, CNGBus just tier\n\nInheritance- key points\n- Super classes or base classes\n- Abstract or concrete\n- Sub classes or derived classes\n- Abstract or concrete\n- Inherit all data members and methods from superclass\n- Method types\n- Abstract method: no method body\n- Non-abstract method: use superclass version or override\n- Use super.<methodName>() to call superclass version of method\n- Final method: cannot be overridden\n- Constructor: use super() to call superclass constructor\n- Inheritance mechanisms\n- Extends: inherits data members, methods with bodies\n- Implements: multiple inheritance using interfaces\n- Inherits only method signatures, constants\n- Access: protected (or private, package or public)\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Inheritance: Subclasses",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/eab7ad6a45bf372d481365e3db7582ee_MIT1_00S12_Lec_13.pdf",
      "content": "1.00 Lecture 13\nInheritance\nReading for next time: Big Java: sections 10.5-10.6\nInheritance\n- Inheritance allows you to write new classes\nbased on existing (super or base) classes\n- Inherit super class methods and data\n- Add new methods and data\n- This allows substantial reuse of Java code\n- When extending software, we often write new code that\ninvokes old code (libraries, etc.)\n- We sometimes need to have old code invoke new code\n(even code that wasnt imagined when the old code was\nwritten), without changing (or even having) the old code\n- E.g., A drawing program must manage a new shape\n- Inheritance allows us to do this also\n\nAccess for inheritance\n- Class may contain members (methods or data) of\ntype:\n- Private:\n- Access only by classs methods\n- Protected\n- Access by:\n- Classs methods\n- Methods of inheriting classes, called subclasses or derived\nclasses\n- Classes in same package\n- Package:\n- Access by methods of classes in same package\n- Public:\n- Access to all classes everywhere\nA Programming Project\n- Department has system with Student class\n- Has extensive data (name, ID, courses, year, ) for all\nstudents that you need to use/display\n- Department wants to manage research projects better\n- Undergrads and grads have very different roles\n- Positions, credit/grading, pay,\n- You want to reuse the Student class but need to add very\ndifferent data and methods by grad/undergrad\n- Suppose Student was written 5 years ago by someone else\nwithout any knowledge that it might be used to manage\nresearch projects\n\npublic ... main(...){\nStudent S1= new Student\n(Jo,Wang, 1);\n...\nS1.printData();\n// Prints all data\n...\n}\n\nClasses and Objects\nEncapsulation Message passing\nMain method\nStudent S1\n\nlastName\nfirstName\ndept\nprintData\nprivate:\npublic:\nClass Student\n\nfirstName\nlastName\ndept\nprintData\nClass Undergrad\n\nunderWage\nunderHours\nfirstName\nlastName\ndept\nClass Grad\n\ngradSalary\nfirstName\nlastName\ndept\nprintData\ngetPay\nis-a\nprintData\ngetPay\nAlready written:\nis-a\nYou next write:\nInheritance\n\nClass Grad\n\ngradSalary\nfirstName\nlastName\ndept\nprintData\ngetPay\nClass SpecGrad\n\nfirstName\nlastName\ndept\nprintData\ngetPay\ngradSalary\nspecStipend\nis-a\nInheritance, p.2\nExercise: Student class\n- Write a public Student class as a base or super\nclass:\n- Two private variables: first name, last name\n- Constructor with two arguments\n- Void method printData() to print the first + last name:\n_________________________________________\n_________________________________________\n_________________________________________\n_________________________________________\n_________________________________________\n_________________________________________\n_________________________________________\n_________________________________________\n\nExercise: Undergrad class\n- Write an Undergrad class as a derived or subclass:\n- Class declaration:\n- public class Undergrad extends Student\n- Add private double variables underWage and underHours\n- Constructor: How many arguments does it have?\n- Invoke superclass constructor in 1st line of body:\nsuper( <arguments> ) // Use actual arguments\n- And then set the two new private variables as usual\n- Method getPay() returns double underWage *\nunderHours\n- Method printData() prints name and pay (void)\n- Use superclass printData() method to print name in 1st line:\nsuper.printData();\n- Write a second line to System.out.println weekly pay\nExercise: Grad class\n- Write a Grad class as a derived or subclass:\n- Class declaration: extends Student\n- Add private double variable gradSalary\n- Constructor: How many arguments does it\nhave?\n- Invoke superclass constructor in 1st line of body:\nsuper( <arguments> ) // Use actual args\n- And then set the new private variable\n- Method getPay() returns double gradSalary\n- Method printData() prints name and pay (void)\n- Use superclass printData() method to print name\non 1st line\n- Write second line to print monthly pay\n\nExercise: Special Grad class\n- Write SpecGrad class as derived or subclass:\n- Class declaration: extends _______\n- Add private double variable specStipend\n- Constructor: How many arguments does it have?\n- Invoke superclass constructor: super(<arguments>)\n- And then set the new private variable\n- Method getPay() returns double specStipend\n- Method printData() prints name and pay (void)\n- Use superclass printData() method to print name and\nmonthly salary (which is zero)\n- Write second line to print stipend\n- A special grad gets only a stipend, not a monthly\nsalary. Well discuss it in solutions.\nExercise: main()\n- Download class StudentTest\n- It has only a main() method, which:\n- Creates Undergrad ferd at $12/hr for 8 hrs\n- Prints Ferds data\n- Creates Grad ann at $1500/month\n- Prints Anns data\n- Creates SpecGrad mary at $2000/term\n- Prints Marys data\n- Creates an array of 3 Students\n- Sets array elements to ferd, ann, mary\n- Loops through the array and uses printData() on\neach Student object in the array to show their data.\n- What happens in the loop? Did you expect it?\n\nMain method\npublic class StudentTest {\npublic static void main(String[] args) {\nUndergrad ferd= new Undergrad(\"Ferd\", \"Smith\", 12.00, 8.0);\nferd.printData();\nGrad ann= new Grad(\"Ann\", \"Brown\", 1500.00);\nann.printData();\nSpecGrad mary= new SpecGrad(\"Mary\", \"Barrett\", 2000.00);\nmary.printData();\nSystem.out.println();\n\n// Polymorphism, and late binding\nJava has internal\nStudent[] team= new Student[3];\nteam[0]= ferd;\ntable with the\nteam[1]= ann;\nmost specific object\nteam[2]= mary;\ntype and chooses the\nfor (int i=0; i < 3; i++)\nappropriate method\nteam[i].printData();\n}\nat run time\n}\nInheritance: Type set at runtime\n- We can write a variation on StudentTest to\nprompt the user to pick a student type\n(undergrad, grad, special grad) with a\nJOptionPane, and then enter the needed data\n- The Undergrad, Grad or SpecGrad object would be\nplaced in the team array\n- When this program is compiled it has no way of\nknowing what kinds of Students will be added to\nthe team array by a user\n- When the program is run and objects are added,\ntheir types are dynamically tracked\n- In the team array, each objects specific printData()\nmethod will be invoked\n\nimport jaStudentTest with input\nvax.swing.*;\n\nc class StudentTestWithInput {\nlic static void main(String[] args) {\npubli\npub\nStudent[] team = new Student[3];\nfor (int i= 0; i < team.length; i++) {\nString type = JOptionPane.showInputDialog(\"Enter type\");\nString fname = JOptionPane.showInputDialog(\"Enter fname\");\nString lname = JOptionPane.showInputDialog(\"Enter lname\");\nString payStr = JOptionPane.showInputDialog(\"Enter pay\");\ndouble pay= Double.parseDouble(payStr);\nif (type.equals(\"Grad\"))\nteam[i]= new Grad(fname, lname, pay);\nelse if (type.equals(\"SpecGrad\"))\nteam[i]= new SpecGrad(fname, lname, pay);\nelse\nteam[i]= new Undergrad(fname, lname, pay, 8.0);\n}\n// Polymorphism, and late binding\nfor (int i = 0; i < 3; i++) {\nSystem.out.print(team[i].getClass()+ \": \");\nteam[i].printData(); } } }\nExercise\n- In class Grad:\n- Change printData() to use getPay() instead of\nexplicitly printing gradSalary\n- Save/compile and run StudentTest\n- What happens?\n\n- Why?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Abstract Classes/Methods and Interfaces",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/4064e7ca7613e3468601fdf1ef54944b_MIT1_00S12_REC_6.pdf",
      "content": "1.00/1.001\nRecitation 06\nAbstract Classes/Methods and Interfaces\nMarch 19th & 20th 2012\n\nTopics\n- Abstract Classes (extends)\n- Interfaces (implements)\n- Polymorphism\n- Problem Set 5\n\nAbstract Classes: Content\n- Some data members, like any class\n- Some methods implemented (concrete)\n- Some methods declared, but\nunimplemented (abstract)\n- We generally know what the method does\n- How the method performs may be different\nfor different objects\n\nAbstract Classes: Coding\n- Abstract classes cannot be instantiated.\n- Instantiate (v.) - use the \"new\" keyword to create\na new Object (or instance of a class)\n- Some methods remain unimplemented.\n- Subclasses must implement all abstract\nmethods, or must also be abstract classes.\n- Why make a method abstract?\n- Provide some default behaviors in concrete\nmethods\n- Programmer is FORCED to implement methods in\na subclass before any object can be instantiated.\n\nabstract Keyword\npublic abstract class MyClass {\n\n// data members\n\nprivate int myDataMember;\n\npublic MyClass (int md){\n// concrete methods have'bodies' or definitions\nmyDataMember = md;\n}\n\npublic int getData(){\n// concrete method\nreturn myDataMember;\n}\n\npublic abstract int calc(int factor);\n\n// abstract methods omit the âbodyâ\n}\nË\nË\nË\n\nextends Keyword\npublic class AnotherClass extends MyClass{\n\npublic AnotherClass (int md){\n// call constructor from \"parent\" or super class\nsuper(md);\n}\n\n// implement all abstract methods\n\npublic int calc(int factor){\n\nreturn factor * factor;\n\n}\n}\nË\n\nAbstract Classes: Exercise 1 p.1\n1) Write an abstract class Shape\n- Data members: numSides\n- Constructor: initialize numSides\n- Concrete method: get method for numSides\n- Abstract methods: getArea(), getPerimeter()\n2) Write a concrete subclass Rectangle\n- Data members: width, height\n3) Write a concrete subclass RtTriangle\n- Data members: width, height\n4) In another class, write a main method to\ndefine a Rectangle and a Triangle.\n\nSolution: Shape\n\npublic abstract class Shape\n{\nprivate int numSides;\n\npublic Shape( int newSides)\n{numSides = newSides;}\n\npublic int getNumSides()\n{return numSides;}\n11 public abstract double getArea();\n12 public abstract double getPerimeter();\n13 }\n\n1) Write an abstract class Shape\n- Data members: numSides\n- Constructor: initialize numSides\n- Concrete method: get method for numSides\n- Abstract methods: getArea(), getPerimeter()\n2) Write a concrete subclass Rectangle\n- Data members: width, height\n3) Write a concrete subclass RtTriangle\n- Data members: width, height\n4) In another class, write a main method to\ndefine a Rectangle and a Triangle.\nAbstract Classes: Exercise 1 p.2\n\nAbstract Classes: Exercise p.3\n1) Write an abstract class Shape\n- Data members: numSides\n- Constructor: initialize numSides\n- Concrete method: get method for numSides\n- Abstract methods: getArea(), getPerimeter()\n2) Write a concrete subclass Rectangle\n- Data members: width, height\n3) Write a concrete subclass RtTriangle\n- Data members: width, height\n4) In another class, write a main method to\ndefine a Rectangle and a Triangle.\n\nAbstract Classes: Exercise p.4\n1) Write an abstract class Shape\n- Data members: numSides\n- Constructor: initialize numSides\n- Concrete method: get method for numSides\n- Abstract methods: getArea(), getPerimeter()\n2) Write a concrete subclass Rectangle\n- Data members: width, height\n3) Write a concrete subclass RtTriangle\n- Data members: width, height\n4) In another class, write a main method to\ndefine a Rectangle and a Triangle.\n\nInterfaces\n- \"Its like a checklist\": Class that implements an\ninterface must implement/define all methods\ndeclared in the interface.\n- A set of related method declarations.\n- All method declarations omit the body.\n- Constants may be defined.\n\n- Why use interfaces?\n- Define a set of behaviors\n- Allow \"multiple inheritance\" by implementing multiple\ninterfaces\n\nAbstract Classes vs. Interfaces\n- Abstract Classes have\n- Static and instance data\nmembers\n- Concrete and/or abstract\nmethods\n- Single inheritance\n(via extends)\n- Constructor\n- Interfaces have\n- Static final data members\n(constant)\n- All methods abstract\n- \"Multiple Inheritance\"\n(via implements)\n- No constructor\n\nRemember Abstract Class Shape\nand Subclass Rectangle?\npublic abstract class Shape {\n\nprivate int numSides;\n\npublic Shape(int numSides){\n\nthis.numSides =\nnumSides;\n\n}\n\npublic double getNumSides()\n{\n\nreturn numSides; }\n\npublic abstract double\ngetArea();\n\npublic abstract double\ngetPerimeter();\n}\npublic class Rectangle extends\n\nShape {\n\nprivate double height, width;\n\npublic Rectangle(double w,\n\ndouble h) {\n\nsuper(4);\n\nthis.height = h;\n\nthis.width = w;\n\n}\n\npublic double getArea() {\n\nreturn height * width;\n\n}\n\npublic double getPerimeter() {\n\nreturn 2 * (height + width);\n\n}\n}\n\nInterface: Exercise 2 p.1\n1) Write an interface Resizable\n- Has a method resize(double x) that\nresizes a Shape's dimensions by factor x\n2) Make Rectangle implement Resizable\n3) Write a main method to:\n- Define a Rectangle (width = 2, height = 3)\n- Print the Rectangleâs area & perimeter\n- Resize the Rectangle by factor of 2\n- Re-print the Rectangleâs area & perimeter\n\nInterface: Exercise 2 p.2\n1) Write an interface Resizable\n- Has a method resize(double x) that\nresizes a Shape's dimensions by factor x\n2) Make Rectangle implement Resizable\n3) Write a main method to:\n- Define a Rectangle (width = 2, height = 3)\n- Print the Rectangleâs area & perimeter\n- Resize the Rectangle by factor of 2\n- Re-print the Rectangleâs area & perimeter\n\nInterface: Exercise 2 p.3\n1) Write an interface Resizable\n- Has a method resize(double x) that\nresizes a Shape's dimensions by factor x\n2) Make Rectangle implement Resizable\n3) Write a main method to:\n- Define a Rectangle (width = 2, height = 3)\n- Print the Rectangleâs area & perimeter\n- Resize the Rectangle by factor of 2\n- Re-print the Rectangleâs area & perimeter\n\ninstanceof Keyword\n- The instanceof operator compares an object to a\nspecified type.\n- You can use it to test if an object is:\n- an instance of a class,\n- an instance of a subclass,\n- or an instance of a class that implements a\nparticular interface.\nSource: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html\n\npublic class Animal {\n//body hidden\n}\npublic class Cow extends Animal{\n//body hidden\n}\nHere class Lion and Cow extends Animal\ninstanceof Example\npublic class Lion extends Animal{\n//body hidden\npublic void roar(){//body hidden}\n}\n1 public static void main(String[] args) {\n2 Animal[] zoo= new Animal[2];\n4 zoo[0] = new Cow();\n5 zoo[1] = new Lion();\n7 for( int i =0; i<zoo.length; i++){\nAnimal a = zoo[i];\n9 if( a instanceof Lion){ //test using instanceof keyword\nSystem.out.println(\"Animal \" + i + \" is a Lion\");\n11 Lion l = (Lion) a; //Cast the Object to a Lion\n12 l.roar(); //Call a method in the Lion class\n}\n\n14 }\n\nPrints: Animal 1 is a Lion\n\nPolymorphism: Exercise\n- Write a main method\n- Create a Rectangle and a RtTriangle\n- Add them to an ArrayList of *Shapes*\n- Iterate through the Shapes in the ArrayList\n- If the Shape is Resizable, resize it by a factor of 0.5\n- Print out perimeter and area\n\n- Write a program to model MBTA vehicles\n- Three types of vehicles: Bus, Urban Rail,\nand Commuter Rail\n- Three kinds of Right-of-Way: Dedicated,\nShared, and Mixed (Hybrid)\nProblem Set 5\n- This homework tests your knowledge of inheritance. Your\nsolution must inherit as much as possible from the superclasses\nand/or interfaces.\n- Be sure to use at least one of EACH of the following in your\nsolution: abstract class, interface, abstract method, final method.\n- Hint: The trick is to determine if the set of Route Types and\nROW Types should be Interfaces or Classes (Inheritance\nstructure)\n-\nWhich Types require \"multiple inheritance\"?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class and Objects",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/68528dc62eb8b1e055abbeccab786408_MIT1_00S12_REC_3.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\n\nRecitation 3\nClass and Objects\n\nSpring 2012\n\nScope\n- One method cannot see variables in another;\n- Variables created inside a block: { ... } exist from point of\ndefinition to end of block\n- Variable declaration and assignment can be separated\nto control scope:\n\npublic static void main (String[] args){\n\ndo{\n\nString input = JOptionPane.showInputDialog(\"1-cont, 0-stop\");\n\nint repeat = Integer.parseInt(input); // assignment\n\n} while (repeat == 1);\n}\nint repeat; // declaration\nWhat's wrong\nwith this?\nHow to fix it?\n\nAnatomy of a Class\npublic class Capacitor {\n\nprivate double capacitance;\n\npublic Capacitor(double c){\n\ncapacitance = c;\n\n}\n\npublic double getCap (){\n\nreturn capacitance;\n\n}\n\npublic void setCap (double c){\n\ncapacitance = c;\n\n}\n}\nClass Name\n(Capacitor.java)\nData Member\nConstructor\n\"Getter\"\n\"Setter\"\nMethods\n\nClass Naming Conventions\npublic class Capacitor {\n\nprivate double capacitance;\n\npublic Capacitor(double c){\n\ncapacitance = c;\n\n}\n\npublic double getCap (){\n\nreturn capacitance;\n\n}\n\npublic void setCap (double c){\n\ncapacitance = c;\n\n}\n}\nClass name is capitalized\nVariable names should\nstart with a lowercase\nConstructor name\nmatches class name\n(mandatory)\nGetters and Setters:\ngetVariable\n\nsetVariable\nMethod names should\nstart with lower case\n(except constructor)\n\nCreating Objects\nA class is a template to create objects.\nTerminology: An object is an instance of a class.\n\n// declare capacitor\nCapacitor cp;\n\n// call constructor\ncp = new Capacitor(0.001);\n\nCapacitor is the type of\nthe variable cp\n(like int n, double x, ...)\nThe new keyword allocates\nmemory for the object and\ncalls its constructor\n// declare and instantiate in one line\nCapacitor cp = new Capacitor(0.001);\n\nUsing Objects\nUse public methods to access and modify private data members\n\n// create a capacitor\nCapacitor cp = new Capacitor(0.001);\n\n// change its capacitance\ncp.setCap(0.05);\n\n// print the capacitance\nSystem.out.println(cp.getCap())\n\nThe dot operator calls a\nmethod of a class on a\nparticular instance of\nthat class.\nThe getCap() method\nreturns a double\nâ cp.getCap() is \"seen\"\nas a double\n\nObjects Exercise\nIn the main method of a test class:\n\n- Create a first capacitor of capacitance 0.05\n- Create a second capacitor of same capacitance\n- Double the capacitance of the first capacitor\n- Set the capacitance of the second capacitor to be\ntwice the capacitance of the first one.\n- Print out both capacitances.\n\nObjects and Object References\nCapacitor cp;\n\nCapacitor cp = new Capacitor(0.001);\n\nCapacitor\ncapacitance = 0.001\nObject\nObject Reference\ncp =\ncp =\n\nObjects and Object References\n\nPrimitive types are NOT objects. A variable of primitive type\nholds its data:\n\nint n = 5;\n\ndouble x = 3.2;\n\nA variable of any other type holds a reference to an object:\n\nCapacitor cp = new Capacitor(0.001);\n\nn = 5\nx = 3.2\nCapacitor\ncapacitance = 0.001\ncp = 0x4646\n\nClass Design Exercise\nWe will model birds sitting on a branch.\n- Each bird has its own weight.\n- A branch can hold more than one bird but will break\nif a certain weight is exceeded.\n\nClasses? Data members? Methods?\n\nKeyword : this\nthis: refers to the current instance (or current object)\npublic class Tank {\n\n...\n\npublic boolean isSameVolume(Tank t) {\n\nif (this.equals(t)) // Use .equals, not ==\n\nreturn true; // when comparing objects\n\nelse\n\nreturn (getVolume() == t.getVolume());\n\n}\n}\npublic class TankTest {\n\npublic static void main(String[] args) {\n\nTank t0 = new Tank(1, 2, 3);\n\nTank t1 = new Tank(1, 1, 3);\n\nSystem.out.println(t0.isSameVolume(t1));\n\n}\n}\nOutput: false\n\nKeyword : null\nnull is the reserved constant used in Java to represent\na void reference.\nCapacitor cp = new Capacitor(0.001);\n\ncp = null;\n\nCapacitor\ncapacitance = 0.001\ncp = 0x4646\n\ncp = null\n\nHomework 3: Buy a used car\nClasses you'll need:\n-\nA UsedCarLot class\n-\nA Car class\n-\nA DriverRating class\n-\nA test class with main()\nToyota\nHonda\nChevrolet\nBMW\nPrice\n18,000\n20,000\n17,000\n26,000\nYears old\n0.5\nMPG\nDriver rating\nToyota\nHonda\nChevrolet\nBMW\nBad\nOK\nGood\nScore = (26,000 - Price)/3000 - 0.2*(Years old) + 0.2*(MPG-25) + Driver rating\nDriver rating = (Good + (0.5*OK) - Bad)/Total\nWhat you'll need to do:\n-\nPrint driver rating for each car\n-\nCompute score for each car\n-\nUpdate scores after additional reviews\n-\nPrint cars less than 1 year old\n-\nPrint % of bad reviews for each car\nWhere to put\nwhich method?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Iteration and Methods",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/e60f807428abe7e77fefab1930cc1a41_MIT1_00S12_REC_2.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\n\nRecitation 2\nIteration and Methods\n\nSpring 2012\n\nQuick Exercise: Increment Operator\nint a = 1;\nint b = a + a++;\nWhat is the value of a and b at the end of each code fragment?\nint a = 1;\nint b = a + ++a;\nint a = 1;\nint b = a++ + a;\nint a = 1;\nint b = a*++a;\nint a = 1;\nint b = (a++ + 2)*a;\nint a = 1;\nint b = a++ + a + a++;\n\nIteration (Loops)\nwhile (condition to continue)\n{\n// repeat as long as condition = true\n}\ndo\n{\n// run once and repeat as long as condition = true\n}\nwhile (condition to continue);\nfor (initial statement, condition to continue, increment statement)\n{\n// execute initial statement\n// repeat as long as condition = true\n// execute increment statement after each repetition\n}\n\nwhile vs. do...while\ndouble weight = 0;\nwhile (weight < 40) {\nString s = JOptionPane.showInputDialog(\"Enter Weight\");\nweight = Double.parseDouble(s);\n}\ndouble weight;\ndo {\nString s = JOptionPane.showInputDialog(\"Enter Weight\");\nweight = Double.parseDouble(s);\n}\nwhile(weight < 40);\n// Declaration and Initialization\n// Declaration only\nNO semicolon!\nsemicolon!\n\nwhile vs. for\nwhile loops and for loops are often interchangeable.\n\nWhat does the following loop do?\nint i = 0;\n\nwhile (i < 5) {\nSystem.out.print(i + \" \");\ni++;\n}\nHow would you do the same thing with a for loop?\n\nCommon for loop errors\n(Check these first if you get\nunexpected results)\nfor (int i = 0; i > 5; i++); {\nSystem.out.println(i + \" \");\n}\nCommon errors in declaring for loops:\n1) Incorrect termination statement\n-\nRemember, the loop will only run as long as the termination is TRUE\n-\nMake your termination statement to be true as long as you want the loop to run,\nnot when you want it to stop\n2) Semicolon after loop declaration\n-\nThe for loop and all loops exist inside brackets - brackets are a way of grouping\nbits of code for execution\n-\nThe semicolon terminates a line. Java will move to the next line and won't know\nto associate the for loop with what is in the brackets\nEmpty statement!\nWhat does this code do?\nTerminates\nimmediately!\n\nwhile vs. for\nThe method uses a for loop to raise x to the power of n.\n\npublic static double power(double x, int n) {\n\n}\nWrite a while loop version\n\npublic static double power(double x, int n) {\n\n}\ndouble result = 1;\nfor (int i = 1; i <= n; i++)\nresult *= x;\nreturn result;\n\nWhat does\nthis code do?\n\nNested Loops\nWhat does the following double loop print?\nint i = 0;\nwhile (i < 3)\n{\ni++;\nfor (int j = 0; j <= i; j++)\n{\nSystem.out.println(10*i + j);\n}\n}\nCan you get rid of the some braces {} and keep the same output?\n\nMethods\nWhat is a method?\n\nWhere do you write methods?\n\nHow many methods per class?\n\nHow many main() method(s) per class?\n\nMethod Signature\nExample: a power method that raises any number x to an integer power n\npublic static double power(double x, int n)\nfor now, take\npublic static\nas a template\nReturn type\n(output type)\nName\nArguments\n(input)\n- A method has a single return type: it can only return one \"thing.\"\n- If nothing is returned, the return type is void.\n- The number of arguments is not limited.\n\nExercise: Income Tax Calculator\nIncome Bracket\nTax rate (%)\n0 - 5,000\n5,000 -12,500\n> 12,500\nFor example, if income = 13,000:\ntax = 0.07 * (12,500 - 5,000) + 0.16 * (13,000 - 12,500)\n\nUsing the following tax brackets, write a method to compute\nthe tax applicable to any income.\n\nMethod signature?\n\nExercise: Income Tax Calculator\npublic static double calcTax(double inc) {\nif (inc < 5000)\n\nreturn 0;\nelse if (inc < 12500)\n\nreturn 0.07 * (inc - 5000);\nelse\n\nreturn 0.07 * (12500 - 5000) + 0.16 * (inc - 12500);\n}\nWhat if you use an else if instead of an else for the third case?\n\nPassing Arguments to Methods\npublic static void main(String[] args) {\n\ndouble a = 2.0;\n\nint b = 3;\n\ndouble p = power(a, b);\n}\n\npublic static double power(double x, int n) {\n\ndouble result = 1.0;\n\nwhile (n > 0) {\n\nresult *= x;\n\nn--;\n\n}\n\nreturn result;\n}\n2.0\n8.0\nPrimitives are passed \"by value\".\n\nExercise: Methods\nYou will write a method to compute binomial coefficients.\n\nThe binomial coefficient can be computed as:\n\nWhere x! is the factorial operator (e.g. 5! = 5 * 4 * 3 * 2 * 1)\n!\n)!\n(\n!\nk\nk\nn\nn\nk\nn\n\nk\nn\nStrategy?\n\nFactorial Method\n// for loop version\n\n// while loop version\n\nBinomial Method\n// putting it all together\nUsing methods avoids code repetition!\n!\n)!\n(\n!\nk\nk\nn\nn\nk\nn\n\nHomework 2: Throw ball in basket\nMain method should:\n-\nPrompt user for input\n-\nCall the following methods:\n-\nCompute optimal angle\n-\nCompute smallest angle\n-\nCompute largest angle\n-\nCompute max height\n-\nDetermine if ball hits ceiling\n-\nAdjust velocity incrementally until\nball does not hit ceiling anymore\n-\nPrint all results to console\nMath is an existing library in Java\n\nExample methods in Math class:\n# = Math.cos()\n= Math.asin(#)\nxy = Math.pow(x,y)\n= Math.PI\nMath methods\nare in radians!\nT\nr\naj\ne\nc\ntory of ball thrown into basket.\nImage by MIT OpenCourseWare.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "JAVA and Eclipse - Data Types, Variables, Logical Operators",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/c7518d1699da39db2805f59dba1d4a84_MIT1_00S12_REC_1.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\n\nRecitation 1\nJava and Eclipse\nData Types, Variables, Logical Operators\nFebruary 13, 2012\n\nOutline\n- Administrative\n- Java and Eclipse\n- Data Types\n- Variables\n- Logical Operators\n- Homework 1\n\nReminders\nOffice Hours\n- Wednesday\n5pm - 10pm\n\n- Thursday\n5pm - 10pm\n\n2 Friday Quizzes: March 9 & April 13\nReview session before all quizzes and finals.\n- Wed. March 7\n7pm - 9pm\n\n- Wed. April 11\n7pm - 9pm\n\n- Wed. May 16\n7pm - 9pm\n\nAcademic Honesty Form - Read it! Sign it!\n\nGrading\nHomework (10)\n\n40%\nActive Learning Exercises\n10%\nQuiz 1 (March 9)\n\n12%\nQuiz 2 (April 13)\n\n12%\nFinal Exam (TBA)\n\n20%\nRecitation Participation\n6%\n\nSchedule\nFebruary\nMarch\nApril\nMay\nIntroduction to\nJava:\nOperators,\nControl,\nData Types,\nMethods,\nClasses & Objects,\nArrays & ArrayLists\n\nStreams, Sensors &\nThreads\nInheritance,\nInterfaces\nData Structures\nGraphical User\nInterfaces\nNumerical\nMethods\nQuiz 2\nQuiz 1\nFinal\n\nHomework\n-\nHard copy available in lecture a week before due date (2 weeks if quiz)\n-\nElectronic copy available a week before the hard copy\n-\nDue on Friday at 12 noon.\n-\nSubmissions accepted until 12 noon on Monday, with a 30-point penalty\n-\n1 no-penalty late submission (still before Monday 12 noon) - You still must turn in\nyour pset!\n-\nA submission is considered late if it has a late tag on the website\n-\nMake sure you submit your .java files, and not your .class files\n-\nGroup multiple files in a .zip folder\n-\nEvery .java file must start with your name, MIT email and section number\n-\nWe do not omit your lowest problem set.\n\n// Tim B. Ver\n// Student's e-mail address\n// 1.00 Problem Set 1 - Terminal Velocity\n// 9-15-2011\n// TA:\n// Section No. R11\n\nActive Learning Exercises\n-\nJava files to be downloaded before almost every lecture\n-\nExercises are included in the lecture notes and often use the downloaded\nfiles\n-\nSubmit your solutions in the Homework section of the website before 8pm.\nNo late submissions allowed.\n-\nJava solutions are released in the Homework section\n-\nPDF solutions and lecture notes including the solutions are released in the\nIn-Class Exercises section\n-\nYou can download the lecture notes and the Java files and submit your\nexercises a week before lecture\n-\nComplete the exercises for 30 lectures to get full credit (10% of final grade)\n\nWhat you Installed\nHardware\n\nIntel\n32 bit\n\nIntel\n64 bit\n\nAMD\n64 bit\n\nJava\nJRE / JDK\n\nIntel\n32 bit\nJVM\n\nIntel\n64 bit\nJVM\n\nAMD\n64 bit\nJVM\n\nCompiler\n\nOne Compiler\nMultiple Virtual\nMachines (JVM)\nEclipse\n\nText Editor\n\n.java File\n\n.class File\n\n.java File\n\n.class File\nDon't submit your .class files !\n\nJava Data Types\nType\nSize (bits)\nRange\nboolean\ntrue or false\nchar\nISO Unicode character set\nbyte\n-128 to 127\nshort\n-32,768 to 32,767\nint\n-2,147,483,648 to 2,147,483,647\nlong\n-9,223,372,036,854,775,808L to\n9,223,372,036,854,775,807L\nfloat\n+/- 3.4E+38F (6-7 significant digits)\ndouble\n+/- 1.8E+308 (15 significant digits)\n8 primitive data types\n\nJava Data Types\n\nstudentCount = 142;\n\nfirstLetter = 'a';\n\nweight = 180.6F;\n\narea = Math.PI * 5.0 * 5.0;\n\nenjoy100 = true;\n\ntheNumberOne = 1L;\n\nlargeNumber = 1.0E100;\nint\nchar\nfloat\ndouble\nboolean\nlong\ndouble\nWhich data type would you use for:\n\nJava Data Types\nboolean\nchar\nbyte\nshort\nint long\nfloat double\n\nIn practice, we will mostly use:\n\nboolean\n\nto represent logic\n\nint, long and double\nto represent numbers\n\nFor text, we will use Strings, which are chains of char.\ne.g.\nString text = \"Welcome to 1.00\";\nA String is an object, not a primitive data type.\n\nVariables\nData is held in variables\n\nint studentCount = 142;\nvariable type\nvariable name\nvariable value\n- The value on the right is assigned into the left variable name.\n\n- The type of each variable must be declared: Java is a strongly-typed language.\n\n- Variable names typically start with a lowercase letter.\n\n- The variable value must \"fit\" in the variable type.\nassignment\noperator\n\nVariables\nboolean b = 1;\n\ndouble studentCount = 142;\n\nbyte preRegCount = 110;\n\nint 2 = facultyCount;\n\nAre these variable declarations acceptable? If yes, are they ideal?\n\nBranching: if ... else\nif (x < 0)\n\nSystem.out.println(\"x is Negative\");\nelse if (x == 0)\n\nSystem.out.println(\"x is Zero\");\nelse\n\nSystem.out.println(\"x is Positive\");\nif (x == 0)\n\nSystem.out.println(\"x is Zero\");\nelse\n\nSystem.out.println(\"x is NonZero\");\n- if ... else\n- if ... else if ... else\n\nBranching: if ... else\n// e.g. Take the absolute value and notify the user\n\nif (x < 0){\n\nx = -x;\n\nSystem.out.println(\"x has been converted\");\n}\n// e.g. Take the absolute value of x\n\nif (x < 0)\n\nx = -x;\n- The else statement is not required to terminate branching.\n- Use braces {} to execute multiple statements.\n\nIteration (Loops)\nwhile (condition to continue)\n{\n// repeat as long as condition = true\n}\ndo\n{\n// run once and repeat as long as condition = true\n}\nwhile (condition to continue)\nfor (initial statement; condition to continue; increment statem\n{\n// execute initial statement\n// repeat as long as condition = true\n// execute increment statement after each repetition\n}\nent)\n\nHomework 1\nMagnetic Inductance\nDue: February 17, 2012\nCompute magnetic inductance for 3\ndifferent types of antennae:\n\n1.Line antenna\n2.Coil antenna\n3.Rectangular antenna\n\nAlso, if (hint) the user selects a coil\nantenna, and or a rectangular\nantenna, you will calculate the\nmutual inductance.\nConsiderations:\n\n-Ask the user which antenna type\n-Parse user inputs using input dialog\n-Execute the user's desired calculations\n-Print inductance value(s)\n-Depending on antenna type, you will\nalso be calculating mutual inductance\nMutual ind\nuc\nta\nnce by the coupling of two coils via a partial magnetic flow.\nImage by MIT OpenCourseWare. Adapted from Figure 4.8 Finkenzeller,\nKlaus (2003). RFID Handbook (2nd Edition). Wiley.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Linked Lists, Sorting, Stack & Queues",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/2369db51289b31796f032c4a58f18892_MIT1_00S12_REC_12.pdf",
      "content": "Announcements\n- FINAL EXAM Monday May 21, 1:30pm\n- Review Session\n- Wednesday May 16, 7-9pm\n\nRecitation 12\nRoot Finding, Sorting, Stacks, Queues\n\nOutline\n- Linked Lists\n- Sorting\n- Queues\n\nObject References\nLet's start with a class called \"Node\"\nNode.java\nclass Node{\n\n}\nNode.java\n(Node object)\nn\nn2\nThese are object references. Notice how there is only ONE object, and each reference\n\"refers\" to it.\nTo create an instance of Node:\nNode n = new Node();\nNode n2 = n;\n\nFun with References\nLet's add to our Node class\nNode.java\nNow, let's use the following code:\nNode n1 = new Node();\nNode n2 = new Node();\nn2.next = n1;\nn1.next = n2;\nclass Node{\n\nNode next;\n}\nNode.java\nnext\nn1\nnext\nn2\n\nSerious Work with References\nLet's add a data member to store some information.\n(It could be a primitive type or an object reference...\nor anything else you want)\nNode.java\nNow, let's use the following code:\nNode first =\nfirst.value=1;\nfirst.next =\nfirst.next.value=2;\nfirst.next.next =\nfirst.next.next.value = 3;\nclass Node{\n\nNode next;\n\nint value;\n}\nNode.java\nfirst\nnext\nvalue\nnext\nvalue\nnext\nvalue\n\nIt's a Linked List!\n\nnew Node();\nnew Node();\nnew Node();\n\nLinked Lists\n- A linked list is made of a series of Nodes, each\nwith:\n- an associated item object\n- a reference to the next node of the list\n- Simplified \"double-box\" picture:\n\n- Traverse the list by following each node's \"next\"\nreference\nB\nnext\nitem\nC\nnext\nitem\nA\nnext\nitem\n\nSLinkedList\nFor convenience, create a class with references to the\nfirst & last nodes, with methods, so we don't have to re-\nwrite the manipulation code each time.\npublic class SLinkedList implements List{\n\nprivate int length = 0;\nprivate Node first = null;\nprivate Node last = null;\n\nprivate static class Node {\n\nObject item;\nNode next;\nNode( Object o, Node n ){ item = o; next = n; }\n}\n\npublic int size() {/*code...*/}\npublic boolean isEmpty() {/*code...*/}\npublic boolean contains(Object o) {/*code...*/}\npublic void clear() {/*code...*/}\n// various add() and remove() methods...\n}\nOur original\nNode class\n\nWhat's so great about\nLinked Lists?\nBIG Pros:\n- A Linked List can grow dynamically.\n(To resize an array you have to create a new, larger array, and copy everything over)\n- A linked list does NOT need contiguous memory.\n(A Java 1-D array has to occupy contiguous memory. When storing large amounts of data,\nfinding back-to-back-to-back... memory can be impossible)\n\nCons:\n- The references add overhead.\n- Access is slower than an array.\n- The code to maintain a Linked List can be complex.\n- Depending on how the 'links' (references) are structured, you\nmay only be able to traverse one way...\n\n- Always think of special cases\n- What if your list is empty?\n- What if there is only one element?\n\n- Always draw a diagram!\nLinked List: Tips\nnext\nnext\nnext\nfirst\nlast\n\nSorting\n- Sortable objects implement\nComparable<Object> or have Comparator\ndefined\n- Comparable:\n- Define compareTo()\n- For object.compareTo(other):\n- returns 1 if other higher ranked than object\n- returns 0 if equally ranked\n- returns -1 otherwise\n\nSorting\n- Comparator:\n- New class Object1Object2Comparator\n- Implements Comparator<Object>\n- Must define compare(). For\ncompare(a, b):\n- returns 1 if b higher ranked than a\n- return 0 if equally ranked\n- returns -1 otherwise\n\nSorting Exercise\n- Sort restaurants by rating (high to low) then\ndistance (close to far)\npublic class Restaurant {\n\nString name;\n\nint rating;\n\ndouble distance;\n\npublic Restaurant(String n, int r, double d){\n\nname = n;\n\nrating = r;\n\ndistance = d;\n\n}\n\npublic String toString(){\n\nreturn name + \": \" + rating + \"/5.0, \" + distance + \" meters away.\";\n\n}\n}\n\nStacks and Queues\n- Structures store, manage data\n- For data with an inherent order\n- Think of structures like a line to get into a movie\n- Stacks: people are added and removed from\nsame end of line\n- Last person in an elevator is the first person out of the\nelevator\n- FIFO Queue: people added to back of line,\nremoved from front\n- First In First Out, the way you expect a ticket line to\nwork\n\nStacks\n- Single end\n- LIFO: Last In First Out\n- push(): add an element\n- pop(): remove top\nelement\n- Applications:\n- Simulation: robots,\nmachines\n- Recursion: pending\nfunction calls\n- Reversal of data\n\nStack Interface\nimport java.util.*;\n// For exception\n\npublic interface Stack\n{\npublic boolean isEmpty();\npublic void push( Object o );\npublic Object pop() throws\n\nEmptyStackException;\npublic void clear();\n}\n\nQueues\n- Two ends\n- FIFO: First In First Out\n- push(): add an element\nto top\n- pop(): remove bottom\nelement\n- Applications:\n- Simulation: lines\n- Ordered requests:\ndevice drivers, routers, ...\n- Searches\n\nQueue Interface\nimport java.util.*;\n\npublic interface Queue\n{\npublic boolean isEmpty();\npublic void add( Object o );\npublic Object remove() throws\n\nNoSuchElementException;\npublic void clear();\n}\n\nExercise\n- What is the final output?\n- Add {2, 4, 6, 8} to a stack #1\n- Remove three items from stack, place in queue\n- Remove two items from queue, place in stack #2\n- Remove one item from stack #2, place in queue\n- Remove one item from stack #1, place in stack #2\nQueue:\n{6, 4}\nStack #2:\n{2, 8}\n\nExercise\n- Write a class to store a queue in a linked list\n- What happens when you remove the last object?\n- What happens when you try to remove an object\nfrom an empty list?\n\npublic interface Queue {\n\npublic void enqueue(int item);\n// add to end\npublic int dequeue() throws Exception; // remove from front\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Matrices, Linear Systems, Integration",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/b8587a279332d32511bfacdf68ed71e7_MIT1_00S12_REC_11.pdf",
      "content": "Recitation 11\nMatrices, Linear Systems, Integration\n\nOutline\n- Matrices\n- Linear Equations\n- Integration\n\nMatrix Representation\nRepresent matrices as\ntwo dimensional arrays\na is a 1-D array of\nreferences to 1-D arrays\nof data.\nref a[0]\nref a[1]\nref a[2]\n10 11 12\na = ref a\nc = refA1\nb =\nint[][] a = new int[3][4];\na[0][0] = 1;\na[0][1] = 2;\n// ...\nb = a[0][3];\nc = a[1];\n\nNo. of Columns:\nNo. of Rows:\na[0].length\na.length\n\nMatrix Representation\n- You can create 2-D\narrays manually or use\nMatrix class\n- The Matrix class has\nmethods for setting\nelements, adding,\nsubtracting, and\nmultiplying matrices,\nand forming an identity\nmatrix.\npublic static void main(...)\n{\nint[][] a= new int[3][4];\na[0][0]= 1;\na[0][1]= 2;\n...\na[2][3]= 12;\nint b= a[0][2];\nint[] c= a[1];\n}\n\nMatrix Exercise\n- Add a method to Matrix to compute the\ntranspose of a matrix\n\npublic class Matrix {\nprivate double[][] data;\npublic Matrix(int m, int n) {data = new double[m][n];}\npublic int getNumRows() {return data.length;}\npublic int getNumCols() {return data[0].length;}\npublic double getElement(int i, int j) {\nreturn data[i][j];\n}\npublic void setElement(int i, int j, double val) {\ndata[i][j] = val;\n}\n}\n\nLinear Systems\n- Matrices used to\nrepresent systems of\nlinear equations\n- Assume coefficients a\nand b are known, x is\nunknown\n- There n unknowns (x0\nto xn-1) and m\nequations\n\nLinear Systems\nSolve using Gaussian Elimination: forward solve, backward solve\nProblem\nStatement\nEliminate x\nfrom L2, L3\nEliminate y\nfrom L3\nNow backward solve: find z from L3, y from L2, x from L1\nSource: Wikipedia, \"Gaussian elimination\" License CC BY-SA. This content is excluded from\nour Creative Commons license. For more information, see http://ocw.mit.edu/fairuse.\n\nLinear System Exercise\n- La Verde's bakes\nmuffins and donuts\nusing flour and sugar.\n- Same profit for one\nmuffin and one donut.\n\n- How many donuts,\nmuffins to maximize\nprofit?\nFlour\nNeeded\nSugar\nNeeded\nMuffin\n100 g\n50 g\nDonut\n75 g\n75 g\nIngredient Supply\nFlour\n20 kg\nSugar\n15 kg\n\nLinear System Exercise\n- Model as system of equations:\n\n100m + 75d = 20000 flour constraint\n\n50m + 75d = 15000 sugar constraint\n- Create the matrices (in the form of Ax=b)\n- Use Matrix.setElement() and\nMatrix.gaussian()\n\nd\nm\nA x = b\n\nIntegration\n- We use objects to represent mathematical\nfunctions in Java\n- Each function has its own class\n- Each class implements MathFunction\n\npublic class LinearF implements MathFunction {\npublic double f(double x){\nreturn 2 * x + 3;\n}\n}\npublic interface MathFunction{\npublic double f(double x);\n}\nf(x) = 2x + 3\n\nIntegration\nRectangular Rule\nTrapezoidal Rule\nSimpson's Rule\n\nImproved Trapezoidal Rule\nKeep cutting intervals in half until desired accuracy is met.\n\nFunction evaluations are stored to avoid re-computation.\n\nIntegration Exercise\nCompute the shaded surface area using Monte Carlo integration with\n1,000,000 random points.\n\nUse MonteCarloIntegration.java from lecture as a starting point.\nr = 1\na\nr = 1\n\nIntegration Exercise\nBounding Area = 2r * (4r - a)\n(x,y) is in left circle if (x + r - a/2)2 + y2 < 1\n(x,y) is in right circle if (x - 1 + a/2)2 + y2 < 1\ny\nx\nr\na\nr\nWrite a method to find area when r = 1\n\nProblem Set 10\n- Find currents and voltages in resistor/battery\nnetwork\n- Build a matrices for resistor values, voltages\n- Solve for currents. Use Matrix class from lecture.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recursion, Inheritance",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/611e498020005dcd30cb5a9cd6d73935_MIT1_00S12_REC_5.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\n\nRecitation 5\nRecursion, Inheritance\nMarch 12th, 13th 2011\n\nRecursion\nRecursion illustration removed due to copyright restrictions.\n\nDesigning Recursive Methods\n\n1.Define the base case\n2.Divide big problem into smaller problems\n3.Recursively solve the smaller problems\n4.Combine the solutions to the smaller\nproblems\n\nBe aware that a recursive method may not be\nthe most efficient solution\n\nExample\n- Fibonacci Sequence:\n- Formula: fib(n)=fib(n-1)+fib(n-2)\n\nfib(5)\nfib(4)\nfib(3)\nfib(3)\nfib(2)\nfib(1)\nfib(2)\nfib(1)\nfib(2)\n\nFibonacci Sequence\npublic class fib{\n\npublic static int fib( int n) {\n\n}\n}\nif( n <= 1 )\n\nreturn n;\nelse\n\nreturn fib(n-1) + fib(n-2);\nBase case\nRecursive case\nSmaller Problems\n\nExercise 1\n- Design a recursive method to calculate the\nfactorial (!) of a number\n\n- n! = n (n-1) (n-2) ... 3 2 1\n\nExercise 2\n- You are given a positive integer n and you\nneed to recursively print out all numbers from\nn to 1, in descending order.\n\n- Example: given n = 3, your program will print\n\nUnderstand Inheritance\nAnimal\nJust as you inherited qualities from your parents, a class can inherit the\ndata members and methods of another class.\n\nHere is class Animal:\nAll classes in Java automatically inherit from class \"Object\".\nObject\npublic class Object {\n\n}\npublic class Animal {\nprivate String foodtype;\npublic Animal(String f){\n\nfoodtype = f;}\npublic void feed(){\n\n//not shown\n}}\n\"Object\" is the parent or super class of Animal\nAnimal inherits from / is a subclass of / or extends Object\n\nInheritance Example\nAnimal\nObject\npublic class Animal {\nprivate String foodtype;\npublic Animal(String f){\n\nfoodtype = f;}\npublic void feed(){\n\n//not shown\n}\n}\npublic class Lion extends Animal{\n\nprivate boolean isAfrican;\n\npublic Lion(boolean fromAf){\n\nsuper(\"carnivorous\");\n\nisAfrican = fromAf;\n\n}\n}\nHere class Lion extends Animal\nsuper refers to the parent class.\nWhat is the super class here?\nWhat does this line do?\nLion\nTo inherit from another class use\nkeyword extends\n\nInheritance Question\n- Which of the following declarations is NOT\nallowed and why?\n\nAnimal a1 = new Animal(\"herbivore\");\nAnimal a2 = new Lion(true);\nLion a3 = new Lion(false);\nLion a4 = new Animal(\"carnivore\");\nAnimal a5 = new Lion(\"carnivore\");\nObject o = new Lion(true);\n\nMethod Overriding\npublic class Lion extends Animal {\nprivate boolean isAfrican;\n/*constructor & hidden code HERE*/\n\npublic void feed() {\nSystem.out.println(\"feed() method of Lion\");\n}\n}\npublic class Cow extends Animal {\nprivate String breed;\n/*constructor & hidden code HERE*/\n\n@Override //This is optional\npublic void feed() {\nsuper.feed();\nSystem.out.println(\"feed() method of Cow\");\n}\n}\nWhat does super do here?\n\nMethod Overriding (cont.)\npublic class Animal {\nprivate String foodType;\n\n/*constructor hidden*/\n\npublic void feed() {\nSystem.out.println(\"feed() method of Animal\");\n}\n\npublic static void main(String [] args){\nAnimal [] a = {new Lion(true), new Cow(\"dairy\")};\na[0].feed();\na[1].feed();\n}\n}\nWhat is the output from the main() method ?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Static Array & ArrayList",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/b222458ddf201437e5e5ad6c2d75a145_MIT1_00S12_REC_4.pdf",
      "content": "1.00/1.001\nIntroduction to Computers and Engineering Problem Solving\n\nRecitation 4\nStatic\nArray & ArrayList\n\nSpring 2012\n\nQuiz 1\n- March 9 (Friday)\n- 3:05pm-4:25pm\n- Review session:\n- Wed. March 7, 7pm - 9pm\n- LA office hour: Thu 7:00-9:00pm\n- Open notes/book, no electronic devices\n\nToday's Recitation\n- Keywords: Static\n\n- Array and ArrayList\n\nStatic\n- Static members:\n- not associated with any particular instance of the class--\none copy shared by all instances\n- accessible to both static and non-static methods\n\n- Static Methods:\n- may only access static members, not instance members\n- should be called using Classname.methodName()\n\nStatic Members\npublic class Number {\n\nprivate int num;\n\n...\n}\nnum = ...\nNumber object 1\nNumber object 2 Number object 3\nnum = ...\nnum = ...\n\nStatic Members\npublic class Number {\n\nprivate static int num;\n\n...\n}\nnum = ...\nNumber object 1\nNumber object 2 Number object 3\nnum = ...\nnum = ...\n\nStatic Methods\npublic class Number {\n\nprivate static int num;\nprivate int num2;\n\npublic int sum() {\n\nreturn num + num2;\n}\n\n...\n}\nIs this ok?\n\nWhen to Use Static Methods\n- When no access to any instance field is required. Usually one\nof two scenarios:\n- The method takes in all the information it needs as\narguments:\nMath.pow(double base, double exp)\n- Or, the method needs access to only static variables.\n- Usually you can think of these methods as taking in some\ninformation and performing a service for you\n- Typically, they do not alter the state of the class, as they do\nnot have access to instance variables\n\nExercise 1: Static Members\n- Write a class Ticket that\n- Keeps track of how many tickets there are\n- Assigns a unique ticket number to each ticket, starting with\n100, 101, etc.\n- Has a method to return the number of tickets\n- Has a method to return the ticket number\n- Write a class TicketTest that creates some\nTicket objects and then prints out how many\nwere created.\n\nKeywords Summary\npublic / private\nControl access to data members and methods. Public data members can be\naccessed outside the class, and public methods can be invoked outside the class.\nPrivate data members and methods are not visible outside the class\n\nstatic\nEach instance (object) of a class has its own copy of each non-static data member,\nbut there is only one copy of each static data members, shared by all instances\n(objects) of the class.\nA static method can only use the static data members of the class and its input\nparameters. Static methods are invoked on the class name, not on any object\nname.\n\nvoid\nApart from constructors, every method has a declared return type. If a method does\nnot return anything, its return type must be void.\n\nfinal\nThe value of a final data member cannot be modified after it has been initialized.\n\nKeywords Summary\npublic class UGrad{\n\nprivate double gpa;\npublic static final int MAX_GPA = 5;\n\npublic double getGPA() {\nreturn gpa;\n}\n\npublic void printGPA() {\nSystem.out.println(\"GPA: \" + gpa + \" / \" + MAX_GPA);\n}\n\npublic static int getMaxGpa() {\nreturn MAX_GPA;\n}\n}\nWhat is the function of each keyword in this class?\n\nArray vs. ArrayList\n- Size fixed at creation\n- Accessed with z[]\n- Object with no methods\n- One public data\nmember: z.length\n- Slightly faster\n- Size varies as data is\nadded/removed\n- Accessed with\nz.get()\n- Object with no data\nmembers\n- Has lots of methods:\ne.g., z.add(),\nz.size()\n- More flexible\n\nArray and ArrayList\n- Setting and accessing data is different:\n\nint[] array = new int[3];\nfor(int i = 0; i < array.length ; i++) {\n\narray[i] = i;\n}\n\nWhat does array contain?\n\nArrayList<Integer> arrayList = new ArrayList<Integer>();\nfor(int i = array.length-1; i > -1 ; i--) {\n\narrayList.add(array[i]);\n}\n\nWhat does arrayList contain?\n\nArray or ArrayList?\n- Which would you use for the following\nproblems: an Array or ArrayList?\n- Write a method that returns all the primes\nbetween 2 and a specified number\n- Write a method that returns a specified number of\nrandom numbers\n\nArrayList Exercise\n- Write a method findPrimes(int n) that\nreturns an ArrayList<Integer> of all the\nprimes between 2 and n\n\n- Start by putting in all the numbers, then remove the\nones that are multiples of each other in the ArrayList\n\n- Some code is provided\n\nArrayList Exercise\npublic static ArrayList<Integer> findPrimes(int n) {\n//Declare the ArrayList\nfor (int i=2; i<=n; i++)\n//Put i in the ArrayList\nint i = 0;\nwhile //condition to make sure i is a valid index\nint j = i + 1;\nwhile //condition to make sure j is a valid index\nif //(element j)%(element i)==0\n//remove the proper number from the list\nelse\nj++;\n}\ni++;\n}\n//return your ArrayList\n}\n\nArray Exercise\n- Write a method makeRandom(int n) that\nreturns an array of n random numbers\n\n- Some code is provided\n\nArray Exercise\nprivate static Random r = new Random();\npublic static int[] makeRandom(int n) {\n//Create your array, then assign random\n//numbers using r.nextInt();\n}\n\nSelf assessment, lectures 1-11\nSkill\nBelow\nExpected\nAbove\nData types\nTypes misused.\nStatic not used\nInts and reals used\ndistinguishably.\nStatic used\ncorrectly\nInt, long, double,\nboolean, and static\nused purposefully\nVariables\nNumbers and\nvariables used\nwithout distinction\nVariables used for\nmost quantities\nVariables easy to\nread. Naming is\nconsistent and\naccurate\nExpressions\nComplex\nexpressions not\ndefined correctly;\nsimple expressions\nok\nComplex\nexpressions\norganized by\nparentheses and\nuse of variables\nComplex\nexpressions\nstructured for\nincreased clarify\nLoop constructs\nSuccessfully used\nClear and\nunderstandable\nAppropriate choice\nof for, while, do-\nwhile\n\nSelf assessment, lectures 1-11\nSkill\nBelow\nExpected\nAbove\nMethods\nMethods not clearly\ndefined, or use\npoor arguments or\nreturn values.\nWrong use of static\nMethods defined\nbut overall\nstructure not\nalways clear. Static\nused correctly.\nMethods organized,\nnamed clearly,\nperform clear\nbehaviors. Static\nused appropriately\nMethod arguments\nFew or no\narguments used\nAppropriate\narguments used\nArguments versus\ndata members\nclearly designed\nVariable scope\nLocal variable scope\ninconsistent, often\ntoo large\nMost variables have\nappropriate scope\nAll variables\ndefined just before\nuse and go out of\nscope after use\n\nSelf assessment, lectures 1-11\nSkill\nBelow\nExpected\nAbove\nComments\nSome critical\ncomments missing,\nsome not clear\nComments explain\nbasic code\nComments make\ncode self-\nexplanatory\nIndentation\nNo indentation\nused\nSome indentation\nused but not\nconsistent\nAll code properly\nindented\n\nHomework 4: Scrabble\nZ\nE\nT\nR\nL\nC\nH\nDictionary\n\ntwoLetterWords =\n\nthreeLetterWords =\n\"AA\"\n\"AB\"\n\"AD\"\n...\n\"AAH\"\n\"AAL\"\n\"AAS\"\n...\n\"BAA\"\n\"BAD\"\n\"BAG\"\n...\n\"CAB\"\n\"CAD\" \"CAM\"\n...\n\"DAB\"\n\"DAD\"\n\"DAG\"\n...\n\"EAR\"\n\"EAT\"\n\"EAU\"\n...\n...\nWhat are all the two and three\nletter words that can be made\nwith your hand of 7 letters?\n...\n\"ET\"\n\"ETH\"\n\"ER\"\n...\narray of\nStrings\nArrayList\nof Strings\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Stream and Phidget",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/50828062d611b146aea4109f797ffc0e_MIT1_00S12_REC_9.pdf",
      "content": "1.00/1.001/1.002\nIntroduction to Computers and Engineering\nProblem Solving\n\nRecitation 9\nStream and Phidget\n\nApril 23-24, 2012\n\nOutline\n- Streams\n\n- Phidgets\n\nStreams Overview\n- Java programs communicate with the outside world using\nstreams\n- I/O streams: work in one direction only\n- Input stream: control data coming into the program\n- Output stream: control data leaving the program\n- Streams: FIFO queues\n- Streams have many uses:\n- Music and videos \"stream\" from online providers\n- This recitation focuses on: writing to and reading from a text file\nwrite = âpushâ data into a file\nYour\nprogram\n\nwrite\nh\ne\nl\nl\no\nOutput Stream\nread = âpullâ data from a file\nYour\nprogram\n\nread\no\nl\nl\ne\nh\nInput Stream\nNotice: Streams are labeled with respect to your program:\n\nGeneral Strategy for reading\nfrom and writing to a Stream\n- Reading\n- Open an INPUT stream\n- while more information in the stream\n- read information\n- close the stream\n\n- Writing\n- Open an OUTPUT stream\n- while more information in the program\n- write information\n- close the stream\nProg.\nProg.\nProg.\nProg.\nProg.\nProg.\n\nConnecting Streams\n- Each stream class has a specific functionality.\n- Streams can be connected to get more functionality\n\n- Example: class BufferedReader\n- Buffers the character stream from FileReader for efficiency\n- allows you to read line by line\n\nFileReader fileInput = new\nFileReader(\"file.txt\");\nBufferedReader bufferedInput = new\nBufferedReader(fileInput);\n\nExample: Reading a Text File\ntry{\n\n// Step1: Create class that gets the File\n\nFileReader fr = new\nFileReader(\"file.txt\");\n\n// Step2: Create class to read data from File\n\nBufferedReader br = new\nBufferedReader(fr);\n\n// Step3: Read the data\n\nString line = br.readLine();\n\nwhile(line!=null){\n\nSystem.out.println(line);\n\nline = br.readLine();\n\n}\n\n// Step4: Close the File! (so others can use it)\nbr.close();\n} catch (IOException ioe) {\n\nioe.printStackTrace();\n}\n\nExample: Writing a Text File\ntry{\n\n// Step1: Create class that gets the File\n\nFileWriter fw = new\n\nFileWriter(\"file1.txt\");\n\n// Step2: Create class to write data into File\n\nPrintWriter pw = new PrintWriter(fw);\n\n// Step3: Write the data\n\npw.println(\"How are you doing?\");\n\n// Step4: Close the File! (so others can use it)\npw.close();\n} catch (IOException ioe) {\n\nioe.printStackTrace();\n}\n\nFile Exercise\n- Write a program that copies, line by line, a\ntext file file.txt to fileCopy.txt\n\nText Files & Delimiters\nA delimiter is a character used to separate information (a.k.a. tokens).\nThere are two common delimiters for text files: commas and tabs\n05,12,83.0,dog,cat\ntoken\ndelimiters\ntoken\nFile w/ Comma Separated Values\nFile w/ Tab Separated Values\ndata.csv\n05,12,83\ndata.tsv\n05 12 83\n\nWriting: Why use a delimiter?\ntry{\n\nFileWriter fw = new FileWriter(\"data.csv\");\n\nPrintWriter pw = new PrintWriter(fw);\n\npw.print(87);\n\npw.print(56);\n\npw.close();\n} catch (IOException ioe) {\n\nioe.printStackTrace();\n}\ntry{\n\nFileWriter fw = new FileWriter(\"data.csv\");\n\nPrintWriter pw = new PrintWriter(fw);\n\npw.print(87+\",\");\n\npw.print(56+\",\");\n\npw.close();\n} catch (IOException ioe) {\n\nioe.printStackTrace();\n}\ndata.csv\ndata.csv\n87, 56,\nPROBLEM!\nWhat are the two numbers?\nAre they 875 and 6? 8 and 756?\nSOLUTION!\nWe can use a delimiter to separate\nthe values\nimport java.io.*;\n\nimport java.io.*;\nimport java.util.*;\n\ntry{\nFileReader fr = new FileReader(\"data.csv\");\nBufferedReader br = new BufferedReader(fr);\nString line;\n\nline = br.readLine()\n\n// Use String's split() method\n\nString[ ] svalues = line.split(\",\");\n\n// loop over and parse each String\n\nfor(String svalue: svalues){\n\nint value = Integer.parseInt(svalue);\n\n}\n\nbr.close();\n} catch (IOException ioe) { ioe.printStackTrace(); }\nReading: Skipping delimiters\nReading the data now becomes tricky! We need to skip the delimiters.\nFortunately, the String class has a method called split()\n- Get a String with\ndelimited data: \"87,56,\"\n\n- Call the split() method,\ntelling it to divide the\nString when it sees \",\"\ndata.csv\n87,56,\n05,12,1983\nwhile((\n) != null){\n\n}\n\nOutline\n- Streams\n\n- Phidgets\n\nPhidget Interface Anatomy\nDigital Inputs\nUSB Connection (to Laptop)\nDigital Outputs\nAnalog Sensor Inputs\n\nCharacteristics\n- Phidgets provide the hardware interface to attach\nsensors to your computer\n- The com.phidget.* class files provide the software\nneeded to connect your Java program to the Phidget\nhardware\n- Sensor input is noisy - do not rely too much on the\nexact values\n- Sensor change events will arrive unpredictably - do not\nrely on them to indicate that time has passed\n- Use try/catch blocks around all phidget code that uses\nyour InterfaceKitPhidget object\n\nPhidget Sensors\n- The Phidget board does not determine which sensor is attached,\nit only knows which port the sensor is connected to\n- If you plug your sensors into the wrong ports, your program\nwon't identify them correctly\n- You must have Phidget kit software closed when running\nEclipse\n- You must close all previous application window when\ndeveloping code for problem sets (e.g. you cannot have\nmore than one Swing application running)\n\nExample: Light Sensor Lamp\nStreet lamps turn on when it gets\ndark outside!\n\nModel using phidget\n- Use precision light sensor\n- Threshold: 200\n- Attach LED to digital output 0\n- When sensor value is below\nthreshold turn LED on, otherwise\nkeep it off\n- Default value off\nImage removed due to copyright restrictions.\n\nProblem Set 8\n- Use sensors to couple and uncouple engine and a car\n- Write event log to a text file\n\nProblem Set 8\n- You will use slider sensor to control the movement of\nengine and car, in either direction\n- You need to keep moving slider to keep generating\nevents so the engine keeps moving\n- Use a pressure sensor to couple or uncouple engine\nand car\n- A light sensor is used for emergency stop. Cover it while\ntesting(Train moves only when it's darker)\nStart Early!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Swing, Frame Customization, Events",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/c632003d1e0011d110aa8d93e5f40152_MIT1_00S12_REC_7.pdf",
      "content": "1.00/1.001/1.002\nIntroduction to Computers and Engineering Problem\nSolving\n\nRecitation 7\nSwing\nFrame Customization\nEvents\nApril 2nd, 3rd 2012\n\nCreating a Frame: Exercise\npublic static void main(String[] args)\n{\nJFrame fr = new JFrame(\"Empty Frame\");\nfr.setSize(200,100);\nfr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nfr.setVisible(true);\n}\nIn a main() method create and display a\n200x100 frame, that resembles the following\nframe.\nThere are often multiple ways of doing the same thing with Swing. For example:\n\nJFrame fr = new JFrame(\"Empty Frame\");\n\nJFrame fr = new JFrame();\nfr.setTitle(\"Empty Frame\");\nequivalent\n(c) Oracle. All rights reserved. This content is excluded from\nour Creative Commons license. For more information, see\nhttp://ocw.mit.edu/fairuse.\n\nFrame Customization\nCustomFrame is a custom JFrame class\n- CustomFrame extends JFrame\n- Sets the title to \"Custom Frame\"\n- Sets the size to 200 X 200\n- Sets the background to blue\npublic class CustomFrame extends JFrame\n{\npublic CustomFrame(){\nsuper(\"Custom Frame\");\n// custom size and background color\nsetSize(200,200);\nsetBackground(Color.BLUE)\n// other customization statements\n}\n}\n\npublic class CustomFrame extends JFrame\n{\npublic CustomFrame(){\nsuper(\"Custom Frame\");\n// custom size and background color\nsetSize(200,200);\nsetBackground(Color.BLUE)\n// other customization statements\n}\n\npublic static void main(String[] args)\n{\n\n//example using custom Frame\nJFrame fr = new CustomFrame();\nfr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nfr.setVisible(true);\n}\n}\nWe won't customize JFrame objects in the main() method. Customization\nstatements are placed in the constructor of a class that extends JFrame. The\nmain() method only creates an instance of the custom frame class, makes it visible\nand sets the default close operation.\nFrame Customization (cont'd)\n\nSwing Components\nContainer (ContentPane)\nContains a JTextField and a\nJPanel, organized in FlowLayout.\n\nContainer cp = frame.getContentPane();\ncp.setLayout(new FlowLayout());\n\nJFrame\nHas a ContentPane\n\nJFrame frame = new JFrame(\"Frame Title\");\nJPanel\nContains 5 JButtons\norganized in BorderLayout\nJTextField\n\ncp.add(new JTextField(5));\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\n// add buttons to the panel\ncp.add(panel);\n(c) Oracle. All rights reserved. This content is excluded\nfrom our Creative Commons license. For more\ninformation, see http://ocw.mit.edu/fairuse.\n\nGridLayout Example\n// constructor only for custom JFrame\npublic CustomFrame(){\nsuper(\"Frame Title\");\n\nContainer cp = getContentPane();\ncp.setLayout(new GridLayout(3, 2)); //override default BorderLayout\n\ncp.add(new JButton(\"1\"));\ncp.add(new JButton(\"2\"));\ncp.add(new JButton(\"3\"));\ncp.add(new JButton(\"4\"));\ncp.add(new JButton(\"5\"));\ncp.add(new JButton(\"6\"));\n\npack();\n}\nThe following code creates a custom frame with a\ncontent pane resembling the following image.\nThe pack() method sizes the frame so that all its\ncontents are at or above their preferred sizes.\nThis method must be called AFTER all components\nare added to the frame or panel.\nAlso, call the revalidate() method if you get\nstrange bugs in your layout. It causes the Container\nto resize the components and may resolve the bug\n(c) Oracle. All rights reserved. This content is excluded from\nour Creative Commons license. For more information, see\nhttp://ocw.mit.edu/fairuse.\n\nExercise\nCreate a frame resembling the following:\n(c) Oracle. All rights reserved. This content is excluded from our Creative Commons\nlicense. For more information, see http://ocw.mit.edu/fairuse.\n\nSwing Event Model\nEvent sources\n\nEvent listeners\n\nSource-listener relationships\nEvents are triggered by JComponents.\nExample: a JButton triggers an ActionEvent when the user clicks it\nAn object implementing a listener interface can listen to events.\nEach listener interface has (a) method(s) that react to events.\nExample: an object implementing the ActionListener interface has an\nActionPerformed method that reacts to ActionEvents triggered by\nJButtons.\nEvent listeners are registered at event sources\nExample: aJButton.addActionListener(aListenerObject)\nTop-level containers\n\nJFrame, JDialog, JApplet\n\nContainers\n\nContainer\n\nJPanel\n\nComponents\n\nJComponent\nJLabel\n\nJButton\n\nJTextField\n\nSwing Event Model\nExample:\nA frame holding a JPanel with a button that prints \"Swing\" to the console when clicked.\n3 Types of Source-Listener relationships:\n- The listener is the container.\n- The listener is an object of an inner class of the class containing the source.\n- The listener is an anonymous inner class of the class containing the source.\nSource?\nListener?\nThe JButton \"Click to print\"\nAn object that has an ActionPerformed method printing \"Swing\".\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nOption 1: Container Listens\npublic class PrinterPanel extends JPanel {\n\nJButton b;\n\npublic PrinterPanel(){\nb = new JButton(\"Click to Print\");\nadd(b);\n\n}\n\n}\nComplete the PrinterPanel class by implementing a listener for the JButton and\nprint \"Swing\" when the JButton is clicked\n(c) Oracle. All rights reserved. This\ncontent is excluded from our Creative\nCommons license. For more information,\nsee http://ocw.mit.edu/fairuse.\n\nOption 2: Inner Listener Class\npublic class PrinterPanel extends JPanel{\n\nJButton b;\n\npublic PrinterPanel(){\nb = new JButton(\"Click to Print\")\nadd(b);\n\n}\n\npublic class Printer {\n\n}\n}\nComplete the inner class Printer so that it can listen to JButtons and print \"Swing\"\nwhen a JButton is clicked. Then add, to the PrinterPanel class, a Printer object that\nlistens to the existing JButton.\n(c) Oracle. All rights reserved. This content\nis excluded from our Creative Commons\nlicense. For more information, see\nhttp://ocw.mit.edu/fairuse.\n\nOption 3: Anonymous Inner Class\npublic class PrinterPanel extends JPanel{\n\nJButton b;\n\npublic PrinterPanel(){\nb = new JButton(\"Click to Print\")\nadd(b);\n\n}\n}\nAdd an anonymous inner class to the JButton to print \"Swing\" when the JButton is\nclicked.\n(c) Oracle. All rights reserved. This content\nis excluded from our Creative Commons\nlicense. For more information, see\nhttp://ocw.mit.edu/fairuse.\n\nExercise\nWe will model a combination lock using Swing.\nOpen/Close button (JButton)\n\n- green when lock is opened, red when it is closed\n\n- when clicked:\n- if the lock is opened, close it.\n\n- if the lock is closed, open it if digits match combination\nDigit Text field (JTextField)\n\n- Take input digits for lock combination\nChange Combination button (JButton)\n\n- when clicked:\n- if lock is opened, set the combination to the current\n\ndigits.\nLock opened\nLock closed\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nClass Structure\nCreate a class LockPanel that extends JPanel. Import all necessary packages.\nStart by adding a main() method to create an instance of the LockPanel, insert it\ninto a JFrame and display it to the user.\n- We will implement the LockPanel constructor later.\n\nData Members\nAdd the appropriate data members to the LockPanel class.\n- Which data members do you need to model the lock and build the GUI?\n\nJComponents\nWrite the constructor of the LockPanel class. Within the\nconstructor, create and add the appropriate JComponents\nand input arguments. Initialize the lock to be open.\n- JButton has a setBackground(Color) method.\n\n(c) Oracle. All rights reserved. This content is excluded\nfrom our Creative Commons license. For more\ninformation, see http://ocw.mit.edu/fairuse.\n\nEvent Listeners\nIn the constructor, attach an anonymous inner class to the 'change combination'\nbutton. The combination can only be changed when the lock is opened.\n- Class JTextField has a String getText()method\n- Convert a string into an integer using Integer.parseInt(String)\n\nEvent Listeners\nAttach an anonymous inner class the the 'open/close' button.\nThe lock can always be closed, but it can be opened only if the\ndigits match the combination.\n\n- JButton has a setBackground(Color) method.\nLock opened\nLock closed\n(c) Oracle. All rights reserved. This content is excluded\nfrom our Creative Commons license. For more\ninformation, see http://ocw.mit.edu/fairuse.\n\nHomework 6\nModel\n-\nWrite the Antenna class(es), which model the antenna using Inheritance\nand the equations from homework 1\nController\n-\nDo not need to draw Antennae\n-\nAll the textboxes, combo boxes, and buttons should be displayed and\nfunctional\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "How to install Eclipse for Mac OS",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/685158a625eba9ccf014179b6558d3cc_MIT1_00S12_Ins_Eclpse_Mac.pdf",
      "content": "How to Install Eclipse\nMac OS\nIn 1.00/1.001/1.002, you will use the Eclipse Integrated Development Environment (IDE) to\ncreate, compile, and run Java programming assignments. Eclipse version 3.7.1 is the IDE\nsupported by the 1.00 staff.\nThis document contains step-by-step instructions for installing Eclipse on a Mac OS X computer.\nDo not install Eclipse until you have installed Java and its documentation. Please refer to\n1.00/1.001/1.002 - Java Installation Guide for Mac OS for details on how to proceed.\nEclipse can be downloaded from the following website:\nhttp://www.eclipse.org/downloads/\nLocate the \"Eclipse Classic 3.7.1\" section and click the download link corresponding to your\noperating system.\nYou will be redirected to the mirror sites page. A mirror site should be pre-selected for you and\nappear as a link below \"Download eclipse-SDK-3.7.1-macosx-cocoa.tar.gz from:\" If so, click that\nlink to start downloading. Otherwise, you can use any of the mirror sites listed on the page.\nCourtesy of The Eclipse Foundation. Used with permission.\nIn your Downloads window, an item called eclipse-SDK-3.7.1-macosx-cocoa.tar.gz ;or\nsomething similar) will show up. It is large, so expect it to take a little while. If you use the\nSafari browser, the downloaded file should be automatically unzipped to your Desktop. If not,\ndouble click to unzip ;you might have to do this twiceÍ¿. ! new folder titled eclipse should be\non your Desktop. Open this and drag the Eclipse icon ;purple circleÍ¿ to your Dock. If you\ndownloaded the Java Documentation, you will most likely want to drag the .zip file into your\n1.00/1.001/1.002\nHow to Install Eclipse on Mac OS\n1/6\nCourtesy of The Eclipse Foundation. Used with permission.\nCourtesy of The Eclipse Foundation. Used with permission.\n\neclipse folder. Drag the entire eclipse folder to your Applications folder. You have just installed\nEclipse on your Mac.\nLaunch Eclipse from your dock.\nEach time you run Eclipse, you will be prompted to select a workspace. The default workspace\nis:\n/Users/<username>/Documents/workspace\nClick Use this as the default and do not ask again to avoid having to type in the workspace path\nevery time you start.\nIf you are shown a Welcome to Eclipse screen, click the Go to the Workbench button to reach\nthe main Eclipse environment, where you will develop your programs.\nCourtesy of The Eclipse Foundation. Used with permission.\nThe following steps will guide you through setting up Eclipse. The changes you will make to\nEclipse are saved in the workspace. Each time you create a new workspace you will have to\nrepeat steps those steps.\n1.00/1.001/1.002\nHow to Install Eclipse on Mac OS\n2/6\nCourtesy of The Eclipse Foundation. Used with permission.\n\nSetting the compiler compliance\nFrom the Eclipse menu at the top of the screen, select\nPreferences/\nWe will now check to make sure Eclipse is using the correct version\nof Java that we have just installed (J2SE 5.0 or 6.0).\nThe Java ompilers and Java Installed JREs sections of the\nPreferences match the following two screenshots. The compiler\ncompliance level should be 1.5. or 1.6. with the default compliance\nsettings checked.\nourtesy of The Eclipse Foundation. Used with permission.\nC\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Mac OS\n3/6\n\nSetting the workspace folders\nThe files you will be creating via Eclipse can be organized in several ways. For simplicity, we will\nset Eclipse to organize the files via project output. This means .java, and .class files will be\nstored directly in the project folder instead of in a src/bin directory structure.\nWith Eclipse running:\nChoose Eclipse -> Preferences from the menu.\nIn the \"Preferences\" window, in the navigation tree, expand the \"Java\" option and click the\nuild Path option.\nIn the \"uild Path\" panel, select the Project radio button.\nClick OK to save your changes\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Mac OS\n4/6\n\nConnecting the Ja\n\nva documentation to Eclipse\n\nWith Eclipse running:\nChoose Eclipse -> Preferences from the menu.\nIn the \"Preferences\" window, in the navigation tree, expand the \"Java\" option and click the\n\"Installed JREs\" option.\nIn the \"Installed JREs\" panel, make sure the most current version of Java is checked (should be\nJVM MacOS X Default). Select it and click \"Edit\".\n\nCourtesy of The Eclipse Foundation. Used with permission.\nAn \"Edit JRE\" window will open. You will now need to set the Javadoc location for each JRE\nsystem library.\n\nTo set the Javadocs for one JRE System library:\n1.\nSelect a system library (....jar)\n2.\nClick the button \"Javadoc Location...\"\n3.\nA \"Javadoc For ...\" window will appear.\n4.\nSelect \"Javadoc in archive\"\n5.\nSelect \"External file\"\n6.\nFor \"Archive Path\", enter:\n\n/Applications/eclipse/jdk-1_5_0-doc.zip\nor\n/Applications/eclipse/jdk-1_6_0-doc.zip\nor the file path of wherever you saved the documentation zip file.\n\n7.\nFor \"Path within archive\", enter:\ndocs/api\n8.\nIf you click the \"Validate\" button you should get a prompt that says the location is likely\nvalid.\n1.00/1.001/1.002\nHow to Install Eclipse on Mac OS\n5/6\n\n9.\nWhen done, click OK and repeat with the next system library.\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Mac OS\n6/6\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "How to install Eclipse for Windows",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/00b4162a83d3d92490a7fc0c93c4d666_MIT1_00S12_Insl_Eclpse_Win.pdf",
      "content": "'\n1.00/1.001/1.002 - Spring 2012\nHow to Install Eclipse\nWindows\n\nIn 1.00/1.001/1.002, you will use the Eclipse Integrated Development Environment (IDE) to\ncreate, compile, and run Java programming assignments. Eclipse version 3.7.1 is the IDE\nsupported by the 1.00 staff.\n\nThis document contains step-by-step instructions for installing Eclipse on a Microsoft Windows\ncomputer. Do not install Eclipse until you have installed Java and its documentation.\nPlease refer to 1.00/1.001/1.002 - Java Installation Guide for Windows for details on how to\nproceed.\n\nEclipse can be downloaded from the following website:\n\nhttp://www.eclipse.org/downloads/\n\nLocate the \"Eclipse Classic 3.7.1\" section and click the download link corresponding to your\noperating system. If you re not sure whether your Windows is 32-bit or 64-bit, go to the \"System\"\nsection of your Control Panel to find out.\n\nYou will be redirected to the mirror sites page. A mirror site should be pre-selected for you and\nappear as a link with a big green download arrow:\nCourtesy of The Eclipse Foundation. Used with permission.\n\nIf so, click to start downloading. Otherwise, you can use any of the mirror sites listed on the '\npage. Depending on your browser settings, you may be asked to confirm that you want to save '\n1.00/1.001/1.002\nHow to Install Eclipse on Windows\n1/6\nCourtesy of The Eclipse Foundation. Used with permission.\n\nthe file on your computer and/or choose where to save it. Make sure you know where the file is\nbeing downloaded.\nOnce you have obtained the Eclipse .zip file, open it and choose Extract All to begin the\nextraction process. We recommend you move the extracted eclipse folder to C:\\Program Files.\n\nThe extracted folder should then be\n\nC:\\Program Files\\eclipse.\n\nOnce you have extracted and moved the eclipse folder to its destination, you can create a\nshortcut to Eclipse. There are several ways to do this. In Windows XP, navigate to C:\\Program\nFiles\\eclipse, right click on eclipse.exe, and select Create Shortcut. You may then drag this\nshortcut to your Desktop or Start Menu. In Windows Vista or Windows 7, navigate to\nC:\\Program Files\\eclipse, right click on eclipse.exe, and select Pin to Start Menu.\nDouble-click on eclipse.exe or the Eclipse shortcut you created on your desktop.\n\nEach time you run Eclipse, you will be prompted to select a workspace, which is where the\nprograms you write are stored. The default workspace is:\n\nWindows XP:\n\nC:\\Documents and Settings\\<username>\\workspace\nWindows Vista/Windows 7:\nC:\\Users\\<username>\\workspace\n\nClick Use this as the default and do not ask again to avoid having to type in the workspace path\nevery time you start.\n\nIf you are shown a Welcome to Eclipse screen, click the Workbench button to reach the main\nEclipse environment, where you will develop your programs.\n\nYou should now be in the main Eclipse environment, whose menu bar looks like this:\n\nCourtesy of The Eclipse Foundation. Used with permission.\nThe following steps will guide you through setting up Eclipse. The changes you will make to\nEclipse are saved in the workspace. Each time you create a new workspace, you will have to\nrepeat those steps.\n\n1.00/1.001/1.002\nHow to Install Eclipse on Windows\n2/6\n\nCourtesy of The Eclipse Foundation. Used with permission.\n\nSetting the compiler compliance\n-\nChoose Window -> Preferences from the Eclipse toolbar.\n-\nIn the Preferences window, expand the Java option in the navigation tree and click\n\nthe Compiler option.\n-\nIn the Compiler panel, set the Compiler compliance level to 1.6. (If your options contain\n\n6.0 instead, choose that).\n-\nClick OK to save your changes.\n\nIf asked Do the full build now?, click Yes.\n\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Windows\n3/6\nCourtesy of The Eclipse Foundation. Used with permission.\n\nSetting the folders\nThe files you will be creating via Eclipse can be organized in several ways. We recommend that\nyou set Eclipse to organize the files in \"project\" output. This means .java files (which you will\nwrite), and .class files (which the compiler will create from your .java files) will be stored in the\nsame folder.\n\n-\nChoose Window -> Preferences from the Eclipse toolbar.\n-\nIn the Preferences window, in the navigation tree, expand the Java option and click\n\nthe Build Path option.\n-\nIn the Build Path panel, select the Project radio button.\n-\nClick OK to save your changes.\n\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Windows\n4/6\n\nConnecting the Java documentation to Eclipse\n\nThis last step may be a little tedious, but do not skip it. The java documentation will be very\nuseful when developing your programs.\n\n-\nChoose Window -> Preferences from the Eclipse toolbar.\n-\nIn the Preferences window, in the navigation tree, expand the Java option and click\n\nthe Installed JREs option.\n-\nIn the Installed JREs panel, make sure the most current version of Java is checked\n\n(should be jre1.7 or jre7). Select it and click Edit.\n\nAn Edit JRE window will open. This window shows a list of \"JRE system libraries\", and you need\nto link each library to the Java documentation. To do so, repeat the following steps for each\nlibrary in the list:\n\n-\nSelect a system library (....jar)\n-\nClick the Javadoc Location button, which opens a Javadoc For ... window. In this\n\nnew window:\n\n-\nSelect Javadoc in archive and External file.\n\n-\nSet the Archive Path to the .zip file containing the java documentation, which\n\nyou downloaded when installing Java. This path should be:\n\nC:\\Program Files\\Java\\jdk1.7.0_02\\jdk-7u2-apidocs.zip\n\n-\nIn the Path within archive field, enter docs/api.\n\n-\nClick OK to get back to the Edit JRE window and start again with the next\n\nlibrary in the list\n\nWhen done with all the libraries, click Finish and then OK.\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Windows\n5/6\n\n'\n'\nFor each library\nin the list:\n\n1) Select the library\n\n2) Click\nJavadoc Location\n\n3) Select both\n\n4) Enter path to\nthe .zip file\n\n5) Enter docs/api\n\n6) Click OK\n'\n'\n'\n'\n\nCourtesy of The Eclipse Foundation. Used with permission.\n1.00/1.001/1.002\nHow to Install Eclipse on Windows\n6/6\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "How to install Java for Mac OS",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/437dba98cc265606e6860a1ba32fb36a_MIT1_00S12_Ins_Java_Mac.pdf",
      "content": "1.00/1.001/1.002\nHow to Install Java and its Documentation\nMac OS\nBefore you can program in Java for 1.00/1.001/1.002, you may or may not need to install\nÆ¶ NSN Ê ÅNSOrRÅÆ¥ SNRÅNRÅ ÅoSorR È£ Ê È¤i rR srsR NÊ¼nÆ¨ NÊ¼n X Ê¼nrÅÅr soSO N RRÅ\ninstalled, ready-to-use Java runtime and development environment.\nO srs NRÅ RsRRoRo X SÅRrorR ÊÊÆ¨Ê È£Æ¶ooÅRiÈ¤Æ¥ SOÅ ÅNSÅrS SÅRrorR rO Java available is J2SE 5.0\nÈ£NoN Ê ÊÆ¨ÊÈ¤Æ¨ rsÅSÅRÆ¥ oO srs NRÅ RsRRoRo X SÅRrorR ÊÊÆ¨Ê È£Æ¶ÅrRNRÅiÈ¤ rR X SÅRrorR\nÊÊÆ¨Ê È£Æ¶Rrs ÅrRNRÅiÈ¤Æ¥ SOÅ ÅNSÅrS SÅRrorR rO NSN NSNoÅNnÅÅ OrR srs or Ê ÊÆ¨Ê È£NoN Ê ÊÆ¨ÊÈ¤Æ¨\nWe recommend that you use the latest version of Java available, as we will be using parts of\nJava specific to the most recent versions.\nIf you run Software Update regularly it is likely that Java has already been upgraded to the\nlatest version. If you are unsure you can check by opening a terminal (by searching for\nÆ¶SÅRÅoRNÅi oR RrSÅooOSÈ¤ NRÅ SsRoRoÆ§\njava -version\na\nThe latest version should print a response similar to the one below (which shows the latest\nversion of Java 1.6).\njava version \"1.6.0_22\"\nJava(TM) SE Runtime Environment (build 1.6.0_22-b04-307-10M3261)\nJava HotSpot(TM) 64-Bit Server VM (build 17.1-b03-307, mixed mode)\nIf your version of Java is already up to date, you are done with this handout and can install\nEclipse. However, if your version of Java is not up to date, please follow the steps below.\nYou can update your system by clicking on the\nApple icon in the upper left corner and selecting\nÆ¶rOSsNRÅ RÅNSÅÆ©iÆ¨ RÊ¼nÅ rOSsNRÅ RÅNSÅ ONr\ncompleted (you may need to restart), check your\nJava version again. If the new version is the latest\none, you are done and can install Eclipse.\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n1.00/1.001/1.002\nHow to Install Java on Mac OS\n1/3\n\nIf for some reason this method does not give you the desired version, you need to\ndownload the latest version of Java from the Apple website.\nVisit the Apple Java download site: http://support.apple.com/downloads/#Java\nChoose the link that corresponds to your operating system (10.4, 10.5, or 10.6) and does\nNOT say \"Developer Documentation\". You may need to go to the next page to find the latest\nupdate for OS 10.4\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\nYou should be downloading a OoÅÅ RNÅÅÅ Æ¶ NSN rRNÊ¼nXÊÊÆ¨XRÅNSÅXÆ¨ÅÅoi rR\nÆ¶ NSN rRNÊ¼nXÊÊÆ¨ÊRÅNSÅÊÆ¨ÅÅoiÆ¨ O srs srÅ SOÅ NONRo nRrsrÅRÆ¥ SOÅ oRrSNÅÅ Rrogram\nshould begin automatically once the download has completed. If you use a different\nbrowser like Firefox, double click the downloaded file to mount the disk image, open the\nnewly mounted disk, then double click the package to begin the installation. Follow the on-\nscreen instructions to complete the installation.\n1.00/1.001/1.002\nHow to Install Java on Mac OS\n2/3\n\nYou now need to download the Java documentation to your computer. Eclipse, the\napplication you will use to write your Java programs, can use this documentation to create\nhelpful tips. First, set your Safari preferences to not automatically open files after\ndownloading. This is done by Clicking on Safari -> RÅOÅRÅRÊ¼nÅrÆ¨ !RÅ sRÅÅR SOÅ Æ¶ ÅRÅRNÅi\nSNnÆ¥ ÅNoÅ rsRÅ SOÅ rRSorR RÅR Æ¶rNOÅi OoÅÅr NOSÅR ÅrsRÅrNÅoRoi or rÅÅÅÊ¼nSÅÅÆ¨\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\nIf you are using Java SE 5.0, the Java 5 Documentation can be obtained from the website:\nhttp://www.oracle.com/technetwork/java/javase/downloads/index-jdk5-jsp\n142662.html\nIf you are using Java SE 6.0, you can download the documentation from the website:\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\nÊ¼nRrÅÅ ÅrsR NRÅ Ê¼nÅoÊ¼no SOÅ rsRÅrNÅ nsSSrR Sr SOÅ RooOS rO Æ¶Jave SE 6 DocumentationiÆ¨\nAccept the license agreement, then click directly the link to the English version of the\ndocumentation. Do not click the check box, since it requires additional software called the\nSun Download Manager. Safari should automatically download a zip file to your Desktop. If\nit was unzipped and you do not see the .zip file, you must set the preference for Safari to\nnot automatically open files after downloading (see above).\nYou will want to leave this file on your desktop for now, until you install Eclipse\n1.00/1.001/1.002\nHow to Install Java on Mac OS\n3/3\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "How to install Java for Windows",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/b268388cf8102823e208ca64bcf0946c_MIT1_00S12_Insl_Java_Win.pdf",
      "content": "1.00/1.001/1.002--Spring 2012\nHow to Install Java and its Documentation\nWindows\n\nBefore you can program in Java for 1.00/1.001/1.002, you will need to install the \"Java Standard\nEdition, Java Development Kit 7\" (JDK 7) on your windows computer. You should note that Java\nStandard Edition has several numbering systems: for example, 1.6.0_21, 6u21, and \"JDK 6\nUpdate 21\" all refer to the same version. The Course 1.00/1.001/1.002 staff will only support\nJDK versions 5.0 and higher.\n\nThis document contains step-by-step instructions for installing JDK 7u2 and its documentation\n(Javadocs) on a Microsoft Windows computer. These are current as of January 29, 2012, but be\naware that minor changes occur frequently. If you have a question, please contact one of the\n1.00 staff.\n\nThe JDK 7u2 can be downloaded from this website:\n\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\n\nClick the Download JDK button in the Java Platform, Standard Edition section. Make sure you\ndownload the JDK and not the JRE.\n\n1.00/1.001/1.002\nHow to Install Java on Windows\n1/4\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nSelect Accept License Agreement.\n\nThen, select the installation file for your platform: If your system is 32-bit, select the jdk-7u2\nwindows-i586.exe. If your system is 64-bit, select the jdk-7u2-windows-x64.exe. You can find\nout what type of system you have by going to Start, Control Panel, System, and look at the\ninformation listed under \"System type.\"\n\n(c) Oracle. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nOnce you have obtained the installation file, double-click it to begin the installation process. This\nprocess will lead you through the following series of windows:\n\n1. Setup\n\nClick Next.\n\n2. Custom Setup\n\nYou do not need to make any changes to the default setting. Just verify the installation\n\ndirectory, which should be C:\\Program Files\\Java\\jdk1.7.0_02\\\n\nClick Next.\n\n3. Progress\n\nWait for the next window to open.\n\n4. Destination Folder\n\nYou do not need to make any changes to the default setting. Just verify the installation\n\ndirectory, which should be C:\\Program Files\\Java\\jre7\\. Click Next.\n\n5. Progress\n\nWait for process to end.\n\n6. Complete\n1.00/1.001/1.002\nHow to Install Java on Windows\n2/4\n\nClick Finish to complete. A browser window may open that asks you to register the\nsoftware. You may do so, or just close it without registration.\n\nYou now need to download the Java documentation to your computer. Eclipse, the application\nyou will use to write your Java programs, can use this documentation to create helpful tips.\n\nThe documentation can be downloaded from the same website as the JDK:\n\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\n\nThis time, scroll down, and click the Download button in the \"Java SE 7 Documentation\" section\nof the Additional Resources box.\n\n(c) Oracle. All rights reserved. This content is excluded from our Creative\n\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n1.00/1.001/1.002\nHow to Install Java on Windows\n3/4\n\nOn the next page, select Accept License Agreement and download the .zip file.\n\n(c) Oracle. All rights reserved. This content is excluded from our Creative\n\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\nDepending on your browser settings, you may be asked to confirm that you want to save the\n.zip folder on your computer and/or choose where to save it. If so, save the .zip folder to your\nJDK directory, which is typically:\n\nC:\\Program Files\\Java\\jdk1.7.0_02\n\nIf the .zip folder is automatically downloaded to another place, move it to your JDK directory\nonce download is complete. If you don' t know where the .zip folder has been automatically\ndownloaded to, go to your browser' s Downloads window, right click on the .zip folder, and click\nOpen Containing Folder. There is no need to \"extract\" or \"unzip\" the files from the .zip folder.\n1.00/1.001/1.002\nHow to Install Java on Windows\n4/4\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "How to install Phidgets",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-00-introduction-to-computers-and-engineering-problem-solving-spring-2012/3d06dd39a4767a40aac56b0e3371d9b6_MIT1_00S12_Phidget_Inst.pdf",
      "content": "Phidget Interface Kit\n1. Download the Phidgets so:ware for your OS from www.phidgets.com/\ndrivers.php.\n2. Install it. Choose 32 bit or 64 bit version to match your OS and the version of\nJava you installed\n3. Download the phidget.jar file from www.phidgets.com/\nprogramming_resources.php.\n4. Unzip it to someplace where you can find it again.\n5. Open you Phidget kit and find\n1. USB cable to connect the interface board to your computer\n2. Interface board (1018)\n3. Force sensor (1106) with its cable\n4. A gree LE\n6. Connect them as in the image\n- USB from laptop to interface board\n- Force sensor to Analog In1\n- LED wired between GND and Digital Out 0\n- Short wire in GND, long in Digital Out 0\n- Use the screwdriver for the LE\nCourtesy of V. Judson Harward. Used with permission.\n\nPhidget Interface Kit, 2\n- If you have installed the Phidget so:ware, you should see a Phidge\nicon in your taskbar:\n- Click it. It should bring up the Phidget test applicaHon\n- If it brings up the Phidget control panel, click the General tab and then double clic\nthe Phidget interface kit device to bring up the test app\n- Press the Phidget force sensor buJon. Watch the reading change.\n- Click Digital Out box 0\n- LED should light up\nYou must close this window\nwhen using Eclipse!!!\nCourtesy of Phidgets. Used with permission.\n\nPhidgets and Java\n- Download PressureController.java and compile it in a new\nproject\n- You get errors because Eclipse can't find the Phidget.jar file, the\nlibrary that tells Java how to communicate with Phidgets\n- Open the Java ProperHes/Java Build Path popup by right\nclicking on the project\n- Click \"Add External Jars...\" and navigate to where you\nunzipped the phidget21.jar file\n- Select it and click Open, and then O\n- Next slide shows before and a:er shots\n- Errors will disappear from java files\n- Run PressureController\n\nPhidgets and Java\nBefore adding\nA'er addin\nCourtesy of The Eclipse Foundation. Used with permission.\n\nPhidget21.jar\n- Jar file is a Java archive\n- Zip format of compiled (byte code) Java classes\n- By placing it in your project, you can use all\nits classes\n- See its documentaHon (API Reference) for a\nlist of classes and methods. Download from\n- phidgets.com/programming_resources.php\n- Unzip\n- Bookmark it in your browser\n- Also look at Java Ge.ng Started Guid\n\nPhidgets Javadoc\nCourtesy of Phidgets. Used with permission.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n1.00 / 1.001 / 1.002 Introduction to Computers and Engineering Problem Solving\nSpring 2012\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    }
  ]
}