{
  "course_name": "Introductory Digital Systems Laboratory",
  "course_description": "6.111 consists of lectures and labs on digital logic, flipflops, PALs, counters, timing, synchronization, finite-state machines, and microprogrammed systems. Students are expected to design and implement a final project of their choice: games, music, digital filters, graphics, etc. The course requires extensive use of VHDL for describing and implementing digital logic designs. 6.111 is worth 12 Engineering Design Points.",
  "topics": [
    "Engineering",
    "Computer Science",
    "Computer Design and Engineering",
    "Electrical Engineering",
    "Digital Systems",
    "Electronics",
    "Engineering",
    "Computer Science",
    "Computer Design and Engineering",
    "Electrical Engineering",
    "Digital Systems",
    "Electronics"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 3 sessions / week, 1 hour / session\n\nRecitations: 1 session / week, 1 hour / session\n\nCourse Objectives:\n\nOn completion of 6.111 students will have confidence in their abilities to conceive and carry out a complex digital systems design project in a team of two or three people. More broadly, they will be ready to handle substantial, challenging design problems. In particular, students will be able to:\n\nexplain the elements of digital system abstractions such as digital logic, Boolean algebra, flip-flops, finite-state machines (FSMs), and microprogrammed systems.\n\ndesign simple digital systems based on these digital abstractions,and the \"digital paradigm\" including discrete, sampled information.\n\nuse basic digital tools and devices such as digital oscilloscopes, PALs, PROMs and VHDL.\n\nwork in a design team that can propose, design, successfully implement, and report on a digital circuit design project.\n\ncommunicate the purpose and results of a design project in written and oral presentations.\n\nLearning Outcomes\n\nStudents will be able to:\n\nuse Boolean Algebra and resulting logic for control and data paths.\n\ndo simple design with basic digital building blocks such as multiplexors, selectors, and shift registers.\n\ncharacterize binary signals in terms of: input levels, output levels,and \"noise margins\", specifically using the TTL specification.\n\nSpecify digital circuit timing: setup and hold times and logic propagation delays.\n\ndesign and implement a simple FSM.\n\ndesign, implement and program a simple microprogrammed sequencer.\n\nuse component parts, including complex parts, through their specifications.\n\nuse programmable logic parts for implementation of logical component and system realizations.\n\nuse industry standard CAD software that implements VHDL and can be used to program devices: for example Cypress' Galaxy and Nova.\n\nexplain communications \"handshaking\" paradigms.\n\nevaluate a design concept for appropriateness and achievability.\n\norganize a design concept into specific parts.\n\ndebug and test an implementation of a digital design.\n\ngive oral and written reports on all aspects of a design project.\n\nGeneral Information\n\nRequired Texts\n\nOne of the following books on VHDL, (or equivalent):\n\nSkahill, Kevin.\nVHDL for Programmable Logic\n. Englewood Cliffs, NJ: Prentice Hall, 1996. ISBN: 0201895730.\n\nPellerin, David, and Taylor, Douglas.\nVHDL Made Easy\n. Englewood Cliffs, NJ: Prentice Hall, 1996. ISBN: 0136507638.\n\nRecommended Reading\n\nOtt, Douglas E. and Thomas J. Wilderotter.\nA Designer's Guide to VHDL Synthesis\n. New York, NY: Springer, 1994. ISBN: 0792394720.\n\nFletcher, W. I.\nAn Engineering Approach to Digital Design\n. Englewood Cliffs, NJ: Prentice-Hall, 1980. ISBN: 0132776995.\n\nMano, M. Morris.\nComputer Engineering: Hardware Design\n. Englewood Cliffs, NJ: Prentice-Hall, 1988. ISBN: 0131629263.\n\nTTL Pinouts/Data\n\nThe TTL data book is no longer available. Required data and pinouts will be handed out, available on the web page, and available in the laboratory.\n\nDrawing Template\n\nAll logic diagrams submitted in this subject must be drawn with a template or on a computer, except for quizzes, where all that is required is that logic diagrams be legible. For homework and lab preparation, you may use a drawing template, though it is likely that you will use a computer-based drawing package. Preferred templates: MIL-STD-806C, in 1/2, 3/8 or 3/4 size, Koh-I-Noor No. 830544 or equivalent in Rapid Design or Pickett.\n\nConduct of the Subject (minor changes may be made)\n\nClasses\n\nAt the beginning of the term, there are three lectures and one recitation meeting per week. After the second quiz, the lectures and recitations are discontinued. We will meet you frequently in the laboratory.\n\nProblem Sets\n\nFive sets will be issued and your solutions will be graded; these are based on the lectures, text and labs.\n\nLaboratory Assignments\n\nAll laboratory exercises must be completed; these are intended to prepare you for the term project. In doing these exercises, each student works individually.\n\nTerm Project\n\nThe most important assignment is the Term Project, about which you will receive more detailed instruction later. In doing this assignment, you will work with one or, at most, two partners. You should begin finding your partner(s) early in the term.\n\nQuizzes\n\nThere will be two quizzes during the term, both before Drop Date.\n\nGrading Policy\n\nLate work will be penalized. Normally, homework will not be accepted after solutions have been distributed. Lateness of the lab assignments will result in a 20% per day penalty for work completed 1-5 working days after the due date. No point credit will be given for unexcused lateness exceeding 5 days.\n\nThe Lab 1 Check off sheet is to be initialed by a TA or LA and included with your report. Note that the check off sheet is NOT the report.\n\nLabs 2 and 3 have intermediate due dates, such as check off, etc. Lateness on these intermediate due dates does NOT result in automatic extensions for later due dates, e.g. the report due date. For example, two days late on Lab 3 check off will result in a penalty of 40% for points assigned to the check off. The report is (still) due at the published due date. There is virtually no modification required to a report depending on the working of your lab implementation. However, reports with no lab effort will receive a zero.\n\nThe term project requirements must be completed in accordance with the schedule given in the instructions. You must make a presentation of your part of your project to the rest of the class after the logic diagram conference. You must demonstrate (i.e., present) your term project even if it does not fully function, and you must submit the written report in order to receive a passing grade.\n\nThe assignment of letter grades (A,B,C,D,F) is an inherently subjective process. We do, however, make use of numerical data. A single number is computed by weighting graded assignments. The formula used may change slightly from term to term.\n\nThe following weights are currently used:\n\nActivities\n\nPercentages\n\nProblem Sets\n\n10%\n\nLabs\n\n35%\n\nQuizzes\n\n20%\n\nFinal Project\n\n35%\n\nWe construct a histogram of these summary numbers and proceed to discuss individual performances of virtually all students. Some of the factors considered are:\n\nDiligence as measured by completion of most of the problem sets and by presence in the laboratory during final project time.\n\nCompletion of Labs 2 and 3. Past history has been that it is extremely rare for a student to receive an A without completing Lab 3. Of course, it is possible to get a grade lower than an A even if Lab 3 is done.\n\nProject performance.\nNaN. Any student who does not turn in a final project report will receive an F.\nNaN. Students who do not construct a project will receive an F.\nNaN. Project complexity is an important factor in discriminating between an A and a B. An A is rarely given if the final project is not as complicated as the last Lab.\n\nAlthough 6.111 has a significant classroom component, it is primarily a lab subject. Accomplishments in the lab tend to be weighted more heavily than other components. The classroom component is viewed as supportive of the lab components.\n\nTraditionally, both average grade levels and average performance have been quite high in 6.111. A large number of students do \"A\" level work and are, indeed, rewarded with a grade of A. The corollary to this is that, since average performance levels are so high, punting any part of the subject, even the problem sets, can lead to a disappointing grade. It is important that you keep up with the work.\n\nFinally, and unfortunately, it is important for us to outline our expectations for academic honesty in 6.111. We do this not because we expect any of you to be dishonest, nor to insult your intelligence or character, but to avoid any misunderstandings.\n\nFirst, the quizzes are to be individual efforts. The problem sets and lab exercises are also to be individual efforts; however, it is okay to ask questions, get help from us, fellow students, or anyone else. But then, do them by yourself. Indications of collaboration such as incidents of identical code or copied figures are unacceptable and are liable to be dealt with in a seemingly harsh fashion. Do not \"dry lab\" the design part of the laboratory work. The TA's will be asking you about your solutions to make sure you really do understand what you have done.\n\nThe Final Project is a different story. We do expect you to collaborate with the course staff and with your fellow students, especially with your lab partner. Joint or individual reports are acceptable, but in the case of joint reports it is important that responsibility for each section of the work be indicated.\n\nLaboratory\n\nRead the General Laboratory Information handout.\n\nSchedule\n\nThe schedule of the lectures and assignments is posted on the course website. Staying on schedule is very important in this subject, in order to be prepared to do the term project, which is the single most important assignment in 6.111. It will be an enjoyable experience if you are properly prepared.\n\nExtra Units for 6.111\n\nMany 6.111 students spend more hours per week than warranted by the 12 unit rating. Primarily this is due to large final projects. It is now possible to register for 6.905 and gain an additional 6 units of credit for 6.111. Your grade for 6.905 will be the same as your grade for 6.111. Your grade for 6.111 is not influenced by registration for 6.905.\n\nOur motivation for enabling the availability of these extra units is two-fold. Foremost is our desire to convince 6.111 students that they need not do a project which is bigger and more complicated than ever done in the past. Secondly, recognizing that many students will continue to do ambitious projects, we would like to credit 6.111 students with units appropriate to work expended.\n\nProcedures for registering for the extra units by DROP date will be announced later on in the term.Both the determination of grades and the project time requirements are inherently subjective. The last Lab provides some guidance to the evaluation of project size and complexity. Lab 3 can require almost a full kit's worth of components. A reasonable guideline as to size of 6.111 projects is that it not require more than a kit and a proto board per person.\n\n6.111 student projects often become too large because of a desire to effect computations in parallel and at high speed. Data paths are often unnecessarily wide and redundant. It is generally far better to minimize the type and extent of the data paths even though this results in more complicated control circuitry.\n\nUse of microprogrammed sequencers and FSMs implemented with PALs and CPLD's allows implementation of complicated control with a small number of ICs. Please remember that massive data paths that enable computation at speeds far faster than needed do not represent a good design! It is almost always better to spend more time thinking and less time wiring.",
  "files": [
    {
      "category": "Resource",
      "title": "ps1f02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/22824f8fadd25c474db2ff513bdb2cb7_ps1f02.pdf",
      "content": "Massac\nh\nusetts\nInstitute\nof\nT\nec\nhnology\nDepartmen\nt\nof\nElectrical\nEngineering\nand\nComputer\nScience\n6.111\n-\nIn\ntro\nductory\nDigital\nSystems\nLab\noratory\nProblem\nSet\nIssued:\nSeptem\nb\ner\n4,\nDue:\nSeptem\nb\ner\n11,\nProblem\n1:\nBo\nolean\nAlgebra\nPractice\nProblems\n(Pr\noblem\nwil\nl\nnot\nb\ne\ngr\nade\nd.)\nSimplify\neac\nh\nexpression\nb\ny\nalgebraic\nmanipulation.\nT\nry\nto\nrecognize\nwhen\nit\nis\nappropriate\nto\ntransform\nto\nthe\ndual,\nsimplify\n,\nand\nre-transform\n(e.g.\nno.\n6).\nT\nry\ndoing\nthe\nproblems\nb\nefore\nlo\noking\nat\nthe\nsolutions\nwhic\nh\nare\nat\nthe\nend\nof\nthis\nproblem\nset.\n1)\na\n+\n=\n14)\ny\n+\ny\ny\n=\n2)\na:0\n=\n15)\nxy\n+\nxy\n=\n3)\na\n+\na\n=\n16)\nx\n+\ny\nx\n=\n4)\na\n+\na\n=\n17)\n(w\n+\nx\n+\ny\n+\nz\n)y\n=\n5)\na\n+\nab\n=\n18)\n(x\n+\ny\n)(x\n+\ny\n)\n=\n6)\na\n+\nab\n=\n19)\nw\n+\n[w\n+\n(w\nx)]\n=\n7)\na(a\n+\nb)\n=\n20)\nx[x\n+\n(xy\n)]\n=\n8)\nab\n+\nab\n=\n21)\n(x\n+\nx)\n=\n9)\n(a\n+\nb)(a\n+\nb)\n=\n22)\n(x\n+\nx)\n=\n10)\na(a\n+\nb\n+\nc\n+\n:::)\n=\n23)\nw\n+\n(w\nxy\nz\n)\n=\nF\nor\n(11),(12),\n(13),\nf\n(a;\nb;\nc)\n=\na\n+\nb\n+\nc\n24)\nw\n(w\nxy\nz\n)\n=\n11)\nf\n(a;\nb;\nab)\n=\n25)\nxz\n+\nxy\n+\nz\ny\n=\n12)\nf\n(a;\nb;\nab\n)\n=\n26)\n(x\n+\nz\n)(x\n+\ny\n)(z\n+\ny\n)\n=\n13)\nf\n[a;\nb;\n(ab)\n]\n=\n27)\nx\n+\ny\n+\nxy\nz\n=\nProblem\n2:\nF\nor\neac\nh\nof\nthe\nfollo\nwing\nBo\nolean\nexpressions,\ngiv\ne:\ni)\nThe\ntruth\ntable,\nii)\nThe\nKarnaugh\nmap,\niii)\nThe\nMSP\nexpression,\n(Sho\nw\ngroupings)\niv)\nThe\nMPS\nexpression.\n(Sho\nw\ngroupings)\n1.\n(a\n+\n(b\n+\nc))\n\n(c\n+\n(a\n+\nb\n+\nd)\n\n(a\n+\nb\n+\nd))\n2.\n(c\n+\na\n\nb)\n\n(c\n+\n(a\n+\nd)\n\n(b\n+\nd))\n\n(c\n+\n(a\n+\nb)\n\n(b\n+\nd\n))\n3.\nw\n\ny\n+\nw\n\nx\n\ny\n+\nw\n\nx\n\nz\n\n6.111\n|\nProblem\nSet\nProblem\n3:\nKarnaugh\nMaps\nare\nuseful\nfor\nnding\nminimal\nimplemen\ntations\nof\nBo\nolean\nexpressions\nwith\nonly\na\nfew\nv\nariables.\nHo\nw\nev\ner,\nthey\ncan\nb\ne\na\nlittle\ntric\nky\nwhen\n\\don't\ncares\"\n(X)\nare\nin\nv\nolv\ned.\nUsing\nthe\nfollo\nwing\nK-Maps:\n1.\nFind\nthe\nminimal\nsum\nof\npro\nducts\nexpression.\nSho\nw\ny\nour\ngroupings.\n2.\nFind\nthe\nminimal\npro\nduct\nof\nsums\nexpression.\nSho\nw\ny\nour\ngroupings.\n3.\nAre\ny\nour\nsolutions\nunique?\nIf\nnot,\nlist\nand\nsho\nw\nthe\nother\nminimal\nexpressions.\n4.\nDo\nes\nthe\nMPS\n=\nMSP?\n@\n@\n@\nab\ncd\nX\n@\n@\n@\nab\ncd\nX\nX\nProblem\n4:\nUse\nDeMorgan's\nTheorems\nto\nsimplify\nthe\nfollo\nwing\nexpressions:\n1.\n(a\n+\nc)\n\n(b\n+\nc)\n2.\na\n\nb\n\nc\n3.\nb\n+\nc\n\na\n+\nc\n\na\n+\nb\n\n6.111\n|\nProblem\nSet\nSolutions\nto\nBo\nolean\nAlgebra\nPractice\nProblems\n1)\na\n+\n=\na\n2)\na:0\n=\n3)\na\n+\na\n=\n4)\na\n+\na\n=\na\n5)\na\n+\nab\n=\na(1\n+\nb)\n=\na\n6)\na\n+\nab\n=\n(a\n+\na)(a\n+\nb)\n=\na\n+\nb\n7)\na(a\n+\nb)\n=\naa\n+\nab\n=\nab\n8)\nab\n+\nab\n=\nb(a\n+\na)\n=\nb\n9)\n(a\n+\nb)(a\n+\nb)\n=\naa\n+\na\nb\n+\nb\na\n+\nb\nb\n=\na\n+\nab\n+\na\nb\n=\na\n(1\n+\nb\n+\nb\n)\n=\na\n10)\na(a\n+\nb\n+\nc:::)\n=\naa\n+\nab\n+\nac\n+\n:::\n=\na\n+\nab\n+\nac\n+\n:::\n=\na\n11)\nf\n(a;\nb;\nab)\n=\na\n+\nb\n+\nab\n=\na\n+\nb\n12)\nf\n(a;\nb;\nab)\n=\na\n+\nb\n+\nab\n=\na\n+\nb\n+\na\n=\n13)\nf\n(a;\nb;\n(ab))\n=\na\n+\nb\n+\n(ab)\n=\na\n+\nb\n+\na\n+\nb\n=\n14)\ny\n+\ny\ny\n=\ny\n15)\nxy\n+\nxy\n=\nx(y\n+\ny\n)\n=\nx\n16)\nx\n+\ny\nx\n=\nx\n(1\n+\ny\n)\n=\nx\n17)\n(w\n+\nx\n+\ny\n+\nz\n)y\n=\ny\n18)\n(x\n+\ny\n)(x\n+\ny\n)\n=\nx\n19)\nw\n+\n(w\n+\n(w\nx))\n=\nw\n20)\nx(x\n+\n(xy\n))\n=\nx\n21)\n(x\n+\nx)\n=\nx\n22)\n(x\n+\nx)\n=\n23)\nw\n+\n(w\nx\ny\nz\n)\n=\nw\n(1\n+\nxy\nz\n)\n=\nw\n24)\nw\n(w\nxy\nz\n)\n=\nw\n(w\n+\nx\n+\ny\n+\nz\n)\n=\nw\n25)\nxz\n+\nx\ny\n+\nz\ny\n=\nxz\n+\nxy\n26)\n(x\n+\nz\n)(x\n+\ny\n)(z\n+\ny\n)\n=\n(x\n+\nz\n)(x\n+\ny\n)\n27)\nx\n+\ny\n+\nxy\nz\n=\nx\n+\ny\n+\nz"
    },
    {
      "category": "Resource",
      "title": "ps1f02soln.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/65532b32224fea0f8e2fcb9d3b7be51f_ps1f02soln.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\nProblem Set 1 Solutions\nIssued: Lecture 4 Day\nProblem 1:\nNot Graded.\n\na\nb\nd\na\nc\nd\nProblem 2:\nb\n1.\nf = (a + (b + c)) ⋅ (c + (a +\n+\n\nd ) ⋅( +\n+\n))\ni) truth table\nii) Karnaugh map\n\na\nb\nc\nd\nf\ncd ab\niii) MPS\niv) MSP\ncd ab\ncd ab\n⋅\nc\nf = c + b ⋅ d + a d\nf = (b +\n+\n\nd ) ⋅( +\n+\n)\n\n2.\n+\n+\nf = (c + a ⋅ b) ⋅(c + (a + d ) ⋅(b\nd\n\n)) ⋅ (c + (a + b) ⋅(b\nd\n\n))\ni) truth table\n\na\nb\nc\nd\nf\niii) MSP\ncd ab\nii) Karnaugh map\ncd ab\niv) MPS\ncd ab\nf = a ⋅ b + b c d\nf = (a + b) ⋅(b\nd\n\n) ⋅(b\nc)\n⋅\n⋅\n\n+\n+\n\n3.\nf = w ⋅ y + w x\n⋅\n⋅\n\nz\n⋅\n⋅\n\ny + w x\ni) truth table\n\nw x\ny\nz\nf\niii) MSP\nyz wx\nii) Karnaugh map\nyz\niv) MPS\nwx\nyz wx\nf = w ⋅\n⋅\n\nz + x\ny\n\n+ w\ny\n\nf = (w + x) ⋅( y\nz) ⋅( x\ny)\nx\n⋅\n⋅\n+\n+\n\na b c\nProblem 3:\n1. MSP\na)\nb)\nX\ncd ab\nX\nX\ncd ab\nf = a ⋅ b\nf = a ⋅ d + ⋅\n⋅\n\n2. MPS\na)\nb)\nX\ncd ab\nX\nX\ncd ab\nb\nf = a ⋅ b\nf = a ⋅\n⋅(c + d )\n3. The solutions are unique given that we want the minimal equations.\n4. The MSP and MPS in part a are equal. The MSP and MPS in part b are not equal as the don't\ncares in part 1 are assumed to be 1 and the don't cares in part 2 are assumed to be 0.\n\na\nb\nc\na b c\na\nb\nc\nProblem 4:\n1.\n2.\n3.\nProblem 5:\nlibrary ieee;\n(a\nc) ⋅(b\nc) = (a\nc) + (b\nc) =\n+\n+\n+\n+\n+\n+\n⋅\n⋅\n=\n+\n+\n\n+\n+\n+\n⋅\n⋅\n⋅\n(b\nc) ⋅(a\nc) ⋅(a\nb) = (b c) ⋅(a c) ⋅(a b) = 0\nuse ieee.std_logic_1164.all;\nentity pset_1_problem_5 is\nport (\na, b, c, d : in std_logic;\np1, p2\n: out std_logic);\nend pset_1_problem_5;\narchitecture structure of pset_1_problem_5 is\nbegin\np1 <= (a and c) or (not a and (b or not c));\np2 <= (not b and not c and d)\nor (not a and b and d)\nor (a and not c and d)\nor (not a and not c and not d);\nend structure;"
    },
    {
      "category": "Resource",
      "title": "ps2f02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/e97855f7b240a9676cf1b9e9a67612e6_ps2f02.pdf",
      "content": "!#\"%$&('*))+-,/.&()+01)2$)'4365879':!#\"&.&3 ;<3 = >\n?9@BADC2EGFIHJ@BKLFNM2OP&QR@BSFIEUTRSVC+QWP&KYX#TRK:@B@BEUTRKYXJC2K:Z\\[]M#HJAY^:F_@BEa`bSTR@KYSB@\nc:dfe#e#ehgji\nKLFIE_M*ZY^YSFIM#EGkl?9TRX2TmFC+Qn`*k*oGFI@BHJoqp%C+r6M#E_C+FIM2EUk\ns&E_M#rYQm@BHt`b@Fhu\nv1w<wyxz_{L|}VzU~(zU2zG\n/\nxz|}VzU~(zU2zG\n_\nD]%\nY ¢¡£¤¥G9¦D]9¦§(c) Ja¤G«\n¬fB(r)q\n<°±<z2z8zU3Bx\n\n° μj¶ q x(<~x(q·° μ1<2z»oG° ox°±qw2 1⁄4Wμ12zG1⁄2 1⁄4&3⁄4A¿wy°μAA2 V 1⁄2z\n\nμ\n\n1⁄2 AzG\n\nwy°A~1⁄2°±¶Aj2z\nzU3Bx\n\n<° μqxμ<° 1⁄2*°±A°ÆwnzC(~<zUw<wyz_{a°μ9wyxEwW ¶b~< ({(xo<wU3⁄4EEn2z&zC(~<zUw<wy° μh{( VzUwnμ A2\nIE\nz E2z&A° μ°\n\n1⁄2R3⁄4\nA\nB\nC\nD\nF\n¬\n\n(r)9I\nx° 1⁄2Æ{\n\n<x(<2q\n\n1⁄2z¶ 2z& x(<~x(A·\n\nxw° μAAI\n\nw6<2zI] Bw1Aw° Aμ° I+o\n\nμW°\n\nμ{h\n\nw <2zI1⁄2 z\n\nwyAwy°Aμ° I+o\n\nμB\n°±_3⁄4\n¬\no\n(r)\n}V2 1⁄4(c)2zÐ\n\n<μ\n\nxA2A\n\n~A¶ 2zo°<oGx°±_3⁄4D¿%wzW2zÐNR\n\n~¤< §Iμ+{\n\nA° μ°\n\n1⁄22wyx£ ¶L~ ({(x+o<wzC(~<zUw<wy° μ*3⁄4\n¬\n{\n(r)\nv1w 2z§OO}O1zC(~<zUw<wy° μa¶\n¬\no\n(r)\n¶zUzI¶ Owy\n\n<°oI2\n/OU\n<{w<×hvØ¶Y2zG<z\n\nzI2\nOU\n<{w\n\n1⁄4W<°±<z\n\nμzG1⁄4AzC(~<zUw<wy° μ\n\nn°ÆwW2\nOU\n<{N¶zUz3⁄4\n¬\nz\n(r)\n¿%wzI2z&<x29\n\n1⁄2z&¶\n¬\n\n(r)A\nμ{h° A~1⁄2zGAzGμBA<2z&¶xμ+o° μ»·Jxw°μA\n\nμ\n\nNR N\n\n¤x1⁄2±<° ~1⁄2 zGCV U3⁄4n¿%wz§I\n\nI\n#U\n¶ E<2zIo μB< 1⁄2+1⁄2z\n\n{wE1⁄4W° 2hI\n\no°μA\n\nw2zA wy w° Aμ°±I2o\n\nμB °±_3⁄4DEn2z%¶xμo<° μqo\n\nμN2zAzGμzU\n\nzU{AVAA1AV°μA\n2zA<zG\n\n°μ°μA9° μ~x(<w< 92zAxC8 8\nbU\n\n*\n\n3⁄4EU\n\n+zU1⁄2DA x&{(°\n\nA\n\nUo\n\n<z¶x1⁄21⁄2 A\n\n/Y\n°μAhwx<z]2\n\nz\nE\nzUAE°μ~xA1⁄2 z\n\n{h /¶b2z&¤x(Cq°ÆwWo μμzUoz_{a1⁄4W° 28w AzI° μ~x(%w° Aμ\n\n1⁄2R3⁄4\nD]%\nÞA£ßa 9¤aa: 9¦§UJaq9%\naalGGaaæ+lG¤a9a\n¿%w°μAc2zh¶ 1⁄21⁄2 1⁄4W° μA»°A° μAe{°\n\nA\n\n{(\n\n1⁄4e2zh x(~x(qe\n¬f\nwwxAzq2\n\naeUw1\n\n<w\n\n(r)\n¶\n\n~2 w°±<°\nE\nzNØzU{(Az\n<°AAzUz_{a\\e+° ~(NRe ~\n\nμzGA\n\n<°\nE\nzNØzU{(AzA<°AAzUz_{aEie°~(Nme+ ~\n\nμ{\n\n~2 w° °\nE\nzNØzU{Az<° AAzG<zU{qiÐie°~(Nme+ ~i3⁄4\n\nðnoooo ooo÷øuuuuuy\nþ\nCLK\nD, T, J\nK\nQ(D)\nQ(T)\nQ(J, K)\ny\n!\n\"$#&%('*),+.-0/214365879#.7;:=<?>@)?ACBD<,B4E?7F>GB4E,<&HI+GAJF)?5LK0+M#-\n34ND36507O#.AI5LP?P,KL+M> B4E?<DHI+GARQFST)?#UHWVXB=+27HC),587Y6+R#Z<\\[^]_BDY6Y+2<&H\nB4<`HC),+25LAVX5Lab+GAI+G<?>G+27!\"cVX+27C5LdD<feXPg+GAChiB4AIY6#4<?> +De,#ZAI+2#?e&+GHI>4Q\n% Q\n\"ijg%'*),+GAI+!#ZAI+YkE,KLHC50P,K0+kJ*#l:X7*HCBm>GAC+R#UHI+!#Z<onUpqj,5LH> BDE,<&HC+GAhiACBDYHrJsBo-0/2143>@)?5LP?72QtO<,+Y65LdD)&HHC),50<,u(HCBmJF5LAI+HC)?+\nv\n]FtwB4hfHC)?+Ox\\AI7;H*>GB4E,<&HI+GAs5L<&HCBMHC)?+W>GKLBX>@u650<,P,EXHB4hfHC),+9<,+Gy&H>GB4E,<&HC+2A2e&j,EXHF5LHF507*#Mj?#4VmJs#l:6BZh>G#47I>G#DVX50<,d!HrJsB\n> B4E?<DHI+GA@7GQST)=:,[ST)?#UH587#jg+ H;HI+GAJ*#l:BZh>G#D7C>2#4VX50<,dMHrJ_B-0/21D3M>GB4E,<&HC+2AI7@[\n\"$>R%zU{}|O'~#Z<\\VzZ{}|O^BD<`HI),+-0/2143D7*#ZAI+O<,B4HFHC),+!7I#ZY6+DQST)\\#UH587*HC),+!V,5ab+GAI+G<?>G+R[\n\"$V\\%`B4E.)?#lD+jg+G+G<`),50AC+RV.j=:r'HCB> BDE,<&H}HC)?+O<=E,YMj\\+2A_B4h7rHIE?VX+2<DH@7s5L<m#M> K8#47I7;AIB=B4YQ=5L<\\> +HI),+9ACB=B4Y587_7CY#ZK0Kce\nHC),+2AC+507#`Y#UyX50YkE,YB4h\nþ\n1(7;HCE?VX+2<&HI7W50<HI),+> K8#47I7GQ+R7;50d4<#(>GB4E,<&HI+GA> 50AI>GE,5LH9JF),58>@):4B4E>G#4<E?7C+HCBu4+2+GP\nHCA@#4>@uBZhHI),+<&E?Ykjg+GA6BZhPg+GBDP,K0+`50<HI),+> K8#47I7;AIB=B4YQ'*)?+(>G5LA@> E,5LH6<,+G+RV,76#Z<^BDEXHCP?EXH6HC)?#ZHMHI+GK0K07),BUJY#4<&:\n7rHIE?VX+G<&H@7O#4AC+!50<oHI),+M>GK0#D7C72eb#47OJ_+2KLK#47O#Z<oBDEXHCP,E,HOHI)?#UH#ZK0+GACHI7:4B4EJF)?+G<#mY#UyX5LYME,YBZh\nþ\n1.7rHIE?VX+2<DH@79+G<&HC+2A\nHC),+!>GK0#D7C7CACB=BDY(QA@#lJw#JF50AC50<,dVX58#ZdDAI#4YhiB4AFHI),+5LY6P,K0+GY6+2<DH@#UHI5LBD<`B4h:DB4E,AF> 50A@> E,5LH2Q"
    },
    {
      "category": "Resource",
      "title": "ps2f02soln.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/19ca6fc96b3a410549b56919227422c2_ps2f02soln.pdf",
      "content": "Problem Set 2 Solutions\nProblem 1.\n(a) F = (A*B) + (A+D)*(B xor C)* [/ (B*D)]\nLook at the simplest terms first, i.e. if both A and B are 1, then F is 1 independently of\nthe rest of the circuit. Similarly, if A and D are both 0, then the second expression is 0\nindependently of B and C.\n(b)\nA\nB\nC\nD\nF\n(c)\nAB\nCD\nMSP: F = A*B + A*C + (⌐B)*C*D\n(d) The expression above is free from static hazards.\n\n(e)\nD\nA\nB\nF\nC\n\nProblem 2.\nThe timing diagram below assumes that flip-flops have no propagation delay, that is\nPd = 0 ns, and consequently all state changes occur on the clock edge. If some non-zero\npropagation delay was assumed, the timing diagram would be shifted to the right by Pd.\nWe just need to remember our flip-flops to create the timing diagram, that is\nD Qn-1 Qn\nT Qn-1 Qn\nJ K Qn-1 Qn\n0 0\n0 0\n0 0 0\n0 1\n0 1\n0 0 1\n1 0\n1 0\n0 1 0\n1 1\n1 1\n0 1 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\n\nProblem 3.\n(a) The \"393 is called a ripple counter because the effect of a clock edge has to --ripple\"\nthrough the counter to cause a change in the value. Only the least significant bit is\ntriggered by the clock; the rest have to be triggered by the bit that precedes it. A \"163 is a\nsynchronous counter because ALL bits of the counter are triggered directly by the clock.\n(b) Wiring the RCO of the first counter to the clock input of the second counter breaks\nthe synchronicity of the counter. The counting of the second counter is no longer\nsynchronized to the clock, but triggered by the RCO of the first counter. A better way to\ndo this is to wire up the RCO of the first counter to enable the second counter. This way\nboth counters are synchronized to the clock.\n(c) The difference between /ENT and /ENP is that /ENT is an enable for both counting\nand the RCO, whereas /ENP is just a count enable.\n(d) Let's assume that signal PERSON_IN is 1 for one clock cycle every time a person\nwalks into the classroom. Also assume that signal IS_26 asserts whether the counter\nreached a value of 26, that is, IS_26 is 1 when the counter has reached 26 and is 0 when\nthe counter has reached a value less than 26.\nThen we require our design to exhibit the following behavior:\nSIGNAL_IN\nIS_26?\nCount\nError\nThe counter does not count either when the counter has reached the value of 26 or when\nno new person enters the classroom. That is, when a person walks in and the counter\nhasn't reached the value of 26, the counter just counts up by one (that is Count = 1). If the\ncounter has reached the value of 26, then the counter does not count up by 1 when the\nnext person walks in and asserts the Error signal.\nSo the following circuit will satisfy the above constraints:"
    },
    {
      "category": "Resource",
      "title": "ps3f02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/71bb37739ed78c5fec33c299ffe06c8c_ps3f02.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\nProblem Set 3 Issued: Lecture 7 Day\n\nDue: Lecture 10 Day\nProblem 1:\nA finite state machine shown below has one input, X, and one output, Z, and two state variables, A\nand B, and a clock input.\n(a) Give the state transition table for this FSM.\n(b) Draw the state diagram for this FSM.\n(c) Implement this FSM in VHDL. Hand in your code and a printout of part of your simulation\nshowing the correct operation of the FSM.\nB\nA\nX\nZ\nCLK\nQ'\nD\nQ'\nD\nQ\nQ\n\n(d) Fill in the timing diagram below. You may neglect propagation delay in the logic, assuming it\nto be zero.\nProblem 2:\nDesign a 3-bit counter that can count either up or down on the rising edge of the clock. There are\nthree input signals: a clock signal, a reset signal, and a signal to indicate whether the counter\nshould count up or count down. If the up/down signal is high, the counter will count up, if the\ninput signal is low, the counter will count down. On reset, the count will return to zero.\n(a) Give the state transition table for this FSM.\n(b) Use K-maps to find the MSP expressions to be used as inputs to the D flip-flops.\n(c) Draw the logic diagram for this counter.\nProblem 3:\nUsing the minimum amount of logic, configure the LS163 4-bit counter to repeatedly count the\nfollowing patterns:\n(a) from 1 to 9 repeatedly, i.e. 1,2,3,4,5,6,7,8,9\n(b) by even numbers, i.e. 0,2,4,6,8,10,12,14\n(c) the sequence 0,2,3,6,9,10,15\nX\nZ\nB\nA\nCLK"
    },
    {
      "category": "Resource",
      "title": "ps3f02soln.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/7e3fb00adf69faea4a8630095db0b2ff_ps3f02soln.pdf",
      "content": "!\n\"\n#\n$\n%\n&\n'\n\"\n(\n&\n)\n*\n+\n,\n\"-\n&\n%\n.\n-\n$\n,\n+\n(\n/\n.\n(\n\"\n\"\n%\n.\n(\n/\n$\n(\n)\n'\n#\n&\n\"\n%\n-\n.\n\"\n(\n-\n\"\n:\n(\n&\n%\n)\n-\n&\n)\n%\n;\n!\n.\n/\n.\n&\n$\n,\n;\n<\n&\n\"\n'\n<\n=\n$\n>\n)\n%\n$\n&\n)\n%\n;\n?\n@\nA\nBC\nD\nE\nF\nD\nG\nH\nF\nA\nC\nI\nG\nJ\nA\nK\nL\nM\nL\nL\nI\nD\nN\nO\nF\nD\nP\nG\nD\nE\nB\nD\n@\nHQSR\nT\nQ\nQ\nT\nU\nV\nW\nXY\nZ\n[\n\\\n]\n^\n_\n`\na\n`\nb\nc\nd\na\nd\nb\ne\nf\nf\nf\nf\nf\nf\nf\nf\n\nf\nf\n\nf\n\nf\nf\nf\n\nf\n\nf\n\nf\nf\nf\n\nf\n\nf\n\nf\n\n]\ng\n_\n0 | 0\n1 | 1\n0 | 1\n1 | 1\n0 | 0\n1 | 1\n0 | 1\n1 | 1\n\nh\n]\ni\n_\nj\nj\nkl\nm\nn\nm\nn\no\nn\nopq\nr\ns\nnt\nr\nu\nv\nm\nt\nw\nv\nt\nx\ny\nt\nz\nr\ns\np\nn\ns\nv\n{\nr\nm\nz\ny\no\ny|\nm\ns\ns\ns}\nu\nn\ns\nm\ns\ns\ns\n~\nn\nv\n\nr\nt\n\nm\n\n~\no\nr\nr\n}\nu\nn\ns\n\nt\ny\n\n~\nn\nv\n\no\ny\nm\nv\nl\n~\no\nr\nr\n}\ns\nw\nv\nm\nv\n|\n\nn\np\nm\nn\nq\nt\ny\nv\n\nr\n\nm\nw\nn\nv\n\nr\nt\n\nm\n\n}\ny\ns\nn\ns\nv\n\nm\nw\nn\nv\n\nr\nt\n\nm\n\n}\n\nm\nw\nn\nv\n\nr\nt\n\nm\n\n}\n\nt\nu\nv\nn\nv\n\nr\nt\n\nm\n\n}\nn\nv\no\nv\ns\nt\nu\nv\n\nt\nu\nv\nn\nv\n\nr\nt\n\nm\n\ns\n\nv\nt\ny\n\nt\n\nw\nv\nt\n\n}\ns\nw\n\nn\np\n}\no\ny\n\nl\nm\nv\ns\n\nv\nu\ny\ns\nn\nv\no\nv\ns\n\np\no\n\nl\nm\nw\ns\nt\n\nn\np\nm\nn\nv\n|\nq\ns\n\nv\no\nv\ns\nk\n|\nq\ns\nm\nn\n\ns\ny\nt\n\ns\nyt\n\ns\ny\nt\n\nw\ns\n\nw\ns\n\ns\nyt\n\nw\ns\n\nw\ns\n\n}\nn\nm\n\nw\no\nr\nq\ny\ns\nn\ns\nw\nv\n\nn\nv\no\nv\ns\n\nw\ns\nv\n\nn\nv\no\nv\ns\n\nv\no\nv\ns\nk\n|\nq\ns\n}\nz\ns\n\nm\nw\nj\nj\nn\nv\no\nv\ns\n\np\no\n\nl\nm\nw\ns\n\nm\nv\nl\nq\ny\ns\nn\ns\nw\nv\n\nn\nv\no\nv\ns\nn\ns\nr\ns\n\nv\nn\nv\no\nv\ns\nt\nu\nv\n\nl\ns\nw\n\ns\nyt\n\ns\ny\nt\n\nl\ns\nw\n\nw\ns\n\nw\ns\n\nl\ns\nw\n\ns\nyt\n\nw\ns\n\nl\ns\nw\n\nw\ns\n\ns\nyt\n\nl\ns\nw\nt\nv\nl\ns\ny\nn\n}\nj\nj\n\nt\np\nz\nm\nw\no\nv\nm\nt\nw\no\nr\nq\nyt\n\ns\nn\nn\n\nl\no\nw\n\ns\nn\ns\n\ns\nw\n\nl\ns\nw\nn\nv\no\nv\ns\n\nt\ns\nn\nw\nt\nv\n\nl\no\nw\n\ns\nn\nv\no\nv\ns\n\nt\np\nz\n\nq\ny\nt\n\ns\nn\nn\n\nq\ny\ns\nn\ns\nw\nv\n\nn\nv\no\nv\ns\n\nz\ns\n\nm\nw\n\no\nn\ns\nq\ny\ns\nn\ns\nw\nv\n\nn\nv\no\nv\ns\nm\nn\n\nl\ns\nw\n\ns\nyt\n\ns\nyt\n\nw\ns\nv\n\nn\nv\no\nv\ns\n\ns\ny\nt\n\ns\ny\nt\n}\n\n}\n\nl\ns\nw\n\ns\nyt\n\nw\ns\n\nm\n\nv\nl\ns\nw\nw\ns\n\nv\n\nn\nv\no\nv\ns\n\nw\ns\n\ns\nyt\n}\ns\nr\nn\ns\nw\ns\n\nv\n\nn\nv\no\nv\ns\n\ns\nyt\n\ns\nyt\n}\ns\nw\n\nm\n\n}\n\n}\n\nl\ns\nw\n\nw\ns\n\ns\nyt\n\nm\n\nv\nl\ns\nw\nw\ns\n\nv\n\nn\nv\no\nv\ns\n\nw\ns\n\nw\ns}\ns\nr\nn\ns\nw\ns\n\nv\n\nn\nv\no\nv\ns\n\ns\nyt\n\nw\ns}\ns\nw\n\nm\n\n}\n\n}\n\nl\ns\nw\n\nw\ns\n\nw\ns\n\nw\ns\n\nv\n\nn\nv\no\nv\ns\n\nw\ns\n\nw\ns}\n\n}\n\n¡\n\n¢\n£\n¤\n¥\n¦\n¢\n§\n\n(c)\na\n«\n¬\n(r)\n\n«\n¬°±\n\n¬\nμ\n±\n\n¶\n\n¬\n·\n\n¬\n¬\n°\n(r)o\n·\n»\n1⁄4\n»\no\n¬\n1⁄2\n3⁄4\n¶\n±\n¬\no\n¿\n¿\nA\n°\n¬\n±\n¬\nμ\n±\n\n¶\n\n¬\no\n¬\n1⁄2\nA\n°\n(r)\n3⁄4\n¬\n±\n±\no\n¿\n¿\n±\n\n¶\n\n¬\nμ\n3⁄4\n(r)A\nA\no\n±\n\n¶\n\n¬\nμ\n3⁄4\nA\n(r)\n3⁄4\nA\n¬\n1⁄2\nA\nA\n°\n(r)\n3⁄4\n¬\n±\n±\nÆ\n3⁄4\nA\nAEC\n°\n¬\n±\n¬\n\nE\nA\n¬E\nE\n\n¿\n¿\n±\n\n¶\n\n¬\n\n°\n¶\n\n±\nE\n\nE\n(r)\n\n±\nE\nI\nÆ\n°\n¬\n±\n¬\n\n»\nI\n»\nE\n\n«\n¬\nA\n°\n¬\n±\n¬\nμ\n±\n\n¶\n\n¬\n·\n¬\n°\n(r)\n\n¬\no\n¬\nA\n±\nE\nI\n°\nE\n±\nE\n\nE\nμ\n¬\n1⁄2\nE\n¬\nÆ\n3⁄4\nA\nA\nE\n\n«\n¬\nA\n°\n¬\n±\n¬\n\nμ\n±\n\n¶\n\n¬\n·\n\n¬\n\nμ\n±\n\n¶\n\n¬\no\n¬\n1⁄2\nE\nI\no\n¬\n1⁄2\nA\n°\n(r)\n3⁄4\n¬\n±\n±\n±\n\n¶\n\n¬\nμ\n3⁄4\nA\n(r)\n3⁄4\nA\n¬\n1⁄2\no\n¬\n1⁄2\n±\n\n¶\n\n¬\nμ\nA\n¶\n3⁄4\n«\nE\n\n¬\no\nI\nI\nÐ\nZ\nB\nA\nX\nCLK\n\n¡\n\n¢\n£\n¤\n¥\n¦\n¢\n§\n\nN\nO\nO\nO\nOO\n×\nØ\nU\nI\nU\nÐ\nU\nU\nU\nY\nU\nÞ\nß\na\na\na\nU\na\nY\na\nÞ\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\næc\nee\ne\neie\na\nU\ne\na\nY\ne\na\nÞ\ne\ni\ni\ni\nðno\ne\ne\ne\ne\ne\ni\nao\n\noo\no\no\no÷\nø\nu\nu\nu\nu\nu\ny\nþ\ny\nu\n\nQcQb\nQaU\nQcQb\nQaU\nQcQb\nQaU\nDa\nDb\nDc\noo\no\no\no÷\nø\nu\nu\nu\nu\nu\ny\nþ\ny\nu\n\nU\n>\nD\n>\nD\nQa\nQb\n>\nD\nQc\nQc Qb\nQa\nU\nQc Qb\nQa\nU\nQc\nQb\nQa\nQc\nQb\nU\nQc\nQa\nU\n\n!\n\n\"\n#\n$\n%\n&\n$\n'\n$\n(\n$\n)\n*\n+\n(\n$\n,\n-\n\n,\n.\n*\n'\n+/\n$\n%\n\n:\n;\n<\n=\n>\n?\n@\nA\nB\nCD\nEFG\nH\nI\nI\nJ\nK\nG\nLMN\nOP\nK\nE\nE\nO\nP\nH\nO\nM\nQ\nI\nR\nK\nL\nL\nK\nS\nI\nT\nU\nV\nW\nX\nV\nE\nK\nH\nY\nZ\n[\nV\nY\n\\\nK\n]\n^\nY\nZ\nQ\nE\nM\nE\nK\nH\nY\n_\n`\na\nV\n^\nE\nK\nH\nY\n_\nQ\nE\nM\nY\n\\\nQ\nE\nM\nY\nZ\n`\nK\n]\n^\nY\n_\nQ\nE\nM\nE\nK\nH\nY\nZ\n`\nK\n]\n^\nY\n_\nQ\nE\nM\nE\nK\nH\nY\n\\\n`\nb\nc\na\nV\nW\nb\n[\ncd\nV\ne\nA\nf\nC\nD\nEFG\nH\nI\nI\nJ\nK\nG\nLMN\nOP\nK\nE\nE\nO\nP\nH\nO\nM\nQ\nI\nR\nK\nL\nL\nK\nS\nI\nT\nU\nV\nY\nZ\nQ\nE\nM\nE\nK\nH\nY\ng\nX\nV\n^\nE\nK\nH\nY\n_\nQ\nE\nM\nE\nK\nH\nY\n\\\n`\nK\n]\n^\nY\n_\nQ\nE\nM\nY\n\\\n`\n[\nV\n^\nE\nK\nH\nY\n_\nQ\nE\nM\nY\nZ\nQ\nE\nM\nY\ng\n`\nK\n]\n^\nY\n_\nQ\nE\nM\nY\nZ\nQ\nE\nM\nE\nK\nH\nY\ng\n`\na\nV\nY\n\\\nb\nc\na\nV\nW\nb\n[\ncd\nV\ne"
    },
    {
      "category": "Resource",
      "title": "ps4f02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/1d2f63cb082a51f6dab830726759e680_ps4f02.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\n\nProblem Set 4 Lecture 10 Day\n\nDue: Lecture 12 Day\n\nProblem 1: Simple Finite State Machine\n\nThe sequential circuit below has one D flip-flop, two inputs (X and Y), and one output\n(S). The circuit consists of a full adder circuit whose carry output is connected to a D flip-\nflop.\n\n1. Derive the truth table for the above circuit.\n2. Draw the state diagram for this circuit (be sure to show the output S in the\ndiagram).\n3. Is the finite state machine of the Moore type or the Mealy type? Explain.\n4. Assume that the timing characteristics for the flip-flop are tp = tsetup = thold = 2 μs,\nand for the full adder tp = 4 μs. Assuming that all inputs (X and Y) are\nsynchronous with the system clock, what is the greatest clock speed at which the\nsystem could run?\n\nProblem 2: Parking Ticket Machine\n\nAt Back Bay garage, Don and Larry are thinking of using an automated parking ticket\nmachine to control the number of guest cars that a member can bring. The card reader\nX\n\nS\nY\nFull adder\n\nZ\n\nC\n\nCLK\nD Q\nS\n\ntells the controller whether the car is a member or a guest car. Only one guest car is\nallowed per member at a discount rate only when s/he follows out the member at the exit\n(within the allotted time). The second guest must pay the regular parking fees. You have\nbeen hired to implement the control system for the machine which is located at the exit.\nUsing your expertise on FSMs, design the control system.\n\n- Signals from the card reader: MEMBER and GUEST\n- Signals from the toll booth: TOKEN (meaning one toke received),\n-\n\nEXP (time for discounted guest payment has\nexpired).\n- Signal to the gate: OPEN.\n\nFee: Members are free, Guest w a Member is 1 Token, Regular Guest is 2 Tokens.\n\n1. Draw a truth table that corresponds to the FSM.\n2. Draw the equivalent Karnaugh map.\n3. Turn in your state diagram, carefully labeled. Be sure to indicate which state the\nFSM is in after a RESET.\n4. Is this a Moore or Mealy machine?\n\nProblem 3: VHDL Code for Bi-Directional Shift Register\n\nThe circuit shown above is a 4-bit bi-directional circular shit register with parallel load.\nThe adjacent truth table indicates the operation state based upon the two select lines. The\ninputs are labeled I3, I2, I1, and I0. The outputs are labeled O3, O2, O1, and O0. This\ndevice is a circular shift register. This means that when shifting left, bit 3 is shifted onto\nbit 0, and when shifting right bit 0 is shifted onto bit 3.\n\nS1\nS0\nOperation\nHold Preset Value\nShift Left\nShift Right\nParallel Load\nI3 I2 I1 I0\nS1\n\nS2\nShift Register\n\nCLK\n\nO3 O2 O1 O0\n\nImplement this device using VHDL. Confirm that your code compiles correctly with the\ndevice set to 22V10. Use the NOVA simulator to confirm that your code works correctly.\nTurn in a listing of your code and include a printout or sketch of a portion of your\nsimulation."
    },
    {
      "category": "Resource",
      "title": "ps4f02soln.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/3732a0967ecf17e179d4e08de0795905_ps4f02soln.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\nProblem Set 4 Solutions\nIssued: Lecture 12 Day\nProblem 1:\n1)\n2)\n3)\nMealy. S depends on the state and the inputs.\nx\ny\nz\ns\nc\ninputs: xy output: S\n00/0\n01/0\n10/0\n11/1\n01/1\n10/1\n11/0\n00/1\n\n4)\nAfter a clock edge, it takes 2 us for the output of the flip flop to change. Then 4 us later, the output\nof the adder changes. This value needs to be held for 2 us to satisfy the setup time of the flip flop.\nSince the contamination delay of each part is at least 2 us, we could have another edge now and\nthe setup time would be satisfied. So the minimum clock period is 6 us.\nProblem 2:\n1)\nBelow is a truth table that corresponds to the FSM. The state labels can be mapped to a three bit\nstate variable. All entries not entered below are illegal.\nstate\nmember\nguest\nexp\ntoken\nnext state\nopen\nidle\nX\nX\nidle\nidle\nX\nX\nguest enters\nidle\nX\nX\nmember enters\nmember enters\nX\nwait for guest\nmember enters\nX\nidle\nmember enters\nX\nguest follows\nmember enters\nX\nguest enters\nmember enters\nX\nX\nmember enters\nwait for guest\nX\nwait for guest\nwait for guest\nX\nidle\nwait for guest\nX\nguest follows\nwait for guest\nX\nguest enters\nwait for guest\nX\nX\nmember enters\nguest follows\nX\nX\nX\nguest follows\nguest follows\nX\nX\nX\nidle\nguest enters\nX\nX\nX\nguest enters\nguest enters\nX\nX\nX\nwait token 2\nwait token 2\nX\nX\nX\nwait token 2\nwait token 2\nX\nX\nX\nidle\nXXX\nX\nX\nillegal\n\n2)\nNot graded.\n3)\nShowing all dependencies is messy. See truth table for clarifications.\n4)\nMealy. Open depends on inputs and state.\nidle\nguest enters\nwait token 2\nmember\nenters\nwait for\nguest\nguest follows\nreset\ntoken | open\n/token\ntoken\n/token\nguest\nmember | open\nexp\nexp\nguest exp\nmember | open\n/exp /guest\n/exp guest\n/exp member | open\n/token\ntoken | open\n\nProblem 3:\nThis code will implement the 3-bit shifter:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity shifter is\nport (\nclk : in std_logic; -- clock signal\ni : in std_logic_vector(3 downto 0);\n-- input bits\ns : in std_logic_vector(1 downto 0); -- select bits\no : out std_logic_vector(3 downto 0);-- output bits\nend shifter;\narchitecture structure of shifter is\nsignal internal : std_logic_vector(3 downto 0);\n-- stores output values\n-- internally for use by circuit\nbegin -- structure\nstuff: process (clk)\nbegin\nif rising_edge(clk) then\nif s=\"00\" then\n-- if select is 00, hold\ninternal <= internal;\nelsif s=\"01\" then\n-- if select is 01, shift left\ninternal(0) <= i(3);\ninternal(1) <= i(0);\ninternal(2) <= i(1);\ninternal(3) <= i(2);\nelsif s=\"10\" then\n-- if select is 10, shift right\ninternal(0) <= i(1);\ninternal(1) <= i(2);\ninternal(2) <= i(3);\ninternal(3) <= i(0);\nelsif s=\"11\" then\n-- if select is 11, load input bits\ninternal <= i;\nelse\n-- this should not happen, but if it does,\n-- we will do a paralell load\ninternal <= i;\nend if;\nend if;\nend process stuff;\no<= internal;\n-- now we send the internal count to the output\nend structure;"
    },
    {
      "category": "Resource",
      "title": "ps5f02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/a7f6916f22b03fbb001a351945085e81_ps5f02.pdf",
      "content": "6.111 -- PS 5\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\nProblem Set 5\nIssued: Lecture 11 Day\nDue: Lecture 12 Day\nIn this completely fictitious story, you are taking a class called 6.111 - Digital Death Laboratory. There are\nLAs who spend a lot of time in lab. Here is your chance to implement a system to reward these fellow LAs.\nFunctionality\nYour 6.111 class has three TAs and four LAs. We would like to reward the LAs who work hard. Every week,\nthe TAs and LAs fill out the hours they work. We propose the following system:\n1. Take the minimum of all the hours put in by the TA's. Call this the weekly minimum. Call the\nmaximum hours put in by the TA's that week the weekly maximum.\n2. If any LA works fewer hours than the minimum, they get a warning point.\n3. If a LA works more hours than the maximum, they are receive a reward point.\n4. Each LA starts with 0 points. For each reward point they get, their score goes up by one. For each\nwarning point, their score goes down by one, but never below 0.\n5. If a LA's score reaches 3, they get a little bit of timeoff(denoted by the timeoffoutput to do whatever\nundergrads do in their spare time). Their score then resets to 0.\nImplementation\nYou will be implementing this system using major and minor FSMs. Specs for the SRAM and for the entities\nare provided below. You must use the la rewarder entity. The maxmin entity is suggested, but not required.\nSRAM Block\nThe SRAM Block contains the standard 6264 I/O, and an additional status output. This output is called\nSRAMbusy.\nThis block is your interface to the EECS's payroll computer. They update the TA/LA hours weekly auto-\nmatically to the RAM. During this update, SRAMbusy is asserted. Each staffmember's hours for the week\nare accessible from 7 different SRAM locations. Here is the addressing scheme for the SRAM:\nA[2:0]\nFunction\nName\nTA\nNeira Hajro\nTA\nJennifer Maurer\nTA\nJames Oey\nLA\nLevete Jakab\nLA\nCraig Mielcarz\nLA\nColin Weltin-Wu\nLA\nBrian Wong\n\n6.111 -- PS 5\nMajor FSM Entity\nentity la_rewarder is\nport (\nclk\n: in\nstd_logic;\ngo\n: in\nstd_logic;\nrdy\n: out std_logic;\ntimeoff\n: out std_logic_vector (3 downto 0);\nend la_rewarder;\nDescription of entity la rewarder:\n- go states when the system should calculate the reward output. Since the SRAM communicates with a\ndifferent system to update the hours data, the computation may not start right away.\n- rdy is an output telling when the reward data is valid.\n- timeoffis a 4-bit output denoting who should be rewarded with time off. Each bit represents an LA.\nbit 0: Levente\nbit 1: Craig\nbit 2: Colin\nbit 3: Brian\nMinor FSM Entity\nentity maxmin is\nport (\nclk\n: in\nstd_logic;\ngo\n: in\nstd_logic;\nmax\n: in\nstd_logic;\nrdy\n: out std_logic;\ndata\n: out std_logic_vector (7 downto 0));\nend maxmin;\nDescription of entity maxmin:\n- go tells the system to start the computation.\n- max is the maximum and minimum function selector.\n- rdy is the state machine done flag.\n- data provides the maximim or minimum result.\nApproach\n1. Add to the la rewarder entity to include the interface to the SRAM block described above. Submit\na description of additional inputs/outputs. Design your entity for your minor FSM, and describe the\ninputs/outputs. The entities will be submitted with your VHDL code in step 3.\n2. Draw the state machines for your major and minor FSMs. Be sure to follow the standard conventions\nfor drawing state machines. Submit state diagrams for both FSMs.\n3. Write the VHDL files that implements both FSMs. Be sure to instantiate the minor FSM inside your\nmajor FSM. Submit your VHDL code."
    },
    {
      "category": "Resource",
      "title": "ps5f02soln.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/3157f46e4d5ebd1f73da690e2494cd4e_ps5f02soln.pdf",
      "content": "library ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all;\n\n-- here is the declaration of entity\n\nentity la_rewarder is\nport (clk, go, SRAM_busy, SRAM_rdy: in std_logic;\nmin: buffer std_logic_vector(2 downto 0);\nmax: buffer std_logic_vector(2 downto 0);\nstaff_hours_adr: out std_logic_vector(2 downto 0);\nstaff_hours : in std_logic_vector(2 downto 0);\nminmax_start, minmax_done : buffer std_logic;\ntimeoff : buffer std_logic_vector(3 downto 0);\nrdy : out std_logic);\nend la_rewarder;\n\n--the assumption is that the payroll module functions in such way to provide\n--a signal SRAM_busy to denote that it is updating the system and SRAM_rdy\n--when the data on the bus is valid (corresponding to the values stored at\n--staff_hours_adr).\n\n-- here is the body of the architecture\n\narchitecture state_machine of la_rewarder is\n\n-- first declaration of all states\ntype StateType is (idle,idle2, rew_LA1, rew_LA12, rew_LA2, rew_LA22, rew_LA3,\nrew_LA32, rew_LA4, rew_LA42, rew_finish);\n\nsignal present_state, next_state : StateType;\nsignal LA_points1 : std_logic_vector(1 downto 0);\nsignal LA_points2 : std_logic_vector(1 downto 0);\nsignal LA_points3 : std_logic_vector(1 downto 0);\nsignal LA_points4 : std_logic_vector(1 downto 0);\n\ncomponent maxmin\n\nport(\n\nclk, SRAM_busy, SRAM_rdy : in std_logic;\n\nminmax_start : buffer std_logic;\n\nmin : buffer std_logic_vector(2 downto 0);\n\nmax : buffer std_logic_vector(2 downto 0);\n\nstaff_hours : in std_logic_vector(2 downto 0);\n\nminmax_done : buffer std_logic);\n\nend component;\nbegin\nprocess(present_state, clk, min, max, SRAM_busy, go, timeoff, LA_points1,\nLA_points2, LA_points3,\nLA_points4, SRAM_rdy, minmax_done,min, max, staff_hours)\nbegin\ntimeoff <= \"0000\";\n--start off with timeoff being zero for all LA's\n\nrdy <= '0';\n\n-- start off with the output not calculated\n\nminmax_start <= '0';\ncase present_state is\nwhen idle =>\ntimeoff <= \"0000\";\n-- in idle, no LA gets time off\nProblem Set 5 Solutions\n\n--in idle, any address is asserted\nrdy <= '0';\n--the timeoff is not calculated yet\nminmax_start <= '0';\nif (SRAM_busy = '1') then\nnext_state <= idle;\n--SRAM_busy means that the payroll is\nupdating the SRAM table\n\n--of weekly hours\ntimeoff <= \"0000\";\nrdy <= '0';\n\nelsif (minmax_done = '0' and go <= '1') then --this is the state\nwhere the payroll has updated\n\n--the records, but the minor fsm\n\n--has not calculated the new min and\nmax values;\n\n--min and max values have to be\n\n--calculated after each payroll\nupdate.\n\nminmax_start <= '1';\n\n--the major fsm asserts the\nstart signal that the\n\n--minor fsm uses to see when it needs\n\n--to perform the next calculation.\n\nnext_state <= idle2;\n\n--next_state = wait for\nminmax to calculate min and\nrdy <= '0';\n\n--max values no output is ready\nat this point\n\ntimeoff <= \"0000\";\n\nelsif (minmax_done = '1' and go = '1') then\n--this is the state\nwhen the payroll has finished\n\n--updating the records and the\n\n--minmax has finished\ncalculating the min and max\nnext_state <= rew_LA1;\n\n--values next state checks\nthe first LA's points,\n\n--LA corresponds to 011 in the table\nstaff_hours_adr <= \"011\";\ntimeoff <= \"0000\";\nrdy <= '0';\nminmax_start <= '0';\nelse\nnext_state <= idle;\n\n--safe bet to play is that\nif we are getting anything\n\n--else to return to the idle\n\n--state\nend if;\n\nwhen idle2 =>\n\n--this is the sate where we wait\nfor the minor minmax\n\n--fsm\ntimeoff <= \"0000\";\nrdy <= '0';\nminmax_start <= '1';\n\nif(minmax_done = '0') then\n\nnext_state <= idle2;\nelse\nnext_state <= rew_LA1;\n\n--minmax is done - go to the\nnext state and check the\n\n--LA points for the first LA\nstaff_hours_adr <= \"011\";\ntimeoff <= \"0000\";\nrdy <= '0';\nminmax_start <= '0';\n\n--the LA we are checking\nfor is 011\nend if;\n\nwhen rew_LA1 =>\n\nstaff_hours_adr <= \"011\";\n\nrdy <= '0';\n\ntimeoff <= \"0000\";\n\nminmax_start <= '0';\n\nif (SRAM_rdy = '0') then\n\n--we abstract from the SRAM\ninterface and use\n\n--SRAM_rdy signal to denote when\n\n--the valid data (or LA hours) is\nasserted on the bus\n\nstaff_hours_adr <= \"011\";\n\nnext_state <= rew_LA1;\n\nelse\n\nnext_state <= rew_LA12;\n\nstaff_hours_adr <= \"011\";\n\nend if;\n\nwhen rew_LA12 =>\n\nrdy <= '0';\n\ntimeoff <= \"0000\";\n\nif(LA_points1 = 11) then\n\n--if the LA has accumulated 3\npoints (highly unlikely ;) )\n\n--then he gets time\n\n--off. For LA1 that means asserting\nbit0 or equivalently\n\n--adding 1 to the timeoff\n\n--value.\n\n--reminder - it is possible that an LA\nwill lose a point\n\n--at LA_points = 3\n\ntimeoff <= timeoff+1;\n\n--reminder - to keep things\nsimple, it is possible that\n\n--an LA will miss\n\nLA_points1 <= \"00\";\n\n--we reset his points to zero\n\nnext_state <= rew_LA2;\n\n--transition into the next state\nand check LA2\n\nelsif (staff_hours < min) then\n\n--if the LA has not worked the\nrequired hours (very likely),\n\n--then he loses a\n\n--point in his LA_points vector\n\nLA_points1 <= LA_points1 -1;\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\n--the timeoff value does not\nchange because he does not\n\n--have enough poitns\n\nnext_state <= rew_LA2;\n\nelsif (staff_hours > max) then\n\n--if he worked harder than\npredicted (never happens :) )\n\n--then he gets a point\n\n--in his LA_points vector\n\nLA_points1 <= LA_points1+1;\n\ntimeoff <= timeoff;\n\n--the timeoff value remains what\nit was when we entered\n\n--the state, because the\n\n--LA didn't have a sufficient amount\nof points\n\nrdy <= '0';\n\nnext_state <= rew_LA2;\n\nelse\n\nLA_points1 <= LA_points1;\n\n--if he worked just enough, then\nthe points and timeoff\n\n--do not change.\n\nrdy <= '0';\n\ntimeoff<= timeoff;\n\nnext_state <= rew_LA2;\n\nend if;\n\nwhen rew_LA2 =>\n\nrdy <= '0';\n\n--we move to the next LA\n\nstaff_hours_adr <= \"100\";\n\n--his adress is 100\n\ntimeoff <= timeoff;\n\nif (SRAM_rdy = '0') then\n\n--wait until the hours are on\nthe bus\n\nstaff_hours_adr <= \"100\";\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nnext_state <= rew_LA2;\n\n--if the SRAM values aren't\nready, remain in the state\n\nelse\n\nnext_state <= rew_LA22;\n\n--otherwise transition into the\nnext state to compare\n\n--the obtained values\n\nend if;\n\nwhen rew_LA22 =>\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nif(LA_points2 = 11) then\n\n--if he has accumulated 3\npoints, reward him by giving\n\n--him some time off\n\ntimeoff <= timeoff+2;\n\n--for LA2 this is done by\nincrementing timeoff by 2.\n\nLA_points2 <= \"00\";\n\n--set his points to 00 for the\nnext cycle; again he may\n\n--lose a point b/c\n\n--we chose not to check his hours\nagainst the max value\n\nnext_state <= rew_LA3;\n\n--go and check the values for\nLA3\n\nelsif (staff_hours < min) then\n\n--if he didn't work enough then\nhe loses a point\n\nLA_points2 <= LA_points2 -1;\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\n--and doesn't get any time off\n\nnext_state <= rew_LA3;\n\n--we go to the next LA\n\nelsif (staff_hours > max) then\n\nLA_points2 <= LA_points2 + 1;\n\ntimeoff <= timeoff;\n\nrdy <= '0';\n\nnext_state <= rew_LA3;\n\nelse\n\nLA_points2 <= LA_points2;\n\nrdy <= '0';\n\ntimeoff<= timeoff;\n\nnext_state <= rew_LA3;\n\nend if;\n\nwhen rew_LA3 =>\n\nrdy <= '0';\n\nstaff_hours_adr <= \"101\";\n\ntimeoff <= timeoff;\n\nif (SRAM_rdy = '0') then\n\nstaff_hours_adr <= \"101\";\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nnext_state <= rew_LA3;\n\nelse\n\nnext_state <= rew_LA32;\n\nend if;\n\nwhen rew_LA32 =>\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nif(LA_points3 = 11) then\n\ntimeoff <= timeoff+4;\n\nLA_points3 <= \"00\";\n\nnext_state <= rew_LA4;\n\nelsif (staff_hours < min) then\n\nLA_points3 <= LA_points3 -1;\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nnext_state <= rew_LA4;\n\nelsif (staff_hours > max) then\n\nLA_points3 <= LA_points3 + 1;\n\ntimeoff <= timeoff;\n\nrdy <= '0';\n\nnext_state <= rew_LA4;\n\nelse\n\nLA_points3 <= LA_points3;\n\nrdy <= '0';\n\ntimeoff<= timeoff;\n\nnext_state <= rew_LA4;\n\nend if;\n\nwhen rew_LA4 =>\n\nrdy <= '0';\n\nstaff_hours_adr <= \"110\";\n\ntimeoff <= timeoff;\n\nif (SRAM_rdy = '0') then\n\nstaff_hours_adr <= \"110\";\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nnext_state <= rew_LA4;\n\nelse\n\nnext_state <= rew_LA42;\n\nend if;\n\nwhen rew_LA42 =>\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nif(LA_points4 = 11) then\n\ntimeoff <= timeoff+8;\n\nLA_points4 <= \"00\";\n\nnext_state <= rew_finish;\n\nelsif (staff_hours < min) then\n\nLA_points4 <= LA_points4 -1;\n\nrdy <= '0';\n\ntimeoff <= timeoff;\n\nnext_state <= rew_finish;\n\nelsif (staff_hours > max) then\n\nLA_points4 <= LA_points4 + 1;\n\ntimeoff <= timeoff;\n\nrdy <= '0';\n\nnext_state <= rew_finish;\n\nelse\n\nLA_points4 <= LA_points4;\n\nrdy <= '0';\n\ntimeoff<= timeoff;\n\nnext_state <= rew_finish;\n\nend if;\n\nwhen rew_finish =>\n\n--in this state we assert rdy to be high,\nthe timeoff value\n\n--remains at the\n\n--same value as it was in the previous state and\nis\n\n--constantly asserted.\n\n--we stay in this state until the payroll updates\nthe weekly\n\n--hours table,\n\n--at which point, our timeoff value needs to be\ncalculated again.\n\nrdy <= '1';\n\ntimeoff <= timeoff;\n\nif (SRAM_busy = '0') then\n\nnext_state <= rew_finish;\n\nelse\n\nnext_state <= idle;\n\nend if;\n\nwhen others =>\nnext_state <= idle;\nend case;\nend process;\n\nprocess(clk, present_state, next_state, SRAM_busy)\nbegin\nif rising_edge(clk) then\nif(SRAM_busy = '1') then\npresent_state <= idle;\n--SRAM_busy means that the payroll is\nupdating the staff\n\n--weekly hours table,\n\n--which automatically means that the current min\nand max\n\n--are no longer valid\n\n--the fsm should return to idle and wait until the\npayroll\n\n--is done updating\nelse\npresent_state <= next_state;\nend if;\nend if;\nend process;\n\ninstmaxmin : maxmin\nport map (\nclk => clk,\n\nminmax_start =>minmax_start,\n\nSRAM_busy => SRAM_busy,\n\nSRAM_rdy => SRAM_rdy,\n\nmin => min,\n\nmax => max,\n\nstaff_hours => staff_hours,\n\nminmax_done => minmax_done);\n\nend architecture state_machine;\n\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all;\n\n-- here is the declaration of entity\n\nentity maxmin is\nport (clk, SRAM_busy, SRAM_rdy : in std_logic;\n\nminmax_start, minmax_done : buffer std_logic;\n\nmin : buffer std_logic_vector(2 downto 0);\n\nmax : buffer std_logic_vector(2 downto 0);\n\nstaff_hours : in std_logic_vector(2 downto 0));\nend maxmin;\n\narchitecture state_machine of maxmin is\n\n-- first declaration of all states\ntype StateType is (idle,read_TA1, read_TA12, read_TA2, read_TA22, read_TA3,\nread_TA32, finish);\n\nsignal staff_hrs_adr : std_logic_vector(2 downto 0);\n\nsignal present_state, next_state : StateType;\n\nbegin\nprocess(present_state, clk, minmax_start, staff_hours, min, max,\nstaff_hours, SRAM_busy, SRAM_rdy)\nbegin\nminmax_done <= '0';\nmin <=\"000\";\nmax <= \"111\";\ncase present_state is\nwhen idle =>\nminmax_done <= '0';\nmin <= \"000\";\nmax <= \"111\";\n\nif(minmax_start = '1') then\nstaff_hrs_adr <= \"000\";\nminmax_done <= '0';\nmin<=\"111\";\nmax<=\"000\";\nnext_state <= read_TA1;\nelse\nminmax_done <= '0';\nnext_state <= idle;\nend if;\n\nwhen read_TA1 =>\nminmax_done <= '0';\nmin <= \"111\";\nmax <= \"000\";\nstaff_hrs_adr <= \"000\";\nif(SRAM_rdy = '1') then\nnext_state <= read_TA12;\nminmax_done <= '0';\nelse\nnext_state <= read_TA1;\nminmax_done <= '0';\nmin <= \"111\";\nmax <= \"000\";\nend if;\n\nwhen read_TA12 =>\nminmax_done <= '0';\nmin <= staff_hours;\nmax <= staff_hours;\nnext_state <= read_TA2;\n\nwhen read_TA2 =>\nminmax_done <= '0';\nmin <= min;\nmax <= max;\nstaff_hrs_adr <= \"001\";\nif(SRAM_rdy = '1') then\nnext_state <= read_TA22;\nminmax_done <= '0';\nelse\n\nnext_state <= read_TA2;\nminmax_done <= '0';\nmin <= min;\nmax <= max;\nend if;\n\nwhen read_TA22 =>\nminmax_done <= '0';\nif(staff_hours < min) then\nmin <= staff_hours;\nmax <= max;\nminmax_done <= '0';\nnext_state <= read_TA3;\nelsif(staff_hours > max) then\nmax <= staff_hours;\nmin <= min;\nminmax_done <= '0';\nnext_state <= read_TA3;\nelse\nmax <= max;\nmin <= min;\nminmax_done <= '0';\nnext_state <= read_TA3;\nend if;\n\nwhen read_TA3 =>\nminmax_done <= '0';\nmin <= min;\nmax <= max;\nstaff_hrs_adr <= \"010\";\nif(SRAM_rdy = '1') then\nnext_state <= read_TA32;\nminmax_done <= '0';\nelse\nnext_state <= read_TA3;\nminmax_done <= '0';\nmin <= min;\nmax <= max;\nend if;\n\nwhen read_TA32 =>\nminmax_done <= '0';\nif(staff_hours < min) then\nmin <= staff_hours;\nmax <= max;\nminmax_done <= '1';\nnext_state <= finish;\nelsif(staff_hours > max) then\nmax <= staff_hours;\nmin <= min;\nminmax_done <= '1';\nnext_state <= finish;\nelse\nmax <= max;\nmin <= min;\nminmax_done <= '1';\n\nnext_state <= finish;\nend if;\n\nwhen finish =>\nmin <= min;\nmax <= max;\nminmax_done <= '1';\nif(SRAM_busy = '0') then\nnext_state <= finish;\nminmax_done <= '1';\nelse\nnext_state <= idle;\nminmax_done <= '0';\nend if;\n\nwhen others =>\nnext_state <= idle;\nend case;\nend process;\n\nprocess(clk, present_state, next_state, SRAM_busy)\nbegin\nif rising_edge(clk) then\nif (SRAM_busy = '0') then\npresent_state <= next_state;\nelse\npresent_state <= idle;\nend if;\nend if;\nend process;\n\nend architecture state_machine;"
    },
    {
      "category": "Exam",
      "title": "quiz1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/6d3ab6467f7a1d5a54fec7d9e7340974_quiz1.pdf",
      "content": "! #\"$&%'\n(*)+,.-0/213)4/5.67&89):;/2-=<9:>,?8@7&4AB<94))-=<94A3,.4CEDF5B13+G/H)-JI\n:K<9)K4:)\nL\nMONBN.NQPSR\n4/H-H5CG:K/H5B-=T (*<9AB<U/V,.8WITX=/H)13XYZ,.[\\5B-2,]/25B-0T\n^3_a`cbed\nI\n)K+/2)K1f[!)K-*g.h\nig.jBjBg\nN\nMMKMMMKMMKMMMKMM>kml\njn\ng\nMMKMMMKMMKMMMKMM>kco\njn\nl\nMMKMMMKMMKMMMKMM>kml\njn\npJq*psrY\nMMMKMMKMMMKMMKMMtk$N\njBjn\nuvrQwx7\nMMMKMMKMMMKMMKMMMKMMKMMMKM>MMKM>MMMMM\nR\n4C<O:>,?/H)yS5BG-vI\n):;/2<O5B4\nk\nn\nzB,.13)X\nN\ng|{Sw\nk\nn\nz.)44<O6})K-\nN\n{Sw\nk\nn\nuv)K<9-H,\nl\n{Sw\np~<OXJG<OQ<9X}!K\nfW\\q*4)~,.4C-=<O/=/2)4=:K-H<9[|XH~)K)K/v<9X,.8O895tF)KC\nM\n{&G/TB5BG-J4,.1)Q5.4,.8O8WX=~));/2X*,?4C<94C<O:>,?/H)*TB5BG-JX=):;/2<95.4x5B4 /H~<9X+,?AB)\nM\ne-H<O/H),.898\\TB5BG-,.4X=)-HXJC<O-H):;/28UT5B4/2~)G<O\nM\nI\n~5t,.8985?6sT.5BG-F5.-H\nM\nyS5BG,.-=)*45./-=)G<9-=)C /25GX=),f895BAB<O:v/H)13+8,?/H).i\n[G/TB5.G1GX=/J¡ \\\n_Z¢\n£\\\n_Z¢\n¤s;¥f\n¢\n¢\n\n}¦\n`}§\n}\nM\n\n(c)UaBaBa\n«Q¬.9(r)\n°J±Q23 Z(c)(c)K(c)(c)(c)K(c)(c)K(c)(c)(c)K(c)(c)K(c)(c)(c)K(c)(c)K(c)(c)>(c)K(c)2μ\n¶·] 1soc»1⁄4\n1⁄23⁄4¿AmAZA»·AAA@»·]ÆAcC»C\nab\nc\nX\nX\nX\nab\nc\nX\nX\nX\nab\nc\nX\nX\nX\nab\nc\nX\nX\nX\nEEOEBEIHIIBI#ÐN.IHON?EEBOON.OO×.ØN|U9×BEBEOU>N.U\\Ø}EOU;U2E9×.O\nEE9E.EIHI|IOHO×YUOØ}×BEIUK×BOE9IKO×.ØaU2OIÐN.IHON.EEBOÞAN?O ×.ØO=×BÞIQUO×BEBEOUØ}EOU;U2E9×.Oß\nIBßva\nO×YUaU2OIaE.IH×BEOE9OEBOU2ON?UU×BI=IHIO=O!×.OaUEUU2OaUHOIeOxa$æva0OxceeOI=×\naEUKU×.ØOHEÞOØ}×BIU2OEOO\nØ}EOUKU2EO×BOß#eJOHI×BOI×.ØaU2OIeBiiÞN.OOJN.OaEOOaEOU>N?UHI*UOE9UVO×BOIE9OJOxia\\ß\nμ\nßiðON]UvEOOU2OIIonOIHIO=OHEO×BOØ}×.IUHOIoOiSao\no\nßva\nO×YUaU2OIaE.IH×BEOE9OEBOU2ON?UU×BI=IHIO=O!×.OaUEUU2OaUHOIeOxa$æva0OxceeOHEÞ\n×.ØoOIH×aEU;U2OØ}×BIU2OEOO\nØ}EOUKU2EO×BOß#eJOHIN.O×.UHOII×.ØaU2OIeBioÞAN.OON.OaE9OaEOU>N?UHI*UOE9UVO×BOIEOOJOEaisß\n÷\nßiðON]UvEOOU2OIIonOIHIO=OHEO×BOØ}×.IUHOIoOEaiSo\nø\nßJu*×IEUU2OIKI×.ØaU2OIKOHIU9×BEBEOU>N.UØ}EOU;U2EO×BOOI;n\nOEOuEOUJN|O=U2N?U2EOUQON.uN.IHaoaoØsOH×uUOE9UVO×BOI>o\ny\nßcvIHIQU2OIUO×BEBE9UN.UØ}EOUKUHE9×BOOJIKþEN.Uyo\n\n\"!$#&%('\n)+*,.-0/1-324%65724892%;:<8>= ?$-&/1%(@\nQ Q\nQ x\n2 1\n00 01 11 10\nX\nX\nX\nX\nX\nX\nQ Q\nQ x\n2 1\n00 01 11 10\nX\nX\nX\nX\nX\nX\nQ Q\nQ x\n2 1\n00 01 11 10\nX\nX\nX\nX\nX\nX\nACBEDFHGJIKMLONQP\nGR>PSFHDTVUP\nWHXY[ZGA]\\9U\n^_ZF6T>P`Iba7IIR6THBEGIc6adfehgXJdikjlBgmXndoUP\npqTHBERHIbrlZsbW>P\nRdfPSRHcod\nZFHGut>GJXJgwvJZafBEXugmZxGIXFHGJGIpyg\nPft>RHBEgIVXngqPSgIVszP\npqTHBERHI{gmT>P gb|lP\nXzcHIXJBDRHIc}ad~PvJF9RHBZGIRHDBR9IIG|THZBXRHZoZRHD\nIG|BEgT~gmT9I\npZ\nszW>PSRd\n_\\MIIszXP\nX_BEY7gmTHBEXWIGJXZR|lP\nX_`IGndbXZ\nWHWdPSRHczgTHIZR9EdBER9Y[ZGszPSgBZRd\nZFpPSRzt>RHcBX_P\nXBERHDEIW>P\nD\nIZ\nY1W>P\nWIGlpZRgqPSBRHBERHDgTHINQP\nGRHP\nFHDTUPSWHXwXT9Z|RxBER{ACBD\nFHGIuKM.THIGIQP\nGJIuZa`(BZFHXJEd\ngmT9GIIXJgmPSgmI`SP\nGJBP\na9IX_P\nR9cBEglP\nWHWIP\nGJXgTHIGJIBX_ZRHIBRHW9F9gQ>_\\MBR9pIgmTHIuXngqPSgIX494P\nRHc;\n\nT>P`IcHZ\nRH\ngQpPSGIXQBER;gmTHIsVBgQP\nWHWIP\nGJXgmT>PSguZRHEdXJgmPSgmIXgTHGZ\nFHDT60M9M499PSRHc\n4wP\nGIZ\nY$BRgIGIXJg\n.T>P gP\nGIugTHIQUVekenUVu ZDBEpP\n\"I9W9GIXJXBEZRHX.Y[ZGwIP\npqTxZ\nYgmTHIXngqPSgI`SP\nGBP\naHIBRHW9F9gmXQ3gmT>P g\nBEXMgTHIBR9WHF9gwgZgmTHI¡HBWMi¢¡>ZWgmTHPSgw|BE7T9ZcgTHIXJgmPSgmIy]XXF9szIugTHIQ£ihg¤d(WI¡>BW¡HZWHXP\nGJI\ngZbaIQFHXIc+\n¥¦l§\n¥ ]§\n¥(c)l§\nKMauR{gmTHIXngqPSgIugmGP\nRHXBgmBEZRcHBP\nDGmPSs«XJTHZ4|RVBERxACBD\nFHGI\n\nHXT9Z|¬gmTHIQPSpgmFHP\ngmGP\nRHXJBEgmBEZRHXIyMTHBa(i\nBgmIcxadgTHBXszP\npqTHBR9I\n>P\nXBER9¡>FHIRHpIcVad{gmT9IBERHWHF9gw7\n\n(r) °°°\n±2\n3 μ\n¶· 1o J»\n1⁄4C1⁄2E3⁄4¿HAJAQA9A]AkA.ÆC1⁄4C1⁄2EH1⁄2EmAQEEqESEAIÆVE\nIqIH1⁄2E9A\n\nIÐNNN\nOO\nOOO\n×ØUUUÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐmU\nYÞ ß\"a$a&a(a\naaQæc0aec0ee{eiii\niðno\ni\"nðoJnoHðoloðom÷o¤oiø>ðuMu¢ø>iuHulðuluJ÷Hi4ouVðEu{yCðEioHoþy]euJuo\n\nþuom÷9þ\n\niiEii4oðuHiomð\n\nðu9iu>o\noo\n\nþyomþou\n\nQoSomþ\nuþiou\nyyliEiMnbomi uþio\n\nu\n\nyy\neu(uHnq÷HoJiuHioHu¤uHuHo9ooi\nU\nu\n.÷HþuþQø>ðuMu¢ø>iuHu÷>o\nþ!#\"%$#&(')+*-,#&(,#./\"lniEþo\no.ðEuHuHo9ou0\nuoo÷Hþomð\n\nðEuHi21Hðo\niomo\n\ni\n\nyCðEioHoþ\nU3\nu÷Hi4o\no÷Hþiuþomo omði\nufi\n\no÷HþnðEonoHðEoeuJuo\n\nþom÷>oSoo o\nom÷9þ54þi\nðuHuHðEuHi64i\nom÷{ø>ðEuMuhø>i\nuHu÷>o þ7\n> CL\nD\nQ\nQ\n> CL\nD\nQ\nQ\nA\nB\nC\n+5\n/CLK\ny$ðioHoJþuy_y>oHuHu9:lðEono9ðEo\n/CLK\nA\nB\nC\n5 nS\nyCði\noHoþ\nU\n;.ð\n\nðEuHi< uðoSiomo\n\nio>=]oJi?4Hiþ"
    },
    {
      "category": "Exam",
      "title": "quiz1sols.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/6801323d4a1b44e8f164ad6210753a24_quiz1sols.pdf",
      "content": "! #\"$&%'\n(*)+,.-0/213)4/5.67&89):;/2-=<9:>,?8@7&4AB<94))-=<94A3,.4CEDF5B13+G/H)-JI\n:K<9)K4:)\nL\nMONBN.NQPSR\n4/H-H5CG:K/H5B-=T (*<9AB<U/V,.8WITX=/H)13XYZ,.[\\5B-2,]/25B-0T\n^3_a`cbed\nI\n)K+/2)K1f[!)K-*g.h\nig.jBjBg\nN\nMMKMMMKMMKMMMKMM>kml\njn\ng\nMMKMMMKMMKMMMKMM>kco\njn\nl\nMMKMMMKMMKMMMKMM>kml\njn\npJq*psrY\nMMMKMMKMMMKMMKMMtk$N\njBjn\nIqQYauJp\nR\nqQv\nR\n4C<O:>,?/H)wS5BG-xI\n):;/2<O5B4\nk\nn\nyB,.13)X\nN\ng{zS|\nk\nn\ny.)44<O6})K-\nN\nzS|\nk\nn\nvx)K<9-H,\nl\nzS|\np~<OXJG<OQ<9X}!K\nfW\\q*4)~,.4C-=<O/=/2)4=:K-H<9[{XH~)K)K/x<9X,.8O895tF)KC\nM\nz&G/TB5BG-J4,.1)Q5.4,.8O8WX=~));/2X*,?4C<94C<O:>,?/H)*TB5BG-JX=):;/2<95.45B4 /H~<9X+,?AB)\nM\ne-H<O/H),.898\\TB5BG-,.4X=)-HXJC<O-H):;/28UT5B4/2~)G<O\nM\nI\n~5t,.8985?6sT.5BG-F5.-H\nM\nwS5BG,.-=)*45./-=)G<9-=)C /25GX=),f895BAB<O:x/H)13+8,?/H).i\n[G/TB5.G1GX=/J ¢¡\\\n_Z£\n¤\\\n_Z£\n¡¥s;¦f\n£\n3¡\n£\n\n}§\n`}\n}\nM\n\n(c)aU«B«B«\n¬Q.(r)9 «\n°±2x3 aμ;±¶*·\n1]o»s1⁄4c1⁄23⁄4\n¿AAAmAZA1⁄21ÆAC@1⁄21]EAcE1⁄2E\nab\nc\nX\nX\nX\nab\nc\nX\nX\nX\nab\nc\nX\nX\nX\nab\nc\nX\nX\nX\nThis is MPS\nThis is MSP\nA + C\nA\nC\nEEOIBIIHIÐBN#OO.IHOO?IIBOOO.×ØU.UO{U9UBIBEOU>O.U\\U}IOU;Y2E9U.O\nEE9I.IIHI{ÐØHOUßÞØU}UBIIUKUB×E9IKØU.UaY2OIOO.IHOO.IIBOaÆO?× U.UØ=UBaIQUOUBIBEOUU}IOU;Y2E9U.Oa\nÐBaxa\nOUßÞaY2OIaI.IHUBI×E9OIBØY2OO?YUUBI=IHIØ=×!U.OaÞEUY2OæYHOIeOc$exc0Oeee×I=U\naIUKYU.UØHIaØU}UBIY2OEOØ\nU}IOUKY2EOUBOa#iJØHIUBOIU.UaY2OIiBiiaO.×ØJO.OaEOOaEOU>O?YHI*ÞOE9UVOUBOIE9ØJOða\\a\n·\nanoOO]YxEOØY2OIIoo×IHIØ=ØHEOUBOU}U.IYHOIoOðSao\nEø÷euuuue\ny\naxa\nOUßÞaY2OIaI.IHUBI×E9OIBØY2OO?YUUBI=IHIØ=×!U.OaÞEUY2OæYHOIeOc$exc0OeeeØHIa\nU.Uo×IHUaIU;Y2ØU}UBIY2OEOØ\nU}IOUKY2EOUBOa#iJØHIO.OU.YHOIIU.UaY2OIiBiþaÆO.×ØO.OaE9OaEOU>O?YHI*ÞOE9UVOUBOIEOØJOEaðsa\ny\nanoOO]YxEOØY2OIIoo×IHIØ=ØHEOUBOU}U.IYHOIoOEaðSo\nEø÷\neuuuu\n\na*UIEUY2OIKIU.UaY2OIKØHIU9UBIBEOU>O.UU}IOU;Y2EOUBOØI;o\nOEEOYJO{Ø=Y2O?Y2EOUQOOO.IHaocþUsØHU ÞOE9UVOUBOI>o\nexOØ=ÞIIKNFeJU\nOIEUY2OIKIOO.ØJOØ=YVO]Y2E9UQOO>O.I=a\n\naexIHIQY2OIUOUBIBE9UO.UU}IOUKYHE9UBOØJIIO.U\no\nexOØ=ÞIIKNSIKØ\n\n! #\"%$'&(!)+*\n,.-0/21436587\n9:.;!<>='<@?A5CBD?AE ?F5HGIEKJ0L4<6='58M\nQ Q\nQ x\n2 1\n00 01 11 10\nX\nX\nX\nX\nX\nX\nQ Q\nQ x\n2 1\n00 01 11 10\nX\nX\nX\nX\nX\nX\nQ Q\nQ x\n2 1\n00 01 11 10\nX\nX\nX\nX\nX\nX\nD\nD\nD\nNPOQR\nSUT.VXWY[ZS]\\KZ^R\nQ_a`bZc\ndfehgSfNji `\nklgRC_KZFmTonDTTp\\C_\nOS]TpqCnrtsvu]dUrwyxzOu{d|r}`bZ~_\nO\\\nTozgocKZ\\rtZ^\\\nq}rgR\nSKSUdUu%UgntOdu{gS]Td]R\nSUS]Tp~(u\nZtK\\\nOu]Tad|uZ^u]TaZ~_\nO\\\nTu{_KZ0uozZdq\nTpdUOQ\\\nTqnrZUR \\\nOgST\\\nQO\\ TpTpSf_\ngOd\\\ng}g\\\nQTpSfOu]_u{_ T\n~pgcKZ^\\rliXTpTdZdlOeDu{_\nOdcTpSUd]g\\zZdlmTpS|rod]gc\ncrZ^\\\nqu]_\nT+g\\ rO\\ ehgS]Z^u]Og\\rgR~FZ^\\K\\\nqOdlZ\nd]O\\\nQT+cKZQT+ge'cKZcTpSz~pg\\uZ^O\\\nO\\\nQu]_\nTY[ZS]\\\nZR\nQ_`bZ^c\nd%d]_ gf\\O\\NPOQR\nS]TVX!_\nTS]T[ZSUTgnm8OgR\ndUr\nu{_ S]TpT#dUu{Z^u{T+m^ZSUOZn TpdlZ\\ qOuzZc\ncTFZSUdu]_\nTpSUT+Odlg\\\nT#O\\\nc R u[KliXO\\ ~pTfu{_\nTd|uZ^u]Tpd#A ¡A Z\\\nqH\n_KZFmTq\ng\\¢£u.~FZSUTpd.O\\tu{_ Tp¡4Ou.Zc\ncTFZSUd.u]_KZ^u.g\\\nrHdUu{Z^u{Td¤ u{_ S]gR\nQ_¦¥> ¡' ¡' A X¡4 XZ^\\\nq\nA %ZS]Tge4O\\u]TpS]TdUup\n!§ _KZ0ufZS]Tu]_\nT[`asy(c)s|`aa«gQO~FZ2T c S]TpdUd]Og\\\nd!ehgS%TpZ~_ge¬u{_\nTd|uZ^u]T+m^ZS]OZn\nT#O\\\nc R u{d[@u{_KZ0u\nOdp¡Xu]_\nTO\\ c\nR u%u]gu{_\nT+\nOcXw(r)Kgcu{_\nZ^u%fOD_ gqu]_\nTdUu{Z^u{TF(ja#d]d]R Tu]_\nT[ #wvu°r8cT+KOc\ngc\ndfZSUT\nu]gonT[R\nd]Tq\n±2z3μ ¶¬·% . j·1\n±¶j3μ ¶¬·\n\n·1o\n\n¶\n·% [ j·z1\n± z3\n\n·\n\n·1\nVX#»\\u{_\nTd|uZ^u]Tu{S]Z\\\nd]Ou{Og\\q\nOZQS{Z^1⁄4dU_\ngAf\\aO\\NPOQR\nS]T\n*\n¡\nd]_ g1⁄2u{_\nT[Z^~u{R\nZ3⁄4u{S]Z\\\ndUOu{Og\\\ndT(X_\nOn8w\nOu{Tpqnru]_\nOdfZ~_\nO\\ T¡KZdfO\\ KR\nT\\\n~pTqanru{_ T.O\\\nc\nR u%D\n\n¿AAAA\nAAAAA\nÆC!E#E%E'E(C!I#I\nx=0\nx=1\nx=0\nx=1\nx=1\nx=1\nx=0\nx=0\nIPIÐN\nOUO[O OjOy×!ØUIPIU\nIU{O[UUY^U]O¤ØaYÞß\nIU O\n\naaaaa\naaaæa\nce!e#e%e'i(e!ii\ni.ð0n2o4o6o8o\noø÷[uu>o¦u>u¬uyyþþ\n!\"#!%$&#\n('*)+jy,(-.'/0'\nþþ !2-.!03\n(-4'5'6\n(7\n+*9:;':</'þ=?>A@;BC!D\n@+E$F$HGzþ#JI.KL</'pþ?>\nB! D\nM\n+E$F$\ny*>N!J\n!*O!0(K\ni\n!D\nPQ'6(':?R'SUT5VUWYXJZN[\\UWY\\U]^Tpþ#'?\nQ#!0(+\n_\n!`('3#-4#!ba\n;-c1\n$&#\n('\nid\n( e('Cf'\nU!g1\n('#\n(6#+y,(-.';hU\n0'hif'!!#!if%#j?R'2K:k:B+\n> CL\nD\nQ\nQ\n> CL\nD\nQ\nQ\nA\nB\nC\n+5\n/CLK\n$l\n'/)7m$!!n>oG#\n(0#\nClock to Q\n10 nS\nClock to Q\n10 nS\n5 nS Async CLR to Q\n/CLK\nA\nB\nC\n20 nS Combinatoric\n5 nS\n$&\n('\ni\n7pPQ#-4#!C</=;\n-\n\nqp\ni\nþ'6-\nM"
    },
    {
      "category": "Exam",
      "title": "quiz2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/c5c302f5b0c179b1c69003b645c67684_quiz2.pdf",
      "content": "! #\"$&%'\n(*)+,.-0/213)4/5.67&89):;/2-=<9:>,?8@7&4AB<94))-=<94A3,.4CEDF5B13+G/H)-JI\n:K<9)K4:)\nL\nMONBN.NQPSR\n4/H-H5CG:K/H5B-=T (*<9AB<U/V,.8WITX=/H)13XYZ,.[\\5B-2,]/25B-0T\n^3_a`cbed\nf\n5hgB)K1i[\\)-\nNBjk.lBlBk\nN\nMMKMMMKMMKMMMKMM>mk.ln\nk\nMMKMMMKMMKMMMKMM>mk.ln\no\nMMKMMMKMMKMMMKMM>mk.ln\np\nMMKMMMKMMKMMMKMM>m\np\nln\nqJr*qtsY\nMMMKMMKMMMKMMKMMhm$NhlBln\nf\nsQuv7\nMMMKMMKMMMKMMKMMMKMMKMMMKM>MMKM>MMMMM\nR\n4C<O:>,?/H)wS5BG-xI\n):;/2<O5B4\nmSn\ny\n,.13)X\nNzk|{\nu\nmSn\ny\n)44<O6})K-\nN~{\nu\nmSn\nf\n)K<9-H,\no{\nu\nq<OXJG<OQ<9X}!K\niW\\qF5,.4C\n-H<O/=/2)K40:-H<O[XH)K)K/HX,.-=)~,.898O5z)C\nM\n{\nG/TB5BG-J4,.1)Q5.4e,.8O8WX=));/2X*,?4C<94C<O:>,?/H)*TB5BG-JX=):;/2<95.4v5B4 /H<9X+,?AB)\nM\n-H<O/H),.898\\TB5BG-,.4X=)-HXJC<O-H):;/28UT5B4/2)G<O\nM\nI\n5h,.8985?6tT.5BG-F5.-H\nM\nwS5BG,.-=)*45./-=)G<9-=)C /25GX=)~,i895BAB<O:x/H)13+8,?/H)\nj\n[G/TB5.G1GX=/J¡ \\e\n_Z¢\n£\\\n_Z¢\n¤t;¥i\n¢\n¢\n\n}¦\n`}§\n}\nM\n\n(c)UaBaBa\n«Q¬.9(r)~\n°J±Q2e3 Z(c)(c)K(c)(c)(c)K(c)(c)K(c)(c)(c)K(c)(c)K(c)(c)(c)K(c)(c)K(c)(c)>(c)K(c)2μ\n¶K·! h1zo@»a1⁄4t1⁄2. z3⁄4}o\\·\n¿&AHABAAOAA3Æ\nμ\nCaEE.EEII\nA.IIHÐN9ÆQOONOO\nE\nAHA|A\nE\nÆHA\nE\nA\nE\nI2ÐA=AA|OÐ\nE\nA&OA=AB×BA\nE\nAÆ*ØÐN9UVÐ\nE\nAHA\nE\nI=I\nE\nUVÐA\nE\nI2A3I2ÐAUA\nE\nUVUA.IIHÐAOONOO.UYSABOEA\nE>Þ\nAHAKAAhOBA~I2ÐA.ÆHAO\nE\n×BAÆJI}AHABAßIHÐAOONOOUI}ABAJA\nE\nÆHAN\nE\nA=AKI}AA=AHN\nE\n×3IHA\nI2ÐAAU&aÐA\nÞE\nAKA\nEvE\nA.IA\\AIHOA\nE\nA\nE\nN\nE\nØNOIHÐIHÐAOON9O?U\na~1]oatacaa\næc~e3⁄4e·Zea1iei@a1]1⁄23⁄4ciai\ni\nÐAhØ\nC\nA\nE¡ð\nNO×BOA=An3ÐAhØ\nE\nÆHÐNUIoI=o\nE.EE\no\nE.EE\nAiOAUI2N9OA9N9U\nE\nI2NOA\nE\nA.I*o\nEo÷o\nØFABOA\nE\nA\\AU\nE\nA=AHNOA\nE\nABOI>U\nø\nE\nO\nE\nA0I2NOUOA\nE\nA\nCÞ\nA.O ÆHÐABOA\nE\nÆHÐAzØuØÐ\nE\nII2ÐAUA\nE\nI2A\nE\nI2ÆA.I@IHÐA\nE\nUKUOAiOA\nE\nIHABAFA=A×BNOÆ=I2AKAØABOA\nE\nA!A\nE\nIoI2AKA\nA\nE\nUVÐiÆ=IHAON\nE\nIHÐASÆHÐNUIoI=o\nE?EE\no\nE?EE\nOAHAUAÆ=ÆUuxÆHÆ=OAA#I2Ð\nE\nItIHÐASAiOAOIHN9OAON9U\nE.EE\nNOÆtN\nEE\nA9A;IoI=ouÆ=ÐNOIoIZA=A×BNOÆ=IHAAU\ni\nI\nE\nA=IØNUI2Ð uOBA~ANUIØN\nE\nAAHAKOAHAKÆHA\nE\nI\nE\nI2NOA\nE\nÆA.Iao\nE|E.EEeo\nU\ny\n+\n=\n+\n=\n+\n=\n+\n=\nx 5\n-3\n0 0 1 0 1\nð\nN9×BOAHA|nBþ\ni\nÐNOIoI=o\nE.EE\no\nE.EE\nI\nE\nAA9A*I}A.A¿#A=ABAAOAAyn\n\n\"!$#&%('\n)+*,.-&'/-&021\n3465748:9<;=9<>?4A@?8;B8C\nD\nEGF?H IKJMLNPO\"QR9<>S4UTV8XWX9Y;\n5Z9>S844\n[]\\^>S_W:9<C\n`\n4WaC=bcd;Pbe`fChgSi]9kjl;m_gS@SnP9\nW_dBgVC\ncdWoCpC\ngSiYq+[srt9u@S8;(iSnSb4Wo9<>S8X44;n?9@Sn?9uW_dBgVC\ncdWvxwyQGzYChgSi|{h[s}~8nSi?_DY4g9eC\n8z.9_DY_gSBi?_C\nB8C\nD\n_WWX>S;jg_g_dBnS84A(QK_gfj>S_dbe>9>S4_dgS@Sn?9WX_BgSC\ncWC\ng?ibcd;Pbe`/C\n84W>?;jg[~P>S;j9>S4;\nn?9<@SnP9\nW_dBgVC\ncdW[34D|4Dqy48vz\n;nai?;g+9R`GgS;jC\ngzG9<>S_dgSBC\nq;n?9u9<>?4_dgS@Sn?9lW_dBgVC\ncdWuq457;\n849<>S4WX9eCh8X9l;\n5+9<>?4\n9<_dD|_dgSBiS_C\nB8C\nD[\nCLK\nz\ny\nx\nb\na\n_B\nnS84Pv\\^_dD|_dgSB_ChB8<C\nD57;88X;qSc4D\n\n¡\n¢£¤¥¦X§\n(c) a\"«$¬&((r)\n+°±223x2aP |2¶μ ·V1 o$»&2\n1⁄4^1⁄2S3⁄4Y¿3⁄4AAASAAASÆAC\nÆ<E\nEEEhEE<E\nAe1⁄2S3⁄4A=E<AUE1⁄2S3⁄4IVE\nAeI\"IoIhÐGÐlNMOGOPÐ\"IA?AP3⁄4¿¿XAEY3⁄4E<1⁄2?OASCUO1⁄2SOdAe1⁄2mO\nA×A¿X1⁄2SA×SØdA\nI3⁄4UEhISØ3⁄4EAUSC×SÆ3⁄4pA×PEU\nU\nU^Y~1⁄2VE EA?AP3⁄4¿E1⁄2SO¿RE1⁄2SOA?C:ASAGÞaß(E<EhE<3⁄4pOdE¿Ra7×SASA6E<OA\nASOASC:OdAUOKAÆXAS¿U\na\nUaÆEOaEYI?ØA(AeIaASOEhCÆ<E\nEæE<1⁄2VEhEAS3⁄4¿AÆOI3⁄4¿E<1⁄2?3⁄4U¿E<Æ×?AE<×?Æ3⁄4.AhaO1⁄2VEhEE1⁄2SO¿^E<1⁄2?OASCYASA(3⁄4¿URßP1⁄2SAO E<1⁄2?3⁄4\nOdE|AAÆXE<E\nAE^3⁄4Ød3⁄4EY3⁄4AE<¿Eh¿Zcee3⁄4¿Ie3⁄4COd¿XE<3⁄4Æ¿IV1⁄4$ÆXOeßGEeEhE3⁄4¿I?3⁄4E<AhU\n\niiiii\nið\nnoo\nooo÷øiiiiiiiiiiiiiiiiiiiii<u\nuu u\"y$þ&ypuUuu\"y$þ&y\nou\n!#\"#$&%')(*+,-+(.$0/1!#,$&,243657$9824:3;<\"&4=$922!*=>@?<A+(4\"#B C.$&(DB(+E,F3\n$G)(4A!H(*+!#8I$&\"#A2!*=>E*=>&)()?KJ:BL$M\"#!N!0PO$&% 2A!95Q)R$&(S57$&824:3E24!#\"#*TU.C.$&(S)*++\nI$9WVU5K6CT!#B\"X*)!#%H,4BR$9!#BYC.$&(Z+B[I))\\I62!*=>](!#82_^R(ZC.$&B`Ia!#-+$9I!&a/7,-+)@;\n$&BXI)BbVcU5<*)!#+*)!#Bd(TB!&A%0$9Z%E% )e$9+2U3#VU(!#824],24!\nCf8bV@IF8(g% $&>FB\"aMCD!#824\n,-M24!N*=>*=>&)ih&+j3#V@h#+j3X(!#3#?DG24!N*=>0(TB[I)B)dI!E,-k*)!#BB)*)+]!0$&BdB8i*+!#B((jIB\"\n!&5<$&Bd)\"#[jl:,UTB8%H,Q)A$9B]$9B\\mn+B[I)+m->&o3#?Spq*+!#%G,BR$rI!&Bs(TR$&Nl:*)!N)d4B[I!aIZI4B\"VR,8N\n*+!&82 !#,[hN4!#8(243a,-A*=R$&B\"#+kt8(S,-)51!&i*+!#%E24I%E&?uu!M8B24!N*=>@V!#BA)B[I+(.I^R(SBF8%G,Q)\n$&Bvmn+B[I)+mUV.IL(+*+!&BwBF8%H,-+E$&Bxmn+B[I)+mUV.ILyBF8%G,Q) $9Bxmn+B[++mK$&BzL)h*)\n(!#82 8B24!N*=>@?<J{.R$&(D$M!h4(!&BER$9D45$ZCT!#B\"GBF8%H,-+D(K+B[I)+04D\"#!N)(K!G$9Bs$&2e$9%|(j=$9\n$&B`*+$&8()(G$9B\\$92e$&%}!X,-+)b?apS~I4(~Q!&B[~4Z%G8(Z,-6Pl:(ok,F3Y+B[I)B\"]$&242)+!&(+?6J{5KI4(\n(B!&i!#B9VIZBPON(I$9IZ*+$&8()(A$6% $&((4h&kPON2!#(!#B\\/CT*=X(T$a\"#!!NsW$&(!#BX! ,-~*W$9)5182\nCT4sI4(2!*=>;P?\n\n?R$r4(SIZ*)!#%H,4BR$9I4!#B@\n\n?TJ:BaIiR$&B3[l:R$&B3a51!#%|(!\nCTB04B04\"#8TVFI$WCT(=$rITII$9B(UI!&BEe$&\"#$&%51!&<I4(\n% $&*=4B&V(!\nCTB\" $&242cB8I(i$&Bd!#8NI8(+?\n?TpvBF8%H,-+K!&5b)B\"#B++(D$\nh&CD!#>9+CTUIaI4(+VF,8DB!#BiR$Wh#,Q)+B0$&,2!G\"#Uh#T8(S$ZPl\n(*+4I4!#Ba!&5cCT$9KR$&-+B()?pA242C.i>FB!\nC(I$9KW$&*= !&5c+4oONQ)4% )BF(D$\nh&+(824+\n4BzPON2!#(!#B(+?L(8(-+*)046% $W3,-X+2$9I)z!L+2$9IUh#)243\"#*+24!N*=>\\51+F8)B*)3&V\n+2e$rI4h&gI!6IM$9,244:3E!&5Z+B\"&B)+(!E8(d,8!#B()?$9T(TR$&Q)BB\"[\n\n?SK!#8`*+$&B_^OY6)%0$rI86oON2!&(!&B_!#,2+%},[3_%E!NU53B\"EI6*)!N9?G\\4GI6B)C\n*)!NZ)k$&BXB*+$9IACT+k4T\"&!N)(BsI~gA~\\!#\"#$&%X?\n\n[U##\n~&k\n¡i¢~£]¤T¥+)++)+)++)+)++)+)+W)¦\n§N (c)ga«)¬AI(r)¬~¬P N°±2#3 2#a0 33μ¬g 43S3¬oI±4¬+¶b·N 4. 3Sa29I¬+¶(r)R 92&a2N«)«W &3 2#a(r)¬A(r) a1Gμa±2«=oF3S¬)»&¬+a\n1⁄4\n(r)¬)a_\n1⁄4T1⁄2\n2#a1 aFμ3⁄4H¿-¬\n1⁄2\n3T¬+a[I¬\n1⁄2\n¬)¶b TA(r) 3i 3T¶μ¬ZI2 dAn1#±4 4I«=(r)cAR\n1⁄2\n43 4a16A\n1⁄2\n2#3⁄4A(r)¬M«\n1⁄2\nμ¶¬\n1⁄4\n\nA\n4a\n1⁄4\n(r) «=(r)LI(r) 43SI(r) 4a1\n1⁄4\n&3\n1⁄4T1⁄2\n4¬+ab A(r)R rT 3\n1⁄4T1⁄2\n2&a1FÆ\n¦ iC\n1⁄2\n2&°Q2#3¬a _AnE QAbA12\n1⁄2\nI(r) 43~°\n1⁄2\n2#¿±¬+3⁄4X kE:a«+±4μ¶¬E &a[A` &¶¶ 4I 42#aR &±E«+2¶¬H(r)R 9Z3⁄4E 1#(r)[g¿-¬\n1⁄2\n¬)EFμ\n1⁄2\n¬+¶\n&a¶@I92\n1⁄2\n«)2N¶¬~(r)R 9T3(r)2#μ±¶X¿-¬\n1⁄2\n¬+3⁄4E2\n»#¬+¶c\nstate0\nstate1\nsuccess\nalarm\nboom\nI\n41#μ\n1⁄2\n¬ZINIKÐ= 9¬ZA\n1⁄2\n&a3 UI 42#aLNg e &1\n1⁄2\n&3⁄4OA12\n1⁄2\nC\n1⁄2\n2#¿±¬+3⁄4OI\n\nO[OUO#O#O\n×~Ø&UUkU\nUiY~Þ]ßTaO+O)O+O+O)O+O)O+O+O)O+O)O+O+O)O+O)O+OWO)OIa\naGaEa7aaa0æ7cee<eieaEiyi~i)i+ð_nIoo4ooToUnIo]o&÷#øuguFøo4uHu&yþYnøuy]o4ngo4ybyð4iWu&oiHøoiGo4ninI÷o4yþo+u9nIikoToi+ui\n+÷þiE÷NþoWurnIo÷&yo Høon\nQiZðu+i)þ\n\n\"!\n#%$\n!'&()\n*+,-\n),..'/10\n$23\n\"!\n54*6 $\n!'&()\n,\n&7\n$23\n&\n\n&\n\n(\n'+*-'69\n!;:\n*\n&\n<\n1=\n>\n!?&()\n*+,1-\n)@\n-\n&\n*\n<BA\n(\n*418\n&\n*DCEF\n&\nHGI-?6\n>\n!?&()\n*+,1-J\n\n:\nGK,**\n=\nG\n\n8,*?6\n>\n*\n&L!'&()\n*+,1-EJ\n(M(\n'+*-'6H\n-\n\n&\n-\n&1\n\n!'&\n\n&\n\n)?=\n-\n8N*O\n(\n'+*-'69\n!\n&\n\n:\nDP\n&\n\n&\nQ\n:\nL\n!\n<\n!'&\n\n&\nCG\n!'&\n\n&\n\n.\nG\n!R\n--\n!!\nGS1\n=\nGT,**\n=\nEF\n!\n'+18\n:)!\nGK8\n)!U>\nP\n&\n\n&\nQ\n:\n\n!\n'+185O,'\n!?&\n>V!'&()\n*+,1-\n)@\n-\n&\n*\n<BA\n(\n*?418\n&\n*DCE\n>XWZY\nCCCCCCC\n.Y\n\n!\n'+18\n!\n-1*?8\n(\n>V!'&()\n*+,1-\n)@\n-\n&\n*\n<BA\n(\n*?418\n&\n*DCE\n>XWZY\nCCCCC\n.\nC\n.Y\n\n!\n'+18\n&17\n'\n(\n>V!'&()\n*+,1-\n)@\n-\n&\n*\n<BA\n(\n*?418\n&\n*DCE\n>XWZY\nCCCC\n.\nC\n.\nC\nY\n\n!\n'+185[*\n!U>\\!'&()\n*+,1-\n)@\n-\n&\n*\n<BA\n(\n*?418\n&\n*]CE\n>XW\n*\n&17\n\n!^W_UY\nC\nY\n\n&&\n,\n&\n`8\n1=)\n8\"-1*\n(\n8+*OaP\n&\n\n&\nQ\n:\nL\n!b>dc\nCCCaCC\n.\nC\n..\nC\n.\nC\n.\nCC\nc\n\n+\"8\n\n8,*?6#e\nW\n)!\n<\nCE^8\n(\n)!\n<\n.\nEF\nff\n(\n\n&\n-\n&\nC\n..\n<\n(\n*'8\nY2&\n(\ng\n&ih\nE\n\n:\ne\nW\n<\n8,*\n&\n)!\n<\nCEE^8\n(\n)!\n<\n.\nEJBff\n(\n\n&\n-\n&\nC\n.\nC\nO\n!=j>k:\n*-\n!!\n<\n:)!\nGl88\n=\nE\n+\"8\n-\n!\n\n:)!\n\n!\n!?&\n\n&\nC\nW_\n'ON88\n=#W\nO,'\n!?&M&7\n)!\ne\nW#!'&\n\n&\n\n.\n\n!\n\n)!\ne\nW\n=\n\n(\n'OH\n!?&\n\n&\n\n.mW_\n'ON88\n=#Wi!\n-1*?8\n(M&17\n)!\ne\nW#!R\n--\n!!\n\n!\n\n)!\ne\nW\n=\n\n(\n'OH\n!'\n--\n!!^W_\n)!\ne\nW#!'&\n\n&\nC\n8#\n=#W_\n'ON88\n=#W\n[*\n!m&7\n)!\ne\nW#!'&\n\n&\nC\n\n!\n\nn1oppp\nqsrtuwv\nxysz|{j}Fo~oo~o~oo~oo~o~oo~oo~o~oo~oo~ooo\n^15,'\n\nN'H\n\nM\"R#\n,R#~\n5'2L\n\n,'M\nN?\n\nL\n\n551#'\n\nVD 'M¡L'\n\nN\n\n]¡\n\n^¢\n'\n\n1£'¤\n\n¥¦¡\n\n§(c)1£?¤\"a\n\n«\n\n'M,1R\n«\n\n«\n§(c)1£¤\"a5\n\n'\n\na~K\n\n¡]1^J\n\nL'%\n\nL'%\n\n]¡\n\na'\n\n1£'¤\n\nH\n\n`\n\nR\n\n?1\n\n?\n\nR\n\n¬1(r)(r)(r)\ns°±2w3\nμs¶|·j F~~~~~~~~~~~1\no1⁄4»J1⁄2¿3⁄4A1⁄2¿3⁄4AAA3⁄4A,ACÆF»JE\nEEEIIIIEIIIÐ\nN\"O\nI#EIII%O\nO'OOO\nE×Ø,EU\nO,UU'U1U\nO2IEE3Ð\nIY\nO\nE\nO\nIaIIØLE\nO\nÞ\n×I\nOaß\nIaKEaIU1E?aaa\\EY\nO'OOO\nE×Ø,E1UaÐ\næ\na|I%a|c\na|×\nNOLO'OOO\nE×Ø,EUeFÐ\nIY\nO\nIIØHÐ\nIIU'egE\nO\nIU\nO1N\nII\nO\n×\nÞ\n×e]IIØLE\nO\nO\nE'Ø1YIE`U a\nO'OOO\nE×Ø,E1UaÐ\nEIØ\"EY\nee\nO\n×\nÞ\nI`i1i\næ\nIY\nO\nEÐ\nc`i1i`U5IY\nO\nEÐ\nIIØi%a\nÞ\nI×UI\nOO ß\nU1E?age\nEIØ\"EY\nee\nÞ\nI×UI\nOO\nE'e]I,E\nO\nEYØ\nO\nI\nO\nØI\nß\nU1E?a\"e\nO\neIY\nU5i1iDIÐ\nE'e]EiZi\nU\ni\nO\neIY\næ\ni1iaIÐ\nIY\nO\nE'e%Ð\nIY\nO\nE'e%Ð\nIY\nO\nÞ\nI×UI\nOO\nÐ\nIY\nODO\n×\nÞ\nÐ\n\nð1nooo\nosooow÷\nøuuuu|yjþFn~n~nn~nn~n~nn~nn~n~nn~nn~n~nnn~n\ny\n\n! \" $#\n%'&\n(! \" *)\n&,+\"-.\n/!012\n.133,465\n)78#\n%'&\n:9;/!<=)\n&,+\"-.\n+>\n)78#\n!?\n+\n\n+\n\n%\n?\"<6?'/@96?A\n&\nB\n/!\n+DC\n26@<FEG9\nHI?\n&@+\"-.\n/J0162#\n\n-\n\n&\nKEL9\n-\n\n&\nMHI?\n&@+\"-.\n/J0162\n.JN\n+\n/!\nCO3P-\n/!96?\n+\n/RQTS#\n-\n\n+\n\nHI?\n&@+\"-.\n/J0162\n.JN\n+\n/!\nCVUW-\n/!96?\n+\n/RQTS#\n\n-\n\"/\n%\"+\nHX/\n%\"+Y&@+\"-.\n/J0162\n.JN\n+\n/!\nCVUW-\n/!96?\n+\n/RQTSS#\n!?\n-Z%\n?\"<?1/@96?F#\n;2\n>\n\n+\n+6%\nR9\n>\n\n+\n\n&,+>\n\n&\n/![\n%\n?\"<6?'/@96?A\n&\n&\n,0?T]\\ 6T/KE^/,?T $E\n+\n9;/8E\n+>\nDH\n&@+\"-.\n/J0162\n.JN\n+\n/!\nCVUW-\n/!96?\n+\n/RQTS#\nT 0'?\n__:9\n>\n\n+\n\n&,+6>\n\n&\n26@<\n.\nB\nT/\"2J\n&\"&\nH\nB\nT/\"2\n&&`C\n26@<aS\nT 01?\n__\nB\nT/2J\n&&\n,[Y26@<bc\nN\n!?\n+\nJ?\n-\n2@<edfb\nb\n+6>\n!?\n,[:9 RdMb\nb\n+6>\n!?\n,[R9\n-\n\n&\nZdgQQhg\n+>\n!?\n\\ T/Zi6dZ9\n-\n\n+\nj#\n\n&\n,[k9\n-\n\n&\n:dlgQ\ng\n+6>\nJ?\n/,?T ki6d:9\n-\n\n+\n$#\n\n&\n,[k9\n-\n\n&\n:dlg\nQag\n+6>\nJ?\n+\n9;/Zi6d:9\n-\n\n+\n$#\n\n&\n\n+6>\nki6dZ9\n-\n\n+\n$#\n!?\n-\n,[*#\n!?\n-\n,[*#\n!?\n-\n,[*#\n2J\n&\n:\n-\n\n&\nW\n&\n>\n!?mgQQagd\"nR\n-\n/\n%+\nid:\\ ;/o#\n>\n!?mgQ\ngpd\"nZ\n-\n/\n%\"+\ni6dq/@?T $#\n>\n!?mg\nQagpd\"nZ\n-\n/\n%\"+\ni6d\n+\n9;/K#\n>\n!?mg\ngpd\"nZ\n-\n/\n%\"+\ni6d\n+>\n$#\n>\n!?r/\n+6>\n&\nd\"n:\n-\n/\n%\"+\ni6dAgQQQ\"QQQQQhga#\n!?\n-\n2J\n&\n$#\n!?\n-\nB\nT/\"2J\n&&\n26@<\n.\nB\nT/\"2J\n&\"&\n#\n!?\n-\n>\n\n+\n\n&,+6>\n\n&\n#\n\ns6tvuuu\nwyxJz|{~}\nLtOtOttOttOtOttOttOtOttOttOtOtttOt\n\n@$\n!\"$\n'\n(!\"*¡\n,¢\"£¤\n¥!¦1§\n¤1 ,(c)6a\n¡78\n'\n:«;¥!¬=¡\n,¢\"£¤\n¢\n¡78\n!(r)\n¢\n\n¢\n\n£\n,¦T\"¥\"§,¬l\n°\n¥!\n¢\n±\n(r)(r)\n(r)\n@¢\"£¤\n¥J¦16§\n¤J\n§\n¢\n¥!\n±Vμ\n£\n¥!«6(r)\n¢\n¥R¶T·\n!(r)\n¢\n^§@¬\n(r)\n@¢\"£¤\n¥J¦16§\nT\n\nG1¥¥\n\n(r)1¥@¬\n¥\n\"¢r ,¢\"£¤\n\"¥!¦16§\"·\n!(r)\n£k£\n,¦;¥\"§,¬\n;§\n\n¢\n§\n¢6\n\n,¢\n\n¢\n\n¤@2\n§\n\n(r);Y¥!1\n£\n,¦T¥§,¬l\n\n¢\n\nRo\n¢\n\n¢\nJ»\"\n\nr\n\n±\n,¢\n\n¢\n¶$\n,¢\n\n¢\n\n§§\n\n1⁄46\n1⁄21¥¥\n·\n\n,¦6(r)T\nT¤\nG(r)\n¤ 3⁄43\no\n¢\n\n¢\n»\"\n\n$\n\n,¦6(r)T:11,\n@¢\n3I ,¢\"£¤\n\"¥!¦16§\n¤\n§\n¢\n¥J\n±Vμ\n£\n¥@«6(r)\n¢\n¥R¶T·\n3A¿jA\n¶¶¶¶¶\"¶¶\nA\n\n,¦6(r)T\n\n§6¥@(r)\n£\n3I ,¢\"£¤\n\"¥!¦16§\n¤\n§\n¢\n¥J\n±Vμ\n£\n¥@«6(r)\n¢\n¥R¶T·\n3A¿jA\n¶¶¶¶¶\n\n¶\nA\n\n,¦6(r)T\n¢6\n,\n£\n3I ,¢\"£¤\n\"¥!¦16§\n¤\n§\n¢\n¥J\n±Vμ\n£\n¥@«6(r)\n¢\n¥R¶T·\n3A¿jA\n¶¶¶¶\n\n¶\n\n¶\nA\n\n,¦6(r)T:AT¥\n3⁄43A ,¢\"£¤\n¥!¦16§\n¤J\n§\n¢\n¥!\n±Vμ\n£\n¥@«6(r)\n¢\n¥Z¶;·\n3A¿\n¥\n¢6\n\nP¿\"A3⁄4A\n¶\nA\n\n¢¢\n\"¢\nq!(r)\n62;¤\n!(r)'§6¥\n£\n(r)¦¥!1eo\n¢\n\n¢\nJ»\"\n\nr\no3ÆA\n¶¶¶e¶¶\n\n¶\n\n¶\n\n¶\n\n¶¶\nA\n\nT¦'(r)\n\n(r)1\"¥@¬(C\n¿\n(r)\n¤\n±\n¶T·P!(r)\n£\n(r)\n¤\n±\n\n·\nEE\n£\n\n¢\nT§\n¢\n¶\n\n±\n£\n¥,(r)\nA7¢\n(r);\n£\na\n¢WE\n·\nT\n\nC\n¿\n±\n(r)1¥\n¢\n(r)\n¤\n±\n¶T·\"·PJ(r)\n£\n(r)\n¤\n±\n\n·VEE\n£\n\n¢\nT§\n¢\n¶\n\n¶\n23E\n;¥\"§J\n\n±\nT¤\nE(r)(r)\n·\nT¦'(r)\n§J\n\n;¤\n\n«\n\nJ(r)\n@¢\n\n¢\n¶\n¿\"A\n,1Y(r)(r)\n2(¿\n11,\n@¢k¢\n!(r)\n(r)\n¤T\nC\n¿( ,¢\n\n¢\n\n(r)\n¤T\nC\n¿\n\n!(r)\n£\n,1\n«\n\nJ(r)\n@¢\n\n¢\n\nI¿\"A\n,1Y(r)(r)\n2(¿W\n§6¥@(r)\n£k¢6\n!(r)\n(r)\n¤T\nC\n¿(\n§\"§J\n\n(r)\n¤T\nC\n¿\n\n!(r)\n£\n,1\n«\n\nJ(r)\n,\n§§J\n\" P¿A\n(r)\n¤T\nC\n¿( ,¢\n\n¢\n¶$\n«\n\nJ(r)(\n2(¿\"A\n,1Y(r)(r)\n2(¿\nAT¥\nI¢\n!(r)\n(r)\n¤T\nC\n¿( ,¢\n\n¢\n¶$\n\n(r)\n¤T\nC\n¿\n1¥¥\n\nI6IvIII\nÐyNJO|O~O\nOO×LØUIOIOIIOIIOIOIIOIIOIOIIOIIOIOIIIOIU,U\nU!YÞYß,aa\na6a\nUJYka'aaæ(c\"e\na1aaæ(cfeOeea\nee:ÞTa,YFe7iriiiUki!a1a,ð\"ikYTU6n6iYo@iiJiUFo\na6a\nUJYra!i\na\nUi;o:c\"e]YToo:o6c(o,iiJiU\"o$aIeeRi÷;aß,Þki\"iiJøro,iTiJiUo\nU!YÞYiJioU$a\nU!YÞZøiTaiJUooPa;oæua\no,iiiUoi6u\"a\"i,uUÞ\nuyøiTa\"iJUToo`þyi6u@uaTU'ßY\nß,aki1ß6o\"ßYoUÞU8þyi6u!u:i\na\nU!Y\nß,aeUJY\"iUiecfeOeeGi\na\nU!Y\nøTooZo6cPYTooa\nU!YÞrß,a*a\nU!YÞrß,a*a\nU!YÞZøiTaiJUooeo,iiiUoi6u\"a\"i,uUÞa\nU!YÞqii;i\na\nßiUi@i6ðiUro@iiJiUo!æ;ii\na\nßYTU$a"
    },
    {
      "category": "Exam",
      "title": "quiz2sols.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/2f9ecca34c1597014db8699b7e297105_quiz2sols.pdf",
      "content": "! #\"$&%'\n(*)+,.-0/213)4/5.67&89):;/2-=<9:>,?8@7&4AB<94))-=<94A3,.4CEDF5B13+G/H)-JI\n:K<9)K4:)\nL\nMONBN.NQPSR\n4/H-H5CG:K/H5B-=T (*<9AB<U/V,.8WITX=/H)13XYZ,.[\\5B-2,]/25B-0T\n^3_a`cbed\nf\n5hgB)K1i[\\)-\nNBjk.lBlBk\nN\nMMKMMMKMMKMMMKMM>mk.ln\nk\nMMKMMMKMMKMMMKMM>mk.ln\no\nMMKMMMKMMKMMMKMM>mk.ln\np\nMMKMMMKMMKMMMKMM>m\np\nln\nqJr*qtsY\nMMMKMMKMMMKMMKMMhm$NhlBln\nf\nsQuv7\nMMMKMMKMMMKMMKMMMKMMKMMMKM>MMKM>MMMMM\nR\n4C<O:>,?/H)wS5BG-xI\n):;/2<O5B4\nmSn\ny\n,.13)X\nNzk|{\nu\nmSn\ny\n)44<O6})K-\nN~{\nu\nmSn\nf\n)K<9-H,\no{\nu\nq<OXJG<OQ<9X}!K\niW\\qF5,.4C\n-H<O/=/2)K40:-H<O[XH)K)K/HX,.-=)~,.898O5z)C\nM\n{\nG/TB5BG-J4,.1)Q5.4e,.8O8WX=));/2X*,?4C<94C<O:>,?/H)*TB5BG-JX=):;/2<95.4v5B4 /H<9X+,?AB)\nM\n-H<O/H),.898\\TB5BG-,.4X=)-HXJC<O-H):;/28UT5B4/2)G<O\nM\nI\n5h,.8985?6tT.5BG-F5.-H\nM\nwS5BG,.-=)*45./-=)G<9-=)C /25GX=)~,i895BAB<O:x/H)13+8,?/H)\nj\n[G/TB5.G1GX=/J¡ \\e\n_Z¢\n£\\\n_Z¢\n¤t;¥i\n¢\n¢\n\n}¦\n`}§\n}\nM\n\n(c)UaBaBa\n«Q¬.9(r)~\n°±h23¬ cc±zμ¶\n·K !1hoz»@1⁄4a1⁄2t3⁄4.1z¿}»\\\nA&AHABAAOAÆ3C\n¶\nE\nEiE.EII\nA.I@IHÐN9COON9O\nE\nAHAA\nE\nCHA\nI\nA\nE\nI2ÐAHAAxO\nÐ\nI\nAWOA=AB×BA\nE\nÆCSØÐN9UVÐ\nE\nAHA\nE\nIHI\nE\nUVÐA\nI\nIHA\nI2ÐAA\nE\nUVUUA.II2ÐAFOON9O.UZYSABO|Æ\nEhÞ\nA=AÆ3AzO.AI2ÐA.CHAO\nE\n×BACI}A=ABÆßI2ÐAOONOOI}ABAtA\nE\nC=AN\nE\nA=AKI}AKAHAHN\nE\n×IHAI2ÐAKÆvU\naÐA\nÞaE\nAKA\nI E\nA?IA\\AxI2OA\nE\nA\nI\nN\nE\nØNUI2ÐaIHÐAOONOO.U#aJA.I2AJI2Ð\nE\nII2ÐAKAHA\nE\nAHAJIaØFA|UKABON9AKCFA.ItaaæzcFeee\neUSaÐA\ni\nA=C=IJA.IaI2ÐAKCHA~ÆiOC=IJA\\A*I2OA\nE\nA\nI\nN\nEE\nC\nÞ\nABOvØNOA9AWA\\AÆA\nI\nNUI\nÞ\nN\nE\n×iNUI>U\ni~o]»iticðn\noo~o¿o Zoðoa÷ø@ðo]3⁄4¿cuðu\nu\nÐAhØ\nE\nA\nE¡u\nNO×BOA=Au3ÐAhØ\nE\nCHÐNUIyI=þ\nE.EI\nþ\nE.II\nÆiOAUI2N9OA9N9U\nE\nI2NOA\nE\nA.I*y\nE\nØFABOA\nI\nA\\AU\nE\nA=AHNOA\nI\nABOI>U\n\nE\nO\nE\nA0I2NOUOA\nE\nA\nEÞ\nA.O CHÐABOA\nI\nCHÐAzØ\nØÐ\nE\nII2ÐAUA\nE\nI2A\nE\nI2CA.I@IHÐA\nE\nUKUOÆiOA\nE\nIHABAFA=A×BNOC=I2AKAØABOA\nI\nA!A\nE\nIyI2AKA\nA\nE\nUVÐvC0I2AON\nE\nIHÐACHÐNUIyI=þ\nE?EI\nþ\nE?II\nOAHAUAKCHCKUxCHC=OÆAQIHÐ\nE\nII2ÐA~ÆOAOIHN9OAON9U\nE?EI\nNOCN\nEE\nA9A;IyI=þaC=ÐNOIyIAHA×.N9C0þ\nI2AKAU\nu\nI\nE\nA0I*ØNOIHÐ\ni\nOBAANOIxØN\nI\nAiA=AOA=AC=A\nE\nI\nE\nIHN9A\nE\nC*A.Iþ\nEaE.EI\nUYSABOA\nE.E\nC=ØAAQCHÐABOA\nI\nA!A\nE\ni\nOBA|ANUI\nE\nIaØA\nCUABÆ3OA9AKÆA\nE\nI\nE\nOÆA!AKAUaÐAA=A\nE\nA=A3IaØAEUKABON9AKCA.IFI2ÐA\nE.E\nC0ØFAKAI\nE\nAA9A\nE\nN\nE\nU\nE\nC=A\nÞ\nABO\nÆ\nE\nU.A\nE\nÆ3N9C=I\nE\nU.A\nE?EIE\nAA\nI\nIHAC=I\nE\nA=IAhOBAKAU\n3I\nÞ\nABOØAHNOIHA*A\nE\nA\\A.I2ÐA.IZI2ÐAÆ\nE\nA!AQC=OAHAQIHA|N\nEI\nNOU\nE\nIHAØÐNOUVÐvA\nE\nA\nÐ\nE\nC\nÞ\nABOA\nE.E\nC0ØFAKA\nE\nCØA~ØNOA9A!×BA\nE.I\nAQA\nE\nA\nÞ\nA\nE\nA?U\n\"!# $\"&%'%\n(\n)+*-,. /10\"23,++%45/$\"76$3 9876:%;1 <,. =>%++.?A@BC!\nEDF+>%+7G&%HI.0J 8KLH $1M<7!N )4\nPO\n%;62Q9R&+2S+1\n10\"23,++\n0 0 1 0 1\nT\n+\n=\n+\n=\n+\n=\n+\n=\nx 5\n-3\n0 1\n0 0 0 0 0 0 0 0\n+\n=\n1 = 15\nComplement:\nu\nN9×BOAHA|uFU\nu\nÐNOIyI=þ\nE.EI\nþ\nE.II\nI\nE\nAA9A*I}A.AA#A=ABAAOAÆ\nu\n\nVNWCXFXFX\nY[Z\\&]M^\n_B`bacZ d\\`fe1g\nhMijBk5lm\"n\noqpMr#snstvu\nwyx+z{x.|~}}>x>|FF|\n>7NJB} x1|EE}3z} |xxA &~}xS.J ¡}¢£& ¤J}\nF1\nH ¡3¥q=¦c} |\"¡ ¤ x.\n} |Ex.x§F¤>} ¤>}F1. P(c)a«3 ¡¬ =(r) |¤ ¡>&3x.N}|-«#}&3& '¡>°F|\n&±E b¢§2& 3/F¤ |xμ\"&¢§ } x¶ ¤>}±E&F &±>¡2.J|x>f¢§< ·J b¢ } x¶¤>} ¤J}\nF1./wyxx;¥ax|. /«F¤S¡>Fq1o} b¢»N«} ;¥9F¤>}}>x ¤>}£F1¥9xz{|x§} xE} |E}£zq}>x\n} S¡>°F|(r)H¢§C}1⁄41⁄2|F¥>&x.¿3⁄4Fq}>x.|x3|Ex;}¢. &x[z£} x~¥ & ¶}&3& S¡ °|<\nL x;«F¤AS x~A3&E}x [¦cz\n«FF¤G¢§|E}x#FG¥9}Az1⁄2} x.q¥9x;¤>|x;}S& ¡ L }x¢§ AF x~1\n«F¤ |y E¢£x.|A¢£xM¢§&<|¡ x[ «SF x\nAAAAyA Æ1A[ACJAEE9CJAPE+ECII9IIÐEINAII9OvO\nE'A:O§I±OAO3×.E I9IA:ANØE7OII9OMNA7IE&E+AA+NAOHE+ECII9IIÐE.UU+AUE&E§E OE1ANØAcII1A\nAA3I<AA:AMU/Æ1A+IGYNACÞO\"AI<O\nA\nßI<AUaA Æ1A~AC\"AaE9C\"AE+ECII9IIUII9O3U/Æ1A+I¶E+ECII9IIÐE;OÆ>II\"I\"A\nCLK\nz\ny\nx\nb\na\nc\n35&F¤ |ExMμJ 1⁄2A&3&>~a'°|az{F|§1⁄41⁄2|F¥>&x. μJ\n.FN«A3⁄4\n\naNaCæFæFæ\nc[ee&eMe\niBibice ieifð n\noMooBo5o÷\"ø\nuquMuuvyPuUoJþu\ny\n\nuU÷\n\n! \" # $ &%\"')(+*!,-,/.10-23,)(45367 589$:; 8<\" >=?7 ?@<\n%AB!%@9C &D?E?3 GF\nH\nF\nIJ K53; 89L 895M-NPOQ ! E8< LRS?T 8989M8<$:U7F\nVXWQY9Z[\\WQY\\]Q^_W5`ZbaGcd3ef9c`hgh`hif9j&ej1^Y9ZT[kjTeZ\"lmf9c`hgQjgPinP`_ZojTf9j\"pT[qcesrtY\\[\\Wu`p\"c][vecf+rUce7gwrxgZojTf\ny\n`]Agz`{rte|Y\\[qjMjT]A`hif9jq}~\nm[/[\\WjEZ`{jE[Y\\{j6Y\\[+W5`Z`]ucdQ[AdQ[Ur4WQY1p\"W$Y9ZZojTf9j\"pT[kjg{Y\\]P[\\WjZ`{j\na`Z\"WQY1c]5l+`Qp\"p\"cegY\\]Q^[kc{`]c[\\WjTep\"c][vecfXrUce7g{e7gZojTf\n\nFbCo:%5@9Q\"'z8! ! b89%A; 5B ?5 ?5!R4:; ! ; 89\n589QFLO3 o: 5\n8<sA7 h\n@<h ;!mbC(A;8<7 (78O- \"! (5 !F\n>\nQ\nD\n>\nQ\nD\n>\nQ\nD\n>\nQ\nD\nrdsel\nwdsel\nwe\nrdlout\nwdata\n489?3/?5 8<@<8< q=R EQ_Q\n\nh\n9 6¡\n¢)£o¤¥¦£ §)(c)\na6«¬)(r) Q°\n±32EaB« ¬)(r) Q°u 5μo¶v·z +¬1· o\n»\n1⁄41⁄2K3⁄41⁄4¿9A7AsA5AAAAAÆCA1⁄2EEA7¿9EA1⁄2EUA{ESAAAEAEI<IMIA!II<3⁄4qI5ÐNA¿9A¿<3⁄4\"A!II9AQE\"O)ON»\n1⁄41⁄2mA51⁄2E¿<AOsOUAE/¿9OE7A¿9A71⁄2AE-I\nAA1⁄2E¿<A1⁄2m3⁄4AA¿9E7EAI5AAA1⁄2mI9AQE\"OA5¿9E\"O1⁄2AEOxOqO×ABAA3AQA{1⁄2|Ø5AÆsA5I91⁄2mA!I3AU1⁄2A1⁄4AA5ELIAII<3⁄4qII<AA¿9E;¿3⁄4UOUAELA1⁄2E¿9A51⁄2A\n3⁄41⁄4A!3⁄4GU1¿Ix3⁄41⁄41⁄2MO;AAO5A_EAÆE¿<OA!3⁄4¿9AOUOUAEE1⁄2Oh3⁄41⁄2A1⁄2A3⁄41⁄451⁄2MI9AQE\"OwE1⁄45AII9APUA7E73⁄4EOUAAO#3⁄41⁄41⁄2&AAA1⁄2AA!3⁄4AA&EEA1⁄21⁄2A)Ð\nAOA_3⁄41⁄41⁄2OXU¿INEAAA71⁄2E3⁄4¿9AO¿9E;OA3⁄4mÆ{A!A1⁄2E¿9ÆÆs1⁄2A¿A!3⁄41⁄2IIU¿3⁄4KE71⁄4AII<AwEI<AoOIAXU)3⁄41⁄4-IECÆsAO-¿9O5A&3⁄41⁄41⁄2BO/AII<A\nEA1⁄2BI<A3E\"OzA5¿9E\"O1⁄2AbY1⁄2AIU)Y1⁄2AI_EAA7A7IO/»\n1⁄41⁄2I<A3E\"O{¿9E;¿9Oh3⁄41⁄2OA1⁄2A3⁄4AEA1⁄26EAOO1⁄2E3⁄41⁄2Aw3⁄4A{AO¿9OA5I53⁄4bEAOE7¿9E3⁄4¿9O5A\nAINAO1⁄2¿9A1⁄4h3⁄4ÞqE¿3⁄4;OQI5ÆEU1⁄2AmA!OAwA!Oßa1⁄2Oh3⁄41⁄2AßAO1⁄2TIOLaaEAÆE¿9OA3⁄4¿9AO$¿9E;1⁄4AA7A3ÞqEA3A1⁄2A¿<Oh3⁄4A&3⁄41⁄41⁄2E3⁄41⁄4¿<OAUEI33⁄4\nEAII9AsAEhY3¿<AIE7I<I&EA1⁄2mE\"1⁄4AO5A1⁄2A6a7I5E73⁄4LEA1⁄2ISAA1⁄2bEAÆA¿9I<1⁄2\n3⁄4¿9Æ1⁄2O»ABIOI<A3E\"O)UQAO1⁄2m1⁄2Oh3⁄41⁄2A7EU3⁄41⁄451⁄2KUA7E73⁄4LO-IÆEU1⁄2A\nAOAaßa1⁄2Oh3⁄41⁄2AßUU3⁄41⁄41⁄2×E71⁄2EAOAaO-IÆEA1⁄2AAO5Aæßa1⁄2Oh3⁄41⁄2AßUU3⁄41⁄451⁄2×3⁄41⁄4¿9A7AcO-IÆEU1⁄2AsA!OAæßa1⁄2Oh3⁄41⁄2AßxAO5Ae3⁄41⁄41⁄2×A1⁄2YQ¿9E1⁄2\nE1⁄45AII9AsIOI<A3E\"O)ONO¥3⁄4U1⁄4AE/ABAA7A YQ¿<E¿9AO3⁄41⁄4A!3⁄4/¿<I1AEO;AAO5AO-IÆEA1⁄2A/¿9Ex1⁄2Oh3⁄41⁄2A1⁄2A{¿<3⁄4/AA31⁄2Ex3⁄4AA!O$AIA!AÆeE3⁄4\"A!3⁄41⁄2\nAOA#EAIE1⁄2EA!OA!IAA7Æe3⁄4A_EA1⁄21⁄2AXO&aL3⁄43⁄41⁄4¿<EAUA¿9Oh3⁄4¿<3⁄4EÆIE73⁄4EEA1⁄2MA1⁄2|ÞqE1⁄2T3⁄46E-IU1⁄2Oh3⁄41⁄2A¿9O5AwAI<I4e1⁄2AAEOMO¥Ix3⁄41⁄4¿<E\n¿9E\nO5A3⁄4bAAO1⁄2!U3⁄41⁄41⁄2EO1⁄2|Ø33⁄4KE73⁄4A!3⁄41⁄2EEAIE1⁄2EmAMÆsAEE7¿<Y1⁄261⁄2|Ø3AI9AE7¿9AOE\\O;1⁄4¿9E\"1⁄4_¿9E;A&AAQA3A$A71⁄2GAE7AO_3⁄4AsEA1⁄2EGA!A1⁄2ISI5I\nO;¿<3⁄41⁄4$3⁄41⁄4¿<E\nI9AQE\"O5Ð|O\ni\nO\niJ1⁄4A3⁄4K¿<EL3⁄41⁄41⁄2EEAÆE¿<OA!3⁄4¿<AO)i\niðnhooXoooSoQ÷\\ø7u{uuQuyToTø6÷9þ6y{ø\"ouooTø|ø|÷\\uK÷\\ox÷9þEuoxu-þoou\n\nO;OqO&3⁄41⁄41⁄2b1⁄4AO5A5IhÞqAAO5A5I&ISAAÆeE71⁄4AoO;O{¿<O4¿<AIA71⁄2\n(c)\nU-AAAGO\n3⁄41⁄41⁄2;E73⁄4\"A3⁄41⁄2;3⁄4AA!OE¿3⁄4¿9AOA5¿AAAAÆ\nISAAN3⁄41⁄4¿<E\nÆsAE\"1⁄4¿<O1⁄2UE71⁄4AoO;¿9OAsAI<I¿9O5AI53⁄4EbAO5AAI33⁄4AI53⁄4EO\n\nO;aaO-IÆEA1⁄2AxAIX1⁄2OA¿9O51⁄21⁄2A7E/1⁄4AoY1⁄2KO/AAO!1⁄2AzO;¿3⁄41⁄4&3⁄41⁄4¿<EU-EI53⁄4/OAO1⁄2b1⁄4AGY1⁄2KEU1⁄21⁄2O{AEI91⁄2\n3⁄4AA¿Y1⁄2;IELAEA1⁄2|Þ\nE7EA¿<A53⁄4¿<AO&AIO;1⁄4A!3⁄4x1⁄4AAAA1⁄2OEOtamI<IOU1⁄2bO-OAoO\n¿9Et3⁄41⁄4A!3⁄4x1⁄2GAE\"1⁄4sAI3⁄41⁄41⁄2¿<At1⁄2TØ3AU1⁄2A¿<Æs1⁄2O-3⁄4E/1⁄4AoY1⁄2KA71⁄2E7II<3⁄41⁄2A\n¿<Oe1⁄2|Ø3AI9AE7¿9AO5EO\niu1⁄2×EI5EAA1⁄2E3⁄4{¿<3⁄4MÆsAGI\nEA1⁄2_A71⁄2I9A!3⁄41⁄2Ae3⁄4A>3⁄41⁄41⁄2×A1⁄2I9A!3⁄4¿Y1⁄2I<I\n1⁄45¿9A1⁄4\nEI<A3E\"OISA1⁄2\n-I1⁄2OEIU\nA71⁄2IA3⁄4¿<Y1⁄2C3⁄4AM3⁄41⁄451⁄2BA!E¿9I<¿<3⁄4qIAI43⁄41⁄41⁄2E1⁄2OA¿9O1⁄21⁄2AE\n3⁄4AA5IE1⁄4EI53⁄43⁄4AOEO+iJ1⁄4A!3⁄4;¿9E;1⁄4AA5AU1⁄2O¿9OAhi\noXooyoqo>oTu÷\\uo\"oTøþAøy\"yhyAuhþ\"oouuo\\oo#yuQovouø×þoooTø7y !\"9o\"þ #%$4oQ÷&\"oc÷9þwo\nuyu'y(|oqoTø)QoTovo÷\\u*uo÷\\uAuQo\nuu3uyToTøBø|÷+oQo,#LoSoo6þoo uAu×yuAu×o\\oQ÷\\ø7u$t÷--uo;yTo #yuhþT÷\\uo\\oo6uy\"oQ÷\\uoo.\"9ou÷\\øo To/soo\\oo6uyþ\"þT÷-oo(012oþT÷&uAo43{o5yo/÷9þuo\"ouQous÷9þ6o56Aøuu'\"oBy\nuo8 9o\nþT÷+uAy|øu\noy\"osyuQovou%Au-þ\"o5o:9muo<;uQ÷-y9oTuo=T÷\\øTuQ÷\\o>$?uuyTomyþ\nþ\"o'@$tu\n÷\\uAt÷+u3øoCB\n>\nQ\nQ\nD\n>\nQ\nQ\nD\n/rpb\nspb\npb\n/clk\nenter\n4¿<AIA1⁄26DFE=G=\n-I¿Y!AI91⁄2O-3⁄4IHU¿<AEI¿<3⁄4\nISAAKJ1AQE\"OLHUAQA1⁄2\nDONMxAI#EAOPU5ØU3⁄41⁄41⁄2MAA1⁄2Æ{A3⁄4IA71⁄2M1⁄2TØ3AI9AE¿9AOPAAAE5I91⁄2ÆeEhIPÆA3A¿I\\IQ¿9OA3⁄41⁄41⁄2MEA3A1⁄2!OiA¿<3⁄41⁄23⁄41⁄451⁄2MO1⁄2O\nEA3A1⁄2E1⁄41⁄2A1⁄26AOA_¿9O5A¿9EA!3⁄41⁄2mO;1⁄451⁄2A1⁄26¿<3⁄4;AA31⁄2E\n¿9O$3⁄41⁄41⁄26O8PQ6JA5AAAAAÆ_O\n\nRS+TUTUT\nV6WXY[Z\n\\^]_`Wba/X/]dc'e\nfhgIi8jbk1lmnbl6lpohqbrsUt(usUjut<t(vbl8uwtNt<lm<mrwlxzyhuwm?utNjbs{mlx4m<n'|{m}sj4shk1k|t(usUj4m<nblm<nbujb~vbjbrsk \"tNl1lj\n\nnbl1j|\nK\nsUjb~j\"vb%2l\n\nutKljml\n\nl1xzgK}nbutCutKxbvbl)ms|~Urwuwmk n'|\n\nuwt<uwjb~\n\nsUm<nblk\n\nvbxFl\n\n|\nuwj\n\nnFuk nLmnbuwtNmnbuwjb~\n\n|t\nK\nuwm<m<ljzgn'|@mKut\nK\nsjb~\"\nz' @h+4/?* +¡@[¢£F¤?¤C¥@- ¤¦*-'§=¤@£ ¤4-F¢6,'(c)\n£'a« ¬@(r)26 ¤\n¤ >'£°£\n¤[ ¤6¤^ ¤ ¤ ±?¢£22,F¢K @h+2F¢'£°\n¥%@£6 ¤[ -£*¤`¢3¢£2,'6¤ - ' ¤¢\n-£,'I2 ¤ ¤5¥ -£¡4¤ - '< z'2@,' ¤-F¢C¢/<¢£F¤ -/ &@£¥p@μ¶¤`¢333°3··\n\n¢+¢pμ14 @+/<¢£F¤ -/ &@£- @¡@3·3\n\n¤' ¤ ¤1±z2^ -£¡¢o(¢£F¤ &£'>¡ -5\neFgC»\n\nsq1⁄4sUt(l1⁄2|3⁄4Fo1⁄4z,s\n\nmnbuwt6q\n\nsUFrlg[¿jbkrwvbxbl2|j|xbxFuwmuwsUj'|rAksxbl%m<n'|{m)2u~Unm82l\n\nl1A\"vbu\n\nlx\n|jFx^A{s\n\nk1shxbl6m<n'|{mKt<nFsUvbrx2l\n\nl2sUlxg\n-'L¤@h/ &@£ ¤*A&¡ ¤5,'£'a¤ +¡£2¢C¢£2¤ -@£'A!@£A¢Æ aC<¡@> -\n¢/b¢-A2 -£-'8¤^ ¤ ¤6¤&¢\nstate0\nstate1\nsuccess\nalarm\nboom\n/enter\nenter* (innum=first)\n/enter\n/enter\nenter*(innum=second)/unlok\nenter\nenter*(innum = second)\nenter*\n(innum = first)\nenter*(innum = zeros)\nenter*(innum = zeros)\n/enter\nKaboom\n/beep\nE\nuw~Uv\n\nl[fE Em |{m<l)\n\n|jbt<u+muwsUjLE8uI|~\n\n|I,s\n\n»\n\nsUFrlII\n\nÐN+OUOUO\nO6OOO[×\nØ^UU`ObU/O/UdU^Y\nÞßAa/a4aoaa/a«adacæeeßAeie6i1iiiðbnwoIoKn+ið*ooUob÷8ø\"obnwu%uubu°i<ob÷<u*nwi8nwuzy}ibþwiuo(i%obo<inwiCio4nwububnyu{ii[oKðbi÷(i\nyoubi2ohubn'yu@inoubo%oFo(i1⁄4i)ibþuyi1u\n!\"# $%'&()*'\n+-,/.0-120435,7646698\n:<;\n6=,76466?>\n;A@BC\n+4D7EF,4G\nCFH4HAIKJ\n>L1-+4+M8\n:<;\n6OND704P>\n;A@BC\n120F,\n@4Q\n>L1-+4+M8\n67R\n@\n,\n@\nB\n,AE)+DGAPS,\n;UT\nD70\n@\nV\n,/R4R\n:4W\nX\n,YR\n;A@-B-C\n+4D7E<,KG\nC Z\n6)G\n@\nD70\nV[\nB\nD\\N4R\n@\nD^])_`8\nT\n.bacGK+\\P\nX\n,YR\n;A@-B-C\n+4D7E<,KGd8fe4eg67R\n@\n620gN<,K+4+U.6\n;\n3KR<G\nQ\nBhT\n.\n.)646\nT\na\n:\nRF+4D\\P\nX\nD\n:@i;\\@B-C\n+4D EF,KGd8\nj17.FDD\nW\nX\nD\n:@i;\\@B-C\n+4D EF,KG\nXlknm\n]\nm\n_`8\n67R\nBgB\n,AE+4DGAPo8\n120G\nQ\n,\n@\n6G\n@K:\n0-6\n;A@\n@\nC\\W\n1G\nQ\n,/R6iD7p\nB\n,AE)+4D-GAPS,\n;\n@\nT\n6hq\n@\n@\n6 r3\nT\n6s,\n;\nV\n;A@\n@\n64]9a\n;A@\n@\nH\na\n;Y:\nG4G26\n;4;\nat1-+K120\nW\nau.FD4D\nW\n_`8\n;\n,AEKR)1-+\nT)C;\naR\nC;\nX\nq\n@\n@\n6 r3\nT\n;\n,AEKR)1-+\n;YT\n.bav0\nT\n.\nXw;A@BC\n+4D7EF,4Gd8\n;\n,AEKR)1-+h67R\n@\n6K0\nXw;A@BC\n+4D7EF,4Gd8\nGKDAR\n;A@\n17R\n@\np<,A0\n;A@\nXw;A@BC\n+4D7EF,4G\nC Z\n6G\n@\nD70\nVx[\nB\nD\\N4R\n@\nD^])_\nXLk%y\n]4]4]]4]4]4]\nHy\nGKDAR\n;A@\n17R\n@S;\n6GKDAR\nB\nXw;A@BC\n+4D7EF,4G\nC Z\n6G\n@\nD70\nVx[\nB\nD\\N4R\n@\nD^])_\nXLk%y\n]4]4]]4]\nH\n]\nHy\nGKDAR\n;A@\n17R\n@z@4Q\n,A0\nB\nXw;A@BC\n+4D7EF,4G\nC Z\n6G\n@\nD70\nVx[\nB\nD\\N4R\n@\nD^])_\nXLk%y\n]4]4]]\nH\n]\nH\n]\ny\nGKDAR\n;A@\n17R\n@|{\n620)D\n;\nXw;A@BC\n+4D7EF,4G\nC Z\n6G\n@\nD70\nVx[\nB\nD\\N4R\n@\nD^])_\nXLk\nV\nD\n@KQ\n;Ok}~m\n]\nm\n_`8\n.)62E<,/R\ne4e|GKD\nW4W\n6 R\n@\nB\nD\n:@\nGKD\nB\nQ\n620-6=,\n;U@\nDU.)6\nB\nDAR)6O.)6\n@4@\n620h.)6-+D\\N\ne4e\n:\nRF+4D\\P|\nknmHm\nN\nQ\n67RgR\nC;Ok|;Y:\nG4G 6\n;4;\n6-+\n;\nm\n]\nm\ne4e.)646\nT\n\nknmHm\nN\nQ\n67RgR\nC;k\n1+2120\nW\n6-+\n;\nm\n]\nm\n67R\n@\nkz;YT\n.=17R\nB\nV\nRFD\n@\nT\n._`8e4ezDAR)6|GK+4DGAP\nT4:\n+\n;\n6ON<,\nB\np\n;/WXT\n0DG 6\n;4;\nV\nT)C;\na,/R4R\n:4W\n_\n.)62E<,/R\nG 1\n;\nT)C;\n,\n;\nN\nQ\n67R\n;A@\n@\n64]\nk}\n:\nRF+4D7P|\nk~m\n]\nm\n.)646\nT\n\nknm\n]\nm\n,Aps,/R4R\n:KWik\npF,A0\n;A@@KQ\n67R\nR\nC;\n\nk|;A@\n@\nH\n6-+\n;\nR\nC;\n\nk\n1-+2120\nW\n67R\nB\n,Ap?8\nN\nQ\n67R\n;A@\n@\nHk}\n:\nRF+4D7P|\nk~m\n]\nm\n.)646\nT\n\nknm\n]\nm\n,Aps,/R4R\n:KWik|;\n6GKDAR\nBh@4Q\n67R\nR\nC;\n\nk|;Y:\nG4G26\n;4;\n6-+\n;\n\nK22\n$\nFY)A\n)^Kg -¡2 2¢2£¤\n¥\n-¦s§A ?¤\n(c)Ka\n¥\n5Y«<¬4¬\n¥\n4O\n«4F¡4(r)7 |4~°±2°4¤\n¥4¥7\nKn°xμ9°4¤\n)^K|A¶ ¶\n¥\nμ9¤\n(c)Ka\n¥\n= -¡2 2¢2£=-\n«4F¡4(r)7 |4~°xμ·°4¤\n¥4¥7\nKn°±°4¤\n§A s§/44«K£i^\n¥\n¢)(r)1¶\na\n¥\n\n)^K|A¶ ¶\n¥\nμ9¤\n¥\n¡\n¥\n)^K\n(r)4(r)Y£o¤\n¥\n-¦s§A ?¤\n(c)Ka\n¥\n\n(r)4(r)Y£=\n»\n\n(r)4(r)Y£sKn°±°4¤\n1⁄41⁄4O¦)(r)\\b°l¶s¬ 2¢\n¥\n\n(r)\\«¶^\n¥21⁄2\n¶5A¶ ¶\n¥b3⁄4\n(c)Ka\n¥\ns(r)\\¶\na\n¥\n¢O14|A¶) ¶\n¥\nμ9¤f1⁄441⁄4g ¿(r)§A¦^¶-¢-\n\nA¶ ¶\n¥\n\n¥\n¦i¬2\n¥\n¤\n¥\n-¦\n\n¢)(r)-¬\n¥\n4 /£o¤\n\\A2¬\n\n3oA\n\n¢)(r)-¬\n¥\n4`A'¬K¡\\ oA\n\n3A\n§A h¢<§K§/-A\n¥\n¦4A\n¥\nAÆ¬K¡\\\nA\n\nK\n\n¤\n¢\n\nK=\n\n¤\n¥\n-¦s§A ?¤\n¥\n-¦\n\n¢)(r)-¬\n¥\n4\\A2¬\n\n¤\nA¶ 2¶\n¥\n¬K¡(r)¬A\n¥\n¦\nA\n\n¢)(r)-¬\n¥\n4CAÆ¬4¡\\\nA\n¥\nAF§/\n§A h¢<§K§/-A\n¥\n¦4A\n¥\nAÆ¬K¡\\\nA\n¶\na\n¥\n\n§A\n¥\n¶\n¥\n¢z~°±°u¶\na\n¥\n\n^K)d¤\n¥\n-¦s§A ?¤\n¥\n-¦s§A ?¤\n¥\n-¦\n\n¢)(r)-¬\n¥\n4A¶ 2¶\n¥\n¬K¡(r)¬A\n¥\n¦o¤\n¥\n-¦z 2¢¬\na\n§Y¶\n¥\n¬\\¶K«-¢\n¥\n\\¶ ¶\n¥\n7£ ¬\na\n§Y\n¥\n¤\n\nEKEE2E2E\nEI II$I\nÐFNYOI)OINAOO\nO×dØUUØUUU4YUÞFß(a`×da\na-a/aa-æ2a4c5a7e4ee9e\ne<e\ne=a7e4ee?i\neAiii\na4ð7nFa4o\niFo4oAoKo\niLæ-a4aMe\ne7o\ni\na\ni\nca-e2nsa\ne\n÷\nð7a\niuø\næ9uabucoKa\\uyua/o\neAii-i\na4ð7nFaKoþe\nc?uvy\nuvð\neiseAiii\na4ð7nFa4ode\nu\na\ne\ne2a\neAii-i\na4ð7nFaKo`e\ne7o\ni\na-e2noe\næ2aoa\ni\neo\niKe\na-e\ni\nð\n÷\nð\n\na-e2nsa\ne\ne\naAnKo)æ-azo\nu\neAii-i\na4ð7nFaKoþe\na)e2n<a/o\n\ni\nð\n÷\nc\n\næ7o\ni\nabe\ny\nzoOæ7o\ni\nabe\na-e2n?u\n÷\na)ðo2e\ne4e\nø\noKa\\u\na)e2n<a/o\n\n÷\na)ðo e\ne4e\na\n\naFa\ne\na/o-n\ni\ne\ni\nn-e\nø\noKa\\u\ni\n)e7o\no hæ9e\na\n\na\no\n\ni\ne7o\næ9e\ne7o\ni\na\n\ne\ne7o\ni\na\n\ne\ne7o\ni\n÷\na)ð-o e\ne4e\ne\ne7o\nihi\nð\n÷\ne\n\n!\n\"$#%&(')*#+-,/.\n0214365736598;:4:=<?>@14:\nABDCEFEGHBJIIILK\nMN\nIOBJIIIQP\nNRST\nAUJV$BW\nT$XXYZ\nP[FAA\\K\nMN\nI]^UJE_`P\nNRST\nFE$B\nRa\nP[FAA\\K\nIJb\nR\nB\nR\nG\nM\nb_bUc]bdB\nN\ne\nUJE\nRgf\nWAc_ihj]I\nklB/b\nNcRST\nAUV$BW4K\nE\nS\nA\nN\nIAmhn]\nS\nA\nN\nIAoklB/b\nNcRST\nAUV$BW\nTp\nIW\nR\nUJE\nfqXrS\nUJ]b\nR\nUts(u@K\n]\nS\nF\nR\nF\nklB/b\nNcRST\nAUV$BW\nTp\nIW\nR\nUJE\nfwvxS\nUJ]b\nR\nUts(u@K\nE\nS\nAU\nMR\nkyU\nMRzNcRST\nAUV$BW\nTp\nIW\nR\nUJE\nfwvxS\nUJ]b\nR\nUts(uu4K\nIJb\nS{M\nb_b$Uc]biK\nFE^W\na\nB\nR\nIW\nRM\nEIt]\na\nF\nR\nB\nNRa\nB\nN\nUJ|\nM\nb_bUc]bdB\nN\nN\nBVb(FA~}IE(UmhUb(ILh\nR\n]^U\\h\nRa\nEIIgk\nNcRST\nAUV$BW\nTp\nIW\nR\nUJE\nfwvxS\nUJ]b\nR\nUts(u@K\nC(IVBDb\n]\na\nF\nR\nB\nNRa\nB\nN\nWAc_\nT\ne\nE(UWI\nNN\nk\ne\nE(UWI\nNNf\nWAc_ihUcb(ILh\nR\n]^Umhn}IE(U\\h\nRa\nEIILhn]IhE\nS\nA\nN\nIAmhn]\nS\nA\nN\nIAmhn]\nS\nF\nR\nF(u\nC(IV$BDb\n\ne\nE(UWI\nNN\nB|E$B\nN\nB/bV\nT\nI\nS\nVI\nf\nWAJ_u\nRa\nIb\nB|]Ito\nX\n\nRa\nIJb\nB|t]\nS\nA\nN\nIA{HDss\nRa\nIJb\n}IE(U{{]\nS\nF\nR\nFK\nIA\nN\nB|]\nS\nA\nN\nIADs\nX\n\nRa\nIb\nUb(I]\nS\nF\nR\nFLK\nIA\nN\nB|]\nS\nA\nN\nIA\nX\ns\nRa\nIb\nR\n]^U{]\nS\nF\nR\nFLK\nIA\nN\nI\nRa\nEII{]\nS\nF\nR\nFLK\nIJb\nS\nB|QK\nIJb\nS\nB|QK\nIJb\nS\nB|QK\nWF\nN\nIE\nS\nA\nN\nIAxB\nN\n]\na\nIJbDssDtE\nS\nAU\nMR\n}IE^UmK\n]\na\nIJbDs\nX\n{E\nS\nAU\nMR\n\nUcb(ILK\n]\na\nIJb\nX\ns{E\nS\nAU\nMR\n\nR\n]^UmK\n]\na\nIJb\nXX\n{E\nS\nAU\nMR\n\nRa\nEIILK\n]\na\nIJbU\nRa\nIE\nN\nE\nS\nAU\nMR\ndDssssssssK\nIJb\nS\nWF\nN\nILK\nIJb\nS\ne\nE(UWI\nNN\nWAc_\nT\ne\nE(UWI\nNN\nK\nIJb\nS\n]\na\nF\nR\nB\nNRa\nB\nN\nK\n\n!\n$&()*-\n246 76 ¢¡6£-¤c¥L¦?§@4 a(c)¬«( (r)°(r)2±3« !μ¶· 1^o»)1⁄41⁄2(¶·μ3⁄4» q¿AoJ±·AAA q¶·(r)wμ1A\nAÆDCEEEEHÆJEEELI\nII\nEOÆJEEEQI\nIÐNO\nAOJO$ÆO\nO$OO×Ø\nI[EAA\\I\nII\nEU^OJEU`I\nIÐNO\nEE$Æ\nÐU\nI[EAA\\I\nEJU\nÐ\nÆ\nÐ\nE\nN\nÆO(AOOUÆ\nIÞY\nOJE\nÐ\nß\nÆDUU\nIa\na\nÆ/U\nIÐNO\nAOJOÆO\nOa\nE(O\nÐ\nOJE\nß·a\nN\nOcUU\nÐ\nO{a(a@I\nEJU\nÐ\nEEQæaOAcU\na\nÆ/U\nIÐNO\nAOJOÆO4I\nC(EE\nY\næ\nI\nU$AOcU\na\nO\nIÐzIcÐNO\nAOO$ÆO4I\ncEJC$OO\na\na\nO\nIÐzIcÐNO\nAOO$ÆO\naeeoe\na\ne\na@I\nEJU\nNN\nÆO^AOOU=I\nEE^O\nU\nÆ\nÐ\nEO\nÐI\nEE\nIÐ\nE\nÐ\nE\nOca\nEO\nU\nÆDU^EzOJe\nN\nÆO(AOOUÆ\nI\nÐ\nE\nY\nEti\nÐ\nE\nÐ\nEiE\nY\nEÆ\nI\nß\nIÐ\nE\nÐ\nEaLæ\nIÐ\nE\nÐ\nE\nO\næ\nI/I\nOOE\nII\næEAEE\na\næC$OO\na\na@I\nI\nÆOU(EA\nY(OI\næjU\nOI\na\ni\nÐ\nE\nÐ\nEiE\nY\nELI\nOOU\nIÐ\nEJU\nÐ\neÆE\nIÐ\nayIÐNO\nAOJO$ÆO\nOa\nEO\nÐ\nOJE\nßwa\nN\nOcUU\nÐ\nO{a(a\na[ei\naaaaaaa\nOi\nI\nOOU\nIÐ\nEJU\nÐI\nEOOU\nN\nayIÐNO\nAOJO$ÆO\nOa\nEO\nÐ\nOJE\nßwa\nN\nOcUU\nÐ\nO{a(a\na[ei\naaaaa\nO\na\nOi\nI\nOOU\nIÐ\nEJU\nÐ\nÐU\nÆE\nN\nayIÐNO\nAOJO$ÆO\nOa\nEO\nÐ\nOJE\nßwa\nN\nOcUU\nÐ\nO{a(a\na[ei\naaaa\nO\na\nO\na\ni\nI\nOOU\nIÐ\nEJU\nÐxi\nEE(O\nI\nayIÐNO\nAOJO$ÆO\nOa\nEO\nÐ\nOJE\nßwa\nN\nOcUU\nÐ\nO{a(a\na[e\nß\nO\nÐU\nEE\nIeðne\na\ne\na@I\nC(EOÆDU\nI\nU$AOcUOo\neneqO-e\nU\nU\nEJUU\nOIrexI/I\nOOE\nII\nEA\nI\nE\ne\na\ne\nI\nC(EE\nY\no\neoeoO-e\nU\nU\nEUU\nOI~e\nEAEE\na\nEA\nI\nE\ne\na\ne\nI\ne\nIDa°aoY\nE^OOE\nII\nß\nY(OI\næaÆDUU\nIa\na\nC(EOÆDU\nOE\nI\nE\nY(OI\nÆ\nI\nU\nU\nEJU\nIÐ\nE\nÐ\nEa\neð\nÆeÆDUU\nIaze\ne$ÆE\nIÐoÐU\nEJU\nU\nOI\no\nexIÐ\nE\nÐ\nE\nO\nI\nEA\nI\nE\nU\nOI\no\ne\nEAEE\na\nI\nEJU\nN\nÆeQI\nU\nU\nEJU\nIÐ\nE\nÐ\nE\nOoeð\nÆeÆDUU\nIazexI\nEOOU\nNtÐU\nEJU\nU\nOI\no\nexI/I\nOOE\nII\nI\nEA\nI\nE\nU\nOI\no\ne\nEAEE\na\nI\nEJU\nN\nÆeQI\nU\nU\nEJU\nI/I\nOOE\nIIeð\nU\nOI\no\nexIÐ\nE\nÐ\nEaLI\nU\nU\nEJUOEAEE\naOeð\nÆeÆDUU\nIaze{i\nEE(O\nI~ÐU\nEJU\nU\nOI\no\nexIÐ\nE\nÐ\nEaLI\nEA\nI\nE\n\n÷øuuu\nuuuy!þ\ny&u)u\n\n!\n\"#\n\n$%'&\n()\n*,+.- +\n/'/012+435\n)76\n\n)\n18'3\n3:3\n)\n2;\n\"#\n\n#\n\n0'&<=>3\n)\n?\n@//\n)BA\n6)DC\n)\n\nE5\n)\n\nC6\n\n=F\n)\n\n5G''5H\n\nJI\nC6\n\nLKM5G1H*N\n\nO\nF\n\n'F\nO\n\nO\nKM5G1H*N03\n#\n\n'3\n\nP+.- +Q3\n#\n\nC\nR\n\n!\n\n!\n\nC6\n\nS3\n)\n\n5G''5H\n\nT\n\n)76\n#\n\n)\n\nD\n)\n#"
    },
    {
      "category": "Resource",
      "title": "genlabinfo.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/fee0bae5f6eae21ea8ba06b8b717d98d_genlabinfo.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 -- Introductory Digital Systems Laboratory\nGeneral Laboratory Information\nEach student will be issued his/her own Nubus Laboratory Kit, logic probe and\noscilloscope probes. This kit contains most of the components for the assigned laboratory\nexercises. While wiring and some debugging can be done at home, most exercises require\nthe use of an oscilloscope, logic analyzer, and other special equipment not included in the\nkit. In the Digital Systems Laboratory you will find logic analyzers with dual trace\nsampling oscilloscopes and the special equipment needed for the lab exercises. The lab\nwill be open for 2 hour 45 minute through week days, 5 hour 45 minute on Saturday, and\n11 hour 45 minute on Sunday. These times are subject to change and the lab will be\nclosed on some holidays. Actual opening times will be posted in the lab far enough ahead\nso that you can make plans. The lab will not be staffed by Teaching Assistants (TAs) or\nLab Aides (LAs) all of the open hours. The schedule of TAs and LAs will be available on\nthe course web pages.\nPUT YOUR NAME ON ANYTHING THAT YOU BUILD IN THE\nLABORATORY AND LEAVE UNATTENDED. OTHERWISE, IT\nMAY BE GONE WHEN YOU RETURN.\nIt is important to remember that you will be working with a variety of sophisticated\nequipment, including computers. Sometimes this equipment doesn't work. You should\nanticipate the possibility that the computer systems will be ``down'' at precisely the\nwrong moment, and should give yourself enough extra time to accommodate equipment\noutages.\nYou should also remember to back up all of your important files. In 6.111 you will have\nthe opportunity of keeping critical files both on sunpals and in your ATHENA locker. Do\nso. We will be generally unsympathetic to an excuse (for a late assignment) that involves\na file being lost or erased.\nAdditional equipment may be obtained from the Digital Instrument Room for 12 hour\nthroughout weekdays. During other hours some, but not all, of this equipment is available\nfrom the fifth floor instrument room.\nNOTE: You must read the EECS safety policy and sign the acknowledgment form before\nsigning out your lab kit or doing any work in the lab.\nMEASURING INSTRUMENTS\nIn this subject, you will design, build, and test a variety of digital systems. Virtually ALL\nnewly built digital systems of even moderate complexity do NOT work the very first\n\ntime. Even if you were to be that lucky or careful, you would still find it necessary to use\nsome measuring instrument in order to verify the functionality of your digital system.\nMany digital systems will have sound or video (TV displays) output. Even if these appear\nto be correct, it is still necessary to perform a careful check of subsystems. Few of us\nwould accept an airplane simply because it flew! At the very least, we would want\nsomeone to verify that the engines are bolted on securely. Likely we would want several\nother checks to be made before we flew in it.\nWe have provided a variety of measuring instruments. In your lab kit there are LEDs\nwhich can be used to observe the state of slowly varying signals. There is also a logic\nprobe which is convenient to carry and with which you can determine the state of slowly\nvarying signals and even detect whether signals are pulsing or not. There has been\nconsiderable debate as to the wisdom of providing you with a logic probe. They are\nhandy and useful in some circumstances, e.g., in your room. However, the logic probe is\nrarely the instrument of choice in the laboratory.\nIn the laboratory, we have multi-channel logic analyzers available which also include a\ntwo-channel high-speed digital oscilloscope. These measuring instruments can provide\nyou with a substantial amount of information, which is useful for the debugging, and\ntesting of your digital systems.\nThe oscilloscope displays an analog waveform and is useful for verifying that your digital\nsignal is indeed a binary signal. If you miswire your circuit and happen to connect two\noutputs together, you will easily see that the resulting signal is not a logic one or zero but\nsomewhere in between. An oscilloscope is also quite useful for measuring short time\nintervals.\nOne of the chief benefits of logic analyzers is that you have many channels available and\nthus you can see many signals at the same time. Logic analyzers can be used in two\nmodes. As a timing analyzer, they are similar to an oscilloscope. However their display is\nquantized in both voltage level (one or zero) and in timing resolution (ten or twenty\nnanoseconds). When used as a state analyzer, the signals are sampled with your system\nclock and provide you with a compact display of many signals at the times when they\nreally matter. This is very desirable IF your signals are indeed well behaved digital\nsignals.\nThe primary purpose of the first laboratory exercise is to provide you an opportunity to\nlearn how to use these measuring instruments and also how to program a PAL. You will\nthen put these skills to the test in labs two and three and your final project."
    },
    {
      "category": "Resource",
      "title": "nulabkit.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/fffcf1030312b970d8b66d801430523e_nulabkit.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 -- Introductory Digital Systems Laboratory\nNUBUS LABORATORY KIT\nFor your pleasure and convenience, we have provided a portable, self-contained\nlaboratory kit for each and every 6.111 student. This kit contains everything you will\nneed to build that digital circuit you've always dreamed of.\nBreadboarding Modules:\nThere are six proto strip modules for mounting integrated circuits and other components.\nEach group of five (or four) contacts (running left to right) is internally bussed together,\nand every group is independent from every other.\nThe contacts on all proto strips accept leads from 0.015'' (AWG 26) to 0.032'' (AWG 20).\nHowever, they work best with AWG 22 wire; smaller diameter wires have a tendency to\nfall out. The spring loaded contacts may be damaged if you attempt to insert wire of\nlarger diameter, so don't do it. Do NOT attempt to use wire larger than AWG 20. If you\nneed to use a component with a larger wire, then solder a short piece of AWG 22 wire to\nit. Help is available at the Instrument Room desk.\nThe left hand proto strip is specifically designed for analog circuits. Immediately to its\nleft is a distribution strip for +12 volts and -12 volts. Immediately to its right is a\ndistribution strip for GND and +5 volts ANALOG. There is a separate AC power switch\nfor these analog power supplies. Normally, when not using this proto strip, you should\nleave this AC power switch OFF.\nImmediately to the right of the right hand five proto strips is a distribution strip for GND\nand +5 volts (DIGITAL). Note that the +5 volts (DIGITAL) and the +5 volts (ANALOG)\nare NOT connected. Do NOT connect these two +5 volt power supplies together. All\npower supply busses run vertically down the side of each strip.\nIntegrated circuits are installed on the center of a strip, leaving three or four contacts for\neach IC pin. Note that two of the five proto strips are narrower than the other three.\nPlease keep this in mind when planning the location of ICs. Jumper wires, cut to the\ndesired length from # 22 wire, are installed whenever needed. 3/8\" of insulation should\nbe stripped away from the wire for insertion into a contact.\nResistors, capacitors, and diodes may be placed where needed. When inserting\ncomponents, especially integrated circuits, be careful not to break the pins. The pins of\nnew integrated circuits will usually be fanned out slightly, making insertion difficult.\n\nBend the pins carefully to make them perpendicular to the body of the IC by pressing the\nIC against a table top so that the IC fits easily in place.\nThere are three proto strips labeled with the ``3M'' logo. The two vertical ones are bussed\ntogether on the printed circuit board and also connected to three connectors at the lower\nright and to two larger connectors at the right hand side of the kit. The signals on these\ntwo ``3M'' strips are identical EXCEPT for the top three connections. Labels on the pc\nboard are supplied which correspond to signals required for the HP logic analyzer\ntermination adapters. Note that these do NOT correspond to actual pin numbers on\nconnectors L1, L2, and L3.\nRibbon cables are available for interconnecting kits via the two 50 pin connectors K1 and\nK2 on the right hand side of the kit. All of the even numbered pins on K1 and K2 are\ngrounded. The wiring for connectors K1 and K2 is given in the following table.\nPROTO BOARD - KIT CONNECTORS\nPIN ASSIGNMENTS FOR K1 and K2\nALL EVEN PINS (2, 4, ... , 50) ARE GND\nPin\nK1\nK2\nL1-0\nL2-8\nL1-1\nL2-9\nL1-2 L2-10\nL1-3 L2-11\nL1-4 L2-12\nL1-5 L2-13\nL1-6 L2-14\nL1-7 L2-15\nL1-8 GND\nL1-9\nL3-0\n29 L1-10\nL3-1\n27 L1-11\nL3-2\n25 L1-12\nL3-3\n23 L1-13\nL3-4\n21 L1-14\nL3-5\n\n19 L1-15\nL3-6\n17 GND\nL3-7\nL2-0\nL3-8\nL2-1\nL3-9\nL2-2 L3-10\nL2-3 L3-11\nL2-4 L3-12\nL2-5 L3-13\nL2-6 L3-14\nL2-7 L3-15\n\nPower supplies:\nThe kit contains internal regulated power supplies for three voltages bussed to the power\ndistribution proto strips. The +5 volt DIGITAL supply is a switcher rated at 8 amperes,\nand is used for powering digital IC's and the indicator lights. A linear power supply is\nused to provide the +12 volts and -12 volts for ANALOG circuits and the +5A ANALOG\nsupply is provided by a separate voltage regulator powered by the +12 volt supply. The\n+12 and -12 volt supply is rated at 1.5 amperes. The +5A supply can supply about 1\nampere, but bear in mind that any current supplied by the +5A supply comes from the\n+12 volt supply. A separate (soldered) fuse2 is provided for the +5A supply on the upper\nleft corner of the pc board. It is best to reserve the +5A supply for analog parts even if\nyou use the left hand proto strip for digital parts.\nSwitching power supplies generate RF noise. Low level analog circuits can be tested with\nthe digital power supply turned off.\nThese internal power supplies can be damaged by wiring errors. Before turning on power,\ndouble check your wiring to make sure that no short circuits exist between any of the\npower busses. Unless you are using special components that require +/-12 volts, there\nshould be no connection at all to these busses. These voltages will DESTROY 5 volt\ndigital IC's such as the 74LSXX series in your kit. Double check the power supply\nconnections to each chip before turning on the power. Reversed +5 and ground\nconnections will most likely destroy the IC's. You should turn off the +/- 12 volt supplies\n(using the separate AC switch on the lower left) when they are not being used.\n\nNubus:\nThe upper ``3M'' proto strip provides access to a Nubus. The Nubus was originally\nprovided as a possible way to add new capabilities. It has never been used as such. When\nnot using the Nubus protocol, the following pins on the upper 3M proto strip should be\nleft open:\n/RESET\n/1D0\n/1D1\n/1D2\n/1D3\n/TM0\n/TM1\n/PFW\n/ACK\n/START\n/RQST\n/NMRQ\n/ARB0\n/ARB1\n/ARB2\n/ARB3\nWithout a terminator card installed underneath the proto strip PC board (the normal\nconfiguration for 6.111) the ``Nubus'' can be used for other purposes. Instead the CPLD\nand FPGA boards can drive AD0-31. See their separate write-ups. The switches and HEX\nLED display can be accessed by reading or writing to location 0xF3000000 when the\nswitches and lights board is installed in slot 3 which is the normal position. When not\nusing the Nubus protocol (the normal situation for 6.111) the signal ``NUHEX'' should be\ngrounded. When using another board via the NUBUS (ADxx), NUSW should be left\n\nopen. Beware of grounding NUSW if CPLD or FPGA boards drive any of the pins\nAD16-31. Avoid contention. Leave NUSW open. NUSW could be grounded to enable\nthe switches to drive the right 16 NUBUS pins (AD 16-31). These signals are located at\npins 1 and 3 (pin 2 is conveniently GND) of the left hand ``3M'' vertical proto strip.\nA standard Nubus clock which has a 25% duty cycle and a frequency of 10 MHz is\nprovided. It is labeled /CLK and is located at the right hand end of the horizontal ``3M''\nproto strip.\nHEX LED Display:\nAn eight digit HEX LED display is provided. This can be accessed by a Nubus write\ntransaction as mentioned above. Alternately, when the signal NUHEX is grounded, the\n32 bit register that drives this display can be loaded via the 32 lines /AD31 through /AD0\n(The LSB, /AD0 is the right hand bit). The high and low half-words (16 bits each) are\nclocked respectively by the signals /HHEX and /LHEX which are located at the left hand\nside of the horizontal ``3M'' proto strip. When not using the Nubus, it is convenient to\nwire /CLK to both the /HHEX and /LHEX so that signals wired to the /AD0-31 lines are\nimmediately displayed by the HEX LEDs. Remember that the signal NUHEX must be\ngrounded for the HEX LEDs to be used in this way.\nIndicator Lamps:\nThere are eight LED lamps (L7-L0) which are internally wired as shown in Figure 1. See\nthe labels at the upper left of the kit. When the lamp contact point is open circuited or at\nground potential, or logic 0, the lamp is dark. When the lamp contact is at or above\napproximately 3.3 volts, current flows through the LED (with a built in resistor) and the\nlamp is lit.\nSwitches:\nThere are 16 SPDT (Single Pole, Double Throw) switches. Switches S31-S28 (the left\nhand four) are momentary contact push button switches. Switches S27-S16 (the right\nhand twelve) are toggle switches. All switches are debounced with latches. so that\nmultiple transitions are not generated when the switch position is changed. The\npushbutton switches are wired as shown in Figure 2. The toggle switches are wired as\nshown in Figure 3. The switches can be accessed by a Nubus read transaction as\nmentioned above. The TTL outputs of the switches are always available at the upper left\nof the kit as labeled on the PC board. Note that the push button switches have both TRUE\nand COMPLEMENT outputs available.\nTools:\nWire cutters, wire strippers, needle-nose pliers, IC extractor, and a logic probe are\nincluded.\n\nComponents:\nA variety of discrete components are available in the lab. Integrated circuits are supplied\non a conducting foam carrier with an associated map of their locations. Please replace ICs\naccording to the map to make it easy to find ICs and to facilitate re-stocking. These\ncomponents will satisfy nearly all of your circuit requirements for the assigned labs in\n6.111.\nBypass Capacitors:\nLarge current spikes result when the outputs of digital IC's change state. The effect of\nthese spikes can be ameliorated by placing a medium-value capacitor between +5 and\nground in close physical proximity to the IC's. This bypass capacitor acts like a local\nreservoir for the transient current. The bypass capacitor needs to be physically close to\nthe chip because of the inductance associated with the breadboard strip busses. Each\npower supply distribution strip is bypassed with a .1 micro-farad capacitor at the top and\nbottom. This should provide sufficient bypassing, but in case of suspected problems, you\nmay want to add another 0.1 micro-farad bypass capacitor in the middle of each power\nstrip.\nWire:\nNumber 22 solid conductor wire is available in the lab.\nWe recommend using RED wire for +5 volts, BLACK wire for GROUND, and other\ncolors for signals.\nWiring Circuits:\nNeatness and orderliness in wiring circuits are extremely important. We really don't\nexpect you to believe this at first. Many students before you have learned this lesson the\nhard way. They have wired in a sloppy manner and have not been able to get their circuit\nto work until they ripped out the original wiring and re-did it neatly. A photo of a second\nwiring of part of a project is shown on page A-1. You should follow its style in wiring\nyour circuits.\nStatic:\nMOS IC's are particularly susceptible to damage by static discharges. Please be careful to\nground yourself before touching the IC. Keep the IC's in conductive (black) foam.\nIntegrated Circuit Pin Assignments:\nPin connection data for most IC's supplied in the 6.111 kit follows. For electrical and\nother information, refer to the TTL Data Book by Texas Instruments, Inc. It is your\nprimary source of information for understanding the electrical and logical characteristics\n\nof the ICs. You should read the data sheet carefully before using a given IC for the first\ntime. Data is not included for:\n-\nAD558 D to A converter\n-\nAD670 A to D converter\n-\n28F256A 32K x 8 Flash PROM\n-\n6264 8K x 8 SRAM\n-\n20V8 PAL\n-\n22V10 PAL\n\nSupplements will be issued on these integrated circuits just before you need to use them.\nPLEASE DO NOT USE THEM UNTIL YOU RECEIVE THE SUPPLEMENT. They are\nexpensive components, which can be easily damaged if not used properly.\nCrystal Oscillators:\nThe crystal oscillators supplied can be easily DESTROYED if the power wiring is\nreversed by plugging it in UPSIDE DOWN. Please be careful as we lose a number of\nthese every term! Also note that the output is rated for only 1 TTL load.\nCPLD and FPGA Boards:\nCPLD and FPGA boards can drive AD0-31. Avoid contention. Read their separate write-\nups before using them."
    },
    {
      "category": "Resource",
      "title": "reportgd.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/01a23b5168461cf10097bb1b63916900_reportgd.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n\n6.111 - Introductory Digital Systems Laboratory\nReport Guide\nIntroduction\nThe purpose of this memorandum is to describe general requirements for the reports you\nmust write for laboratory exercises and for the final project.\nGood writing is more important than you think. The documents you produce are the\nprincipal way of communicating your work. Well written reports reflect well on your\nwork and on you. Badly written documents, on the other hand, will produce negative\nimpressions, even if those documents represent very good technical work. It is worth the\neffort to pay careful attention to your writing.\nA well-written document contains more than clear language, correct syntax, grammar and\nspelling. It must also reflect clear thinking. Particularly with documents such as those you\nwill produce in 6.111 (dealing with complex technical issues), it is important that care be\ntaken to ensure that the writing clearly and accurately describe the topic. Pictures such as\nwiring and timing diagrams should be incorporated into the text and be clearly described.\n\nReport Style and Audience\nWrite for your colleagues. You should assume an audience with technical capabilities\nsimilar to your own. It should be possible for other students and for faculty to understand\nyour report. Thus you can assume general technical knowledge on the part of your reader.\nYou should not assume that your reader has a lot of specific knowledge about your\nsubject area.\nWrite for yourself. A careful job of documenting your work can help you to organize your\nproject. This can be particularly helpful if done early in the project. Your own carefully\nthought out explanation of how each element of your circuitry works can help in the\nprocess of design. Describe the function of each element and how the elements work\ntogether. Then think about what you have written. A surprising number of design errors\ncan be discovered by this process, even before you start wiring.\nOrganize your work carefully and do a neat job. Each of the reports should be typed.\nPowerful word processing tools are readily available to students in 6.111. Use them.\nFigures should be drawn with drafting aids (template and straight-edge) or a computer\ngraphics system (Xfig, ...). Lettering on figures can be done by hand, but must be neat\nand legible.\n\nRemember to leave yourself enough time to do the report properly. Proofread your\nreport! Eliminate typographical and spelling errors. Remember, your report is\nrepresenting you to the world (and to the good folks who determine your grade!).\n\nOrganization\nYour reports should be long enough to fully describe your work, but no longer. We\nexpect that your reports for Labs 2 and 3 will be perhaps ten or twelve pages long. Phase\nII papers must be at least ten pages of text, not counting front matter, back matter, or\ngraphics. The project proposal document should be only a few pages, but the project\nreport will probably exceed twenty pages (in some cases by a substantial amount). Your\nreport should include schematic, timing, and state diagrams and other figures, where\nappropriate. These pictures, with appropriate descriptions, will help to make your report\nclearer.\nTerm projects in 6.111 are team efforts. You will be working with one or two other\nstudents to build a (hopefully) working system. It may be appropriate to submit a joint\nreport. This is permitted (but not required), but it is important that the work of each\nstudent be clearly labeled.\nYour reports should have the following parts:\nTitle and Abstract\nTable of Contents\nList of Figures\nOverview\nDescription\nConclusions\nAppendices\nIn the title, identify the device that you have created. Avoid such deadwood as ``Report\non'' or ``Specifications of''. The abstract, which should appear on the title page, is a one-\nparagraph description of your project. The same abstract may appear in both the project\nproposal and final report, or it may be necessary to modify the abstract to reflect changes\nin scope or direction after the proposal.\nIf the report has joint authorship, the Table of Contents should disclose the authorship of\ndifferent sections.\nStyle Considerations\nAccuracy and Completeness:\nBe sure that your report accurately and completely describes your work. One of your\ncolleagues (fellow students, teaching assistants or faculty) should be able to understand\nwhat you have done and to, on the basis of your descriptions, reproduce your work.\n\nWell-organized, logical structure:\nEach section of the report should state an objective, provide examples and reach a\nconclusion. The paper should proceed systematically; and transitions from each section,\nparagraph and sentence to the next should be smooth and coherent.\nAppropriate language and tone:\nTechnical terminology will, of course, be used, but you should avoid jargon. Write\nsimply and clearly.\nCorrect grammar, spelling, punctuation and capitalization:\nProofread carefully. Rid your paper of little bugs.\nThoroughness:\nDo not assume that your reader already knows what you are writing about. You are not\ntaking a quiz. Avoid answering questions with:\nPart B) 30 nanoseconds\nWhat does that mean? How did you measure it? Without the lab handout, someone\nreading this doesn't know what this measurement refers to. Describe what you measured,\nhow you measured it, what calculations (if any) were involved in arriving at this answer.\nDescribe logic analyzer or oscilloscope traces if appropriate.\nThoroughness also means including all the necessary pieces in your lab report. If you\nprogram a CPLD, PAL, or EPROM, you must include the programming files (VHDL\nfiles,\nCode assembler source (.as) and specification (.sp) files, etc.). Most of the time it\nis appropriate to put these computer printouts in an appendix.\nAlways fully document any ``non-standard'', clever or ``hack'' mechanisms. It will help\nothers to understand your design as well as remind you why you built that thing that way\nin the first place.\nOverview (1 - 2 pages)\nThe most important rule of thumb for organizing a technical description is ``Describe the\nwhole before the parts''. This rule is based on the assumption that the device which you\nare describing is unknown to the reader and that a general view of the purpose and\nconstruction is needed before the details can be understood.\nWith this rule in mind, start your 6.111 report with an overview of the purpose, use and\ndesign of the device, what a user does with it and how he or she would do it. Describe in\n\ngeneral the subsystem organization of the device. Emphasize those internal features\nwhich implement the main user-visible features.\nDescription (5 - 7 pages)\nThe device must be described in enough detail for a skilled engineer to understand how it\nworks and to enable reconstruction of the same functions. This is the heart of any\ntechnical description.\nThe description normally includes the project functional specifications, the design used to\nimplement these specifications and a detailed description of how the design works.\nDescriptions are usually organized in a way that mirrors the design of the device. Thus,\nthere is a separate subsection for each module. A useful criterion for ordering the\nsubsections is the flow of information (input to output) within the device as a whole.\nWhen this criterion is not applicable, it often suffices to specify more important modules\nbefore less important ones.\nYour 6.111 project report has the special requirement that each subsystem be described\nby the partner who is responsible for it. Thus, use a sub-heading to identify the subsystem\nand the modules within subsystems. Use this sort of organization:\nSubsystem 1 (by Richard Francis Burton)\nNormalizing Shift Module\nMaster Control Module\nSubsystem 2 (by Alistair Cooke)\nRule-Interpreter Module\nRAM-Control Module\nAnalog Conversion Module\nInclude at least one-sentence introductions at each level (e.g., ``The device consists of\ntwo subsystems which ...'').\nIllustrate the descriptions with the block diagrams that you prepared earlier in the project\n(you may want to re-draw them). Refer to these by figure number. Detailed logic\ndiagrams usually belong in an appendix.\nTesting and Debugging (2 or 3 pages)\nVery infrequently will something you have built actually work the first time you turn on\nthe power. Testing and debugging are natural parts of the engineering process. If your\ncircuit is comprised of several smaller subsystems, you should include a description of\nhow you tested each one after you built it. If a subsystem did not work as you had\nplanned, give an overview of the debugging steps that you followed to make it work. In\n\nthe worst case, if you just could not get a lab project working, describe which subsystems\nworked and to what extent. You should also indicate what the remaining problems and\nobstacles were and what your next testing and debugging steps would have been to solve\nthose problems.\nConclusion (1 - 2 pages)\nThe conclusion of a project report typically summarizes the most important or innovative\ndesign features. The conclusion also often suggests ways in which the design could be\nimproved. In your 6.111 report you should also make a point of summarizing the test\nresults. If these were not fully satisfactory, they provide a natural basis for suggesting\nimprovements. As a guide to others, it is very helpful to include some discussion of the\nproblems you met in your initial design and what you did to overcome these problems.\nCircuit Diagrams\nCircuit diagrams help convey information about a piece of design work you have\naccomplished and implemented. Learning to ``speak the language'' of circuit diagrams\nwill facilitate getting your ideas across to others and make things easier to build and\ndebug.\nPoints to remember:\n1.\nAlways use a template and straight-edge, or use a computer-based drawing\npackage.\n2.\nWhere possible, information ``flows'' across circuit diagrams from left to right\nand top to bottom.\n3.\nPin numbers, part numbers and part locations are essential for a diagram of a\ncircuit you are actually going to build. It makes both wiring and debugging easier,\nas you will not have to search for a gate on a particular chip by tracing wires. Part\nlocation is most easily derived from the column (pads A through E, left to right on\nyour kit) and row (chip position, from top to bottom) coordinates.\n4.\nAdhere to the convention of gate input on the left, output on the right whenever\npossible. For chips containing small gates (including buffer and register chips),\ndraw out the individual gates. Do not draw a block that represents a chip, with\nwires connected to the pins in their real-world positions. This practice leads to\nconfusing diagrams that obscure the functions of circuits. Larger, complicated\nchips (counters, adders, etc.) should be drawn as blocks, but label them by\nfunction (signal inputs together, outputs together, similar control inputs together,\netc.), not by the physical layout of the chip's pins.\n5.\n\nLabel all input and output signals to a circuit. One starting point for each is best,\nsplitting the signal as required for multiple inputs. In dense diagrams, this may not\nbe possible. In that case, label all instances of a signal. A logic diagram fragment\nis shown in Figure 1.\n\n6. Wires: use horizontal and vertical lines only, drawn with a straight-edge. Connections\nare noted by dots. Do not use ``hop-overs'' to indicate non-connection points. (See Figure\n\n7. Use proper symbology: Inversion bubbles should match up, as shown in Figure 3.\n\nTiming Diagrams\nTiming diagrams demonstrate that the signals within a system behave in an orderly\nfashion to achieve a design goal. They show the cause and effect relationships between\nsignals.\nPoints to remember about timing diagrams:\n1. Try to group signals by operations of short duration. Examples include memory\nreads and writes, data buffering, video frame sync, etc. Draw separate diagrams for\neach operation.\n2. Show only the relevant signals. These include control signals and some indication of\nthe state of data lines (usually showing ``valid'' and ``invalid'' states).\n3. Show a clock signal in synchronous systems.\n4. Draw a separate trace for all signals shown, even if the trace is identical to that of\nanother signal. Label all signals.\n5. Propagation delays do not usually have to be shown.\n6. Indicate situations where an edge on one signal causes a change in another signal, as\nshown in Figure 4.\n\n7. Data bus contents should be abbreviated as shown in Figure 5, unless one of the data\nbits must be drawn separately for one of the reasons above.\n\nFigure 6 shows an example of a timing diagram."
    },
    {
      "category": "Resource",
      "title": "lab1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/40265c33f3edda673bc2439a01fb383f_lab1.pdf",
      "content": "Massac\nh\nusetts\nInstitute\nof\nT\nec\nhnology\nDepartmen\nt\nof\nElectrical\nEngineering\nand\nComputer\nScience\n6.111\n-\nIn\ntro\nductory\nDigital\nSystems\nLab\noratory\nLab\noratory\nLogic\nAnalyzers,\nDigital\nOscilloscop\nes,\nand\nP\nALs\nIssued\n{\nSeptem\nb\ner\n4,\nDue:\nSeptem\nb\ner\n16,\nIn\ntro\nduction\nThis\ninitial\nlab\nassignmen\nt\nin\ntro\nduces\ny\nou\nto\nthe\nsingle\nmost\nimp\nortan\nt\nmeasuring\nequip-\nmen\nt\nthat\ny\nou\nwill\nuse\nto\ntest\nand\nv\nerify\ny\nour\ndigital\ndesigns.\nThis\ninstrumen\nt\nis\na\nm\nulti-\nc\nhannel\nlogic\nanalyzer\nwith\nan\nin\ntegrated\nt\nw\no-c\nhannel\ndigital\noscilloscop\ne.\nIn\nconjunction\nwith\nlearning\nab\nout\nthe\nuse\nof\nthis\ninstrumen\nt,\ny\nou\nare\nalso\nrequired\nto\nin\nteract\nwith\nthe\nlab\noratory\ncomputer\nsystems\nto\nprogram\na\nP\nAL\nand\nthen\nto\nuse\nthe\nlogic\nanalyzer\nand\ndigital\noscilloscop\ne\nto\nv\nerify\nthe\ncorrect\nop\neration\nof\nthe\ndigital\ncircuitry\nimplemen\nted\nb\ny\nthis\nP\nAL.\nY\nou\nare\nalso\nrequired\nto\nimplemen\nt\nthe\nlogic\nsp\necied\nb\ny\nthe\nVHDL\nle\nwith\nSSI\n(Small\nScale\nIn\ntegration)\nand\nto\nv\nerify\nwhat\nit\ndo\nes.\nBefore\ny\nou\nb\negin,\nplease\nread\nthe\nhandouts\ny\nou\nha\nv\ne\nb\neen\ngiv\nen\non\nthe\nlab\nequipmen\nt\nand\nrules.\nThese\nshould\nansw\ner\nman\ny\nof\ny\nour\nquestions.\nIf\ny\nou\nha\nv\ne\nan\ny\nother\nquestions\nor\nproblems\n{\nask!\nPro\ncedure\nThis\nlab\nis\ndivided\nin\nto\nsev\neral\nexercises\nto\nguide\ny\nou\nthrough\nthe\ndesign,\nconstruction,\nand\ndebugging\npro\ncess.\nY\nou\nwill\nb\ne\nask\ned\nto\nwire\ncircuits\nfor\nman\ny\nof\nthe\nexercises.\nSa\nv\ne\nall\nof\nthese\ncircuits\nun\ntil\ny\nou\nha\nv\ne\ncompleted\nthe\nen\ntire\nlab\nas\nman\ny\nof\nthese\ncircuits\nwill\nb\ne\nreused\nin\nsubsequen\nt\nparts\nof\nthis\nlab,\np\nerhaps\nev\nen\nin\nlater\nlabs.\n1.\nRead\nand\nunderstand\nthe\nwhole\nassignmen\nt.\n2.\nDesign\nev\nerything\n-\non\npap\ner\nas\nw\nell\nas\nin\ny\nour\nhead.\n3.\nBuild,\ntest,\ndebug,\nand\nx\neac\nh\nsection\nin\nturn.\nY\nou\ndo\nNOT\nha\nv\ne\nto\nget\nc\nhec\nk\ned-o\non\na\nsection\nb\nefore\npro\nceeding\nto\nthe\nnext\nsection.\n4.\nCorrect\nthe\ndo\ncumen\ntation.\n5.\nPrepare\ny\nour\nrep\nort\nwhic\nh\nshould\ninclude:\n\ny\nour\nname,\nrecitation\ntime,\nand\nT.A.'s\nname\n\nlogic\ndiagrams\nfor\nthe\nP\nAL\n(y\nou\nneed\nnot\nrepro\nduce\nlogic\ndiagrams\nsho\nwn\nin\nthis\nassignmen\nt)\n\n6.111\n{\nLab\noratory\n\nlogic\ndiagrams\nfor\nthe\nSSI\ncircuitry\nused\nto\nimplemen\nt\nthe\nlogic\nsp\necied\nin\nthe\nVHDL\nco\nde.\nDo\nnot\nforget\nto\ninclude\npin\nn\num\nb\ners\nand\nlo\ncation\ninformation.\n\ntest\nresults\n\nw\na\nv\neform\nsk\netc\nhes\n\nansw\ners\nto\nsp\necic\nquestions\np\nosed\nin\nthe\nexercises.\nExercise\nI:\nTTL\nStatic\nElectrical\nCharacteristics\nThe\nBo\nolean\nv\nalues\nof\n`1'\nand\n`0'\nare\nrepresen\nted\nb\ny\nv\noltage\nlev\nels\nin\nelectronic\nlogic.\nThe\nv\noltage\nlev\nels\nand\nother\nelectrical\nc\nharacteristics\nare\nnot\nstandardized\nfrom\none\nlogic\nfamily\nto\nanother.\nThe\nprimary\nfamily\nof\nlogic\nto\nb\ne\nused\nin\n6.111\nis\nTTL\n(T\nransistor{T\nransistor\nLogic).\nThe\nrst\nand\nmost\nelemen\ntary\ngate\ndev\nelop\ned\nin\nTTL\nis\nthe\nNAND\ngate,\nthe\ncircuit\nof\nwhic\nh\nis\nsho\nwn\nin\nFigure\n1.\nOther\ngates\nin\nthe\nTTL\nfamily\np\nerforming\nv\narious\nother\nlogical\nfunctions\nwill\nha\nv\ne\ndieren\nt\ncircuit\ntop\nologies,\nbut\nwill\nb\ne\nelectrically\ncompatible\nwith\neac\nh\nother.\nBecause\nof\nv\nariations\nin\nthe\nman\nufacturing\npro\ncess,\nit\nis\nnot\nreasonable\nto\nexp\nect\nthat\neac\nh\ngate\nwill\np\nossess\niden\ntical\nelectrical\nc\nharacteristics.\nRather,\nsligh\nt\ndierences\nwill\nb\ne\nfound\nfrom\none\nbatc\nh\nof\ngates\nto\nanother.\nThe\nman\nufacturer,\nho\nw\nev\ner,\nsp\necies\nan\nac-\nceptable\nrange\nof\ngate\ninput\nand\noutput\nv\noltage\nlev\nels\no\nv\ner\nwhic\nh\nprop\ner\nop\neration\ncan\nb\ne\nguaran\nteed.\nThe\nman\nufacturer-guaran\nteed\nv\noltage\nranges\nfor\ninputs\nand\noutputs\nare\nsho\nwn\nin\nFigure\n(for\nT\nexas\nInstrumen\nts'\nTTL\nin\ntegrated\ncircuits).\nTHESE\nLEVELS\nARE\nIMPOR\nT\nANT:\nREMEMBER\nTHEM!\nIt\nis\nsometimes\nnecessary\nto\ncreate\nxed\nlogic\nlev\nels\nnot\nderiv\ned\nfrom\na\nTTL\ngate\nto\nprop\nerly\nterminate\nan\nun\nused\ninput\non\na\nlogic\ngate.\nT\no\nforce\na\ngate\ninput\nto\nlogic\n`0',\nthe\ninput\nma\ny\nb\ne\ndirectly\ngrounded\n(zero\nv\nolts).\nT\no\nforce\na\ngate\ninput\nto\nlogic\n`1',\nthe\ninput\nma\ny\nb\ne\ntied\nto\n+5\nV\nas\nsho\nwn\nin\nFigure\n3.\nNOTE:\nY\nou\nwill\nnd\nthat\nan\nunconnected\ninput\nwill\noften\nb\neha\nv\ne\nas\nif\nit\nw\nere\nat\nLOGIC\n1.\nHo\nw\nev\ner,\nsometimes\nit\nwill\nseem\nlik\ne\na\nLOGIC\n0.\nIt\nis\nbad\npractice\nto\nlea\nv\ne\ninputs\nunconnected,\nas\nthey\nare\nthen\nvulnerable\nto\nnoise.\nWire\nt\nw\no\nNAND\ngates\nfrom\na\n74LS00\nc\nhip\nas\nsho\nwn\nin\nFigure\n4.\nDo\nnot\nforget\nto\nwire\np\no\nw\ner\nand\nground!\nThese\nconnections\nare\n(most)\noften\nomitted\nfrom\nlogic\ndiagrams\nwhen\nthe\nlo\nw\ner\nleft\npin\nis\nGND\nand\nthe\nupp\ner\nrigh\nt\npin\nis\n+5\nv\nolts.\nOften\nthe\ntop\nof\nthe\nc\nhip\nhas\na\nsmall\ncircular\ncutout\nas\nsho\nwn\nin\nFigure\n5.\nAmazingly\n,\nsome\nICs\n\\almost\nw\nork\"\nwhen\nthe\nground\nwire\nis\nomitted.\nGround\nthe\ninput\nof\nthe\nin\nv\nerter\nand\nmeasure\nthe\noutput\nv\noltage.\n(Use\nan\noscilloscop\ne\nfor\nv\noltage\nmeasuremen\nts;\nb\ne\nsure\nit\nis\ncalibrated.)\nConnect\nthe\ninput\nto\nlogic\n`1'\nand\nrep\neat\nthe\nmeasuremen\nt.\n\n6.111\n{\nLab\noratory\n<\n<\n<\n>\n>\n1k\nH\nH\nj\n\nH\nH\nH\nH\nj\n\nH\nH\nH\nH\nj\n\nH\nH\n<\n<\n<\n>\n>\n1:6k\n<\n<\n<\n>\n>\n<\n<\n<\n>\n>\n4k\n\nA\nA\n\nr\nr\nr\nInputs\nX\nX\nZ\nOutput\nr\n+5\nFigure\n1:\nBasic\nTTL\nNAND\nCircuit\n(0.0)\n(0.4)\n(0.8)\n(1.3)\n(2.0)\n(2.7)\n(5.0)\nV\nolts\nV\nO\nL\nV\nI\nL\nV\nth\nV\nI\nH\nV\nO\nH\nV\nC\nC\n?\n?\n?\n?\n?\n?\nP\nermissible\nInput\nP\nermissible\nInput\nGuaran\nteed\nOutput\nLo\nw\nNoise\nMargin\nGuaran\nteed\nOutput\nHigh\nNoise\nMargin\nSwitc\nhing\nThreshold\nFigure\n2:\nLSI\nTTL\nV\noltage\nRanges\n\n6.111\n{\nLab\noratory\nLogic 0\nLogic 1\n+5\nFigure\n3:\nT\nermination\nof\nUn\nused\nInputs.\n+5\nTo provide an output\nload (or two)\nVoltage Measurement Point\nFigure\n4:\nLogic\nLev\nel\nMeasuremen\nts\nV CC\n+5\nGND\n74LS00\nFigure\n5:\nP\no\nw\ner\nSupply\nWiring\nfor\n74LS00\n\n6.111\n{\nLab\noratory\nExercise\nI\nI:\nTTL\nDynamic\nElectrical\nCharacteristics\nThree\ntiming\nparameters\nasso\nciated\nwith\nthe\nsp\need\nof\ndigital\nlogic\ngates\nare\nthe\nprop-\nagation\ndela\ny\ntime\nt\nP\nD\n,\nand\nthe\noutput\nsignal\nrise\nand\nfall\ntimes,\nt\nR\nand\nt\nF\n.\nPropagation\ndela\ny\nis\na\nmeasure\nof\nho\nw\nm\nuc\nh\ntime\nis\nrequired\nfor\nthe\nelectronic\ncircuitry\nwithin\nthe\ngate\nto\nc\nhange\nstate.\nThe\nrise\nand\nfall\ntimes\nmeasure\nho\nw\nfast\na\nbinary\nsignal\ncan\nc\nhange\nstate.\nThese\nt\nw\no\ndynamic\nfactors\nare\nillustrated\nin\nFigure\n6.\nV\nI\nL\nand\nV\nI\nH\nare\nthresholds\nwhic\nh\nsa\ny\nwhen\nan\ninput\nis\nv\nalid.\nV\nO\nL\nand\nV\nO\nH\nare\nthresholds\nwhic\nh\nsa\ny\nwhen\noutputs\nare\nv\nalid.\nThe\neect\nof\npropagation\ndela\ny\ntime\ncan\nb\ne\ndemonstrated\nb\ny\nthe\ncircuit\nof\nFigure\n7.\nPropagation\nDela\ny\nTime\nand\nRise\nTime\nConstruct\na\nring\noscillator\nusing\nv\ne\nTTL\nin\nv\nerters\n(74LS04)\nand\nas\nlittle\nwire\nas\nis\nreasonably\np\nossible.\nF\nrom\nthis\ncircuit,\ndetermine\nthe\na\nv\nerage\npropagation\ndela\ny\nof\na\nTTL\nINVER\nTER\nb\ny\nmeasuring\nthe\np\nerio\nd\nof\noscillation.\nHINT:\nThink\nab\nout\nthe\nn\num\nb\ner\nof\ngates\na\nsignal\nm\nust\ntra\nv\nel\nthrough\nto\ncomplete\na\nfull\np\nerio\nd\nof\noscillation.\nT\nransmission\nLine\nEects\nInsert\na\nlong\npiece\nof\nwire\n(2-3\nfeet)\nin\nthe\nring.\nObserv\ne\nho\nw\nthis\nextra\nlength\nof\ncircuit\naects\nthe\nsignal.\nMORAL:\nMinimize\nthe\nwire\nlength\nwhenev\ner\np\nossible.\nOne\nGate\nWhat\nhapp\nens\nwhen\ny\nou\nlet\nn\n=\nand\nwire\nthe\noutput\nof\nan\nin\nv\nerting\ngate\nto\nits\ninput?\n(If\nit\noscillates,\nadd\na\ncapacitor\nfrom\noutput\nto\nground.)\nExercise\nI\nI\nI:\nFlip\nFlop\nOp\neration\nTimes\nClo\nc\nk\nA\npulse\nma\ny\nb\ne\ndened\n(in\nthe\ndigital\nsense)\nas\na\nsignal\nwhic\nh\nis\nin\none\nstate\nmost\nof\nthe\ntime\nand\ntransits\nto\nthe\nopp\nosite\nstate\nonly\nfor\np\nerio\nds\nof\nshort\n(usually\nxed)\nduration.\nP\nositiv\ne\npulses\nare\nnormally\nin\nthe\nLO\nW\nstate,\nc\nhanging\nto\nHIGH\nfor\nshort\np\nerio\nds\nof\ntime.\nThe\ntime\nin\nthe\nHIGH\nstate\nis\nth\nus\nthe\npulse\nwidth.\nA\ngo\no\nd\npractice\nto\nfollo\nw\nin\ndesigning\ndigital\nsystems\nis\nto\nNEVER\nroute\npulses\nthrough\nmec\nhanical\nswitc\nhes.\nIf\nthe\nswitc\nh\nw\nere\nto\nb\ne\nop\nerated\nwhile\nthe\npulse\nw\nas\nactiv\ne,\nthen\nthe\np\nossible\ncon\ntact\nb\nounce\nmigh\nt\ncause\nthe\noutput\nof\nthe\nswitc\nh\nto\napp\near\nas\nsev\neral\npulses\nrather\nthan\nonly\none.\nCapacitance\nand\n\n6.111\n{\nLab\noratory\nFigure\n6:\nDynamic\nCharacteristics\nOf\nA\nGate\n74LS04\nFigure\n7:\nRing\nOscillator\n\n6.111\n{\nLab\noratory\nXtal\nOsc\n2A\n2C\n2B\n2D\n1D\n1C\n1B\n1A\nCLR2\nCLR1\n+5\n74LS393\nFigure\n8:\nClo\nc\nk\nand\nRipple\nCoun\nter\ninductance\nasso\nciated\nwith\nthe\nswitc\nh\nmigh\nt\ndegrade\nthe\nrise\nand\nfall\ntimes\nor,\nw\norse\ny\net,\nallo\nw\nthe\npulse\nto\n\\leak\nthrough\"\nev\nen\nthough\nthe\nswitc\nh\nw\nas\nop\nen.\nA\nclo\nck\nin\na\ndigital\nsystem\nis\na\nsignal\nwhic\nh\npro\nduces\na\n(usually\ncon\ntin\nuous)\nseries\nof\npulses\nspaced\nat\nregular\nin\nterv\nals.\nW\ne\noften\nuse\ncrystal\noscillators\nas\nsources\nfor\nclo\nc\nk\nw\na\nv\ne-\nforms.\nThe\np\nerio\nd\nof\nthe\nclo\nc\nk\nw\na\nv\neform\nis\nthe\ncycle\ntime\nor\nthe\nlength\nof\ntime\nfrom\nthe\nb\neginning\nof\none\npulse\nto\nthe\nnext\no\nccurrence\nof\nthat\npulse.\nThe\nduty\ncycle\nof\na\nclo\nc\nk\nw\na\nv\ne-\nform\nis\nthe\np\nercen\ntage\nof\ntime\nthat\nit\nis\nactiv\ne.\nRipple\nCoun\nter\nWire\nup\na\ncrystal\noscillator\noutput\nto\nan\n8-bit\nripple\ncoun\nter\nas\nsho\nwn\nin\nFigure\nand\nv\nerify\nits\nop\neration.\nDo\nnot\nforget\nto\nwire\np\no\nw\ner\nand\nground!\nPlease\ntak\ne\ncare\nto\nput\nthe\ncrystal\noscillator\nin\nRIGHT\nSIDE\nUP!\nThey\nare\ndestro\ny\ned\nwhen\np\no\nw\nered\nwhile\nupside\ndo\nwn.\nSa\nv\ne\nthis\ncircuit\nfor\nlater\nuse\nin\nthis\nLab.\nMeasure\nthe\ndela\ny\nfrom\nthe\nfalling\nedge\nof\nthe\ncrystal\nclo\nc\nk\nto\na\nc\nhange\nin\nthe\nmost\nsignican\nt\nbit\n(MSB)\nof\nthe\n8-bit\ncoun\nter.\nHINT:\nUse\nthe\nMSB\nof\nthe\n8-bit\ncoun\nter\nas\ny\nour\nscop\ne\nsync.\nWhat\nis\nthe\na\nv\nerage\nop\neration\ntime\nfor\na\nip\nop\nin\nthe\nripple\ncoun\nter?\nHP\nLogic\nAnalyzer/Digital\nOscilloscop\ne\nLogic\nanalyzers\nand\ndigital\noscilloscop\nes\nare\ncomplex\ninstrumen\nts.\nThey\nare\nalso\nex-\ntremely\np\no\nw\nerful\nin\naiding\none\nto\ndebug\ncomplex\ndigital\nsystems.\nY\nou\nwill\nnd\nthat\ntime\nsp\nen\nt\nno\nw\nin\nlearning\nto\nuse\na\nlogic\nanalyzer\nwill\nb\nenet\ny\nou\ngreatly\nand\nsa\nv\ne\ny\nou\nm\nuc\nh\ntime\nand\neort\nin\ndebugging\nlater\nLabs\nand\ny\nour\nnal\npro\nject.\nRead\nthe\nhandout,\n\\A\nBrief\nIn\ntro\nduction\nto\nthe\nHP\nLogic\nAnalyzer\".\nThen\ncome\nin\nto\n\n6.111\n{\nLab\noratory\nthe\nlab\nand\nexp\nerimen\nt\nwith\nthe\nlogic\nanalyzer.\nAdditional\ndo\ncumen\ntation\ncan\nb\ne\nfound\nin\nthe\np\no\nc\nk\net\non\nthe\ntop\nof\neac\nh\nlogic\nanalyzer,\nand\nsev\neral\ncopies\nof\nthe\nreference\nman\nual\nare\nplaced\nin\nthe\nlab.\nChec\nk\nout\nan\nHP\nT\nraining\nKit\nfrom\nthe\ninstrumen\nt\nro\nom\nand\ngo\nthrough\nall\nof\nthose\nexercises\nto\nlearn\nab\nout\nthe\nlogic\nanalyzer\nand\noscilloscop\ne.\nDO\nNOT\nremo\nv\ne\nthe\nHP\ndo\ncumen\ntation\nfrom\nthe\nlab.\nExercise\nIV:\nTiming\nAnalyzer\nOp\neration\nSet\nup\nAnalyzer\nas\na\ntiming\nanalyzer\nwith\na\nname\nof\n\\Lab\n1T\".\nAssign\nPod\nto\nan-\nalyzer\n1.\nSet\nanalyzer\nto\nOff.\nGo\nto\nthe\nFORMAT\nmen\nu\nand\nen\nter\nlab\nels\nfor\nCLK,\nQ1B,\nQ2D,\nRING,\nand\n/GLIT\nand\nassign\nthese\nto\nbits\nthrough\nresp\nectiv\nely\n.\nThe\nTTL\nthreshold\nshould\nb\ne\nselected.\nP\nositiv\ne\np\nolarit\ny\n,\n+,\nshould\nb\ne\nselected.\nSet\nthe\nAcquisition\nmode\nto\nTransitional.\nGo\nto\nthe\nTrigger\nmen\nu.\nChange\nthe\nBase\nto\nBinary\nfor\nall\nsignals.\nSet\nthe\ntrigger\n(TRIGGER\non\n``Edge1''\ntime)\nto\nsp\necify\na\nfalling\nedge\ntrigger\non\nQ2D\nwhic\nh\nis\nbit\n2.\nWire\nup\nthe\nCLK,\nQ1B,\nand\nQ2D\nsignals\nfrom\ny\nour\nkit.\nRefer\nto\nFigure\n8.\nPress\nthe\nRUN\nbutton\nand\nmanipulate\nthe\nX\nand\nO\nmark\ners\nto\nread\nthe\ndela\ny\ntime\nfrom\nthe\nfalling\nedge\nof\nCLK\nto\nthe\nfalling\nedge\nof\nQ2D.\nT\no\nget\nat\nthe\nX\nand\nO\nmark\ners,\ny\nou\nha\nv\ne\nto\nset\nMarkers\nto\nTime.\nPress\nRUN\nsev\neral\ntimes\nto\nrep\neat\nthe\nmeasuremen\nt.\nY\nou\ncan\nautomate\nrep\neated\nruns\nb\ny\nselecting\nthe\nRun\nbutton\n(b\ny\nholding\ndo\nwn\nthe\nmouse\nbutton\nor\nb\ny\nusing\nthe\narro\nw\nk\neys)\nand\nc\nho\nosing\nRepetitive\nfrom\nthe\nmen\nu.\nChange\nthe\nTrigger\nmode\nbac\nk\nto\nSingle\nand\nexplore\nc\nhanging\nthe\nTime/Div,\nDelay,\nand\nthe\nX\nand\nO\nmark\ners.\nNo\nw\nwire\nthe\nRING\nbit\nto\nan\noutput\nof\ny\nour\nring\noscillator\nand\nmeasure\nthe\np\nerio\nd.\nChange\nthe\nlogic\nanalyzer\nto\ntrigger\non\neither\nedge\nof\nthe\nRING\nbit.\nMo\ndify\nthe\nwiring\nof\ny\nour\n74LS00\nso\nas\nto\nconform\nto\nthe\ncircuit\nsho\nwn\nin\nFigure\n9.\nWire\nthe\n/GLIT\nbit\nto\nthe\n(purp\nosely)\nglitc\nh\ny\noutput\non\npin\nof\nthe\n74LS00.\nMeasure\nthe\nwidth\nof\nthe\nglitc\nh.\nNo\nw\nc\nhange\nthe\nAcquisition\nmode\n(select\nthe\nFormat\nmen\nu)\nto\nGlitch\nand\ntrigger\nthe\nlogic\nanalyzer\non\nan\ny\nglitc\nh\nof\n/GLIT.\nMak\ne\nsure\ny\nou\ncan\nsee\na\nfew\nfull\np\nerio\nds\nof\nQ2D.\nPress\nRUN\nsev\neral\ntimes\nand\nsk\netc\nh\none\nof\nthe\nmore\nin\nteresting\ntraces\nof\n/GLIT.\n\n6.111\n{\nLab\noratory\n'00\n'00\n+5\n'00\nQ2D\n'00\n/GLIT\nFigure\n9:\nGlitc\nh\nMeasuremen\nt\nExercise\nV:\nCoun\nter\nOne\nof\nthe\nmost\nuseful\nof\nthe\nTTL\nMSI\nICs\nis\na\n4-bit\ncoun\nter\nsuc\nh\nas\nthe\n74LS161/3.\nThese\nt\nw\no\nICs\nare\niden\ntical\nexcept\nthat\nthe\nclear\ninput\non\nthe\nis\nasync\nhronous\n(i.e.,\ntak\nes\neect\nimmediately\nwhen\nasserted)\nwhile\non\nthe\nthe\ncoun\nter\nonly\nc\nhanges\nstate\nas\na\nresult\nof\nthe\nrising\nedge\nof\nthe\nclo\nc\nk.\nWire\nt\nw\no\n74LS163s\nso\nthat\nthey\nalw\na\nys\ncoun\nt,\nconnecting\nan\noutput\nof\ny\nour\nripple\ncoun\nter\nto\nits\nclo\nc\nk\ninput.\nT\nrigger\ny\nour\nscop\ne\non\nthe\nmost\nsignican\nt\nbit\n(MSB)\nand\nv\nerify\nits\nop\neration.\nSa\nv\ne\nthis\ncircuit\nas\ny\nou\nwill\nneed\nit\nfor\nthe\nrest\nof\nthis\nLab.\n\nAb\nout\nho\nw\nlong\ndo\nes\nit\ntak\ne,\nafter\nthe\nrising\nedge\nof\nthe\nclo\nc\nk,\nfor\none\nof\nthe\nip\nops\nto\nc\nhange\nstate?\nThis\nma\ny\nb\ne\neasier\nto\nmeasure\nif\ny\nou\nuse\na\nfast\nclo\nc\nk\nor\ntrigger\nthe\nscop\ne\non\nthe\nLSB\nof\nthe\ncoun\nter.\nThis\ndela\ny\nis\nshort\nand\nth\nus\nhard\nto\nmeasure.\n\nCan\ny\nou\nobserv\ne\nan\ny\nglitc\nhes\non\nthe\ncarry\noutput?\nLo\nok\nat\nb\noth\ncarry\noutputs.\nLo\nok\ncarefully\naround\nthe\nto\ntransition.\nGlitc\nhes\nlik\ne\nthese\nare\nhard\nto\nsee\nas\nthey\nare\nv\nery\nshort.\nThe\ncarry\noutput\ndo\nes\nnot\nalways\nha\nv\ne\nglitc\nhes,\njust\nsometimes\nfor\nsome\nparticular\nc\nhips!\nY\nou\nma\ny\nor\nma\ny\nnot\nb\ne\nable\nto\ndetect\na\nglitc\nh\non\nthe\ncarry\noutput\nwith\na\nlogic\nanalyzer\ncongured\nas\na\ntiming\nanalyzer\nand\ntriggered\nin\nglitc\nh\nmo\nde.\nThe\nlogic\nanalyzer\nwill\ncatc\nh\nglitc\nhes\nthat\nare\nns\nor\ngreater\nand\nma\ny\nor\nma\ny\nnot\ncatc\nh\nshorter\nglitc\nhes.\nExercise\nVI:\nProgramming\na\n20v8\nBrief\nDescription\nof\na\n20V8:\nThe\n20V8\nis\nelectrically\nerasible.\nMistak\nes\nare\neasy\nto\ncorrect\nb\ny\nsimply\nreprogramming\nthe\ndevice\nwith\na\ncorrected\njedec\nle.\nThe\nlogic\nin\nthe\nc\nhip\nis\nprogrammable\nso\nthat\nan\n\n6.111\n{\nLab\noratory\nFigure\n10:\nOutput\nArc\nhitecture\nConguration\nof\n20V8\n\n6.111\n{\nLab\noratory\noutput\ncan\nb\ne\ncom\nbinational\nor\nfrom\na\nD\nip-op.\nIn\neither\ncase,\nan\noutput\ncan\nb\ne\nin\nv\nerted\nor\nnot.\nAn\noutput\npin\ncould\nb\ne\nused\nas\nan\ninput\nor\nthe\noutput\ncould\nb\ne\ntri-state.\nIf\nan\ny\noutput\nis\ncongured\nas\na\nip-op,\nthen\npin\nis\nthe\nclo\nc\nk\nand\npin\nis\nthe\noutput\nenable.\nF\nor\nthis\nlab,\nsome\noutputs\nwill\nb\ne\na\nip-op,\nand\nall\np\nossible\noutputs\n(eigh\nt\nof\nthem)\nwill\nb\ne\nused.\nAlso,\nnone\nof\nthe\noutputs\nwill\nb\ne\ntri-stated.\nY\nou\nwill\n(should)\nground\npin\nto\nalw\na\nys\nassert\nthe\noutput\nenable\nfor\nthe\nip-op\noutputs.\nTw\no\nappropriate\ncongurations\nare\nsho\nwn\nin\nFigure\n10.\nThe\nprogramming\ninformation\nfor\nthe\nconguration\nfuses\n(as\nw\nell\nas\nfor\nthe\nlogic\nterms)\nis\ncon\ntained\nin\nthe\njedec\nle.\nEac\nh\nline\nin\nFigure\nlab\neled\n``FROM\nAND\nARRAY''\nrepresen\nts\na\npro\nduct\nterm\nwhic\nh\ncan\ncon\ntain\nan\ny\ninput\nor\noutput\nsignal\nexcept\npins\nand\nwhen\nan\ny\noutput\nis\na\nip-op.\nCreating\ny\nour\nsource\nle:\nActually\n,\nw\ne\nha\nv\ne\ncreated\nthe\nsource\nle\nfor\ny\nou,\nso\nall\ny\nou\nha\nv\ne\nto\ndo\nis\ncop\ny\nit\nto\nwhere\ny\nou\ncan\ncompile\nit.\nY\nou\nshould\ndo\nthis\non\none\nof\nthe\nlab\ncomputers\nor\non\na\nPro\nject\nA\nthena\nSun\nw\norkstation.\nIf\ny\nou\nare\nusing\nan\nA\nthena\nSun\nw\norkstation,\nremem\nb\ner\nto\nexecute\n``setup\n6.111''.\nDon't\nuse\n\\add\n6.111\".\nMak\ne\na\ncop\ny\nof\nthe\ninitial\nsp\necication\nle\nb\ny\nexecuting\nthe\ncommands:\ncd\nmkdir\nlab1\ncd\nlab1\ncp\n/mit/6.111/vhdl/lab1/lab1.\nvhd\nlab1.vhd\nchmod\nlab1.vhd\nCreating\ny\nour\njedec\nle:\nRun\ngalaxy\nto\ncreate\ny\nour\njedec\nle.\nY\nou\nma\ny\nwish\nto\nlo\nok\nat\nthe\nhandout,\nA\nBeginner's\nGuide\nto\nW\nARP.\nSet\nthe\ndevice\nto\nb\ne\nC20V8\nand\nthe\npac\nk\nage\nto\nb\ne\nP\nALCE20V8-7PC.\nY\nou\nma\ny\nw\nan\nt\nto\nlo\nok\nat\nthe\nrep\nort\nle\ngenerated\nwhen\ny\nou\ncreated\ny\nour\njedec\nle.\nProgramming\nthe\nP\nAL:\nThe\n20v8\nP\nALs\nare\nCMOS.\nPlease\nground\ny\nourself\nb\nefore\ntouc\nhing\nthem\nas\ny\nou\nma\ny\noth-\nerwise\nburn\nthem\nout\nwith\na\nhigh\nv\noltage\nresulting\nfrom\nstatic\nc\nharge.\nUse\nthe\nconductiv\ne\nfoam\nwhic\nh\nhas\nb\neen\npro\nvided\nfor\nstoring\nand\ntransp\norting\nP\nALs.\nProgram\ny\nour\nP\nAL\non\none\nof\nthe\nuniv\nersal\nprogrammers.\nSee\nthe\n\\P\nAL\nProgramming\"\nhandout\nin\nthis\npac\nk\net.\n\n6.111\n{\nLab\noratory\nExercise\nVI\nI:\nAnalyze\nand\nT\nest\nthe\nLatc\nh\n\nDra\nw\na\nlogic\ndiagram\nusing\nAND\ngates\nand\nNOR\ngates\nfor\nthe\nlatc\nh\nrealized\nb\ny\nthe\nlast\nt\nw\no\nconcurren\nt\nstatemen\nts\nin\nthe\nVHDL\nsource\nle\non\npage\n15.\nY\nou\nma\ny\nuse\nin\nv\nerters\nas\nrequired.\n\nImplemen\nt\nan\nSSI\nv\nersion\nof\na\nlatc\nh\nwith\n74LS00\nNAND\ngates.\n\nWire\ndeb\nounced\nswitc\nhes\nto\nthe\ninput\npins\ncorresp\nonding\nto\nS,\nR,\nLA\nTCHCLK,\nand\nD\nA\nT\nA\nfor\nb\noth\nthe\nP\nAL\nand\nSSI\nv\nersions.\nWire\nLEDs\nto\nthe\noutputs\nQH\nand\nQL.\n\nWith\nLA\nTCHCLK\n=\nlo\nw,\ntest\nthat\nb\noth\nlatc\nhes\nw\nork\nas\nexp\nected\nwhen\ny\nou\nop\nerate\nthe\nswitc\nhes\nconnected\nto\nthe\nS\nand\nR\ninputs.\n\nWith\nS\n=\nR\n=\nlo\nw,\ntest\nthat\nthe\nlatc\nh\nw\norks\nas\nexp\nected\nwhen\ny\nou\npulse\nthe\nLA\nTCHCLK\ninput\nfor\nthe\nt\nw\no\np\nossible\nv\nalues\nof\nD\nA\nT\nA.\n\nWhat\nhapp\nens\nif\ny\nou\nwire\nD\nA\nT\nA\nto\nthe\ncomplemen\nt\nof\npin\n(qh)\nand\npulse\nthe\nLA\nTCHCLK\ninput?\nDynamic\nT\nesting\nof\nCom\nbinational\nLogic\nWire\nv\ne\ncoun\nter\noutputs\nto\npins\nthrough\nof\ny\nour\nP\nAL\nas\nsho\nwn\nin\nFigure\n11.\nSet\nup\nthe\nscop\ne\nso\nthat\nit\nsyncs\non\nthe\nfalling\nedge\nof\nthe\nMSB\nof\nthe\ncoun\nter.\nAdjust\nthe\ntime\nbase\nand\np\nosition\nthe\ntrace\nso\nthat\none\ncomplete\np\nerio\nd\nof\nthe\nMSB\no\nccupies\nscale\ndivisions.\nThis\nmak\nes\nit\nreasonably\ncon\nv\nenien\nt\nto\nuse\na\nsingle\nscop\ne\nprob\ne\nto\ndispla\ny\na\ncom\nbinational\nlogic\nw\na\nv\neform\nfor\nall\np\nossible\ninput\ncom\nbinations.\nDemonstrate\ny\nour\nscop\ne\nw\na\nv\neforms\nto\na\nT.A.\nExercise\nVI\nI\nI:\nAnalyze\nand\nT\nest\nY\nour\nCom\nbinational\nLogic\n\nPro\nvide\nsk\netc\nhes\nof\nthe\noutputs\nX2,\nX1,\nand\nX0.\n\nAre\nthere\nan\ny\nstatic\nhazards\nin\ny\nour\nrealizations?\n\nCan\ny\nou\nobserv\ne\nan\ny\nglitc\nhes?\nWh\ny\nor\nwh\ny\nnot?\n\nWhat\nis\nthe\ndela\ny\nthrough\ny\nour\ncom\nbinational\nlogic?\n\n6.111\n{\nLab\noratory\nA\nB\nC\nD\nQa Qb Qc Qd\n74LS163\nLD\nT\nP\nCLR\nRCO\nA\nB\nC\nD\nQa Qb Qc Qd\n74LS163\nLD\nT\nP\nCLR\nRCO\nCLK\n20v8\na0\na1\na2 a3\na4\n+5\n+5\nFigure\n11:\nCoun\nter\nT\no\nP\nAL\nWiring\n\n6.111\n{\nLab\noratory\nExercise\nIX:\nAnalyze\nand\nT\nest\nthe\nT,\nD,\nand\nJK\nFlip\nFlops\n\nImplemen\nt\nthese\nthree\nFFs\nwith\n74LS74\nand\n74LS00\nas\nrequired.\n\nWhat\nis\nthe\ndela\ny\nor\nop\nerating\ntime\nof\na\nP\nAL\nip\nop?\nThat\nis,\nwhat\nis\nthe\ntime\nfrom\nthe\nrising\nedge\nof\n/FF\nCLK\nto\na\nc\nhange\nin\nstate\nof\nthe\nip\nop?\nMeasure\nthis\nfor\na\n74LS74.\n\nWhat\ndo\ny\nou\nthink\nthe\nsetup\nand\nhold\ntimes\nare\nfor\nb\noth\nthe\nP\nAL\nand\nSSI\nv\nersions\nof\nthe\nT\nip-op?\nExercise\nX:\nLogic\nAnalyzer\nas\na\nState\nAnalyzer\nCongure\nAnalyzer\nas\na\nState\nanalyzer\nand\nassign\nPod\nto\nit.\nWire\nbits\nthrough\nto\nthe\nlab\nel,\nADDR.\nWire\nbits\n4,\nand\nto\nthe\nlab\nel\nX\nand\nbits\n7,\n8,\nand\nto\nthe\nlab\nels\nJK,\nT,\nand\nD\nresp\nectiv\nely\n.\nWire\nthe\nCLK\nsignal\n(pin\nof\ny\nour\nP\nAL)\nto\nthe\nCLK\nc\nhannel\nand\nenable\nthe\nJ\nClock\nfor\na\nrising\nedge.\nGo\nto\nthe\nTRIGGER\nmen\nu\nand\nset\nthe\ntrigger\nso\nthat\nthe\nanalyzer\nwill\ntrigger\non\nthe\nsecond\no\nccurrence\nof\nthe\n4-bit\naddress\n=\n0.\nY\nou\nshould\nthen\nb\ne\nable\nto\ndispla\ny\na\ntruth\ntable\nof\nX2,\nX1,\nand\nX0\nas\na\nfunction\nof\nthe\naddress.\nChange\nAnalyzer\nto\na\nTiming\nanalyzer\nand\ndispla\ny\ntiming\nw\na\nv\neforms\nsimilar\nto\nthose\npreviously\ndispla\ny\ned\non\ny\nour\noscilloscop\ne\ntrace.\nAlso\nuse\nthe\nlogic\nanalyzer\nto\nv\nerify\nthe\nop\neration\nof\nthe\nJK,\nT,\nand\nD\nip\nops.\nDemo\ny\nour\nprociency\nwith\nthe\nlogic\nanalyzer\nto\na\nT.A.\nwho\nwill\ninitial\nand\ndate\ny\nour\nP\nAL\nlisting\n(whic\nh\ny\nou\nshould\ninclude\nin\ny\nour\nrep\nort).\nThe\nfollo\nwing\nis\na\nlisting\nof\nthe\nvhdl\ninput\nle:\n\n6.111\n{\nLab\noratory\n--\nThis\ncomment\nis\nbefore\nthe\nlibrary\nand\nuse\nclauses.\nlibrary\nieee;\nuse\nieee.std_logic_1164.all;\n--\nhere\nis\nthe\nentity\nentity\nlab1\nis\nport\n(ffclk,\na0,\na1,\na2,\na3,\na4,\nlatchclk,\ndata,\ns,\nr\n:\nin\nstd_logic;\nx0,\nx1,\nx2\n:\nout\nstd_logic;\ndff,\ntff,\njkff,\nql,\nqh:\nbuffer\nstd_logic);\nattribute\npin_numbers\nof\nlab1:entity\nis\n--\nThis\nattribute\nis\nimplemented\nby\nCypress\n(and\nnot\nby\nAltera).\n\"\nffclk:1\na0:2\na1:3\na2:4\na3:5\na4:6\nlatchclk:7\ndata:8\ns:9\nr:10\"\n&\n\"\nx0:15\nx1:16\nx2:17\n\"\n&\n\"\ndff:18\ntff:19\njkff:20\nql:21\nqh:22\n\";\n--\ndon't\nforget\nto\nground\npin\n--\nhaving\nthese\ntwo\nattributes\nmakes\nthe\nequations\neasier\nto\nunderstand\n--\nit\nalso\nensures\nsymmetry\nattribute\nsynthesis_off\nof\nqh:signal\nis\ntrue;\nattribute\nsynthesis_off\nof\nql:signal\nis\ntrue;\nend\nlab1;\n--\nhere\nis\nthe\narchitecture\narchitecture\nbehavioral\nof\nlab1\nis\nbegin\n--\nx2,\nx1,\nx0\nis\n(supposed\nto\nbe)\nthe\ninteger\npart\nof\n--\nthe\nsquare\nroot\nof\na4,\na3,\na2,\na1,\na0\n--\nconcurent\nstatements\nimplementing\nx2,\nx1,\nand\nx0\nx2\n<=\na4;\nx1\n<=\n(not\na4)\nand\n(a3\nor\na2);\n--\nx0\n<=\nnot\n(((not\na4)\nor\na3)(a3\nor\n(not\na2))\nand\n(a3\nor\na1\nor\na0);\nx0\n<=\n(a3\nand\na1)\nor\n(a3\nand\na0)\nor\n(a3\nand\na2)\nor\n((not\na4)\nand\n(not\na2)\nand\na0)\nor\n((not\na4)\nand\n(not\na2)\nand\na1);\n--\na\nprocess\nimplementing\nthe\nthree\nflip-flops\nprocess\n(ffclk)\nbegin\nif\nrising_edge(ffclk)\nthen\ndff\n<=\na0;\ntff\n<=\na1\nxor\ntff;\njkff\n<=\n(a2\nand\n(not\njkff))\nor\n((not\na3)\nand\njkff);\n--\nnote\nthat\nextra\nparentheses\nare\nok\nend\nif;\nend\nprocess;\n--\nconcurent\nstatements\nimplementing\nqh\nand\nql\nql\n<=\nr\nor\n(not\nqh)\nor\n(latchclk\nand\n(not\ndata));\nqh\n<=\ns\nor\n(not\nql)\nor\n(latchclk\nand\ndata);\nend\nbehavioral;\n\n6.111\n{\nLab\noratory\n{\nThis\nis\nan\nin\nten\ntional\nblank\npage\n{"
    },
    {
      "category": "Resource",
      "title": "lab2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/09bd41368db0c3f65396b13cee7cf8fb_lab2.pdf",
      "content": "6.111\n{\nLab\noratory\nMassac\nh\nusetts\nInstitute\nof\nT\nec\nhnology\nDepartmen\nt\nof\nElectrical\nEngineering\nand\nComputer\nScience\n6.111\n-\nIn\ntro\nductory\nDigital\nSystems\nLab\noratory\nLab\noratory\n{\nFinite\nState\nMac\nhines\nHandout\nDate:\nSeptem\nb\ner\n18,\nDesign\nDue:\nOctob\ner\n2,\nChec\nk\no\nDue:\nOctob\ner\n9,\nRep\nort\ndue:\nOctob\ner\n16,\nINTR\nODUCTION\nThis\nlab\noratory\nexercise\nconcerns\nthe\ndesign\nand\nimplemen\ntation\nof\na\ntraÆc\nligh\nt\ncon\ntroller\nfor\nan\nin-\ntersection.\nY\nour\nimplemen\ntation\nof\nthis\nsystem\nis\nto\nb\ne\nb\ny\na\nsync\nhronous\nnite\nstate\nmac\nhine\n(FSM).\nThis\nlab\nis\ndesigned\nto\ngiv\ne\ny\nou\na\nmetho\ndology\nfor\ndesigning\nand\nbuilding\na\nsystem\nand\ncreating\npro\nce-\ndures\nfor\ntesting\ncompleteness.\nW\ne\nare\ngoing\nto\nmak\ne\na\ntraÆc\nligh\nt\ncon\ntroller\nsimilar\nto\nthose\nused\nin\nsome\ncoun\ntries\nin\nEurop\ne.\nOp\ner-\nation\nof\nthe\ntraÆc\nligh\nt\nis\nsomewhat\nsimilar\nto\nthat\nhere:\ny\nou\nma\ny\ngo\nthrough\nan\nin\ntersection\non\ngreen\nand\nm\nust\nstop\non\nred.\nWhat\ny\nou\ndo\non\ny\nello\nw\nis\nup\nto\ny\nour\no\nwn\nconscience.\nThis\ntraÆc\nligh\nt\ncon\ntroller\nalso\nhas\npro\nvision\nfor\na\nw\nalk\nligh\nt\nand\nfor\na\nv\nehicle\nsensor\nin\none\nof\nthe\nstreets.\nF\nor\ncon\nv\nenience\nw\ne\nwill\nrefer\nto\none\nof\nthe\nstreets\nas\n\\main\"\nand\nthe\nother\nas\n\\side\".\nThe\ntraÆc\nsensor\nis\nin\nthe\nside\nstreet.\nNormally\nthe\nside\nstreet\nhas\na\nshorter\n'green'\nin\nterv\nal\nthan\nthe\nmain\nstreet,\nbut\nif\nthere\nis\ntraÆc\nin\nthe\nside\nstreet\nwhen\nthe\ncon\ntroller\nis\nab\nout\nto\ncycle\nto\nturn\nthat\ngreen\nligh\nt\no,\nit\nwill\nextend\nthe\ngreen\nligh\nt\nb\ny\nthe\nshorter\n(side\nstreet)\ngreen\nin\nterv\nal,\nbut\nit\nwill\ndo\nthis\nonly\nonce\nand\nthen\nreturn\nto\nthe\nregular\nin\nterv\nal.\nThe\nw\nalk\nligh\nt\ncomes\non\nonly\nafter\nthe\nmain\nstreet\ngreen\nin\nterv\nal,\nand\nthen\nonly\nif\nthe\nw\nalk\nligh\nt\nrequest\nbutton\nhas\nb\neen\npushed.\nNo\nw,\nw\ne\nha\nv\ne\na\nproblem\nhere\nsince\nthe\nguys\nthat\nbuy\napparatus\nfor\nthe\nlab\nare\nkind\nof\nc\nheap\nand\nw\ne\ndon't\nha\nv\ne\na\nseparate\nw\nalk\nligh\nt.\nSo\nw\ne\nwill\nsimply\nuse\nthe\nold\nMassac\nh\nusetts\ncon\nv\nen\ntion\nand\nturn\non\nb\noth\nred\nand\ny\nello\nw\nligh\nts\nin\nb\noth\ndirections\nto\nnote\na\nw\nalk\nin\nterv\nal.\nY\nour\ntraÆc\nligh\nt\ncon\ntroller\nFSM\nis\nalso\ngiv\nen\nthe\ntask\nof\nloading\nstatic\nRAM\nlo\ncations\nwith\ntiming\nparameters\nand\nof\ndispla\nying\nthese\nparameters\nb\ny\nreading\nthe\nRAM\nlo\ncations.\nY\nou\nshould\nimplemen\nt\nand\ntest\nthe\nfunctions\nof\ndep\nositing\nand\nexamining\nRAM\nlo\ncations\nb\nefore\ny\nou\ngo\nahead\nand\ntest\ny\nour\ntraÆc\nligh\nt\ncon\ntroller.\nT\nraÆc\nLigh\nt\nCon\ntroller\nThe\nin\ntersection\nto\nb\ne\ncon\ntrolled\nis\nb\net\nw\neen\na\nbusy\n(Main)\nstreet\nand\na\nsomewhat\nless\nbusy\n(Side)\nstreet,\n(see\nFigure\n1).\nBoth\nstreets\nha\nv\ne\nordinary\n(Red,\nY\nello\nw,\nGreen)\nsignal\nligh\nts.\nThe\nin\ntersection\nis\ntted\nwith\na\nsensor\nfor\nside-street\ntraÆc\nand\nwith\na\nw\nalk\nrequest\nbutton.\nThere\nare\nfour\ntiming\nparameters,\ndescrib\ned\nin\nT\nable\n1.\nThese\nare\nthe\nbase\nin\nterv\nal\n(TBASE),\nthe\nex-\ntended\nin\nterv\nal\n(TEXT),\nthe\ntime\nfor\na\ny\nello\nw\nligh\nt\n(TYEL)\nand\na\nblink\nin\nterv\nal\n(TBLINK).\nThese\ntiming\nparameters\nare\nexpressed\nin\nn\num\nb\ner\nof\n\\tics\"\nof\na\nbasic\none\nsecond\n\\long\nclo\nc\nk\"\nwhic\nh\ny\nou\nm\nust\nsyn\nthesize.\nThe\nside\nstreet\nsensor\nis\na\nlev\nel\nindicating\nthat\nthere\nis\ntraÆc\nw\naiting.\nThis\nsignal\nshould\nb\ne\npro\nvided\nb\ny\na\nswitc\nh\non\ny\nour\nkit.\nIt\nis\nnot\nlatc\nhed,\nbut\nshould\nb\ne\nsync\nhronized.\nThe\nW\nalk\nRequest\nis\npro\nvided\nb\ny\na\npush\nbutton,\nand\nm\nust\nb\ne\nlatc\nhed.\nAdapted\nfrom\na\nlab\noratory\nproblem\nused\nb\ny\nProfessor\nRandy\nKatz\nat\nU.\nC.\nBerk\neley\n.\n\n6.111\n{\nLab\noratory\nMain Street\nSide Street\nTraffic\nSensor\nWalk Button\nTraffic Lights\nFigure\n1:\nIn\ntersection\nto\nb\ne\ncon\ntrolled\nThe\nop\nerating\nsequence\nis\nthat\nthe\nMain\nstreet\nhas\na\ngreen\nligh\nt\nfor\na\np\nerio\nd\nof\ntime\nequal\nto\nTBASE+TEXT,\nthen\nthe\nsystem\ncycles\nthrough\nthe\nnormal\ny\nello\nw/red\ncom\nbination\nto\nthe\nside\nstreet\nha\nving\na\ngreen\nligh\nt\nfor\nTBASE,\nand\nthe\nsystem\ncycles\nthrough\ny\nello\nw/red\nbac\nk\nto\nthe\nMain\nstreet\nha\nving\na\ngreen,\nand\nthe\ncycle\nis\nrep\neated.\nThe\np\nerio\nd\nof\ntime\nduring\nwhic\nh\nthe\nMain\nstreet\nhas\na\ngreen\nligh\nt\nshould\nb\ne\nregarded\nas\nt\nw\no\ntime\np\nerio\nds,\nTBASE\nand\nTEXT.\nIf,\nat\nthe\nend\nof\nthis\nin\nterv\nal\nthere\nis\na\nW\nALK\nrequest\np\nending,\nthe\nsystem\ngo\nes\nto\nthe\nMain\ny\nello\nw/Side\nred\nfor\nTYEL\nand\nthen\nto\nW\nALK\n(all\nred\nand\ny\nello\nw\nligh\nts\non)\nfor\nTEXT\nwhic\nh\nw\ne\nwill\ntak\ne\nto\nb\ne\nthe\nlength\nof\nthe\nW\nALK\nin\nterv\nal.\nA\nt\nthe\nend\nof\nthis\nthe\nsystem\ngo\nes\nto\nSide\ngreen.\nNormally\n,\nthe\nside\nstreet\nsta\nys\ngreen\nfor\nTBASE.\nIf\nat\nthe\nend\nof\na\ngreen\nin\nterv\nal\nthe\ntraÆc\nsensor\nsho\nws\nthere\nis\nstill\ntraÆc,\nthe\ngreen\nligh\nt\nsta\nys\non\nfor\nan\nadditional\nTBASE.\nNote\nthat\nthe\nW\nALK\nrequest\nis\nhandled\nonly\nafter\nthe\nMain\nstreet\nhas\nb\neen\ngreen.\nIf\nthere\nis\na\np\nending\nW\nALK\nrequest\nat\nthe\nend\nof\nthe\nMain\ny\nello\nw/Side\nred\nin\nterv\nal,\nit\nshould\nb\ne\nhandled\nthen.\nNote\nalso\nthat\nthe\nW\nALK\nrequest\nm\nust\nb\ne\nexplicitly\nUNlatc\nhed\nb\ny\ny\nour\ncon\ntroller,\nat\nthe\ntime\nthe\nW\nALK\nsignal\nis\nserviced.\nThe\nW\nALK\nligh\nt\nshould\nsta\ny\non\nfor\nonly\nONE\np\nerio\nd\nof\nTEXT\nat\na\ntime,\nand\nshould\nignore\nan\ny\nW\nALK\nrequests\nmade\nwhile\nthe\nW\nALK\nligh\nt\nis\non.\nFinally\n,\nas\nhapp\nens\noften\nin\nMassac\nh\nusetts,\nlate\nat\nnigh\nt\nor\nwhen\nsomething\nin\nthe\nsystem\nis\nnot\nw\norking,\nthe\nligh\nt\nm\nust\ngo\nin\nto\na\n\\blinking\"\npattern.\nThis\nshould\nsho\nw\nthe\nY\nello\nw\nligh\nts\non\nthe\nMain\nstreet\nand\nred\nligh\nts\non\nthe\nside\nstreet,\nblinking\nON\nand\nOFF\nwith\nthe\ntiming\nin\nterv\nal\nTBLINK\nfor\nb\noth\nON\nand\nOFF\np\nerio\nds.\n\n6.111\n{\nLab\noratory\nSp\necications\nA\nsimple\nblo\nc\nk\ndiagram\nof\nthe\ntraÆc\nligh\nt\ncon\ntroller\nis\nsho\nwn\nFigure\n2.\nA\nmore\ndetailed\nfunctional\nblo\nc\nk\nController\nLight\nTraffic\nSensor\nWalk Request\nGO\nReset\nRm\nYm\nGm\nRs\nYs\nGs\nFigure\n2:\nT\nraÆc\nLigh\nt\nBlo\nc\nk\nDiagram\ndiagram\nis\nsho\nwn\nin\nFigure\n3.\nNote\nthat\ny\nou\nma\ny\nt\nas\nm\nuc\nh\nof\nthis\nfunctionalit\ny\nin\nto\na\nCPLD\nas\ny\nou\nwish\nand\ncan.\nY\nou\nMUST\nuse\na\nCPLD\nfor\nat\nleast\nthe\nnite\nstate\nmac\nhine\n(FSM).\nThe\nsync\nhronizer\nconsists\nsimply\nof\nD\nip-ops.\nThe\nDIVIDER\nis\na\nseries\nof\ncoun\nters\ndriv\nen\nb\ny\ny\nour\ncrystal\noscillator\nand\npro\nduces\nthe\nFSM\nclo\nc\nk\n/CLK,\nand\na\nm\nuc\nh\nslo\nw\ner\nclo\nc\nk,\n1/SEC,\nwhic\nh\nis\nused\nto\ndriv\ne\nthe\nTIMER.\nThe\nTIMER\nis\na\ncoun\nter\nunit\nwhic\nh\ncoun\nts\nfor\na\nn\num\nb\ner\nof\n1-second\nin\nterv\nals\nwhic\nh\nare\nsp\necied\nb\ny\ndata\nstored\nin\nthe\nstatic\nRAM.\nThe\ninput\nand\noutput\nsignals\nfor\nthe\nFSM\nare\nlisted\nand\ndescrib\ned\nin\nT\nable\n1.\nY\nou\nma\ny\nuse\nan\ny\np\nolarit\ny\ny\nou\nlik\ne,\ne.g.,\n/WE\nor\nWE\nas\ny\nou\nc\nho\nose.\nThe\nfour\nfunctions\nsp\necied\nb\ny\nthe\nt\nw\no\nfunction\nswitc\nhes\nare\nalso\nlisted,\nand\nthe\nmeaning\nof\nthe\nfour\nRAM\nlo\ncations\nis\ngiv\nen\nin\nthe\ntable.\nThe\nv\nalues\nstored\nin\nthe\nRAM\nrepresen\nt\ntime\ndurations\nin\nseconds.\nRemem\nb\ner\nto\nwire\nun\nused\nRAM\naddress\nlines\nto\nGND.\nT\nraÆc\nSensors\nT\nraÆc\nsensors\nburied\nb\neneath\nthe\nside\nstreet\nindicate\nthe\npresence\nof\na\nv\nehicle\no\nv\ner\nthe\nsensor.\nThe\nsensor\nhas\nan\nadded\nfeature\nin\nthat\nthe\nsensor\noutput\nsta\nys\nasserted\nfor\na\nshort\ntime\nafter\na\nv\nehicle\nhas\ngone\npast\nthe\nsensor.\nThis\nis\nimp\nortan\nt\nwhen\na\ncon\ntin\nuous\nbunc\nh\nof\nv\nehicles\ngo\nes\no\nv\ner\nthe\nsensor.\nWithout\nthe\ndela\ny\n,\nthe\nsensor\noutput\nw\nould\npulse\nonce\np\ner\nv\nehicle.\nWith\nthe\ndela\ny\nthe\nsensor\nsignal\nis\nasserted\nat\nthe\nb\neginning\nof\nthe\nbunc\nh\nand\nsta\nys\nasserted\nun\ntil\na\nshort\ntime\nafter\nthe\nlast\nv\nehicle\nin\nthe\nbunc\nh\nhas\ngone\no\nv\ner\nthe\nsensor.\nPlease\nremem\nb\ner\nthat\nv\nehicles\ndo\nnot\nha\nv\ne\nan\ny\nw\na\ny\nof\nkno\nwing\nthe\nprecise\ntiming\ndetails\nof\ny\nour\nnite\nstate\nmac\nhine\nsystem\nclo\nc\nk.\nThat\nis,\nthe\nsensors'\nsignals\nshould\nb\ne\nconsidered\nto\nb\ne\nASYNCHR\nONOUS\nto\ny\nour\nsystem\nclo\nc\nk.\nThe\nW\nalk\nRequest\nbutton\nis\npushed\nonce\nand\nm\nust\nb\ne\nlatc\nhed\nto\nform\nthe\nWR\nsignal,\nwhic\nh\nis\nto\nb\ne\ncleared\nas\nso\non\nas\nthe\nW\nALK\nin\nterv\nal\n(RED\n+\nYELLO\nW)\nb\negins.\nWhile\nit\nis\np\nossible\nto\neect\nthis\nsync\nhronization\nb\ny\nb\neing\nclev\ner\nand\nabsorbing\nthe\nsync\nhronizing\nfunction\nwithin\ny\nour\nFSM,\nit\nis\nstrongly\nsuggested\nthat\ny\nou\nexplicitly\nsync\nhronize\nthe\nsensor\nsignals\n(or\nstretc\nhed\n\n6.111\n{\nLab\noratory\nFSM\nInput\nSignal\nDenitions\nRESET\n(from\na\nswitc\nh)\nGOSYNC\n(from\nSYNCHR\nONIZER)\nF1\nand\nF0\nDetermine\none\nof\nfour\ndieren\nt\nfunctions\n(from\nswitc\nhes)\nL1\nand\nL0\nSp\necify\na\nlo\ncation\nin\nthe\nSRAM\n(from\nswitc\nhes)\nA\nUX\nAuxiliary\ncon\ntrol\nswitc\nh\n(Sync\nhronized\nbut\nnot\nlatc\nhed)\nWR\nW\nalk\nRequest\n(F\nrom\nRe-settable\nLatc\nh\nfed\nb\ny\npush\nbutton)\nEXPIRED\nSignals\nwhen\na\npre-sp\necied\ntime\nhas\nelapsed\n(from\nTIMER)\nFSM\nOutput\nSignal\nDenitions\nA1\nand\nA0\nSp\necify\nan\naddress\nin\nthe\nSRAM\n(to\nSRAM\naddress\nlines)\nWE\nDriv\nes\nv\nalue\nfrom\nswitc\nhes\non\nto\nbus,\nwrites\nin\nto\nSRAM\nST\nAR\nTTIMER\nResets\n1-second\nclo\nc\nk\nand\n1-second\nincremen\nt\ncoun\nter\nGm,\nYm,\nRm,\nGs,\nYs,\nRs\nT\nraÆc\nligh\nt\ncon\ntrol\nsignals\nT\nable\nof\nF\nunctions\nF1\nF0\nExamine\nmemory\nlo\ncation\nsp\necied\nb\ny\naddress\nswitc\nhes\nStore\nnew\nv\nalue\nin\nmemory\nlo\ncation\nof\naddress\nswitc\nhes\nRun\ntraÆc\nligh\nt\nLigh\nt\nBlinks\nV\nalues\nStored\nin\nSRAM\nNominal\nA1\nA0\nV\nalue\nTYEL\nTime\nfor\ny\nello\nw\nligh\nt\nTBASE\nBASE\n(Green)\nin\nterv\nal\nTEXT\nextended\nin\nterv\nal\nTBLINK\nTime\nligh\nt\nsta\nys\non\n(and\no\n)\nwhile\nblinking\nT\nable\n\n6.111\n{\nLab\noratory\nSynchronizer\n>\nLatch\n>\nRESET\nL0\nL1\nF0\nF1\nDivider\nXtal Osc\nLight\nControls\nC0-C3\nSwitches\nHex LED's\nFSM\nA0\nA1\nTimer\nSensor\nGo\nRAM\nwe\nI/O\n>\nwe\nA0\nA1\n/CLK\n/CLK\n1/sec\nExpired\nStartTimer\nWalk\nReq\nRe-\nSet\nFigure\n3:\nCon\ntroller\nBlo\nc\nk\nDiagram\nsensor\nsignals)\nwith\nD\nip-ops.\nThese\nD\nip-ops\ncan\nb\ne\npart\nof\na\nCPLD\nif\ny\nou\nc\nho\nose.\nY\nour\nsystem\nclo\nc\nk\nis\nto\nb\ne\nderiv\ned\nfrom\na\ncoun\nter\nwhic\nh\nis\ndriv\nen\nb\ny\na\ncrystal\noscillator\nsuc\nh\nas\nused\nin\nLab\noratory\n1.\nTiming\nin\nterv\nals\nshould\nb\ne\nderiv\ned\nb\ny\na\nprogrammable\ncoun\nter\nwhic\nh\nis\nclo\nc\nk\ned\nb\ny\nan\nappro-\npriate\nfrequency\nand\nwhic\nh\nis\ninitialized\nb\ny\nsignals\nderiv\ned\nfrom\ny\nour\nFSM.\nBasically\n,\nthe\ntime\nin\nterv\nals\nare\nto\nb\ne\ndetermined\nb\ny\nloading\nthe\nprogrammable\ncoun\nter\nwith\na\nn\num\nb\ner\nand\ndetecting\nwhen\nthe\ncarry\nout\nsignal\nis\nasserted.\nRemem\nb\ner\nto\nreset\ny\nour\nTIMER\nclo\nc\nk\nwhen\nstarting\nthe\nTIMER.\nA\npartially\ncompleted\nVHDL\nsource\nle\nis\nlo\ncated\nin\nthe\n6.111\nlo\nc\nk\ner.\nCop\ny\nit\nto\ny\nour\nlo\nc\nk\ner\nb\ny\nexecuting\ncp\n/mit/6.111-nfs/v\nhd\nl/\nlab\n2.\nf02\n/s\ntop\nli\ngh\nt.v\nhd\nchmod\nstoplight.vhd\nThe\nVHDL\nsource\nle\npro\nvided\nis\nnot\ncomplete\nenough\nto\ncreate\na\nCPLD\nle\ny\net.\nF\nor\nexample,\nit\ndo\nes\nnot\ninclude\nthe\ncomplete\nFSM\nsp\necication.\nPro\ncedures\nand\nRequiremen\nts\nT\no\npro\nvide\nthe\np\nossibilit\ny\nfor\ndemonstrating\ny\nour\ncon\ntroller\non\na\n\\real\"\ntraÆc\nligh\nt,\ny\nou\nshould\npro\nvide\na\nspace\nfor\nus\nto\nplug\nin\na\nDIP\ncable\nto\ny\nour\nkit.\nThe\nsignals\nthat\nshould\nb\ne\npresen\nt\nare\nsho\nwn\nin\nFigure\n4.\nDo\nNOT\nwire\nan\nything\nto\nthe\nrigh\nt\nhand\nside\nof\nthis\nspace:\nthe\ndip\ncable\nwill\nha\nv\ne\nthe\nsignals\nsho\nwn\nin\nparen\ntheses\nso\nthat\nit\nwill\nw\nork\nev\nen\nif\nplugged\nin\nupside\ndo\nwn.\n\n6.111\n{\nLab\noratory\n1.\nBefore\npro\nceeding\nwith\nthe\ndetails\nof\nthe\nFSM\ndesign,\ny\nou\nshould\ndesign\nthe\ncircuitry\nneeded\nto\nsync\nhronize\nthe\nGO\nsignal\nto\nthe\nsystem\nclo\nc\nk.\nSince\ny\nou\nw\nan\nt\nthe\nfunction\nsp\necied\nb\ny\nF1\n-\nF0\nto\nb\ne\np\nerformed\nonly\nonce\np\ner\nassertion\nof\nthe\nGO\nsignal,\nit\nwill\nb\ne\ncon\nv\nenien\nt\nto\nha\nv\ne\nthe\nsync\nhronized\nGO\nsignal\nasserted\nfor\nexactly\none\np\nerio\nd\nof\nthe\nsystem\nclo\nc\nk.\n2.\nPro\nvide\ntiming\ndiagrams\nwhic\nh\ncompletely\ndemonstrate\nthe\nop\neration\nof\neac\nh\nfunction\nof\ny\nour\nFSM.\n3.\nPro\nvide\na\ncomplete\nlogic\ndiagram.\n4.\nUse\nVHDL\nto\ngenerate\nall\ncom\nbinational\nlogic\nequations\nfor\nall\nof\nthe\ncon\ntrol\nsignals\nrequired\nb\ny\nthe\nFSM\nand\nthe\ndata\npaths,\nas\nw\nell\nas\nthe\nD\ninputs\nof\ny\nour\nstate\nv\nariables.\nY\nou\nshould\ndiscuss\ny\nour\ndesign\nwith\na\nmem\nb\ner\nof\nthe\nteac\nhing\nsta\nb\nefore\nprogramming\ny\nour\nCPLD.\n5.\nDemonstrate\ny\nour\nen\ntire\nsystem\nand\nall\nof\nits\nfunctions\nto\na\nmem\nb\ner\nof\nthe\nteac\nhing\nsta.\nHa\nv\ne\nall\nof\ny\nour\ntiming\ndiagrams,\nstate\ndiagrams,\nVHDL\nle,\nand\nlogic\ndiagrams\na\nv\nailable\nfor\nthis\ndemonstration.\n+5\nV\nGreen\nStreet\nYellow\nStreet\nRed\nStreet\nGreen\nStreet\nYellow\nStreet\nRed\nStreet\nGround\nFigure\n4:\nT\nraÆc\nSignal\nLigh\nt\nConnections\nLab\noratory\nRep\nort\nY\nou\nare\nto\npro\nvide\na\nlab\noratory\nrep\nort\nwhic\nh\nmeets\nthe\nrequiremen\nts\nsp\necied\nin\nthe\n\\Rep\nort\nGuide\"\nhandout.\nY\nour\nrep\nort\nshould\ninclude\nthe\nfollo\nwing:\ndata\npaths,\nan\nFSM,\nVHDL\nsource\nle\nand\nthe\ncorre-\nsp\nonding\nstate\nle,\none\nlogic\ndiagram,\nand\nall\ntiming\ndiagrams.\nY\nou\nshould\nalso\ninclude\nsome\ntext\ndescribing\ny\nour\ndesign\nand\nmetho\nds\nof\nimplemen\nting\nit.\nThe\nrep\nort\nshould\no\nw,\nb\ne\nw\nell\norganized,\nand,\nmost\nimp\nor-\ntan\ntly\n,\nb\ne\ncomplete.\nV\nerb\nosit\ny\nis\nnot\na\nrequiremen\nt.\nDesign\nNotes\nData\nsheets\nfor\nthe\nSRAM\nare\nattac\nhed.\nPLEASE\nread\nthe\ndata\nsheet\ncarefully\nas\nthis\nc\nhip\nis\neasily\ndamaged\nb\ny\nincorrect\nuse\n(wiring).\nASK\nQUESTIONS\nIF\nYOU\nARE\nNOT\nSURE!\nThe\nhas\na\ntristate\nInput/Output\n(I/O)\nbus.\nReread\nthe\nhandout\n\\Gates,\nSym\nb\nols,\nand\nBusses\"\nwhic\nh\np\nertains\nto\nbussing.\nThe\nI/O\nbus\nof\nthe\nMUST\nb\ne\ndriv\nen\nb\ny\na\ntristate\nbuer;\nuse\nthe\n74LS244\nincluded\nin\ny\nour\nkit.\nT\nristate\nbus\ncon\nten\ntion\no\nccurs\nwhen\nt\nw\no\n(or\nmore)\ndriv\ners\nare\nactiv\ne\nat\nthe\nsame\ntime.\nThe\ntristate\noutput\nis\nenabled\nwhen\nthe\n/OE\ninput\nis\nasserted\nlo\nw,\nthe\n/CS\nis\nasserted\nlo\nw,\nand\nthe\n/WE\nline\nis\nhigh.\nWhile\nit\nis\ntrue\nthat\nman\ny\nlogic\ndesigners\nallo\nw\ntristate\nbus\ncon\nten\ntion\nto\no\nccur\nfor\nshort\ntimes\n(due\nto\nc\nhip\ndela\nys),\nit\nis\nnot\na\ngo\no\nd\nidea.\nF\nor\nthis\nlab\noratory\nexercise\ny\nou\nare\nto\nensure\nthat\nNO\ntristate\nbus\ncon\nten\ntion\ncan\no\nccur.\nThe\nactual\nwrite\npulse\nis\nthe\nAND\nof\nb\noth\nthe\n/CS\nand\nthe\n/WE\nasserted\nlo\nw.\nIt\nis\nessen\ntial\nthat\nthe\naddress\nlines\nto\nthe\nSRAM\nnot\nc\nhange\nwhen\nthe\nwrite\npulse\nis\nactiv\ne.\nOtherwise\ny\nou\nma\ny\nwrite\nto\nm\nultiple\nlo\ncations!\n\n6.111\n{\nLab\noratory\n/ES\n/WE\n/CS\nT\nT\nT\nFigure\n5:\nExample\nTiming\nDiagram\nfor\nSRAM\nI/O\nWhile\nthe\nis\nadv\nertised\nas\na\nstatic\nRAM,\na\nmemory\ncycle\nis\nactually\ninitiated\nwhenev\ner\nANY\naddress\nline\nc\nhanges.\nTh\nus,\nthe\naddress\nlines\nma\ny\nNOT\nb\ne\ntristated\nwhenev\ner\nthe\n/CS\nis\nasserted,\nas\nthe\nin\nternal\ntiming\ncircuitry\nis\nactuated\nb\ny\nnoise\non\nthe\nHI-Z\naddress\nlines.\nOne\nw\na\ny\nto\nensure\nb\noth\nthat\ntristate\nbus\ncon\nten\ntion\ndo\nes\nnot\no\nccur\nand\nthat\nthe\naddress\nlines\ndo\nnot\nc\nhange\nwhen\nthe\nwrite\npulse\nis\nactiv\ne\nis\nto\nconnect\nthe\nsystem\nclo\nc\nk,\n/CLK,\nto\nthe\nc\nhip\nselect\npin;\nsee\nFigure\n5.\nThe\naddress\nlines\ndo\nnot\nc\nhange\nun\ntil\nafter\nthe\nrising\nedge\nof\n/CLK.\nThe\n/WE\nline\ncan\nthen\nb\ne\npro\nvided\nb\ny\ny\nour\nFSM.\nAs\nlong\nas\nthe\n/WE\nline\nis\nlo\nw\nprior\nto\n(or\nconcurren\nt\nwith)\nthe\nc\nhip\nselect\nb\neing\nasserted,\nthen\nthe\nSRAM\nwill\nnot\ndriv\ne\nthe\nI/O\npins.\nThe\ncon\ntrol\nline\nto\nthe\ntristate\ngate\nconnected\nto\nthe\nswitc\nhes\ncan\nalso\nb\ne\nan\noutput\nof\ny\nour\nFSM,\nbut\nit\nshould\nalso\nb\ne\ngated\nwith\nthe\nsystem\nclo\nc\nk.\nDuring\nT1\ndata\nfrom\nthe\nSRAM\nwill\napp\near\nat\nthe\nI/O\npins,\nand\nduring\nT2\nthe\ndata\nfrom\nthe\nswitc\nhes\nwill\napp\near\nat\nthe\nI/O\npins.\n(/ES\nis\nthe\ntristate\nenable\nfor\nthe\nswitc\nhes.)\nY\nou\nshould\nnot\nuse\nmonostables\n(74LS123)\nto\ngenerate\nthe\n/CS\nor\n/WE\ninputs\nto\nthe\nSRAM."
    },
    {
      "category": "Resource",
      "title": "lab3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/45bc5c8bfa6f1ca2080f9d85fef248f3_lab3.pdf",
      "content": "! \"#$%\n&('*)+-,/./01'2.4357689':;.<,>=?:*+8@62BA=?2C'*'*,D=?2BAE+2BFHG301)IC.<'*,KJ :*=9'2B:;'\nLM?NNNPOQ\n2.<,D3FBI:;.<3,/RS&K=9A=?./+8JR T<.<'0TVU+-W!3,>+-.<3,/R\nUX+-WY3,D+-.<3,/R[Z\n\\[]_^`]badcef4]gebadhi\njk#lm@n*oqprts-uDvxwKy@z{j|r<ldk}v~!X{>{gm<{>>;\n>|k}Xn*o4;u>k}XBz{|mvk#o4~!X{>{gm<{>>;\nQ\nTDT/IC'FK:;.<3WY'*,q!-\n\n2B+8?3ASGC':D\nO\n3-7K:;.<3WY'*,(\nN\n!-\n&q'TD=9A2K:;.<3WY'*,(!-\nUX+-WHGB':/\nO\n3-43 '0¡WY'*,\nL\n!-\n¢V'*)Y3,/.V&KIC'q3d '0£WY'*,\nN\nZ!-\n¤*¥§¦£ S(c)\\«aH¬E¦£¤{(c)1¥\n\n=?TV8?+-W[A=? 'T4R3I§./C'(r)3)B)Y3,/./I2B=9. RS.<3°FB'T/=9A2:;32T<.<,DIB:;.*Y+2BF«.<'T<.K+,D'+T<32B+-W89R±:;301)8?';2«F=9A=9./+8\nT<R T<.<'0\nM\n\nFC'T/=9A23,D'* =9'* q=9./3+\nPM\n\nM\n=?T .<3μWY'«C'8?F+-5_.<'*,R3I¶B+d '·:;301)8?'*.<'F./C'[=?2B=?./=?+8FB'T/=9A2\n)Y3,/./=932\nM\n\n5_.<'*,./C'[FB'T/=9A23,/'* =9'* (r) R3I¶0+R1)B,/3 :;'*'F 4=9./1./C'«o`2B+8FC'T/=9A2@:;32BT<.<,DI:;./=932.<'T/./=?2CAC\nFC'0132T<.<,D+-./=932Y+2BFH./C'E,/'»IB=9,/'F§8?+-W§,D'*)!3,D.\nM(\nB'*,/'E=1⁄4Tq+2H'+-,D8?=?'*,(:>C':/\nO\n3-135./C'1+2B+893AS)!3,D./=932·35\nR3IC,481⁄4+-W!3,>+-.<3,/R\nM\n\nB')`IC,/)Y3T<'35YUX+-W1⁄2Z(=?T.<3P5g+0=?8?=1⁄4+-,D=93⁄4*'R3I 4=9./E./C'FC'T/=9A2E35Y+K:;301)89';2 T<RT/.<'0\nM\n\n8?T/3(./=?T7=?TR3IC,\n3)B)Y3,/./IB2=9. R[.<3±WY':;301'15g+0=?8?=1⁄4+-,q 4=?./§./B' IT<' 35./C'¿7AA\n\nWY3+-,DFBT\nM(r)A\n3Iμ+-,/'T<.<,/32BA89R['2B:;3IC,>+-A'F\n./C3ICAA2C3.P,/'»IB=9,/'F.<3§IBT<'+2μ¿7AA\n\n=1⁄42BT<.<'+FA35¢\nKA\nX¢V\nA\nXA\n\nUXT*GAU&(T@'*./:\nM1A\n3I 4=1⁄48?87+8?T<3\nB+d '(r).<31⁄2IBT<'P+2B+8?3A.<3FB=9A=9./+8+2F«FB=9A=9./+8Y.<3+2B+8?3A1⁄2:;32 '*,D.<'*,DT\nM\nC'P8?+-W[B+T.Æ 31⁄2:>C':/\nO\n3-T*`./B'PoB,DT<.\nWY'=?2CA[./B'°+2B+893A§)Y3,/./=932A+2FA./C'ST<':;32BFCWY'=?2CA[./C'SFB=9A=9./+8 )+-,/.\nM·\nB'°FB=9A=?./+8)+-,/.ET/C3IB8?FμoB.£=?2.<3\n'=9./C'*,P35./C'¿7AA\n\nT¡32A./C'1⁄2¿7AA\n\nWY3+-,DF\nM\nC'1+2B+893A§T<':;./=932μ0EIBT<.PWY'1FC'T/=9A2B'FH+2Fμ:DC':D'FA3-\nWY'*5b3,D'(r)./C'(r),/'T/.V357./C'¡8?+-WH=?TV:;301)8?'*.<'F\nM\nA89'+T<'¡+8?T/3)+R[+-.<.<'2./=932§.<31⁄2./C'£FC'*WICAA=?2BAT<.<,D+-.<'*AR« 4B=1⁄4:D\n=?TFC'TD:;,D=9WY'F«8?+-.<'*,4=?2±./=?TFC3 :*IB01'2.\nM\nE\n¥(c)1⁄2¦£EE(c)fE¬\nE\na[¦£¤{(c)¥\n\n=?T)B,/3W89'0[{ qB=?89'2C3. =?01)Y3T/T/=?W89'=1⁄4T2B3..<,D=9 =?+8\nMXQ\n.=?T7T/ICWT/./+2./=?+81⁄489R¡013,/'FB=?I1⁄2:*IB89.=?2 :;301)89';2C=9. R\n./B+2±./C'P),/'* =?3IBT8?+-W±';2'*,D:*=1⁄4T<'T\nMA\n3I«+-,/'(r)T/.<,/32CA89RSIC,/A'F±.<3T<./+-,/../=?2C =?2CA£+-WY3IC../B=1⁄4TFB'T/=9A2±./+T<±+T\nT<332[+TV)Y3T/TD=9W89'\nM\n\n=?TKB+2BFC3IC.()B,/3 =1⁄4FC'TKT/ICWT<./+2./=?+8AIB=?F+2B:;' 5b3,PR3IC,(r)FB'T/=9A2\nM¡I\n3d '* '*,R3I+-,/'P\n\n,/'»IB=9,/'F\n.<35_38?893 I./C'T<'¡TDICAA'T<./=932BTV';2 +:;./89R\nMA\n3I·+-,/'P,D'»IB=?,/'F±.<31⁄2IBT<'(r)+2\nKI\n&Ð+2F[+1&\nI{\n:;32 '*,/.<'*,\nM\nA\n3I1+-,/''2B:;3IC,>+-A'F£.<3(r)IT<'./B'¿7AA\n\nWY3+-,DFBT+2BFE.<3PT/=?0EIB8?+-.<'R3IC,FC'T/=9A2£WY'*5b3,/'.<'T<./=?2BAqR3IC, FB'T/=9A2\nM\nN'£ 4=?8?8Y)B,D3d =?FC'B+-.qTDIB=9./+-W89'PT<./+-./=?32BTV./C,D3ICAC3IC.V./B'¡8?+-W@T/3IC,D:;'TV35+1 -+-,D=9'*.ÆR±35 +2B+893A1⁄2T/=?A2B+8?T\nM\nA\n3I«0+dR1⁄2 =9'* O./C'K,/'T/IB89./T35)B,/3 :;'T/T/=?2CA£WR°R3IC,FB=9A=9./+8`o89.<'*,WR1⁄23WT/'*,/ =1⁄42CA¡ + '*5_3,D0T q=9./±+2°3TD:*=?8\nO\n893T/:;3)Y'4+2F+8?T<3(r)WR18?=?T<.<'2=?2CAK.<3(r)./C'0O 4=9./+01)`8?=9oB'F1T<)Y'+-'*,DT 4B=?:>1+-,/'q+d {+=1⁄48?+-W89'V+-../C'\nQ\n2BT<.<,DIB0'2.\n¢V330OFC'T<\nMKA\n3Iμ0+dR§+8?T/3So`2BF§=?.(=?2.<'*,/'T<./=1⁄42CA°.<3[:*+TD:*+FC'1R3IC,(r)UX+-WμZ° 4=9./H./C3T/'E35R3IC,P5_,D=9'2BFBT4.<3\n3WT<'*,D './B',D'T/IB89./T35013,/':;301)`8?=?:*+-.<'F =?01)I8?T<',/'T<)Y32BT/'T\nM\nG+2£R3I IB2FC3q qB+-.+2 =?0)IB8?T<',/'T<)Y32BT<'\n:*+2·FB3O\n\nO×9ØØØ£UUUUCYSÞ\nß\na¡a«aKaa«a*a(a\næ ceCee/ei/iEi?ie<cPieBi1⁄4ð?n¡eKoeo>oBi?oCo÷4oBi1⁄4oDo£÷4i?ð?ðeo*o;o*øBeeoBeð9cuPi/i?uoBeð?ieoBn øBe/c nBeBo;oeKuð9e<o*e/on£uo*eDi/i9co cu\ne/oBi?ii?oCø`eCei/i9uoeðyþVoCo*e/o(e-e/oPoeoy1⁄2÷edyie<c1eo*o;co1øð?i1⁄4i/o1⁄2e/oi?ie/ei/i`yKi9ui9e/eð!uð?e<o*eDio*eoSiYoqi1⁄4o1øð9oo1ooe<on\niyHo;coucð?eCe/i9conBiYo*e/ooBo;o1oeBe-e/i9coiXeoBnμeð1⁄4i<c«iy\n7þ Bei<e CceCeDi9o*e£þXeDeoi<ubce>o>yo÷4i?ð1⁄4ðo>oCcci<o\ne/oCo 7i?oBi?e<o#o1ø`eBð?i<oVoi<øYcoBi/oo;coucð?eBe/i9co·e-øBøe/ceoDoy\n\ni/i1⁄4o1øð9o@cuo*eDeð?ðið9c o/inBi?e-ue>eo\ni?i£i/oCcd÷qoAi?o 7i9ueBe/o! -y\"oSøBe/cdu i?nCoe·uð9o7i?o1øeð?i<oi*yoe/ð#÷4oBi1⁄4oDo\no;coe/ei?oBieð?ð!i/i$ e<o*oo1⁄2cu@e/oBo(i?oøeBð?i<oeDoi<øYcoBi<oiyceSe-eDo(eDoeBi?e/one<c nCoo1coBi/e<eDe-e<oyæ ce±oey°i?o1øð9ooooe\nenBnBi?e/i9coBeð i?oøeBð?i<o1eDoi<øYcoBi<oi(r)cuVeoyμð9ooCue/o1eoBnCo;coe<ooe yce1o>oCcci<oy·þVoCo%'&)(*&þ\ni/i9uoBeð+_ube/co\ne\ni<÷4i?e/oDo,i/oBceBð?n i?oBi9e/i1⁄4eð?i.-*oyceCeoeo>oBi?oCoVeie/oei9e/on eoBni<e/e-eDeo;coucð?ui?oBuPe/oCo4i?oCø`eCeeoeð9cu¡i/i9uoeð ÷4i9e/o\ne/oCo¡i1⁄4o1øeBð?i/o4e/oi<øYcoBi/oP÷4oBi?o>o«i?ii<oð9oo;e<on·iy±i<÷4i9e/o>oCoi*y\nDigital\nFilter\nAnalog In\nImpulse Response\nSelection Switches\nAnalog Out\nReset\ni?ueCe/o/ 1032(ooBo*eDeð54ð9c o/i6Ki?e-ueDeo\no o7$ øeoBn8 i?ueCe/o -y(e<cSøBe/c nBeBo;o(r)e/oCoEið9c o/i[ni?e-ueDeo\ncu9 7i9ueCe/o\nß\ny:o1nCc°e/oBi?i(i/i?o1øð?oPo7$øeoi/i9co\ne<c£i1⁄4i<cð?e-e<oVe/oCo(eoBeð9cu(r)e<cEnBi9ui9e/eð;\n<\n=eoBn1⁄2nBi?ui9e/eðCe<c£eoeð9cu<>\no;couo*eDi/i9co°ubeDcoÐe/oCo4o;coøð9o7$Ci9e/i9oi\ncue/oConBi9ui9e/eð7o*i9e>o*eBi9e<e/yy\n\niKyceμ÷4i?ð?ði<o*o1⁄2ð?e-e<o*e?@÷o1eDoo;coo1ooBnAe/oBe-e¡yceμeBi<o1e«i/i?oBuð9o oi9uoe@i`i9ePnBe-e/e\nieBi e<cAi!ce/o\ne/oene/oCo\n<\neoBn3÷Ve>i9e<o«e<cμe/oCoA<>\nyCBqce<o[e/oBe-eyce\no;ceBð?n3uo*eDi9u_y3eoBnnCoo1coBi/e<eDe-e<o\nAD558\nD/A\nFinite\nImpulse\nResponse\nA/D\nAD670\nAnalog Out\nAnalog In\nReset\nImpulse Response\nSelection Switches\n7i9ueCe/o\nß\n\noBeð?cu\n<\n(i?ui9e/eð(o*ø`e-eDe-e/i9co\ne/oCo1⁄2o;ceDe/oo;e¡øYo*e/u_ceDoeoBo;o1cuyceBe\n<\neoBnD<>\niy§øBeDcdu i?nBi?oCu«e«e>e-e/oCo*e£i/i1⁄4o1øð9o ugi/oO÷4oBi1⁄4oDoøBeDcdu i?nCoi\ne/oCo e-øBøBe/cøeDi?e-e<o£o;coe<e/cð7i/i9uoeð?i*y\n\ne(yceCePeoBeð9cu±oDoBoo/iE@c11iYoEøBe/o*øe-e/on·e<c±o7$øð1⁄4ei?o·oCc÷\nyceCe(ni9ui9e/eð\ni<y i<e<oo\nuo*eDi9uBoie/oCo4e/i?o1⁄2i?oCuPcuoeoDo±eoBeð?cu¡cøYo*eDe-e/i9co°eoBn1⁄2nCcoioCcee/oð?y£co°e/oCo4ugeo;ee/oe-ee¡e<eDi?i<e/e-e<oqieBi\noCcð?nii9e/iVnBe-e/eneCoKe<c°i9e/io*e-øeo*i?e/eoBo;o¡o*uoo·÷4oCoo[i9eVi1⁄4ioCceViYoi?oCu1nCeDi?uooy\n\nFG.HHHJILK;MON%P\nQ\nR%S=S=T%UR6VJW\nXZY\\[]_^`badcadeO[^fad`)gihj\\`i[=^kZlmngihoYOhqpde6gbYO[=asrt_j\\pd`b['ub[`itvhqw\\`b[`x^w\\e6gihoj\\`i[=`by'a.gbczY\\[`){|huZgbY\\[=Y\\a.}qY\nhuzeO[u]_a.gb`h{3gbYO[/kZlm~^e\\eOub[`b`gih`i[p.[c7g=gbYO[/^c7gbj_^p9adrt,j\\pd`i[ub[`itvhqw\\`i[fgbY\\^1ghqjj\\`i[/+w*k:+mad`\nj\\`i[eAgiho`igihub[=gbY\\[t\\ub[`i[wEg'^w\\e6t\\uz[a.hqj_`x`b^rt_p.[1^pdjO[`Zh{;gbYO[JadwOt_jOg)^w\\^p.h}`ba.}qw\\^p#\nXZY\\[Jr/^ihu+`b[EjO[w_c7[h{htv[uz^1gba.hqw\\`:ad`'`zYOh?y'wadw!a.}qj\\ub[JQ'a.uz`bg,adw\\adgbad^pda.[^`:ub[Ej_a.ub[e\\gbY\\[w!y)^a.g\nConvolve\nStore A/D\nSample\nInitiate A/D\nSample\nWait\nInitialize\nRESET\nSample\nSample\nOutput Computed\nad}qjOub[Q3[jO[w\\c7[h{m^hul+tv[uz^1gba.hqw\\`\nj\\wEgbadpxa.goas`gbadr[A{huogbY\\[!wO[7*go`b^rt_pd[ljOgit,jOggbYO[!t_ub[adhqj\\`bp.c7hqrt_jOgi[ehqj\\git_jOgo`bad}qw\\^pZ`b^rt,p.[\"gih\ngbYO[=>c7hqwE[ubgi[u^w\\e`igihub[gbYO[fub[`zj\\p.g+{|ubhqrgbY\\[t_ub[adhqj\\`>c7hqwE[uz`ba.hqwadw8gbYO[o*k:+mDw\\a.gbad^1gi[\n^w\n>c7hqwE[uz`ba.hqw`ih%gbY\\^1ggbYO[c7hqwE[uz`ba.hqw8gbadr[fad`:h?[uzps^1t\\tv[ehu=c7hqw_cjOubub[wEg'y'a.gbYAgbY\\[uz[`ig:h{CgbYO[\nt\\ubh*c7[`b`baswO}O'{gi[uxgbY\\^1g_eOhfgbYO[^1uzadgbY\\r[gbadc:y'Y\\adcY6adrt_p.[r/[w gb`3gbYO[c7hqwEhqpdjOgba.hqw6¡_pdgi[uzadwO}Oadw\\^pdpdp.hht\n]_^cz¢%gihoy3^a.g:j\\w\\a.gbpva.gZad`)gbasr[{|hu'gbYO[wO[7*g'`b^rt,p.[\nOhu+`badrt,pdadca.g£*^pspadrt_j\\ps`i[:uz[`itvhqw\\`i[`x^1ub[=h{gbYO[`z^r[p.[wO}gbY\\w\\^r[p.%`ba*gi[[w\n¤\n[y'adpdp)wOhyc7hqw\\`bade\\[u/gbYO[Ac7hqwEhqpdjOgba.hqw¥^1uza.gbY\\r[gbasc1¥gbj\\eOad}qjOub[\"¦O¥§:[ub[Ay3[!`bY\\h?y^`z^rt_p.[\nadrt,j\\pd`i[)ub[`itvhqw\\`b[xh{p.[wO}gbY/gbY\\ub[[9*^rt_p.[`h{gbYO['adwOt,jOg`ba.}qw\\^p_^1ub[:`bY\\h?y'w/^w_eopd^1]v[p.[ey:YO[ub[ZgbYO['[ubh\n\n(c).aaaJ«L¬;O(r)%\n°\nTotal Response at Time t\n1/4\n1/4\n1/2\nH\nH H\n5/4\n5/2\n5/4\n3/4\n3/2\n3/4\nFinite Impulse\nResponse H\nInput Signal\nResponse to\nResponse to\nResponse to\nY = S H\n+ S H\n+ S H\nS\nS\n-1\nS\n-2\nS S S\n-2 -1\n0 0\n-1 1\n-2 2\n±2.3q Oμb¶\n°O·3 )1qo »1q1⁄4\n\\1⁄2b2\n1qo\"3⁄4\nμ2.1⁄2b¿\\A¶1⁄2b2dA\n\nAA.AAAJALÆ;COE%E\nE\nEbIOI,EbI7IzÐ.N\\OxIzOO|OIzE+OiO%ObOOOf×OqEiO+IbOI7OØ OEbU×/N_U.OU:U'OOO=YzÞEbIOI_EzI7IzÐ.N\\OZIzOO|OIzE:OiO6ObOOOfEbU×N_U.OIßOOOIbOObOOOf×OqEiO\nIbOI7OØEO'EbU×N,U.OaOOObI1U\na\nOoI7OqØ_EiOiIzI\\I7OObOOOOqI\\OiN_IOOEbÐ.aqØ\\UUa1UUdIOOfIa8EzIONvOIbNvOqEbÐ.ObÐ.OqØUaØæÐ.aqIOIbOfc\"e3O/EbOOOeeObOOO/EiON_U1IU1OiO/IbO7Y\nEiNvOqØ\\EiOE)OiO%ÐdØON_I\\O3EbÐdaqØ\\UUEbU×N,U.OE)OqØAObOOIzOO=UdÐdØOOEUU'OOOEiO=U1IbOEzÐd×N_U.aI7ON_Ð.OEZOOObOOOÐs×N_I\\UdEbO:IbOEbNßOqØ_EiO=UE\nEbIUU.Oe\nIa8ObOOO/ÐdØON_I\\O:EbÐ.aqØ_UUEbU×N_U.Ofa1UUdIOOUJa£O3eCOObO\\OØEbI\\×eION\nObOOOEiO/ÐsØ\\e\\Ð.a*Ðde\\I\\UUIbOEiNvOqØ\\EiOEaOIbObÐsIUUdU.aa\ne3OaOO+ObOOOEbU×N,U.O=OOObOOO=i,Ø\\UUOqIOOiN_I\\O'EbÐ.aqØ\\UUiU3UZO\\O=O|OI×JI\\UsUO|OI:ObO\\U1O:EzI\\×ÐdE'EbOOO?e:Ø!U1O'ObO\\OIvOOiOiOq×OO\næÐ.aqIOIbOcOU\nUZOI\\EavOqIOIObUEii\nÐdE+OiO\"I7Oq×N_IOOiOfObOOO/EzI\\×OO3Ø\nN\\IbO*e\\I\\I7ObE:e'OOOIbOØ\nÐdE+ObOOOØI\\×IvOI+OOCEbU×/N_U.OEÐdØ8ObOOO\nÐd×N,I\\UdEiOZIzOEiNvOqØ\\EiOUaiØOqIOIxIUEiO=Ø,ðÞnUo9UIzO6N_IbOe_I\\I7O9OiOIz×ÐdE3ObOOO×I\\U.ObÐ.N_UsÐdIU1ObÐ.OqØOOEbI\\II7OEbEbÐdaO+Ðd×/N_I\\UdEiO\nIbOEiNvOqØ\\EbO/EbU×N_U.OE=e'Ð.ObO\nObOOOoI7OIzIbOEiNvOqØ\\e\\ÐdØ\\a%N,UEiOÐdØON,IOOEbÐ.aqØ\\UUEbU×/N_U.OEU%oØ\\I7O/e3OoO\\UaO%I7Oq×N_IOOiOeUØ\nOqIOOiN_I\\OoEbÐ.aqØ\\UU'EbU×N_U.Oa)ObOOOØoeCOaODI_UIzioUØ\\eoe\\OObOOOEzU×O!ONvOIzU1ObÐ.OqØ¥UUdUxOaOI6U1aqUÐsØoe'OOOØoeCOaOO\nUØOOObOOOI+ÐdØON_I\\O3EbÐdaqØ\\UUEbU×N_UdOU\no\nÐsØ\\I7OxeCOxOqØ_U.aO_UaO'OiOJI\\EiOZØOOßObOOO'ÐdØ\\N_IOOEbÐ.aqØ\\UUOEbU×/N_U.OEa ÐdOe'ÐdUdUIvOxI7OqØ aOØ\\ÐdOØ OCOiO=OqØ\\U.afI\\EiOZØ/÷:ø+u\nU.O*IU1ObÐ.OqØ\\EUØ\\eoO?aOIbeZIÐ.OiO\"OqUdeOOI/EbU×/N_U.OEfIaEbÐs×N_U.aDUdOOiObÐdØOa\nObOOOAEbÐ.aqØ_UUxEbU×N_U.O\"Ue\\e\\IbOEbEfeZIzU1NoU1IzOqI\\Ø\\e\nUEbEbI_×/ÐdØOaØÐdE)UJNvO?e3OIxOOOue3OOU9u:O?euEbOOOqI_UdeoObO\\O+÷:ø+unUe\\eOIbOEbE3I7OqI\\ØEOiOIxIvO:Ðd×N,U.O×OØEOiOeÐ.OØ%e3OIbOØOOO\nUNvO?e3OIZOOOue3OEy\nþvyþ\n\nø\nN_OEaEzÐdIUUEia*EiOiO×\nI_U.O*Ibi6e\\ÐdU1aIU×\nÐdExEbOOOe'ØAÐdØ\"æÐ.aqI\\IbO\nE\nU\nA/D\nD/A\nFPGA\nstatus\nstatus\ncontrol\ncontrol\nAnalog out\nAnalog in\nClock\nImpulse Response\nSelection Switches\næÐ.aqIOIbO\nE\nOEaEbÐsIUU\no\naEbOiO×)U.OIzi+ÐsU1aIzU×\na\nO\\ÐdU.O6ObO\\ÐsEÐdEUOOOU.N_OI\\UCIvOaqÐdØ\\Ø\\ÐsØOa!OiOObO\\O\"aOØOOIzU1ObÐ.OqØoOO+UeOOObUÐsU.OeN_OEaEbÐsIUU)I_U.O*Ibie\\ÐdU1aIzU×\nOOI\ne'Ð.IÐdØOaOIaCÐdØÐsØ\\e\\I\\EiOiIzaaN\\IzÐdØEOiOeIÐ.IzII\\ÐdOUdU?aOqIOOaxÐ.OÐdEØOOON_U1IzObÐdII\\UdU1IzUdaDOOOU.N\\OI\\UCO|OIObO\\OAN_UdUØ\\Ø_ÐdØOa!OO\nIÐ.IzII_Ð.OiIbaoOiOoIßO=Ðs×N_U.O×OØEOiOe6ÐdØ6ObOOOæ\n!\nøU\nø\nU.OaqÐdIUUEbaEiOiO×I_U.O*Ibi6e\\ÐdU1aIzU×ÐdExEbOOOe'ØAÐdØ\"æÐ.aqIOIzOnU\nUZO\\O\no\nø+u\n#\"\nooUxaiu!oC÷\nN\\IbO*e\\I\\I7OE)UØ\"OqI\\OiN_IOO)OiO/ÐdØ\\e\\ÐsIU1OiO+ObO_U1OZUØOOObOOOI'EbU×/N_U.OEbOOOqI\\UseIvOObU1iOØAOO\n\n$&%('&'&')+*-,/.\nSample\nTimer\nsample\nA/D\nstatus\nstatus\nstatus\nstatus\ncontrol\ncontrol\ncontrol\ncontrol\ncontrol\naddress 4\naddress 4\nData Bus\nFinite State Machine(s)\nStorage\nUnit\nArithmetic\nUnit\nPROM\nResponse\nImpulse\nD/A\nClock\nstatus\n2436587/9;:\n1<=?>\n5836@BA&C-DEGFIHI:KJL!C\n>\n@;MN36AO5&9PA&J\n\nQ&R(S&S&ST+U-V/W\nX\nY\nZ;[/\\^]6_/`bacZed;](f8_bg&h-g&_cijg&h6dIk\nZ;[cgOZZ;[/\\mlmk8dIZon;\\Kpq\\K_rZ;h(spqk8l`ba/ZI\\Kijk8a/ZI`ba/Zd;](f8_bg&h?tOg&h6a/\\u]6doZIk\nvw\\k8a/ZI`ba/ZoZIk\nZ;[/\\yx{z|}\n~\n[c\\|zxpqk8_rt&\\Bn;ZI\\Bn]dZIk{vw\\!]lm`bh(\\Klm\\K_rZI\\Ki^vsugd;]_/f8h(\\pP[c]6`8|ex\nY\n}k8ad;[/k8achie](n;\\](Zk8_mZ;[/\\h(\\BZ\n[cg&_ci`bn;k&ZIkdIZInP]6`\nk&s&k8a/n](Z![b]6pP[[cg&ddI`w\\KpB]6g&hg&_cg&h(k&f`wk\\BndPa/`c`bh6]6\\KdB}?k8ah6](&\\Kh(sg&_rZZIkpqk8_/bf8a/n;\\\nZ;[/\\|ox\nY\nk&nv](`wk8h6gOn4]_/`ba/ZB}44gs^`bgOn;Z;]6pBachgOn4gOZIZI\\K_rZ;](k8_ZIkZ;[c\\pqk8_ZIn;k8h/dP](f8_cg&hGZ;[cgOZdI`w\\KpB](b\\Kd-Z;[c\\k8acZI`ba/Z\nicgOZ;gk&nlgOZg&dkOdI\\BZ!vb]6_cgOnPsuk&ng&dZk/dpqk8lm`bh6\\Klm\\K_ZB}ek&ZI\\Z;[cgOZ!dI](Z;p[c]6_/f{vw\\BZ\\B\\K_Z;[/\\oZk^k&nlgOZ;d\nd;]6l`bh(s^]6_t&k8h6t&\\Kdpqk8lm`h(\\Klm\\K_rZ;]6_/f{Z;[/\\olmk8dIZ!d;](f8_c]6bpBg&_Z#vb](ZB}-k8a\nlgKsm]6dP[ZIkabdI\\egic] w\\Bn;\\K_Zk&nlgOZ#k&n\nZ;[/\\y]_c](Z;]6g&h¡g&_cg&h(k&fic\\Klmk8_cdIZInPgOZ;]6k8_¢g&_ciZ;[/\\{g&pqZ;abg&h?ic](f8]6Z;g&hwbh(ZI\\BnP]6_cfk&`w\\BnPgOZ;](k8_}\n~\n[c\\ex{z|£]6dg&h6dIkZIkvw\\e]lm`bh(\\Klm\\K_rZI\\Kivsgud;]6_/f8h(\\epP[c](`?r|ox¤&¤&¥}¦Zg&h6dIk^d;[/k8achimvw\\](nP\\Kimk8_\nZ;[/\\eh(\\BZ\n[cg&_ci`cn;k&ZIkdIZInP]6`k&s&k8acnoG](ZB}\n~\n[c]6depP[c]6`j]6dog\nn;\\Bf8]6dIZI\\BnP\\Kiic]6f8](Z;g&h?ZIkg&_cg&h6k&f\npqk8_rt&\\Bn;ZI\\Bn{[b]6pP[ac_bpqZ;](k8_cd\nZIkpqk8_rt&\\Bn;ZZ;[c\\{icgOZ;gmvsrZI\\Kdepqk8lm`ba/ZI\\Kivs\nZ;[/\\{|e§¦\n~ o(c)a#~\n¦;«¬o¦\n~\nZIkg&_g&_cg&h(k&fmt&k8h(Z;gOf&\\&}!k&ZI\\yZ;[cgOZ\nZ;[/\\Bn;\\^]6dek8_ch(sg\nd;]6_cf8h(\\yn;\\KhgOZ;](k8_cd;[c]6`¢vw\\BZ\\B\\K_(r)Z;[/\\^vb]6_cgOn;s]6_c`ba/Zg&_cijZ;[/\\uk8a/ZI`bacZet&k8h(Z;gOf&\\&} [cgOZk8ach6i\ns&k8a°[bgKt&\\ZIkji/k¢](#Z;[c\\_rablyvw\\BnZ;[cgOZ{nP\\B`cn;\\KdI\\K_rZ;d{Z;[/\\mk8acZI`ba/Z{]6d{]_(r)Zk/dpqk8lm`h(\\Klm\\K_rZ±2ek&ZI\\Z;[bgOZ{Z;[/\\\nn;\\Bf8]6d;ZI\\Bn]6d^g3h6gOZ;pP[_/k&Zg&_ \\Ki/f&\\ZInP]6f&f&\\Bn;\\Ki n;\\Bf8]6dIZI\\Bn}μ§\\Kg&i¶Z;[/\\icgOZ;g3d;[/\\B\\BZB· \\¢pBgOn;\\Babhg&_cii/k3_/k&Z\ng&h6h(k1g&_sjf8h6](Z;p[/\\Kdk8_3\\K](Z;[c\\BnZ;[/\\z&«ok&nz&«\na\n]6_/`ba/Z;dK}u»oZ;[/\\BnZ;[cg&_(r)Z;[c\\_cg&lm\\&Z;[/\\BnP\\^]d_/kic] w\\Bn;\\K_cpq\\\nvw\\BZ\\B\\K_°Z;[c\\KdI\\Zk(r)d;](f8_bg&h6dB}\n~\n[/\\g&_bg&h(k&fk8a/ZI`a/Zd;]6f8_cg&hpBg&_μv¡\\t]6\\B\\Ki°k8_μg&_μk8d;pB]6h6h6k8d;pqk&`w\\mk&nu](ZupBg&_\nvw\\{acdI\\KiZIki/nP]6t&\\{gdI`w\\KgO&\\BnK}! 1⁄4[c\\K_s&k8agOnP\\{n;\\Kg&i/sZIkh]6dIZI\\K_ZIks&k8a/nbh6ZI\\Bn;\\Kik8a/ZI`bacZd;](f8_cg&h1⁄2cpP[/\\KpP¢k8a/Z\ng&_jg&lm`bh6](b\\Ki¢dI`w\\KgO&\\Bnn;k8l3⁄4Z;[/\\¦¿_cd;ZInPaclm\\K_rZe§krk8lAg&_cijpqk8_c_/\\KpqZs&k8a/nxz|1ZIk\nZ;[c\\dI`w\\KgO&\\BnZ;[/n;k8a/f8[jg\npBgO`bg&pB](ZIk&n^A\n\n}\n\n¤mAAA}\n~\n[c\\o\n~\n»§|A\na\n¬ee¦\n~\npqk8_cd;]6d;Z;dk&gdIZ;gOZ;]6pO-vrsZI\\qÆ1⁄2]6ic\\^§e|\n(c)\nA1⁄2oG§e|\n(c)\nAog&_ci3g&_3g&ici/nP\\Kd;dpqk8ac_rZI\\BnK}\n~\n[/\\u]6lm`bh6\\Klm\\K_Z;gOZ;]6k8_k&Z;[c]6deac_c](Z]dnPgOZ;[/\\BndIZInPg&]6f8[ZIk&n;!gOnPi}¬odI\\yZ;[/\\^h6](vbnPgOn;sk&`gOnPg&lm\\BZI\\BnP](CB\\KijlmkGiGÆ\nach(\\Kd`cn;kt]i/\\Kivs|oh(ZI\\BnPg^g&d`bgOn;Zk&\n(c)\n|E#E-¬o¦P¦#g&_ci\npP[/kk8dI\\{gu§|\n(c)\nd;]6l]6h6gOnZIk^Z;[cgOZ![c]pP[s&k8aacdI\\Ki\n]6_(r)E?gOv°E}u¦¿s&k8a3n;\\Kg&h6h6s¢g&_rZZIk¢acdI\\mdI\\B`gOnPgOZI\\pqk8lm`wk8_/\\K_rZ;dBZ;[/\\K_(r)s&k8aElgKs(r)acdI\\^g&_μoG§|\n(c)\ng&d]_jE-gOv\nE}\n~\n[/\\o\n~\n»§|A\na\n¬oe¦\n~\n]6duacdI\\Ki°ZIk(r)d;ZIk&n;\\Z;[c\\\nic]6f8](Z;](CB\\Ki°g&_bg&h(k&fj]_/`ba/ZydP](f8_cg&h#g&d^pqk8_rt&\\Bn;ZI\\Ki vsEZ;[/\\\n|zx}|edm]6_c`ba/ZdPg&lm`bh(\\icgOZ;g3gOn;\\n;\\Kpq\\K]6t&\\Ki#Z;[/\\Bs gOn;\\ZIk3vw\\dIZIk&n;\\Ki¶dI\\KIa/\\K_rZ;]6g&h6h(sμ]6_ gjpB]6nPpBach6gOn^vbaGw\\Bn\n]6lm`h(\\Klm\\K_rZI\\Ki¢vs¢gvbh6kpPk&#d;] IGZI\\B\\K_h6kpBgOZ;](k8_bd]6_Z;[/\\^o/§|\n(c)\n}wegOZ;acnPg&h6h(ss&k8a(r)d;[/k8achi¢acdI\\ugpqk8ac_rZI\\BnZIk\n`cn;kt]i/\\Z;[/\\yoG§e|\n(c)\ng&ici/n;\\Kd;d;\\Kdk&ndIZIk&nP]6_cf_/\\B]6_/`a/Z#d;](f8_bg&hd;g&l`bh(\\Kd!g&_cik&ng&pBpq\\Kd;d;]_/f^`cn;\\BtG](k8acd]6_/`ba/Z\nd;g&lm`h(\\KdB}#oG[/k8achi](Z#vw\\og&_¬o pqk8ac_ZI\\BnGgux{» 2pqk8ab_ZI\\BnKGk&nvwk&Z;[± [cgOZ!d;[/k8ach6iv¡\\eZ;[/\\]6_c](Z;]6g&hbdIZ;gOZI\\\nk&Z;[/\\{§|\n(c)\ng&ici/n;\\KdPdpqk8ac_ZI\\Bnq±\n~\n[c\\e¦\n(c)\n¬eEo\na\n§\na\noG»o\na\n§»\n(c)\npqk8_cd;]6dIZ;d!k&-g^E&¤&Æ1⁄2vsZI\\y§»\n(c)\n}\n~\n[/\\o[b](f8[k&ni/\\Bn!k8a/n!vb]6Z;dk&-Z;[/\\\n§»\n(c)\ng&ici/nP\\Kd;d{dI\\Kh(\\KpqZ[c]6p[E]6lm`ach6dI\\^n;\\KdI`wk8_cd;\\]6dZIkv¡\\acdI\\Ki}\n~\n[/\\h6kIk&ni/\\Bnyk8a/n{vb]6Z;dk&Z;[/\\§»\n(c)\ng&ici/nP\\Kd;ded;\\Kh(\\KpqZ[c]6p[vsrZI\\^k&Z;[/\\u]lm`bach6d;\\{n;\\KdI`wk8_cdI\\^](ZoZIkv¡\\ug&pBpq\\Kd;dI\\Ki}\n~\n[/\\^[/\\qI_aclyvw\\BnIGÐ^dI`w\\KpB](c\\Kd\nZ;[/\\dI\\Kpqk8_biEvsrZI\\k&Z;[/\\Z;[b](nPi(r)]6lm`babh6dI\\un;\\KdI`wk8_cdI\\m]6d{g&pBpq\\KdPdI\\Ki}¦¿s&k8aμacdI\\|oh(ZI\\BnPgGd{h](vcnPgOn;sk&`gOnPg&lm\\qÆ\nZI\\BnP](CB\\Ki(r)lmkGicach6\\Kds&k8a3pBg&_(r)]6lm`bh6\\Klm\\K_ZeZ;[c]6denPgOZ;[/\\Bn\\Kg&d;]6h6s&}\n~\n[c\\bh6\\yZ;[cgOZs&k8ajg&_rZpBg&_jv¡\\^pqk&`b](\\Kin;k8l\nNOOOO/NrOOØ××r×ONOUbUOU/UGY&ÞGO¡ß&NaUaßONarUOa/aO¿aGaaraGaN/OBO/æÞacßOccß4O1⁄2UOca\nk&nes&k8a3pBg&_jn;\\B\\Bn;\\K_cpq\\uZ;[cgOZbh(\\ic](n;\\KpqZ;h(s¢]6\ns&k8a g&h(!gKsGdi/kjdI\\BZ;a/`}6Ð&Ð&Ð\nv¡\\Bk&n;\\nPac_c_c]_/f\n(c)\n|eE#E?¬o¦;¦Ø}\n~\n[c\\§»\n(c)\nk8a/ZI`a/Z]6dd;[/k_°g&duf&k8]6_/fZIk\nZ;[/\\uicgOZ;gvacdvba/Zo](Zpqk8achi¢f&kic](n;\\KpqZ;h(s\nZIk\nZ;[/\\|o§¦\n~ (c)a~\n¦I«£¬ee¦\n~\n}|ef8g&]6_¡s&k8apBg&_jacdI\\ugdI\\B`gOnPgOZI\\\npqk8lm`wk8_/\\K_rZ](s&k8ae]6d;[evba/ZBGZ;[/\\K_c]6Z!]dh](&\\Kh(sg^f&kki]i/\\KguZIkpqk8_c_/\\KpqZZ;[/\\{§»\n(c)\nk8a/ZI`ba/Z;d!ZIkZ;[/\\icgOZ;g\nvbacd#g&_ciacdI\\Z;[c\\d;g&lm\\og&ici/n;\\Kd;d#h6]6_/\\Kdg&d#k&nZ;[c\\ooG§|\n(c)\n}egOZ;acnPg&h6h(sus&k8ad;[ck8ach6imacdI\\eg{pqk8ac_rZI\\Bn#ZIky`bn;ktG]6i/\\\nZ;[/\\§»\n(c)\ng&ibi/n;\\Kd;dI\\KdK}o/[/k8ach6i\n](Zv¡\\g&_¬opqk8ac_ZI\\Bncgux{» 1⁄4epqk8ac_rZI\\BnK/k&nvwk&Z;[± [cgOZd;[/k8abh6ivw\\oZ;[/\\\n]6_c]6Z;]6g&hwdIZ;gOZI\\{k&Z;[/\\{§»\n(c)\ng&ici/n;\\KdPdpqk8ac_rZI\\BnØ±\n~\n[c\\|e§¦\n~ (c)a#~\n¦;«e¬ee¦\n~\ng&pqZ;acg&h6h(s(r)]6lm`h(\\Klm\\K_rZ;dZ;[/\\pqk8_rt&k8h6a/Z;](k8_3k&!Z;[/\\]lm`bach6d;\\n;\\Kd;`¡k8_bdI\\^](Z;[\nZ;[/\\^]6_/`bacZd;](f8_cg&h1⁄2}e¦¿ZeZ;[c\\K_`bn;ktG]6i/\\KdeZ;[/\\^ic](f8](Z;g&h-icgOZ;g\nZIk\nZ;[c\\ux{z|1e[c]6pP[j]6_Z;a/nP_`cn;kGicacpq\\KdeZ;[/\\ug&_bg&h(k&f\nk8a/ZI`bacZd;](f8_cg&he}\n\ne&i(i&i&ii+i-ð/n\no\no\no2o¡o8÷P÷;ø(ubu(uoø6umobu6uKumuKyþ;yOþ;ø6o8yo-þ/ucyOþ;ym÷Iþ\nqþ;ueo4þ/uyPø(þbumuBþ;ø\no÷Iu\nqþ;ø(o8yø6÷!÷/oyø6yø;u\n\nuyPu \"!\"#%$&cy&÷yu'bu(þ;ø(obu6ø(\nByOþ;ø(o8y{o&owuPyOþIo)*,+-cyOþ.\nBø/\ncø(þ0ocuuuwu÷0yrþ/uK÷;ø1Bu^ø2u3u;u!þIo\nMultiplier\nAdder\nAccumulator\nH[7]\nH [6:0]\nHREG\nSign Converter\nCLAC\nData Bus\nLDAC\nSLH (7 LSB only)\nLDH\nø;u456$?o8ø\nBy&u?o7Pø(þbumuBþ;ø\n\nu(o8\n9:#oøyPy&u\nc÷Iu!ø(þ/;<+3u3/o/ubþ?þcyOþ=0&o>y&yrþþIo÷IowuKy{þ/u?;uK÷Io\nquK÷,;u@bø;uoy7\nqo8uubø6ybyOþ;ø(o8ycy&uu(o8ø\nu'cu6þ;ø(obu6ø(uA\nB\nøy\nqu{ø(þø6÷uKy&÷0\nþIo\nø6umobu6uKumuKyþu>cu(þ;ø(ou6ø\nByOþ;ø(o8y<ø(þ¢y÷cøþy&y¢yþIu\n/cycø@8/u)u4\nBy&yø6umobu(uKuuKyþ\nþ/uyo\"CEDGFE!%HJIKF3DLNM7O7DPFQcyOþ;ymobyOþc÷y&÷÷/oy¢ø6y:ø;u\no\n6FEcø÷ø6÷÷;ø6uøu6y!þIoþ/u!y0u4buy&yc÷\nc÷by&u6u0¢u>cu(þ;ø(obu0þRoybuyuwuP÷TS\nyOþyu(uKy&÷Iþ7/uKyUuV/o÷Io¢uy&ycy&uu0W/YX\"6\nqo÷Iu) uVcyZ&uþIoo2;oAZGø/u\nþ/uyyOobo;o&oPøyOþIu%\nqo8yrþ;o8u-÷IomþcyOþEuyø6umou(uKumuKyrþþcu4\nqo8y[Z&o8u(/þ;ø(o8y¢yPø6þcumuBþ;ø\ny&÷÷ /oAyø6y:ø;u\\\no]Ho^FEF_I6C`X%\nB\nDaO\nB\nb\nu(uKy&÷Iuy/o&þIuþcyOþ!þ/uoøumo2cu6÷;uE;uK÷Iowo8yc÷Iuo÷IþIo;uø6yþ/u%C3XH\nø6÷ø6y\nB\nø8ydcHy8ycø(þcu_oPuyOþ)/÷IouþcyOþ\nþ/uoumo8÷Iþ÷Pø8ycøe8y&yrþubø6þ.\nqo8yþ;y&ø6yb÷#þ/uo÷;ø8yUS\nøwþ/ue÷;ø8yubø(þø÷_fþcuey8cuyuwuø6÷y/u8yOþ;øZ&uW/)cy&y2þ/ueo&þ/u\n÷IuZ&uKy\nubø(þ;÷YcyAZ&u¢þ/u¢uy8ycø6þ/uhgo\n÷cocuhø;uþ/uo%ci#j\nqo8yZ&u;þIuþIok8øZ&u¢þRol÷m\nqo8uobu(uKumuKyrþ\n+-/uKy&!TnoAp-ø6÷o8y/u{ø6þø6÷y/u\nquK÷;÷;y 0\nþIoþPyþ/uyy8cuuwu3q;o8uþ/u{o%ci#`\nqo8yZ&u;þIuø6yrþIoø(þ;÷y/u8yOþ;øZ&uuy&y\n0&om÷/obu'\nqo8yZGø6y\nqu0&oP÷IuKubþcyOþþ/uyPy&y&uKumuKyþoþ/u!uKørþusrt\nBub÷;øZ&us1⁄2oP÷y&y^þ/u÷;ø8yuø(þ,\nBy Pø(u\nø6y(r)þIoþ/uy/u/ouK÷þcø6÷KuIo&u &n\ngoEy;u<O%X%F]Pu@cø;ujþIoJc÷Iumþcø÷÷\n/uKuuYDv?0&owcyAZ&uyumuBþ/ot\n0&ouø9&uu¡uBþIþIuA)&oy/uKyy&y&/oø(þ30&oEyA0\np\nOeo&þIuuy&u÷IoþcyOþeþ/uy8cuuwuþcyOþeø÷E&uKy/uPyOþIuju80þ/u'\nqo8yZ&o8u/þ;ø(o8yø6÷øy&F3ol÷7\nqo8umou(uKumuKyrþ_oPu:)\n\nxyzzz'{}|~\n\n2?%iQs_2?m _K88<((KKYs[\n?84 K¡¢£¤22d¡¥8>K\"Y?\"2K(K>Vd24 ¥¦YK ?\n3V26 E2'EY= 24 ^^. = V3s[A\n§\n?K d3Y4(68VYdY[ 4% a(c)t«¬72K8' 6 q \"246T\ni]s[Yq(r).Us8(s (E ±°/\n2'3_ 2'μ·¶E 14oV»:1%1⁄41⁄22'3⁄4\n¿\n78 A:qA8s::UAaA\"mm2qE2JA'2A%Us8_\n>2UAE::CÆth>2 Yd'V2\n§\nEE?Y1⁄2EE1⁄2EI_¦22_k\nI\n8A8% <%IE:EI7¦VAE\"A8:8 AAIhÐJNAOOANmIE&EI7¦<OOI¢I[OJ AI7¦<(c)8:\nEE: JI7¦YtAAAi(2'A'At%7VTU×\" %\"s:a_¤s[A8v\n2:AAOTE4I_¦4 Y2'\n2V V1⁄4AØ' V3U»:1⁄4JUØ\nAE:UEU\nI\nAEYEU%ÞN×T>Kß2Y>A2sV2sÆ\n§\n3E?aUT?a:\nV/V<a.(c) aK2w YwsYdsÆ:\"[1⁄2/:\n¿\n<7='a2\nTß \"(Y±°U?UA8>?:%6Y aA¤'\"¥ 2t:,\ns4a.(c) a?:mA'Y=(ma<¥t,EY d\nAE7A8s7VaK 26?Y <8Va,\"æ8=(r).7'2AV\n\"s[4Y(×2VKa^(c) J6/m8V4VaKa.(c) ktU3×2Ts6K\n>\"&%%aV2YAJAt%T2\"?Aq/j_a>\n_J22c\nØ' Y»:eT3?1'e ew mØ'U1⁄41⁄2eieAU1⁄4AØVe\nO_a..2 ¥\"22 m,(%At3(2,K(c)tA\"U%Y3i\n_iiNA\nI7§\nA8_ >YY: Es_d3V'YY\n§\nU`2\n4 (7dt£A=A_^¥%4 V4\"YVV Am?\n(c)A7U%Y__iiðA\nI_§\nAU&Es[ c\nE8_«?k ×%7N&YYNV(OY_Y4 & : -_-ÞQE8\n§\n&:\nsV >(c)tY_% nEIEE 2\næ8_\"\nI\nUAaY2%2_272E2%,. ,AE6. K At\n?4s2s7×6<_m<6?4\" ,(r).6ß2 62s.Y E>A\n774s 7¦\nI\nI\nsÆt¥?AYVK\"Y\n§\nAEI\" Ai6A\n§\nU¬A\nI7§\nA[AE^sm7td2'2_<Y_ 2\n2U&V×sÆs%q%VUEU\nI\nAEYEU%Þ=°3\"KTAT\"V'AU\nU:7:¬2U>N_(7(Udo/qtE(2\nU782VYT 2E Y2¥d¢¥ A(Y2 &KA\nY2\no\n3(r).UJ(/ \"a^(c) J4I2&AJoGoV°37a=o?i%]8:T(2\n<A÷s:='a^(c) am2\n3ø<e< V øØY V \"3⁄4· <1%uT V Øu <1'oV»:U <1uu1%1⁄4AØVe\n\nyþyyy\n\nH[7]\nH[0]\nCIN = H[7]\nH[7]\nHREG\nLDH\nDATA BUS\n+\nDATA BUS\nRegister\nLDR\nShift Register\n?\n?+8\nSLH (7 LSB Only)\n! #\"!$%$'&()+*,.-/*02143+5607'82 9#: #-\n\n;#<+=#=#=>?@A B\nC#C\nDFEHGJIKLGMI'NPOQ/R!S+IGT+OUVO#EXWZY9[]\\^_Y`GbaRcId(K:T+GJGJI%UfegO#KLUI%Y9GS+ahM.Y#U.id(K:T+GJGJI%UkjlKIRmO#KG/TnoKI%prq!T+KI%itsvuwG\nnMOq!Si I%Q/R!M.Y#nTxIl[cO#GMyGMIlGMIO#KazO#E{GMI|iI%nT}U'Y#U.i'GMI|R!KO#[!S+I%Q~n_O#E{R.K:Y#NPGTNY#STQ/R!SI%Q/I%UGY9GTOUts\nC\nsuUrGJKOi!q.NPGT+OU Y/[!K:T+IEi.I%nNPK:T+R.GTOUO#EGMI|R!KO#[!S+I%QY#U.iY[!S+O6Nzi.TY9}#K:Y#Q\n\nsuUEgO#K:Q~Y9GT+OUY#U.i'iI%nNPK:TR.GT+OUzO#Ea#OqK2lF2W.n\neYjzXI!U.I|a#OqK(Q~YJO#KFY#U!i'Q~TUO#Kns\neg[cjuU.NSq!iIlY~i.TY9}#K:Y#QEHO#KI%Y#N)Ms\neNjzXI%nNPK)T+[mIlGMI|O#RmIK:Y9GT+OUzO#E{I%Y#N:MTU'U}STnMts\neikjuU.NSq!iI2a#OqK 2¡F2W¢!S+Ien)j2egd(TGMyNPOQ~Q/I%UrGn)j)s\n\\s(XIGY#TSI%iy[!S+O6Nzi.TY9}#K)Y#Q~n4O#ES+O#}TNlTQ/RkS+I%Q/I%UrGJI%i'TUza#OqK({£_¤lD\neYjzKayGJOzQ~Y9#I/YKI%Y#nJOU.Y9[!SIoNPOQ/R!KOQ~TnJI[mIGbd_II%U¥S+I}T+[!TST+GbazY#U.i¦iIGY#TS§sFuwU.NSq.iIY#U.Y#SO#} u\nRmOnTGT+OUViI%nT+}U.Y9GTOU.nY#U.iVR!TUhUrq!Q[mIK:ns¢ (c)M.IKIzKI%Y#nJOU.Y9[!SI#^iK:YdGMI'd(T+K:I NPOU.U.I%NPGTU}\nGadO¥egO#K2Q/O#KIj4RkTU.ns_FO UO#G^kM.Od_I«#IK%^kK)q.U'd(T+K:I%nY#SStO«#IKXa#Oq.KXi.TY9}#K:Y#Qd(MI%UGM.TnQLY9#I%n\nTGM.Y9K:i'GJOLq!U.iIK:nJGY#U!its{uwU.nGJI%Y#it^.SY9[mI%SmGMIlR!TU!n4d(T+GMveq.U.TprqIjnT}U.Y#StU.Y#Q/I%ns\neg[cjL¬OqiOXUO#GM!Y%«#I_GJOXiK)Y%dViIGY#TS+I%iI%prq.T«Y#S+I%UrGZNT+K)Nq.T+GnGJO2iI%nNPK)T+[mIGMINPOUrGJI%UGn{O#E.{£4¤2Doen(r)j)s\n¡FOd_I«#IK%^#a#OqnMOq.Si2TU!NSq.iI{YiIGY#TSI%i2[!S+O6N2i.TY9}#K:Y#Q n:MOd(TU}Q~YJO#KEgq!U.NPGT+OU.Y#S#q.U!T+GntY#U.i\nGM.I%T+K(d(TiGMt^I#s°}s+^mYLnT2±6GJII%U63[!TG(Y#i.iIK%s¬Oq¦Qq.nGFTU.NSq.iI2a#OqK( 2¡XXWVkS+Ien)j)s4Y#N:M[!S+O6N\nn:MOq.Si[mIY#NNPOQ/R!Y#U!T+I%i`[raYRkY9K:Y9}#K:Y9R!M¦iI%nNPK:T[!TU}~GM.IoEq.U.NPGTOUO#EGM.I{£4¤2D NT+K)Nq.T+GJKa#s\n(M.Tn^6O#ENPOqK:nJI#^.NPOq!Si'[mI|TUzGMIlEgO#K:QO#ENPOQ~Q/I%UrGn(TUzGMI| 2¡F2WvkS+Ien)j)s\nμ\ns((TQ~TU}/i.TY9}#K:Y#Q~n¶EgO#KFQ~YJO#KFn:T+}U.Y#Sn4KIEHIKFGJO~GMI%nJIGTQ~TU.}i!TY9}#K:Y#Q~nFTUza#OqKFi.IGY#TS+I%iyiI%n:NPK:T+R\nGTOU.ns\nM.I(#Ia6n4GJOYonq.NNPI%n:nJEgq!S.KIRmO#KG4Y9KIXO#K}Y#U.T+x%Y9GT+OUzY#U.i NSY9K:TGba#sD nM.O#KGR!Y9K)Y9}#K:Y9R!M d(T+GMYoi!TY9}#K:Y#Q\nO#KLGY9[kS+Iq.nq!Y#SS+a¢NPOQLQq.U!TNY9GJI%n~a#OqK TUrGJI%UGGJOGMIyK:I%Y#iIKLEY9KL[mIGJGJIKLGM!Y#U]YvS+OU.}93d(TU.iI%iVd(K:T+GJGJI%U\nIP±6R!SY#U.Y9GT+OUs\n·' 1mo»z1⁄43⁄41⁄2 F¿'o XA\n¬OqVY9KIzUO#GK:I%prq.TKI%ivGJO^[!q.GY9KIy62l¤2Wr¬AI%U.NPOqK:Y9}#I%ihGJO^Q/IIGod(T+GM¢Y|sADsEHO#KYi.I%nT+}U\nKI«6T+IdA[mIEgO#KIa#Oq¦R.K:O#}#K:Y#QAa#Oq.KX{£_¤lDsk¬Oqi.O UO#GXM.Y%«#IoGJOzM.Y%«#I/iIGY#TSI%iy 2¡F2WANPO6iINPOQ/RkS+IGJI%i\n[mIEHO#K:IlGMIiI%nT}UzKI«TId|s\n¬OqznMOq!Si~GM.TU/Y9[cOq.GGMIXR.KO#[!SI%Q Y#U.i NPOQ/IXEHO#K¶YoiI%nT+}ULKI«TIdAd(TGMLY[!S+O6N~i.TY9}#K)Y#Q'^nGJK:q.N(r)\nGqKILO#E_a#Oq.KoNPOUrGJKOS§^{Y#U.ivYKI%Y#nJOU.Y9[!Sa`NSI%Y9KTiI%YyO#E_GM.ILY9R.R.KOY#N)MtsRmI%NT+!NY#SSa#^a#OqnM.Oq.Si`GM.TU.\nY9[mOqGMOdAa#Oq Y9KIX}#OTU}|GJOoGJI%nJG_a#OqKNTK:Nq.T+Gns{DfNPOQ/R!STNY9GJI%ii.I%nT+}U/K:Y9K:I%S+adO#K6nGMI(.K)nJGGTQ/IFa#Oq\nGqK:UvOUvGMIRcOdIKs'_OU!nTiIK|MOdÆa#Oq¢Q~T+}MrG|GJI%nJGoTU.i.T+«6Ti.q!Y#SQ/O6i.q.SI%nlTUvTnJOSY9GT+OUtsDCSTGJGS+I~[!T+GlO#E\nd_I%SStN:MOnI%U'IP±GJK)YGJI%nJG(NT+K:Nq!T+GJKaLNY#UyY#NPGq!Y#SS+a KI%i.q.NPI2GMIlGTQ~I2Y#U!i'IPEcO#K:G¶KI%prq!T+KI%i GJO/}#IGa#OqK(i.I%nT+}U\nGJO~d_O#Kcs\n6TU.NPIa#OqoM.Y%«#I4KI%NPI%T«#I%iGM.I_S+I%Y#nGZ}q.Ti!Y#U.NPIOUoGMI_DF(uw¡2¶uvEXFuwhY#U.i/_OUGJK:OS§^9a#Oqon:MOq.Si\nM.Y«#IEY#T+K:S+a iIGY#TS+I%iyTUEHO#K)Q~Y9GT+OUzEgO#KGMI%nJIonJI%NPGT+OU.n¶[mIEgO#KI|GMIiI%nT+}UzKI«6T+Id|s_E_Id_Y9KIGM.Y9G(Y#Uq.UO#R\nGTQ~TxI%i'iI%nT+}UyQLY%azUO#G.GTU'Y#U{£_¤2Ds\n\nE#I+I#I#IIIÐN O\nO%O\nO%OØ×|U_U2OØU2UU4YlUOÞ~U\nßFaHaJaa¶a9aa)a+æace|a9a4aea(e!c!a#ekia%i:a+ectii#ðnzie.ðn.ei/o.a:ao!a9aaFi.aaa#ae+a%io!e+ð6oo~i.aa9e#a)a#o~iagð#a4ocð#aeaeaXi.a9aa\no!a9ae.ia#c.ivi#ðn.aoPðcraJaðe÷øuiu'uea%cvua:a+aJa~i#ðn.ay2þFyoPði.aa#c.i¢iaoon.ea9aJa/aea o/ði!n.e+a%i2aJð¦æ#aa:a+agi\noPð#aaa%oPac.a%iiu÷{ac!a#ee+i#imaJa%iJalaea/iJi6iJaJa%o'u(c)ea%c¦ð#omaa:a9aa+ðc!a#e§iti#ðna|iJi6iJaJa%o\nieðn!eiomaia%o/ðc.iaJa:a9aJa%i`aJð\na#criiJaaho~a%oomaa2acae.aoea9omð#a:a9aJð#a:i#u_a:aceLi#ðnaliaaa#ae+a%ioke+ðo:oi.aa9e#a)a#o~iFa#c!ii#ðna2y2þFyoPð6iaoaJð\naeaea9o'u(ea%c'oPðo~ac.e/aHð#a(aLia%o/ðc.iJaJa)a9aa+ðcya#i¶aeauluAßuuFaeemac.a+aaa#eca#c!i'i.a9aJa|i#ðnaXi.aa9e#a:a#o~i%uainaa\naJðac.oen.i.a¶ae.aiu(a+aca%iia%iLoPð#oiLac~i#ðn.aaaomð#aaußFaHaJaa4aea2ia%o/ði6oPðo/o!eaaJaFi#ðna_aaomð#aa_a#c.iLan.a:cLa+a_actu\nßXoPan.a#ee+i#iae.aaalai¶cð#ae.ac.eua:ðceu(a+aezua:aaacei#ðn.a¶aaomð#aa4ocaagð#aa2aeale!c!a#eco)ea%oo 3ð\nia%o/ðc!iJaJa:a\naa+ðctuXaHaJa%c`a+alai2a e#ðði¥ai.a%aLaJð'ua)a+aJaae.aoa:aocð#a:aFu(e!ae+aae.ai.ao!ne#eaceza#c.i¦aJa%iJaac.eza9a:a/o.að6oPaa%i.aceu\nue.aioa#cVcð#aðc.e+i¥o.a:ðæ6aiaa¦o:e!a#ce#azð#a(o!a#oPa#io!n.aaea aeðneeraoe#ðace`acaJð¦aeazð#aea#c.a%a9aa+ðchð#aaea\naaomð#aaoa#cza#oPan.a#ee+iocaFoma%cae!oaa#e.ac~aeaXiao!ne#eac.e|o.að6oPa%iiuwati#ðnLua)a+aJai#ðna_aaomð#aaomaagð#aae!c!aie.ac.e\naeaiao!ne#eacei!i#ðn¦u(aeetea+o#a%e+i'e.aæ#aoaJðzo:e!a#ce#aaeaaaomð#aaFðc.e+iyacaLo~acð#a(u4a%i#ia+aa9a2a#ee§icu(ea%ci#ðna\niJi6iJaJa%oAai4agn.ee+i~ð#omaa:a9aa+ðc.a#e3u\n× ÞUUlO\nwa!i#ðn/a%c!oPðn.caJaao.að#o!ea%o~iaci#ðnaia%ia+eci#o!e+a%a#iJaoPðo/aac/a#c.i/a#iJocu¥a(aaea9a:iae.aiea9o/aaa:oaiJaa#i\naLo~ðiJa(ao/omð#aaa#craa6omaa:a+a%c.oPalagð#a(i#ðn¦ac'o.a:ao!a9a:a9aa+ðc'agð#a(ae.ae!c.a#eo.aðJa%oPau¥aou_a#cra(i#ðnaJði:n.ooPaa%i\na#c.izu(aeeki.ðoðn.a¶oca%ia_aJð~e.a%e+oue+a%a#ia|ið/cð#ae+a%a%æ#alaæ#aa:irae.ace/aJð/aealea#iJao~acrnaJa2a#i¶ae.aiuFaeeco~a9o#a|a+a\ni.a on.e+a_aJðLe.a%æ#aaao/alaJðLe.a%e+o'i#ðntu\n!OU¦U\"\n#%$'&\nø6aa9aaa%a9a:e+i)( ( (vue.aioea9oVaiea9ae#aa/achia aza#c.iVoPðo/o!e+aa+abiae.a#c*Za9o\nO\nuvue.aiea9oVu(aeeaa,+n.a+aaza\n-/.\nU_U\nU!0 U2U21\nU2U34\nð#aFacð#a:a/aJð¥oca'oPðo/oke+aaJa%itu¢yXðvcð#a/e+aa/a+a/ieaiaacaJð`aeayiJa%oPðc!iVuaao\nomaaHð#a:ali#ðnyomaeactu\n#657&\nuai¥aJð`o#aaoVi#ðnau(a+a:ac.eya#iooPðo~o!a#oPa/a#iomðii:a+o!e+a#u8ZðceuFa+aa%iacaJað6i.n.oPa ia%eaiia#c.iha9aazo/ð#aa\nin.i:oPao.aa+o!e+a aJða#c.a#eð#evcðaiJa#uAue.ai/aia%iJoma%oaa#ee+i¢ao/omð#aaa#craouFea%cAia%a#eac.e¦uFa+aeVi#ðnaLoe+ð6oocu:9FðaiJa\noPð#aa:n.o.aJa%iyoe+ð6oozia+ec.a#ei¶a#ooPðn.caFaHð#aFo~a#cizo.a:ð#o!e+a%o~i4a%c.oPðn!caJaaa%iu\n#<;=&\nwai#ðn¦n.iJao~ð#aai.a+eaaa#eoPðo/omðca%craiae.a#ca#c÷?>2ßi!omaoa9a:aagn.eu(a+ae'aeaoe+ða#i.ac.e/ð#ai#ðn.aFoe+ð6oocu\n@\nðnoLa%i a:n.c'acraJð/aJaðno!ea2aaZi#ðn'aJai aJðLia)a+æ#a2aæ#aai'oe+ðo:o i:a+ec.a#emðc'i#ðna(oa+a4agaðoa/iacee+a2ðnaJo!na¶ð#a\na oPaiiaa#eði:oaeea9aJð#a%uløa%c.i.ace~aeaoe+ð6ooyaea:ðneeiaæ#aa:a#eo!a9a:a#ee+a%eZo!nAmaa:iuFaeeea%eoi#ðn`a%æ#ðaioknaJaace\naJððLon!o:eeða#izðcyi#ðna(oeðo:ozi:a+ec.a#eiu\n#CBD&\nueae!e+aJaa:i(ae.a9aFa9a:ao.a:ðæ6aia%i'aJð i#ðna9a:aacia+eca#c!io~a9ec.aan.ia|agð#a:o~a9au(u(e.a9aFai%i.aeaeaaHaXe.a#c.i\no!a+a¶ai¶aLia+eczo!a+ai'Zð#eaoFE/agð#aa/omðia+aa+æ#alcn.oocaaa#c!i8ð#eao\nO\naHð#aa~c.aea9aa+æ#acn.oomaa%uu(ea2a:a+eerae.a#c.i\niJaæ#a%cLo!a+aiaao!aa%iJa%craaea(o~a9ec!a+an.ia¶ð#ataeaFao/o!n.eiJaa:a%iJomðc.iJaia#o/oke+a#uu(ea(o~aaoon.o\na9aa%a|n!c.iaaa%a#o)e\nao/okn.eiJaa:a%iJomðc.iJaFai\nO%OHG\na#c!iLaealea9a:e#a%iJa4ae.a9a4aeaXi:n.o\nð#aaealao/o!n!eiJaaa%iocðc!iJaFoPða%Loa+a%crai4aa%a#o:e.a%iai\nOIKJ\nu?2c.aXe.a#i_aJð/e+ðð#o~a9a4aeaFæ9a#ena%i_ð#aae.aXao~o!n.eiJa(aa%iJomðc.iJaXia#o/o!e+a%iaJð/iaaJaa:o~aca(ae.aiiroknaa+a4a#ee+ðu(i\nðca|aJðcaa%i'ðc.e+i a~iaL6aJaa%cA3o!aaa#oon.on!ea9aJð#a%u\n#6M7&\nuea(e.a:iJaagðnae!e+aJaa:iONPEaea:ðnee\nJHQ\na9aa(o.a:ðæ6aia%i~aJðoea%e+o~i#ðn aciao!ne#eac.e|i#ðnaoaa:on.a+au{ueaFe.a:iJa\ne!e+aJaaFai¶iao/oke+ia~i:acee+alao/okn.eiJaSR6aeaaaagð#aa#i.ae.a|ðnaJo!nai:a+ec.a#etagaðoae.ai4e!e+aJaa(ie.ðn.eizomalaeaia#o~aa#i\naea2aco!n.aia+ec.a#e3u{u(eaFiJa%oPðc!ieke+aJaa_aiaocaea9aa+æ#alao/okn.eiJaiJð/a+aiðnaJo!n.aieðn!ei~omaXaeaXc.aea9aa+æ#a2ð#aaea\nacokna(ia+ec!a#e§u(ueaoae.a+a)i'e!e+aJaa2aiXaUTomð,¦oa9a6V e!e+aJaa%uXueaagðnaaee!e+aJaa2aiFa#cWTa6omðca%craaa#eVe!e+aJaa%uOi\n\nXSY ZSZSZ[]\\_^a`cb\nd,e\nfgahjiakCk<fgalnmno6p i'm\nq6rOstm,uSrfgKkCvk<war,o<rFxzy kCr%q6o?{SvHi|o<wavHizy}~lSr%kvHiakChziak<oto<wavsg|fgf lHiaq<rF/w'rOvH\"hjy r%kCr\nyfo<kFvS?k<w'r~xzy kCr%qofolHfuSr,gfgm\nzy r\nd\nwarxzy kCr%qv r%~%fr,gKk<onm\nq<r~hzq<vuAf}ar,}fgo<f lHgA~m\nlHg'f k<i'}arO\nvSq6m\nk%\nOUTPUT OF \"EXPONENTIAL\" FILTER\nOUTPUT OF \"BOX CAR\" FILTER\nINPUT SQUARE WAVE\nf lHiaq6r?iakChzi'k<otvSC?vtm\nq6 \"mSg'}:Ch7vHgar,g k<fmSy \"fykCr%q6o\n\n¡S¢ £S£S£¤]¥_¦a§c\n(c)a\n«¬ (r)C %°\n±\n(c)\na\n\nμ\n¶\n·\n\n(c)%±\n(c)S(c)\n(c),2\n(c),3\n(c)a\n(c),\n1»o\n±1⁄4\n¶\n«\n««\n±H·\n±\n±S±\n·S3\n±S±\n±S±\n·A(c)\n±H3\n±Hμ\n±S±\n·S·\n·Sμ\n±H·\n±S±\n1»o\n(c)1⁄21⁄4\n±S±\n±S±\n±H·\n(c),·\n±S±\n±H3\n±S±\n±a(c)\n±\na\n±S3⁄4\n±H3\n·\n¿\n·S·\n±K¶\n±a(c)\n·H¶\n1»o\n21⁄4\n±S±\n±S±\n±H·\n(c),2\n·S2\n±\na\n±S±\n±S±\n±S±\n±\na\n·HA\n±S¿\n±S±\n±S¿\n·S·\n·S\n1»o\n31⁄4\n±S±\n±S±\n±H·\n±SA\n·S3\n·S2\n±S±\n·a\n·H¶\n·Sμ\n±H2\n·S\n±SA\n·\n3⁄4\n±\n«\n(c)%A\n1»o\na\n1⁄4\n±S±\n±S±\n±H·\n±S¿\n·A(c)\n·\n¿\n±S±\n±H\n±K¶\nA(c)\n(c)%±\n·H¶\n(c)S(c)\n·H¶\n·\nA\n±H\n1»o\n1⁄4\n±S±\n±S±\n±H·\n±H·\n±H\n·S2\n±S±\n±S¿\n±S3⁄4\n·\nA\n·H¶\n(c),2\n±Hμ\n(c),2\n±a(c)\n±H·\n1»o\nμ1⁄4\n±S±\n±S±\n±H·\n±Hμ\n(c),·\n(c),·\n±S±\n¿\n¿Aa\n±H3\nS2\na\n·HA\n±H3\n±SA\n±H3\n1»o\n¶1⁄4\n±S±\n±S±\n±H·\n±\na\n2a\n3A(c)\naH±\n3S3\n3A(c)\n(c)a\n±SA\n±H·\nμS3\nμS3\nS\naK\n1»o\n·1⁄4\n±S±\n±S±\n±H·\n±H3\n2a\n3A(c)\nAt±\n¿\n¿Aa\n(c)a\n±SA\n±H·\n·HA\n±H3\n±SA\n±H3\n1»o\n1⁄4\n±S±\n±S±\n±H·\n±H2\n(c),·\n(c),·\n±S±\n±S¿\n±S3⁄4\n±H3\nS2\na\n±Hμ\n(c),2\n±a(c)\n±H·\n1»o\n(c)%±1⁄4\n±S±\n±S±\n±H·\n±H2\n±H\n·S2\n±S±\n±H\n±K¶\n·\nA\n·H¶\n(c),2\n(c)S(c)\n·H¶\n·\nA\n±H\n1»o\n(c)S(c)1⁄21⁄4\n±S±\n±S±\n±H·\n±a(c)\n·A(c)\n·\n¿\n±S±\n·a\n·H¶\nA(c)\n(c)%±\n·H¶\n±SA\n·\n3⁄4\n±\n«\n(c)%A\n1»o\n(c),21⁄4\n±S±\n±S±\n±H·\n±a(c)\n·S3\n·S2\n±S±\n±S±\n±S±\n·Sμ\n±H2\n·S\n±S±\n±S¿\n·S·\n·S\n1»o\n(c),31⁄4\n±S±\n±S±\n±H·\n±a(c)\n·S2\n±\na\n±S±\n±a(c)\n±\na\n±\na\n·HA\n±S¿\n·S·\n±K¶\n±a(c)\n·H¶\n1»o\n(c)a\n1⁄4\n±S±\n±S±\n±H·\n±a(c)\n±S±\n±H3\n±S±\n±S±\n·A(c)\n±S3⁄4\n±H3\n·\n¿\n·S·\n·Sμ\n±H·\n±S±\n1»o\n(c), 1⁄4\n±S±\n±S±\n±H·\n±S±\n±S±\n·S3\n±S±\n±S±\n±S±\n±H3\n±S±\n±S±\n±S±\n±S±\n±Hμ\n±S±\nA\n1»o\n¬\n1⁄4\n¶\n«\n««\n·\n±\n·S2\n¶A\n¶A\n±S±\n2S\naK\n(c),·\n±Hμ\n±KA\n¶\n¶\n«\n¶A\n¶\n«\nACÆEESA\n1»o\n¬\n1⁄4\nE\n¶\n«\n¶\n«\n·\n±\n·S2\n·a\n·S·\naH±\n2Sμ\naKμ\n2S\n(c)%±\n(c),2\n·S3\n·S·\n¶A\n·H¶\nE\nÆ\nEj\n(c)\nI\n«¬ (r)C %°\nA?I\n%I~I%¬ ,Ð (r)<NOPI\nI\nO'OÐ'N%Oa¬Ð0O\nA×FØ"
    },
    {
      "category": "Resource",
      "title": "l1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/eb9841e42c65349db7bc624fe6632dbb_l1.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nLecture # 1\nThe Goal of 6.111\nTransform students into engineers,\ncapable of designing and implementing\ncomplex digital systems.\nUse a hardware description Language (VHDL)\nImplement with multiple existing integrated circuits\nPrior digital design experience is not necessary\nSome experience with circuits is a prerequisite\n(6.002, 6.071 or equivalent)\n6.004 is NOT a prerequisite\nTake 6.004 first\nTake 6.111 first\nTake 6.004 and 6.111 in the same term\n\nObjectives and Outcomes\nOn completion of 6.111 students will have confidence in their abilities\nto conceive and carry out a complex digital systems design project in a\nteam of two or three people. More broadly, they will be ready to\nhandle substantial, challenging design problems. In particular,\nstudents will be able to:\n1. explain the elements of digital system abstractions such as digital logic,\nBoolean algebra, flip-flops and finite-state machines (FSMs).\n2, design simple digital systems based on these digital abstractions, and the\n\"digital paradigm\" including discrete, sampled information.\n3. use basic digital tools and devices such as digital oscilloscopes, PALs,\nPROMs, and VHDL.\n4. work in a design team that can propose, design, successfully implement, and\nreport on a digital circuit design project.\n5. communicate the purpose and results of a design project in written and oral\npresentations.\n\nApproach:\nKnowledge:\nTheory of Digital Electronic Systems\nExamples\nDesign Rules\nGuidelines (from experience)\nEnvironment:\nLab Space\nEquipment: logic analyzers, oscilloscopes,\ncomputers, design software\nChallenges\nQuizzes\nProblem Sets\nLab Exercises\nProject\n\nLab 1:\nFind the lab and wire something\nLearn about equipment: 'scopes, logic\nanalysers\nProgram and test a PAL (A PLD)\nLab 2:\nDesign and implement a complicated FSM\nUse VHDL to program a CPLD\nLab 3:\nDesign exercise using multiple FSM's\nUse VHDL to program a complex FPGA\n\nFinal Project:\nUnstructured Assignment\nUnstructured Solution\nYou and the staff negotiate a proposal\nProposal Conference\nDesign Review(s)\nEarly\nDetailed\nStaff will provide\nHelp with design, debugging and testing\nEncouragement\nPraise (as success evolves)\n\nNecessary Details: Grading and Collaboration\nQuizzes (2):\n20%\nProblem Sets (5)\n10%\nLab Exercises (3)\n35%\nFinal Project\n35%\nCollaboration Policy:\nPlease be civil and don't hog resources such as computers\nDo not collaborate with anyone on quizzes\nDo not copy anything from anyone else\nYou may discuss homework and labs, then do them individually:\nturn in only your own work\nProject phase\nCollaboration is welcomed\nGet help from anyone who will help you\nCopying material is OK (with proper attribution)\n\nPep Talk: Be on Time\nStart Early: Don't wait until near the deadline\nKeep with it: finish early\nResources are finite\nEquipment in the lab\nTA's can be of help, but are pressed late\nDo not expect unlimited help late in a lab\nWe impose late penalties:\nHomework MUST be on time\nLab assignments: 20% per day\nFinal Project: Must be done on time\n\nAn Example: Drive a 7 Segment Display\nThe seven-segment display can be made to display any of, say,\n16 characters (0-F).\n\nInput\nCharacter Segment 1\n0 0 0 0\nON\n0 0 0 1\nOFF\n0 0 1 0\nON\n0 0 1 1\nON\n0 1 0 0\nOFF\n0 1 0 1\nON\n0 1 1 0\nON\n0 1 1 1\nON\n1 0 0 0\nON\n1 0 0 1\nON\n1 0 1 0\nA\nON\n1 0 1 1\nb\nOFF\n1 1 0 0\nc\nOFF\n1 1 0 1\nd\nOFF\n1 1 1 0\nE\nON\n1 1 1 1\nF\nON\n\nAnother Example: Logic to determine if a stoplight is working:\nNow obsolete, but in Massachusetts\nRed+Yellow used to mean \"walk\" So\nthe check must allow for that\ncombination plus any ONE light ON\n\nTo implement 'logic', we:\nStart with Gates: AND, OR, NAND, NOR,\nProgress to Building Blocks which will become paradigms:\nRegisters, Counters, Shift Registers, Multiplexors, Selectors, etc.\nThese things you can wire together and they are all in your kit\nThen we progress to more complex programmable logic devices:\nPALs, CPLD's and FPGA's and we need a language to use to\nprogram them. This brings us to VHDL\n\nVHDL\nVHSIC Hardware Description Language\nLanguage to express digital systems\nStructural\nBehavioral\nTiming\nRich and powerful language\nBasic standard environment\nSupports both\nHardware concepts\nSoftware concepts\n\n-- Massachusetts (Obsolete) Stoplight Example\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity check is port(\nr, y, g:\nin std_logic;\nok: out std_logic;\nsignal t1, t2, t3: inout std_logic);\nend check;\narchitecture logical of check is\nbegin\nmy_label: process(r, y, g, t1, t2, t3) begin\nt1 <= r and (not g);\nt2 <= y and (not g);\nt3 <= (not r) and (not y) and g;\nok <= t1 or t2 or t3;\nend process;\nend logical;\n\nHere is a\na PLD\nsimulation of\nthat function\nimplemented in\nInputs (3)\nOutput\n\nTo do to get started in 6.111:\nFill in the form on the last page of the handout. Only your\nTuesday schedule is important Turn it in NOW.\nGo get lab kit -- they should be ready by Friday\nGet a computer account -- log onto Sunpal1 or Sunpal2 with\nyour Athena login.\nRecitation assignments will be posted in the lab, target date\nis Friday"
    },
    {
      "category": "Resource",
      "title": "l2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/19dd312f259405237aa5b1603649492c_l2.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nLecture # 2\nNow some basics (This IS about digital logic...)\nThe values here (x\nand y) represent\nsomething like\nvoltage (is it +5\nvolts (1) or zero\n(0)? Or is a light\nON or OFF?\n(That is, anything\nthat can take on\none of two values)\nSlid\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nIdentities:\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nMassachusetts Stoplight Example\nF=1 implies stoplight is working correctly\nF=0 implies stoplight is busted\nTruth Table:\nr y g\nF\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\nSlide 3\nF =\n/r*/y*g +\n/r*y*/g +\nr*/y*/g +\nr*y*/g\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nObsolete Stoplight Example: Reduction using Boolean Algebra\nF = R * /Y * /G + /R * Y * /G + /R * /Y * G + R * Y * /G\nStep 1: Since Y + /Y = 1, Slide 3\nR*/Y*/G + R*Y*/G = R*(Y + /Y) * /G = R * /G\nF = R * /G + /R * Y * /G + /R * /Y * G\nStep 2: Use Absorption: R + /R * Y = R + Y\nR*/G + /R * Y * /G = (R + /R * Y) * /G = (R + Y) * /G\nF = (R + Y) * /G + /R * /Y * G = R * /G + Y * /G + /R * /Y * G\nUsing Demorgan:\n/F = ((/R * /Y) + G) * (/G + (R * Y)) = /R*/Y*/G + G * (R + Y)\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nTruth Table:\nr y g\nF\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\nOr look at the zeros:\n/F = /r*/y*/g + /r*y*g + r*/y*g + r*y*g\nSlide 3\nWhich, by Demorgan (Duality) is:\nF = (/r + /y + /g)*(/r + y + g)*(r + /y + g)*(r + y + g)\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n/a\na*b\na*c\n/b*/c\nF = a*b + a*c = a*(b+c)\n/F = /(/a + /(b+c)) = /(/a + (/b * /c))\nF = /a + /b * /c\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\nif file foo.txt contains:\na = (x + z) * (/x + y) * (z + y);\nb = a ^ c;\nd = x * a;\nSlide 3\nthen if you do:\nreduce -b < foo.txt > foo_out.txt\nyou get in foo.out:\na = x * y + /x * z;\n/a = x * /y + /x * /z;\nb = a * /c + /a * c;\n/b = /a * /c + a * c;\nd = x * a;\n/d = /a + /x;\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 Introductory Digital Systems Laboratory"
    },
    {
      "category": "Resource",
      "title": "l3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/77dc6f31eca613d4854a6a093c321a42_l3.pdf",
      "content": "6.111 Lecture # 3\nX1\nZ\nX2\nSimplified Schematic\nof 74LS00 (there are\n4 of these in an '00)\nNote multiple emitter\ninputs\nNAND gate is the basic building block\nTotem pole output\n\nCurrent Convention\n74LS00 Current (mA)\nOutput capability LOW\nIOL\n8 mA\nOutput Capability HIGH\nIOH\n-400 μA\nInput Required LOW\nIIL\n-0.4 mA\nInput Required HIGH IIH\n20 μA\nThese are typical numbers but read data sheet if in doubt:\nThere are many exceptions\n\nTTL Voltage Ranges\nThese are important! Valid input and output values\nare in the ranges shown.\nNote that the\nTRUE switching\nthreshold will be\ndifferent for\ndifferent parts or\ninstruments -- in\ndoubt, best us a\n'scope\n\nNote that either 'state'\n(X=0, Y=1 or\nX=1, Y=0)\nis valid\nTry this in the lab...\n'State' implies memory -- here is how we save information\n\nYou can build one of these from NAND gates, but there is a packaged, MSI\nversion.\nQuestion: what happens if you build one from NOR gates?\n\n'Latch' is an important notion: its input is controlled by a 'gate'\nWhen the 'gate' goes from high to low, the state of the device holds\nQuestion: what happens if the input and gate change state at nearly\nthe same time?\n\nLatch type logic has an issue with propagation of signals\nHow many stages of logic will be affected by a signal\nchange during one clock (G high) cycle?\nMulti-phase clocks have been used for this (Half the G's high\none instance, the other half the next), but there is a better\nsolution...\n\nEdge triggered logic\ndiffers from latches in\nthat it is the transition\nof the 'clock' input that\ncauses the flip flop to\nhold state\nActual implementation\nis not quite like what is\nshown here.\nIt takes a little effort to\nreason through what\nthis part does. See that\nthe 'preset' and 'clear'\nare asynchronous,\nwhich means they take\neffect right away,\nwithout waiting for the\nclock edge.\n\nSetup Time: Input must be stable before the clock edge\nHold Time: Input must stay stable after the clock edge\nClock to Q: maximum time for output to be stable after clock edge\nCL or PR to Q: maximum time for output to be stable after\nasynchronous input\nMax Frequency = 1/(Clock HIGH + Clock LOW)\n\nFlip flops are simple finite state machines. Here is how we describe such\nmachines\nTransitions (arcs)\nState\n\nThe SR FF is an edge triggered version of the SR latch. It has an\nundefined state problem that is solved in the JK FF\nNote this JK has a negative edge triggered clock!\n\nMultiplexer's (MUX'es) are an important building block\nThis one selects one of four inputs based on an 'address'\n\nThe 74LS151 part has 8 inputs and so 3 bits of address\nIt also has a 'strobe' input which is functionally a chip select\nThe output is presented both direct and inverted\n\nCounting is a very important function in the digital world, and it is done\nin a variety of ways\nHere is a 'ripple' counter using negative edge triggered T flip flops\nCount Sequence:\nThe LSB is on the left in this diagram. It always\ntoggles.\nThe transition of 1 -> 0 of each 'bit' triggers a\ntoggle of the next most significant bit\n0 0 0 0\n0 0 0 1\n0 0 1 0\n0 0 1 1\n0 1 0 0\n0 1 0 1\n0 1 1 0\n0 1 1 1\n1 0 0 0\n1 0 0 1\n1 0 1 0\n1 0 1 1\n1 1 0 0\n\nHere is why it is called a 'ripple' counter:\nThe effect of each input transition must affect all bits, and it does this\nby rippling through from LSB to MSB\nAn odd effect is that the transient count is always less than the true\ncount.\nCan COUNT fast, but maybe can't be READ fast!\n\n'Synchronous' counters use more logic to reduce the time to stable outputs.\nHere is a simplified version of the 4 bit 74LS163 counter\n\nNote that, while all bits of the synchrous counter are set very close to the\nsame time, they may not be set at exactly the same time.\nThis means that there is a rapidly changing transient state of the counter.\nIf it passes through all one's it will cause a 'glitch' on the ripple carry out.\nYou are asked to look for this in Lab 1, but you may not see it!\n\nThe '163 will 'count' ONLY if P and T are both high\nNote that RCO is the AND of all four bits and T.\nSo if this is input to the T input of the next higher nibble, it\nindicates that all bits below are set, so the next higher nibble\nshould count.\nP is 'count enable', and P and T should be tied together ONLY\nfor the least significant 4 bits of a counter.\n\nWith a little ingenuity, you can achieve all kinds of count sequences. These\nare both divide by twelve circuits."
    },
    {
      "category": "Resource",
      "title": "l4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/a8e40a47cb0b634e8512cce5efba8cc4_l4.pdf",
      "content": "6.111 Lecture # 4\nSs\nCounting is a very important function in the digital world, and it is done\nin a variety of ways\nHere is a 'ripple' counter using negative edge triggered T flip flops\nCount Sequence:\nThe LSB is on the left in this diagram. It always\ntoggles.\nThe transition of 1 -> 0 of each 'bit' triggers a\ntoggle of the next most significant bit\n0 0 0 0\n0 0 0 1\n0 0 1 0\n0 0 1 1\n0 1 0 0\n0 1 0 1\n0 1 1 0\n0 1 1 1\n1 0 0 0\n1 0 0 1\n1 0 1 0\n1 0 1 1\n1 1 0 0\n\nHere is why it is called a 'ripple' counter:\nThe effect of each input transition must affect all bits, and it does this\nby rippling through from LSB to MSB\nAn odd effect is that the transient count is always less than the true\ncount.\nCan COUNT fast, but maybe can't be READ fast!\n\n'Synchronous' counters use more logic to reduce the time to stable outputs.\nHere is a simplified version of the 4 bit 74LS163 counter\n\nNote that, while all bits of the synchrous counter are set very close to the\nsame time, they may not be set at exactly the same time.\nThis means that there is a rapidly changing transient state of the counter.\nIf it passes through all one's it will cause a 'glitch' on the ripple carry out.\nYou are asked to look for this in Lab 1, but you may not see it!\n\nThe '163 will 'count' ONLY if P and T are both high\nNote that RCO is the AND of all four bits and T.\nSo if this is input to the T input of the next higher nibble, it\nindicates that all bits below are set, so the next higher nibble\nshould count.\nP is 'count enable', and P and T should be tied together ONLY\nfor the least significant 4 bits of a counter.\n\nWith a little ingenuity, you can achieve all kinds of count sequences. These\nare both divide by twelve circuits.\n\nFinite State machines\nWe have already seen simple FSM's in Flip Flops and Counters\nBut you can do much more complex things with them\nAfter a clock edge, the 'machine' assumes a state that depends on\nwhere it was before the edge and its inputs just before the edge\n\nIf the input is wired to the\noutput logic, the output can\nchange asynchronously in\nresponse to changes in the\ninput.\n\nOn the other hand, if the\ninput is used ONLY in the\nnext-state logic, the output\nis fixed during each clock\ncycle and only changes\nafter the clock edge.\n\nWe have automated procedures to build the logic foe finite state machines, but\nhere is an example of a very simple machine.\nThis is one way of describing an\nFSM, in terms of transitions on\neach clock edge.\n4 possible states require 2 bits of\nstate. This is a mealey machine\n\nIt is straightforward to build a truth table for 'next state' based on 'present\nstate' and input. The output is also derived from the same variables.\n\nHere is the logic that would be required to implement that FSM, if it were made out of\ndiscrete gates.\n\nProgrammable Logic: Here are two old PALs\nNote I, O and I/O pins\nPower and Ground are consistently upper right and lower left\nClock is pin 1 and /OE is lower right, if those are required\nThese are historic parts: fast, cheap and you probably won't ever see one\n\nHere is a schematic\ndiagram for the 16L8: we\ncan learn more about this\nby considering its parts.\nIt more complex parts it is\nnot usual to see the whole\nwiring diagram as you do\nhere.\n\nProgrammable Array Logic (PAL)\nThe basic element is the 'product term': essentially a wired AND of input signals\nand their complements\nYou can make things like a*b*/c\n\nAll of these devices synthesize a large OR of ANDs\n\nOr the output can be registered, as in the 16R4\nNote that in this case the 'feedback' is\nfrom the register, not the pin.\nPin 1 is now dedicated to being the\nclock input and is not available as a\nregular input.\nPin 13 (or the lower right hand pin) is\noutput enable and is not available as a\nregular input\n\nProgrammable Logic Devices have become more complex\nHere is the block diagram level diagram of the 22v10\nThe Programmable Array is familiar\nNote the ORs employ different numbers of product terms\nAnd here the output architecture is also programmable\n\nThis is the output logic macrocell for the 22V10\nOutput enable is derived froma single product term\nOutput Select has 4 choices:\nDirect or inverted\nRegistered direct or inverted\n'Feedback' input is either from the register or from the pin\nThe clock is still from Pin 1\nThe select bits are programmed\n\nCPLD's are just more complicated PLD's\nHere is a diagram for the Cypress '374i part\n\nHere is a program logic block\nNote there are both I/O and 'buried' macrocells\n\nInput/Output Macrocell (programmable architecture)\nNot a lot different from the PAL\nNote there are four available clock lines: chosen by a MUX\n\nLab Kits have four '374i parts\nNote that interconnections limit flexibility of signal allocation"
    },
    {
      "category": "Resource",
      "title": "l5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/285978d088e4a4d45a171438eb3c771f_l5.pdf",
      "content": "6.111 Lecture # 5\nVHDL: Very High speed integrated circuit Description Language:\nAll VHDL files have two sections: architecture and entity\n-- Massachusetts (Obsolete) Stoplight Example\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity check is\nport(r, y, g: in std_logic;\nok: out std_logic);\nend check;\narchitecture logical of check is\nsignal t1, t2, t3: std_logic;\nbegin\nt1 <= r and (not g);\nt2 <= y and (not g);\nt3 <= (not r) and (not y) and g;\nok <= t1 or t2 or t3;\nEntity section\ndescribes input and\noutput\nArchitecture section\ndescribes what to do\nwith those signals\nend logical;\n\nlibrary\nclause describes the basic library to make reference to\nuse\nclause establishes definitions of many important items\nfor most situations, use these 'as is'\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nOther libraries will be used and you will have the opportunity to make libraries\nof your own.\n\nThe entity declaration can be quite complex and has a lot of information\nI/O signals are referrred to as PORTs. These signals have Mode and Type\nThe Mode of a signal can be in, out, buffer or inout\nin and out are straightforward\nbuffer is like out, but is available within the architecture\ninout is a tri-state (bidirectional)\nNote how vectors (multi-bit) signals are handled.\n\nWe can avoid using Mode BUFFER\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity foo is\nport (in1, in2: in std_logic;\nout1, out2: out std_logic);\nend foo;\narchitecture no_buffer_mode of foo is\nsignal inside: std_logic;\nbegin\ninside <= in1 AND in2;\nout1 <= inside;\nout2 <= inside OR (not in1);\n-- really wanted out2 <= out1 OR (not in1);\nend no_buffer_mode;\nNote the additional\ndeclaration of signal inside\nthe architecture section.\nNote the names in the\narchitecture section need\nnot be unique and are there\nfor readability\n\nType of signals are defined in\nLIBRARY ieee;\nuse ieee.std_logic_1164.all;\n(VHDL is defined by IEEE Standard 1164)\nstd_logic types can take values:\nU\nUninitialized\nX\nUnknown\nZero\nOne\nZ\nTristate (Must be upper case!)\nW\nWeak unknown\nL\nWeak\n\nZero\nH\nWeak\n\nOne\n-\nDon't care\nNote that in most cases we don't really need to use all of these values\n\nExtract of the report file (*.rpt)\nDESIGN EQUATIONS\n(12:32:59)\nt1 =\nr * /g\nt2 =\ny * /g\nt3 =\n/r * /y * g\nok =\n/r * /y * g\n+ r * /g\n+ y * /g\n\nMore from the report file: If YOU don't set pin numbers, the compiler will.\nC22V10\n__________________________________________\ng =| 1|\ny =| 2|\nr =| 3|\nnot used *| 4|\nnot used *| 5|\nnot used *| 6|\nnot used *| 7|\nnot used *| 8|\nnot used *| 9|\nnot used *|10|\nnot used *|11|\nnot used *|12|\n|24|* not used\n|23|= t3\n|22|= t1\n|21|* not used\n|20|* not used\n|19|* not used\n|18|* not used\n|17|* not used\n|16|* not used\n|15|= t2\n|14|= ok\n|13|* not used\n__________________________________________\n\nEasy Way to Assign Pins:\nDon't assign pins first.\nLet galaxy pick them and wire to those pins.\nFind out the pins from the report file\nTo put them in to avoid rewiring.\nclick on Files->Annotate\nAfter a pop up, this produces and xxx.ctl file which then is used along with\nxxx.vhd.\nOR you can use the pin_numbers attribute (next slide)\nBe careful not to put a pin number in here which conflicts with a pin_avoid\nattribute\nin your xxx.vhd file.\n\nAttributes provide information about VHDL constructs such as\nEntities\nArchitectures\nTypes\nSignals\nPin_numbers maps extrernal signals to specific pins\nPin_avoid means to not use specific pins.\nSee the xxx.vhd files in /mit/6.111/cpld/sources/ for guidance in choosing\npins\nand/or avoiding pins.\n\nExample Using Pin_avoid Attribute:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity fulladd is\nport (ina, inb, inc : in std_logic;\nsumout, outc : out std_logic);\nATTRIBUTE pin_avoid of fulladd :ENTITY is\n\" 19 \" &\n\" 12 \" ;\nend fulladd;\nHere is the contents of a control (.ctl) file:\nAttribute PIN_NUMBERS of Reserved2 is \"19\" ;\nAttribute PIN_NUMBERS of outc is \"14\" ;\nAttribute PIN_NUMBERS of sumout is \"13\" ;\nAttribute PIN_NUMBERS of Reserved1 is \"12\" ;\nAttribute PIN_NUMBERS of ina is \"3\" ;\nAttribute PIN_NUMBERS of inb is \"2\" ;\nAttribute PIN_NUMBERS of inc is \"1\" ;\n\nSo here is one example of a VHDL implementation\nThe issue is an adder: we can make a 'full adder' from two 'half adders' and a\nlittle\nbit of logic. Here, to start is the half adder:\n\nSo here is the 'half adder' implemented in VHDL:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\n-- here is the entity\nentity halfadd is\nport (a, b : in std_logic;\nsum, c : out std_logic);\nend halfadd;\narchitecture comp of halfadd is\nbegin\n-- a concurrent statement implementing the and gate\nc <= a and b;\n-- a concurrent statement implementing the xor gate\nsum <= a xor b;\nend comp;\nThese statements are 'concurrent', which means they are executed at the same time and\nwith no precedence.\n\nNow how would you make a 'full' adder?\ncin x\ny\nbout cout\nSo a cascade of 2 half adders\nand an or gate does it\n\nHere is an implementation of the full adder using component instantiation\nthrough a port map:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity fulladd is\nport (ina, inb, inc : in std_logic;\nsumout, outc : out std_logic);\nend fulladd;\narchitecture top of fulladd is\ncomponent halfadd\nport (a, b : in std_logic;\nsum, c : out std_logic);\nend component;\nsignal s1, s2, s3 : std_logic;\nbegin\n-- a structural instantiation of two half adders\nh1: halfadd port map( a => ina, b => inb,\nsum => s1, c => s3);\nh2: halfadd port map( a => s1, b => inc,\nsum => sumout, c => s2);\noutc <= s2 or s3;\nend top;\n\nSo here is how a compilation and simulation of this simple problem might go.\nsetup 6.111\nGalaxy &\n\nNow use the pulldown files -> add\n\nAt this point you add files: click on file in left window and then the arrow\nthat shows up in the middle. Add all the files to be compiled. Then OK\n\nHere is what the project screen looks like now, with the files added.\nNext Step is to select a Device and select top file and Set Top\n\nWe pick the\ndevice: here a\n22v10 will hold\nthe required\nlogic. We also\nselect a package\n(not really\nimportant if we\nare only\nsimulating) and\nwe also pick a\nsimulation\nscheme.\n\nHere it is ready to compile: device and top design file are selected.\nWe will use' Smart' Compile: the program figures out what to do\n\nThis is what the compile screen looks like. If therre are errors they will show up\nhere. Note we have an error here at the very last step, which is setting up for\nNOVA. Not to worry: this was just a disagreemnt over displays. Note a lot of stuff\nscrolls by: see the scroll bar on the right.\n\nHere is he opening screen for Nova, a simple simulator. Invoke from 'tools'\non the project screen or from the command line. Use file->open\n\nWe must select a .jed (JEDEC) file for\nthe simulation. In this case the correct\nfile gets its name from the top design file\nand is fullad.jed\n\nHere is the simulation. Use Edit to set up the inputs: here we just set each input to\nbe driven as a 'clock' with different (X2) periods to cycle through all possible\ninputs. Then Simulate generates the output."
    },
    {
      "category": "Resource",
      "title": "l6.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/1ceca1b2ee9825a42ed2160408eb08b5_l6.pdf",
      "content": "Case-When\nIf-Then-Elsif-Else\nSignal assignment\nSequential (must be inside a process)\nProcess (used as wrapper for sequential statements)\nWith-Select-When\nWhen-Else\nInstantiation\nSignal assignment\nConcurrent\nVHDL Statements\n6.111 Lecture # 6\n\ninb WHEN OTHERS;\ninb WHEN '1',\noutc <= ina WHEN '0',\nWITH inc SELECT\nSelect conditions must be mutually exclusive and exhaustive\nWith-Select-When (Note: always use OTHERS as there are values other than '0' and '1')\nOr:\nh1: halfadd PORT MAP (ina, inb, sum, c);\nsum => s1, c => s3);\nh1: halfadd PORT MAP (a => ina, b => inb,\nInstantiation:\noutc <= ina AND (inb OR inc);\nSignal assignment:\nConcurrent Statements\n-- positional association\n-- named association\n\nSignals must be a declared outside of the process\n'Variables' may be declared within a process (more later)\nSignal assignments can be both sequential and concurrent\ninterpreting this statement)\nStatements within a process are 'executed' sequentially (but use care in\nSequential statements model combinational or synchronous logic (or both)\nA process is a wrapper for sequential statements\nMultiple processes are possible in an architecture\nA process is concurrent with other concurrent statements\nProcess Statement\n\nclocks)\nSensitivity list is not synthesized in actual logic (except for the use of\nchanges\nWhen simulated, the process is executed when something in that list\nSensitivity list is there for simulation:\n-- sequential statements\nEND PROCESS;\nPROCESS (sensitivity list)\nBEGIN\nProcess label and variable declarations are optional:\n-- sequential statements\nEND PROCESS label;\nBEGIN\nPROCESS (sensitivity list)\nVARIABLE -- declarations\nlabel:\nProcess Syntax:\n\nare curious (various LOOP statements, etc.)\nThere are other sequential statements which we won't use. See the book if you\nEND CASE;\nCASE inc IS\nCase-When:\nEND IF;\nIf-then-elsif-else\noutc <= ina AND (inb or inc);\nSignal Assignment\nSequential Statements\nELSIF\nIF\nWHEN OTHERS\nWHEN '1'\nWHEN '0'\ninc = '1' THEN outc <= inb;\ninc = '0' THEN outc <= ina;\nELSE outc <= inc;\n=> outc <= ind;\n=> outc <= inb;\n=> outc <= ina;\n\n&\nConcatenation -- defined for strings and signal values\nArithmetic:\nRelational (use ieee.std_logic_1164.all)\nAND, OR, NAND, NOR, XOR, XNOR, NOT\nLogical (use ieee.std_logic_1164.all)\nBasic Operators\n+, -\n=, /=, <, >, <=, >=\n-\n(* too, but it can't be synthesized)\nis defined for unary arithmetic too\n(note that <= and => have other meanings too)\n\nSynthesis ignores this sensitivity list\n(NOT when each sequential statement is executed)\nAll signals in the process are updated when the process finishes\n(we use the sensitivity list for this purpose)\nProcesses: you must list conditions that initiate evaluation of the process\nstatement, that statement is evaluated\nIf evaluation of a concurrent statement changes the input to a concurrent\nConcurrent statements are evaluated whenever any input changes\nSimulation is used to produce outputs from specified input signals\n(processes as well as other concurrent statements)\nSynthesis is to produce hardware that does what the statements specify\nSimulation vs. Synthesis\n\nWhat will synthesis do with this?\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nWill this generate one or two flip\nentity reg is\nflops?\nport (\na, clk : in std_logic;\nc\n: out std_logic);\nend reg;\narchitecture top of reg is\nsignal b : std_logic;\nbegin -- top\nreg2: process (clk)\nbegin -- process\nif rising_edge(clk) then\nb <= a;\nc <= b;\nend if;\nend process;\nend top;\n\nclk\nb.C =\na\nb.D =\nclk\nc.C =\nb.Q\nc.D =\nDESIGN EQUATIONS\nWell, here is what it did, from the .rpt file:\n(16:16:54)\n\n-- this produces q = /g * q + d * g (mind your g's and q's!)\nend process;\nend top;\nbegin\nprocess(d, g)\nbegin\nIF g = '1' then q <= d;\narchitecture top of reg is\nend reg;\nentity reg is\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nImplicit Memory - Latch example\nport (d, g: in std_logic;\nend IF;\nq\n-- notice there is no ELSE\n: out std_logic);\n\nend top;\nbegin\nq <= s1;\ns1 <= d when g = '1' else s1;\narchitecture top of reg is\nsignal s1: std_logic;\nend reg;\nentity reg is\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nExplicit Memory: Latch (same function, different architecture)\nport (d, g: in std_logic;\nq\n: out std_logic);\n\nend process;\nend top;\nbegin\nprocess (s1, d, g)\nbegin\nif g = '1' then s1 <= d;\narchitecture top of reg is\nsignal s1: std_logic;\nend reg;\nentity reg is\nlibrary ieee;\nuse ieee.std_logic_1164.all;\n(note this is more verbose than the prior)\nExplicit Memory: Latch (same function, yet another architecture)\nport (d, g: in std_logic;\nq\nend if;\nelse s1 <= s1;\n: out std_logic);\n\n--\n-- this produces q.D = t*/q.Q + /t*q.Q\nend process;\nend top;\nbegin\nq <= s1;\narchitecture top of clked_t is\nsignal s1: std_logic;\nend clked_t;\nentity clked_t is\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nClocked Register (implicit memory): This is a T-ff\nend if;\nif rising_edge(clk) then\nbegin\nprocess (clk, s1)\nport (t, clk : in std_logic;\nend if;\nif t = '1'\nq\nand q.C = clk\nthen s1 <= NOT s1;\n: out std_logic);\n\n--\n-- this produces q.D = t*/q.Q + /t*q.Q\nend process;\nend top;\nbegin\nq <= s1;\narchitecture top of clked_t is\nsignal s1: std_logic;\nend clked_t;\nentity clked_t is\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nClocked Register (explicit memory): This is a T-ff\nend if;\nif rising_edge(clk) then\nbegin\nprocess (clk, s1)\nport (t, clk : in std_logic;\nend if;\nif t = '1'\nq\nand q.C = clk\nelse s1 <= s1;\nthen s1 <= NOT s1;\n: out std_logic);\n\nworking. This is the entity for this counter. The architecture comes next.\nNote we are using generic to define a number which we can easily redefine once we get the thing\nend ctr;\nport(\nclk: in std_logic;\nn_clr, n_ld, enp, ent: in std_logic;\nentity ctr is\ngeneric (width: integer := 4); -- allows to change width easily\nuse work.std_arith.all;\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nExample: build a counter\nrco out std_logic);\ncnt out std_logic_vector (width-1 downto 0);\ndata in std_logic_vector (width-1 downto 0);\n\nend behavioral;\ncnt <= intcnt;\nzco <= '1' when ((ent = '1') AND (intcnt = allones))\nend process clocked;\nallones <= (others => '1');\nbegin\nif rising_edge(clk) then\nclocked: process (clk)\nsignal intcnt, allones: std_logic_vector (width-1 downto 0);\nbegin\nArchitecture behavioral of ctr is\nend if;\nend if;\nelsif (enp = '1') and (ent = '1') then\nintcnt <= intcnt +1;\nintcnt <= data;\nintcnt <= (others => '0');\nelsif n_ld = '0' then\nif n_clr = '0' then\nelse '0';\n\ny\nend divby5;\nentity divby5 is port\n(\nuse work.std_arith.all;\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nHere is a suitable entity declaration:\nremainder. Output is the bit by bit dividend.\nBinary divide by 5, bitwise. This is a simple FSM for which current state is the running\nConstruction of a finite state machine in VHDL\nx, clk\n: in std_logic;\n: out std_logic);\n\nn_s <= state0;\nif x = '1' then\nwhen state2 =>\nend if;\nn_s <= state2;\nelse\nn_s <= state3;\nwhen state1 => y <= '0';\nif x = '1' then\nend if;\nn_s <= state0;\nelse\nn_s <= state1;\narchitecture state_machine if divby5 is\ntype StateType is (state0, state1, state2, state3, state4);\nsignal p_s, n_s : StateType;\nbegin\nfsm: process (p_s, x)\nbegin\ncase p_s is\nwhen state0 => y <= '0';\nif x = '1' then\nelse\ny <= '1';\nContinued next slide...\n\nend process state_clocked;\nend architecture state_machine;\np_s <= n_s;\nend if;\nbegin\nif rising_edge(clk) then\nend process fsm;\nstate-clocked\n: process (clk)\nwhen others => n_s <= state0; -- avoid trap states\nend case\nend if;\nn_s <= state3;\nelse\nn_s <= state4;\nwhen state4 => y <= '1';\nif x = '1' then\nend if;\nn_s <= state1;\nelse\nn_s <= state2;\nwhen state3 => y <= '1';\nif x = '1' then\ny <= '0';\nend if;\nn_s <= state4;"
    },
    {
      "category": "Resource",
      "title": "l7.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/e968355335100fafa351ab93aaca12e9_l7.pdf",
      "content": "6.111 Lecture # 7\nTake another look at that divide by five FSM.\nHere is, roughly what we would expect\nfrom the Mealey machine model of that\nthing with inputs and outputs as\nspecified\n\nHere is the VHDL code from last time, crowded\nonto a single sheet:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all;\nentity divby5 is port\n(\nx, clk : in std_logic;\ny\n: out std_logic);\nend divby5;\narchitecture state_machine if divby5 is\ntype StateType is (state0, state1, state2, state3,\nstate4);\nsignal p_s, n_s : StateType;\nbegin\nfsm: process (p_s, x)\nbegin\ncase p_s is\nwhen state0 => y <= '0';\nif x = '1' then\nn_s <= state1;\nelse\nn_s <= state0;\nend if;\nwhen state1 => y <= '0';\nif x = '1' then\nn_s <= state3;\nelse\nn_s <= state2;\nend if;\nwhen state2 =>\nif x = '1' then\nn_s <= state0;\ny <= '1';\nelse\nn_s <= state4;\ny <= '0';\nend if;\nwhen state3 => y <= '1';\nif x = '1' then\nn_s <= state2;\nelse\nn_s <= state1;\nend if;\nwhen state4 => y <= '1';\nif x = '1' then\nn_s <= state4;\nelse\nn_s <= state3;\nend if;\nwhen others => n_s <= state0;\n-- avoid trap states\nend case\nend process fsm;\nstate-clocked\n: process (clk)\nbegin\nif rising_edge(clk) then\np_s <= n_s;\nend if;\nend process state_clocked;\nend architecture state_machine;\n\nAnd when we simulate it, here is what we get\nNote that the output is the overlap of the input bit and the state\n(when in state 2, so the output depends on the input directly\n\nModification to register the output:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all;\nentity divby5 is port\n(\nx, clk : in std_logic;\ny\n: out std_logic);\nend divby5;\narchitecture state_machine of divby5 is\ntype StateType is (state0, state1, state2, state3,\nstate4);\nsignal p_s, n_s : StateType;\nsignal ans : std_logic := '0'; -- new\nbegin\nfsm: process (p_s, x)\nbegin\ncase p_s is\nwhen state0 => ans <= '0';\nif x = '1' then\nn_s <= state1;\nelse\nn_s <= state0;\nend if;\nwhen state1 => ans <= '0';\nif x = '1' then\nn_s <= state3;\nelse\nn_s <= state2;\nend if;\nwhen state2 =>\nif x = '1' then\nn_s <= state0;\nans <= '1';\nelse\nn_s <= state4;\nans <= '0';\nend if;\nwhen state3 => ans <= '1';\nif x = '1' then\nn_s <= state2;\nelse\nn_s <= state1;\nend if;\nwhen state4 => ans <= '1';\nif x = '1' then\nn_s <= state4;\nelse\nn_s <= state3;\nend if;\nwhen others => n_s <= state0; -- avoid\ntrap states\nend case;\nend process fsm;\nstate_clocked\n: process (clk)\nbegin\nif rising_edge(clk) then\np_s <= n_s;\ny <= ans;\n-- register output\nend if;\nend process state_clocked;\nend architecture state_machine;\n\nOn simulation, we note that:\n1. Each of the output bits is one clock cycle long\n2. But the output is delayed one clock cycle\n\nTopics for today\nCertain issues in timing and handling pulse like signals\nLab 2\nThis is a very small up/down counter\nThe logic is straightforward to design\nNote it has two flip flops but does not use all four states\n\nBut look at a possible timing issue:\nIF we are in state 10\nIF u = 1, we stay in state 10\nIF u=0, we go to state 01\nIF u=0 and then makes a transition to 1, we still want to stay in state 10\nBUT if u=0 and then makes a transition to 1 too close to the clock edge,\nThe transition of D0 from 1 to 0 is delayed with respect to D1\n(by one gate delay)\nAnd it this happens the thing goes into a state it isn't supposed to\n\nDesign Rule:\n1. Synchronize ALL external signals\n2. Any asynchrous input must affect ONLY ONE flip-flop (which is\nswitched synchronously with all of the other flip-flops)\n\nTiming techniques\nOne problem is to catch a signal that may be shorter than your clock\ncycle.\nNote that here we have one use\nfor the S-R latch.\nThis does well at catching a very\nshort pulse, but if /GO is low for\nseveral clock cycles, P will have\nseveral pulses.\nYou might want to think about\nhow to design a circuit which\ntakes a /GO signal of arbitrary\nlength and produces a SINGLE\npulse in response.\n\nHere is a candidate for that\nIt generates a single pulse (one clock cycle wide)\nBut note that A has to be asserted on a positive going clock edge\n\nVHDL Code for short pulse catcher\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity spulse is\nport(N_GO, CLK, CLKIN: in std_logic;\nP: out std_logic);\nend spulse;\n-- purpose: catch a short pulse\narchitecture behavioral of spulse is\nsignal A, N_A, X, N_X, N_CLK: std_logic;\nattribute synthesis_off of A: signal is true;\nattribute synthesis_off of N_A: signal is true;\nbegin -- behavioral\nA <= (not N_GO) or (not N_A);\nN_A <= (not A) or (not N_X);\nN_X <= (not X);\nP <= X and N_CLK;\nN_CLK <= (not CLKIN);\nff: process(CLK)\nbegin\nif rising_edge(CLK) then\nX <= A;\nend if;\nend process ff;\nend behavioral;\nNote the rather odd\nlooking syntax here: using\nthe attribute synthesis_off\ntells the compiler to not\noptimize away the latch\nThis combinatoric part of\nthe code describes the SR\nlatch and the output\nThe process describes\nthe d- flip-flop\n\nVHDL Code for pulse shaper\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity pform is\nport(A, CLK, CLKIN: in std_logic;\nP: out std_logic);\nend pform;\n-- purpose: catch a short pulse\narchitecture behavioral of pform is\nsignal X, N_Y: std_logic;\nbegin -- behavioral\nff: process(CLK)\nbegin\nif rising_edge(CLK) then\nX <= A;\nN_Y <= (NOT X);\nend if;\nend process ff;\nP <= (X AND N_Y);\nend behavioral;\n\nLab 2 assignment is yet another traffic light\nThis time you control it\nIt looks like a familiar situation\nMain and side streets, with a walk light on demand\nMain street part of cycle is\nlonger than side street\n(Tbase+Text)\nBut side street has a traffic\nsensor which keeps it green a\nbit longer. (Text)\nTraffic sensor must be\nsynchronized.\nWalk button must be latched\nand serviced at the right\ntime, and unlatched after it\nhas been serviced\nDetails: walk is R-Y.\nBlink is Main Y, Side R,\nON/OFF, equal intervals\n(Tblink).\n\nDesign Procedure:\nStart with a simple block diagram\nBreak design down into more, simpler blocks\nHere is a top level block diagram for a controller\nNote this GO signal is\nsimilar to what we\nwere discussing\nearlier: a single pulse\nin response to a\npushbutton (which\ncould be any length)\nInputs\nOutputs (light signals)\n\nThis is a conceptual developed block diagram for the machine\nWe want you to use REAL RAM,\nThe FSM should be implemented in a CPLD\ndo not include it in your CPLD\nThe Hex LED's are used\nto examine memory\nIt is your call if you\nwant to implement the\ntimer and divider in\nthe CPLD (We expect\nyou probably will\nwant to do it this way\n\nInputs To Your FSM:\nRESET\n(from a switch)\nGOSYNC\n(from Synchronizer)\nF1, F0\nFunction Selection (from switches)\nL1, L0\nRAM Address\nSensor\nTraffic Sensor (synchronized from a switch)\nWR\nWalk Request (Re-settable latch from pushbutton)\nEXPIRED\nSignal that timer has timed out\nOutputs From Your FSM\nA1, A0\nSRAM Address\nWE\nSRAM Write Enable (source of bus signal)\nStartTimer\nResets 1 second increment timer\nGm, Ym, Rm,\nGs, Ys, Rs\nTraffic light control signals\n\nControl Specifications\nHere are the functions your controller must implement\nF1 F0\nare the function control switches\n0 0\nExamine Memory Location Specified by Switches\n0 1\nStore Value in Memory Location Specified by Switches\n1 0\nRun Traffic Lights\n1 1\nBlink\nAnd for writing to or examining memory (functions 0 and 1) you\nshould use these addresses:\nA1 A0\n0 0\nTYEL\nTime for yellow light\n0 1\nTBASE\nBase interval\n1 0\nTEXT\nExtension interval\n1 1\nTBLINK Blink Interval"
    },
    {
      "category": "Resource",
      "title": "l8.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/81a6affc5d43f1e0270b28e729d4bf9f_l8.pdf",
      "content": "6.111 Lecture # 8\nTopics for Today: (as time permits)\n1. Memories\n2. Assembling 'packages' for designs\n3. Discussion of design procedure\n4. Development of a design example using a finite state machine\nPreview:\nNo class Monday (Student Holiday)\nWednesday: quiz rev iew and discussion of Phase II\nFriday: Quiz 1\n\nMemories are usually organized as 2- dimensional arrays of cells\nAddress is split into two parts e.g. 4k = 4096 addresses = 214\nmight have 7 bits of address for each of row and column\n\nConceptual Memory Cell: This is what goes at each intersection of the row\nand column lines (i.e. there are a lot of these!)\nNote how this is like a 'D-Latch' The lines D and D* are from the row\ndecoder and control.\nD = D* = '1' => 'Read': cell contents go onto sense lines\nD = D* = '0' => This row is not addressed. Output is high (collectors\nopen and some other row drives sense\nlines)\nD = /D* and G = '1': 'Write': D is latched onto cell when G goes low\nOutput of this cell is 'open\ncollector' and so \"pulls\ndown\" the sense lines that\ngo to the column decoding\nMUX\n\nControl Lines:\nOften Active Low\nOE is 'Output Enable'\nWE is 'Write Enable'\nCS is 'Chip Select'\nIf: /WE is LOW,\n/CS is LOW,\n/OE is HIGH,\nData pins are input\nInput data is written to chip\nIf /WE is HIGH\n/CS is LOW\n/OE is LOW\nData pins are output\nDate is read from memory\n\nSome have simpler control structure\nThe /OE line is in many cases redundant (but having the extra line to use can be\nconvenient)\nIn these parts,\nRead => /CS = LOW and /WE = HIGH\nWrite => /CS = LOW and /WE = LOW\n\nRead Cycle Timing\nAddress takes a little while to propagate into the right places\nIt takes a bit less time for the part to 'grab' the output pins\n(invalid data may be on them initially)\nAnd note it takes a little while after /CS goes high for the part to let go\nof the output pins\nAnd if Address goes invalid before /CS goes high, there may be invalid\ndata on the output pins\n\nWrite cycle timing is a little more complex\n==> It is most important that Address and Data must BOTH be valid\nduring the write pulse <==\n==> It is also important that Address must be fixed and valid during\nthe Whole of the write pulse <==\n==> Data must be valid\nfor a period at the\nend of the write\npulse <==\nTristated or unstable\naddress lines can wind up\nwriting garbage to a large\nnumber of memory\nlocations!\n\nHere is a general purpose suggestion for handling memory in a FSM controlled\nsystem.\nYou can do it more simply in Lab 2\nDriving /CS with /CLK ensures 'clean' write pulses and reduces the possibility of\nbus contention. Both WRITE and READ operations are enabled only on the\nsecond half of the clock cycle (before the positive going edge)\n\nThis timing diagram illustrates how the scheme on the previous slide might work.\nIt assumes Addr changes after the positive going clock edge and so is\nstable\nwhen the clock is low.\nAlso, if the control lines are driven by a FSM, they will change after the\npositive going clock edge too.\n\nPackages contain bits (or larger pieces of code) that you may re-use.\nThey are introduced by statements such as:\nuse work.gridpkg.all;\nTo set up a package you first write and test the pieces\n(perhaps using smaller PLD's than you plan for the actual project to save computation\ntime) and then:\n-Assemble all of the generic and port declarations from the entities\ninto a file called (for example) gridpkg.vhd\n-Then put all of the files into a single file: do something like:\ncat gridpkg.vhd synchronizer.vhd reg.vhd ctr.vhd fsmt.vhd > all.vhd\n-Set the device to the target device, C374I.\n-Compile this file (without it being the Top design).\nNow you will have something you can use as a library package if you use the parts as specified in the\nentity declarations.\n\nHierarchical Design\nStart with a one-block block diagram.\nExpand to major blocks.\nRepeat expansion until blocks are simple.\nImplement these simple blocks and test.\n(Code them in VHDL and simulate.)\nWire the blocks together.\n(Use structural instantiation in VHDL.)\nTest the design.\nStay Tuned: we will illustrate these steps.\n\nExample: Digitizer Interface, FSM Control\nPosition detection using an array of wires\nGenerate magnetic field with a coil (not shown here)\nCount while sweeping over the array (contents of Counter)\nDetect position of a cursor:\nBy phase reversal Or other artifact of signal detectionv(INT signal)\nPut count into a register (/LD is low)\nImplement a 'Handshake'\nSet handshake line (dav) when signal is ready\nWait for ready signal (rdy) before counting (SRDY is synchronized RDY)\n\nHere is the conventionally drawn FSM diagram of the system we are going to\nimplement:\nStates:\nReady: waiting for the synchronized RDY\nsignal from the user (_ of handshake)\nCount: counter is incrementing itself along\nwith the position sensor of the grid\nERR: Counter has overflowed, which means\nsensor was not found\nLoad: Counter was interrupted by finding\nthe sensor: contents (count) is the position\nCount is loaded onto output counter\nReset: transient state - counter is cleared\nand transition is made to Ready\n\nI/O Signals for FSM\nInput:\nSRDY\nSynchronized GO (receiver ready)\nINT\nGrid position is detected (assumed synchronized )\nERR\nGrid overflow (position not detected)\nOutput:\nDAV\nData is ready\nLD\nLoad count into the output register\nCLR\nClear the counter\nCOUNT\nEnable the counter to count\n\nOne smaller of the blocks is the syhchronizer:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity synchronizer is\nport (rdy, clk : in std_logic;\nsrdy : out std_logic);\nend synchronizer;\narchitecture behavioral of synchronizer is\nbegin -- behavioral\nsync:process(clk)\nbegin\nif rising_edge(clk) then\nsrdy <= rdy;\nend if;\nend process sync;\nend architecture behavioral;\n\nSecond Part: This is a loadable register whose width is a generic.\nsize has a default - one number to change\ninstantiation as a component can define size\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity reg is\ngeneric (size: integer := 4);\nport (n_ld, clk : in std_logic;\ngrid : in std_logic_vector(size - 1 downto 0);\ndata : out std_logic_vector(size - 1 downto 0));\nend reg;\narchitecture behavioral of reg is\nbegin -- behavioral\nregff:process(clk)\nbegin\nif rising_edge(clk) then\nif n_ld = '0' then\ndata <= grid;\nend if;\nend if;\nend process;\nend architecture behavioral;\n\nNow we are going to test the resister, using a counter which we have already designed\nand will discuss next.\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.gridpkg.all;\nentity testreg is\ngeneric (gridsize : integer := 4); -- adjustable\nport (count, n_clr, n_ld, clk : in std_logic; -- simple inputs\nreg_count : out std_logic_vector(gridsize-1 downto 0));\n-- to see if it works\nend testreg;\n-- purpose: assemble counter and register\narchitecture test of testreg is\nsignal gridcnt : std_logic_vector(gridsize-1 downto 0); -- internal\ncount\nsignal err : std_logic; -- counter overflow\nbegin -- test\ncount_circuit: ctr\nport map (count => count, n_clr => n_clr, clk => clk,\nerr=> err, grid => gridcnt);\nreg_circuit: reg\nport map (n_ld => n_ld, clk => clk, grid => gridcnt,\ndata => reg_count);\nend test;\n\nComments on Register Testing (Simulation)\nCreation of buses often helps.\nNote we have specified a bus (a group of lines)\nBeware ==> one cannot use buses to specify inputs. <==\nBuses merely provide a way of displaying signal values.\nLoad behavior of the register is as expected\nYou can see the counter doing its thing\nRegister loads on a clock edge when the /LD line is low\nNext is the counter (which we have already used), but this should already be familiar:\n\nAs promised earlier, here is a clearable counter with a carry out\nNote this one has generic (adjustable) size\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all;\nentity ctr is\ngeneric (size: integer := 4);\nport (count, n_clr, clk : in std_logic;\nerr : out std_logic;\ngrid : out std_logic_vector(size - 1 downto 0));\nend ctr;\narchitecture behavioral of ctr is\nsignal cnt_int : std_logic_vector(size - 1 downto 0);\nsignal all_ones : std_logic_vector(size - 1 downto 0);\nbegin -- behavioral\nall_ones <= (others => '1');\ngrid <= cnt_int;\nerr <= '1' when cnt_int = all_ones else '0';\nstate_transition:process(clk)\nbegin\nif rising_edge(clk) then\nif n_clr = '0' then\ncnt_int <= (others => '0');\nelsif count = '1' then\ncnt_int <= cnt_int + 1;\nend if;\nend if;\nend process state_transition;\nend behavioral;\n\nHere is the simulation of the counter:\nIt counts (see the progression of grid_0 to grid_3)\nRCO (err) is asserted at the right time (1111)\nThe thing clears synchronously when n_clr is brought low)\n\nNow the control part of the system is the FSM: fsmt.vhd\nThere are multiple ways of defining states:\nDoes one use constants or enumerated types?\nIn some cases, one doesn't need the \"efficiency\" of making the state assignment. The\nsystem will do it if we don't. But here we do it.\nHere is the entity statement and the beginning of the architecture:\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity fsm is\nport (srdy, int, errin, clk : in std_logic;\ndav, countout, n_clr, n_ld : out std_logic);\nend fsm;\narchitecture behavioral of fsm is\ntype StateType is (READY, Count, Load, ERR, Reset);\nattribute enum_encoding of StateType: type is\n\"000 001 011 010 100\";\nsignal state : StateType;\n\nbegin -- behavioral\nn_clr <= '0' when (state = Reset) or (state = ERR) else '1';\nn_ld <= '0' when state = Load else '1';\ncountout <= '1' when state = Count else '0';\ndav <= '1' when (state = READY) and (srdy = '0') else '0';\nstate_transitions:process(clk)\nbegin\nif rising_edge(clk) then\ncase state is\nwhen READY =>\nif srdy = '0' then state <= READY;\nelse state <= Count;\nend if;\nwhen Count =>\nif errin = '1' then state <= ERR;\nelsif int = '0' then state <= Count;\nelse state <= Load;\nend if;\nwhen Load =>\nstate <= Reset;\nwhen Reset =>\nstate <= READY;\nwhen ERR =>\nstate <= Count;\n-- don't need \"when others\" as all cases guaranteed\nend case;\nend if;\nend process state_transitions;\nend architecture behavioral;\n\nFSM Testing (Simulation)\nExercise all state transitions\nAn advantage of using constants rather than enumerated types is that the state\nnames are visible. One has to poke around to see which jedec nodes encode the state!\nState | 0 | 1 | 3 | 4 | 0 | 1\n( 0 => READY, 1 => Count, 3=> Load, 4 => RESET)\n\nuse ieee.std_logic_1164.all;\npackage gridpkg is\ncomponent synchronizer\nport (rdy, clk : in std_logic;\nsrdy : out std_logic);\nend component;\ncomponent fsm\nport (srdy, int, errin, clk : in std_logic;\ndav, countout, n_clr, n_ld : out std_logic);\nend component;\ncomponent ctr\ngeneric (size: integer := 4);\nport (count, n_clr, clk : in std_logic;\nerr : out std_logic;\ngrid : out std_logic_vector(size - 1 downto 0));\nend component;\ncomponent reg\ngeneric (size: integer := 4);\nport (n_ld, clk : in std_logic;\ngrid : in std_logic_vector(size - 1 downto 0);\ndata : out std_logic_vector(size - 1 downto 0));\nend component;\nend gridpkg;\n------------------------------\nAnd then assemble the whole package file to be compiled by:\ncat gridpkg.vhd synchronizer.vhd reg.vhd ctr.vhd fsmt.vhd > all.vhd\nNow we build all the component parts into a package: this is the header of that package\n\nTo generate gridtop.vhd, the 'top level' of the system:\n'Wire' the components together using structural instantiation. (This is\nisomorphic with physically wiring the pieces together).\nThe entity only has signals specified in the one-block block diagram.\nI used a generic, gridsize, for ease of overall testing.\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.gridpkg.all; --built according to instructions earlier\nentity grid is\ngeneric (gridsize: integer := 4);\nport (rdy, int, clk : in std_logic;\ndav : out std_logic;\ndata : out std_logic_vector(gridsize - 1 downto 0);\ngrid : out std_logic_vector(gridsize - 1 downto 0));\nend grid;\n\narchitecture top of grid is\nsignal srdy, err : std_logic;\nsignal count, n_clr, n_ld : std_logic;\nsignal gridint : std_logic_vector(gridsize - 1 downto 0);\nbegin\nsync_ckt: synchronizer\nport map (clk => clk, rdy => rdy, srdy => srdy);\nfsm_ckt: fsm\nport map (srdy => srdy, int=> int, errin => err,\nclk => clk, dav => dav, countout => count,\nn_clr => n_clr, n_ld => n_ld);\nctr_ckt: ctr\ngeneric map(size => gridsize)\nport map (count => count, n_clr => n_clr, clk => clk,\nerr => err, grid => gridint);\ngrid <= gridint;\nreg_ckt: reg\ngeneric map(size => gridsize)\nport map (n_ld => n_ld, clk => clk, grid => gridint,\ndata => data);\nend top;\nThe architecture part of the assembled system is quite simple, reflecting the structure\nof the top-level block diagram\n\nFinally, we should be able to test the top level functionality (we do need to insert an 'int' signal)"
    },
    {
      "category": "Resource",
      "title": "l9.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/b4d537d7edcd3d0b79cfd02133a5ee41_l9.pdf",
      "content": "Quiz 1:\nTime: Regular class time 1 Hour\n1 HANDWRITTEN \"Crib Sheet\" allowed\nVenue:\nProblem Sets 1-3, Lab 1, Lectures 1-8 (e.g. to today)\nGeneral Topics:\nBoolean Algebra and Elementary Logic:\nBasic Expressions\n(Rules of Boolean Algebra, Demorgan's Theorem)\nCanonical Forms (Sum of Products, Product of Sums)\nMinimal Expressions (MSP, MPS)\nKarnaugh Maps for simple expressions\nRelationship to logical circuit diagrams\nCombinational Logic\nTTL: Voltage and Current Levels\nSynchronous and asynchronous logic\nTiming: Combinatoric delay, clock to Q,\nSetup and Hold times\nBus Mechanisms: Totem Pole, Open Collector, ...\nMore:...\n\nFinite State Machines:\nTransition Tables and Transition Diagrams\nTiming Diagrams\nMealey and Moore Machines\nBuilding Blocks:\nS-R Latches\nEdge Triggered Devices\nFlip-Flops (D, T, JK)\nMUXes, deMUXes (selectors)\nCounters\nPALs\nInternal Architecture: SP realization\nClock and OE realizations\nDon't worry about specifics for specific parts\nVHDL:\nUnderstand logical assignment, instantiation\nIF/Then/Else and Case/When statement structures\nEntity and Architecture"
    },
    {
      "category": "Resource",
      "title": "l10.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/fe8141227f06ac707d92b9b90b8d36a0_l10.pdf",
      "content": "Positive Edge Triggered devices\nOften call it /CLK because setup\nis when the clock signal is LOW\n6.111 Lecture # 10\nTopics for today:\nSome more details of VHDL and more examples\nShift Register (as in the 74LS194)\nNote Lab 2 design should be done by Wednesday\nPage 1\nVHDL Identifiers\nCase InsenSitivE (but best not to rely on this)\nFirst character must be a letter.\nLetters, Digits, and Underscores (only)\nTwo underscores in succession are not allowed.\nThe last character cannot be an underscore.\nUsing reserved words is NOT allowed.\nLater versions of emacs use color to distinguish reserved words (and other things)\nUsing reserved words usually provokes an understandable error comment.\nLegal Examples\nCLK, Three_StateEnable, h23, Reg_12\nIllegal Examples\n_clk, 3_State_Enable, large#num, clk_, Three__State, register, begin\nPage 3\nBut first,... clock Conventions\nThis is only a convention but it is widely used. What is important is when\ndevices are triggered.\nSetup time\nhere\nSetup time\nhere\nPositive Edge Triggered devices\nOften call it /CLK because setup\nis when the clock signal is LOW\nMost registers are like this\nNegative Edge Triggered devices\nOften call it CLK because setup\nis when the clock signal is HIGH\nJ-K flip flops tend to be like this\nPage 2\nVHDL Reserved Words\nSome are\nabs\naccess\nafter\nbegin\narray\ndisconnect\nfile\nguarded\nimpure\npostponed\nrem\nunaffected\nwait\nThere are 97: too many to remember!\nThis is another good reason for \"incremental\" compilation.\nStart with something that compiles and add code a block at a time\nPage 4\n\nVHDL Values: Defined in IEEE 1164.\nValues you are most likely to use are '0', '1', '-', 'Z'\n'-' (hyphen) is 'don't care'\n'Z' (MUST Be upper case) is 'High Impedance'\nVectors are strings\nRemember VHDL is strongly typed:\na+b is valid ONLY if a and b have the same length\nTo assign to a one bit longer number (as in to accommodate\noverflow)\nc <= ('0' & a) + ('0' & b)\nand of course c must be defined to be one bit longer than a and b\nDesignation of constants:\n'-' is a character\n\"---\" is a string (vector) of length 3\n& is the concatenation operator:\n\"01\" & \"111\" is \"01111\" and so is '0' & \"1111\"\nPage 5\nPackages Here is a very small package construction\nEntities need not be in the same file as the package declaration.\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity mux2to1 is port (\na, b, sel: in std_logic;\nc: out std_logic);\nend mux2to1;\narchitecture archmux2to1 of mux2to1 is\nbegin\nc <= (a and not sel) or (b and sel);\nend archmux2to1;\nThis file has the\nentity and\narchitecture\nibrary ieee;\nlibrary and use statements\nuse ieee.std_logic_1164.all;\npackage mymuxpkg is\ncomponent mux2to1 port (\na, b, sel: in std_logic;\nc: out std_logic);\nend component;\nend mymuxpkg;\nThis file has\nthe\ncomponent\ndeclaration\n-- note repeated\n-- identical port list\nPage 7\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all; -- needed for integer + signal\nentity test_tri is\nport(clk, oe, cnt_enb : in std_logic;\ndata : inout std_logic_vector(7 downto 0));\nHere is the use of\nend test_tri;\ninout (tristate)\narchitecture foo of test_tri is\nsignal counter : std_logic_vector(7 downto 0);\nbegin\nprocess (oe, counter)\nbegin\nif (oe = '1') then data <= counter;\nelse\ndata <= \"ZZZZZZZZ\"; -- N.B. Z must be UPPERCASE!\nend if;\nend process;\nprocess (clk)\nbegin\nif rising_edge(clk) then\nif (oe = '0') and (cnt_enb = '1') then\ncounter <= counter + 1;\nend if;\nend if;\nend process;\nend architecture foo;\nPage 6\nNow we can use that package in some top level code:\n--no, I don't think this does anything useful...\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity toplevel is port (\ns: in std_logic;\np, q, r: in std_logic_vector(2 downto 0);\nt: out std_logic_vector(2 downto 0));\nend toplevel;\nuse work.mymuxpkg.all; -- this is what we called the package\narchitecture archtoplevel of toplevel is\nsignal i: std_logic_vector(2 downto 0);\nbegin\n-- the first two instantiations are named associations\nm0: mux2to1 port map (a=>i(2), b=>r(0), sel=>s, c=>t(0));\nm1: mux2to1 port map (c=>t(1), b=>r(1), a=>i(1), sel=>s);\n-- the last instantiation is a positional association\nm2: mux2to1 port map (i(0), r(2), s, t(2));\ni <= p and not q;\nend archtoplevel;\nPage 8\n\nPredefined Attributes\ns'event is read as \"s tick event\" where s is a signal name.\nrising_edge(event) is the same as\n(s'event and event = '1')\nA transaction occurs every time a signal is evaluated, whether or not the\nsignal value changes.\nEvaluation of one signal can force evaluation of other signals\nPage 9\n74LS194: Bidirectional, loadable shift register\nS1 S0\nQA QB QC QD\n1 1\nA\nB\nC\nD\nLoad\n0 1\nR QA0 QB0 QC0\nShift Right\n1 0\nQB0 QC0 QD0 L\nShift Left\n0 0\nQA0 QB0 QC0 QD0\nHold\nThe part also has an asynchronous clear\nSo now we are going to write the functionality of this part in VHDL\nArray Attributes are particularly useful with generic array sizes\nsignal s : std_logic_vector(7 downto 3)\ns'left = 7\ns'high = 7\ns'right = 3\ns'low = 3\ns'length = 5\nYou can even build multiply indexed arrays:\ntype rom is array (0 to 6, 3 down to 0) of std_logic;\nsignal r : rom;\nr'left(1) = 0\nr'high(1) = 6\nr'left(2) = 3\nr'high(2) = 3\nr'right(1) = 6\nr'low(1) = 0\nr'right(2) = 0\nr'low(2) = 0\nr'length(1) = 7\nr'length(2) = 4\nPage 10\n--variable width shift register (like a '194)\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse work.std_arith.all;\nentity shift_reg is\ngeneric (width : integer := 4);\n-- to start\nport (data : in std_logic_vector(width-1 downto 0); -- input\ns: in std_logic_vector(1 downto 0);\nclk, sl, sr : in std_logic;\n-- shift bits\noutput : out std_logic_vector (width-1 downto 0));\nend shift_reg;\nNote that by using the generic width we could actually use this code to emulate\nshift registers of arbitrary width. The '194 is 4 bits wide\nThe use of positional attributes makes this variable width work\nPage 11\nPage 12\n\n-- purpose: simulation of a '194 shift register\narchitecture first_try of shift_reg is\nsignal int : std_logic_vector(width-1 downto 0); -- used internally\nconstant right : std_logic_vector(1 downto 0) := \"01\";\nconstant left : std_logic_vector(1 downto 0) := \"10\";\nconstant load : std_logic_vector(1 downto 0) := \"11\";\nconstant hold : std_logic_vector(1 downto 0) := \"00\";\nbegin -- first_try\noutput <= int;\nshift_reg: process(clk)\nbegin\nif rising_edge(clk) then\ncase s is\nwhen right =>\nint <= sr & int(int'left downto int'right+1);\nwhen left =>\nint <= int(int'left-1 downto int'right) & sl;\nwhen load =>\nint <= data;\nwhen hold =>\nint <= int;\nwhen others =>\nint <= (others => '-');\nend case;\nend if;\nend process;\nend first_try;\nPage 13\nTwo More attributes that Are Useful Sometimes\nSum splitting occurs when more than 16 product terms are required.\n(This depends, of course, on what part you are compiling to)\nbalanced (default) has better timing but uses more macrocells.\ncascaded uses fewer macrocells and is slower.\nattribute sum_split of mysig: signal is cascaded;\nAttribute sum_split of mysig: signal is balanced;\nThe synthesis_off attribute is used to make the signal a factoring point.\nMaking a signal a factoring point can result in a reduction of product terms\nfor a subsequent signal. It also avoids the possibility that a signal can be optimized\naway.\nRegistered equations are natural factoring points so only use synthesis_off on\ncombinational signals.\nattribute synthesis_off of sel: signal is true;\nPage 15\nUser Defined Attributes: often useful\ntype state_type is (idle, state1,state2);€\nattribute state_encoding of state_type: is sequential;€\n-- or one_hot, zero_hot, gray€\nattribute enum_encoding of state_type: is \"11 01 00\";€\n-- or whatever assignment you want to make€\nwithin an entity: to set pin numbers:\nattribute pin_numbers of counter:Entity is\n\"clk:13 reset:2\" &\n\" count(3):3\";\n-- Note the space before count(3) above\nwithin an entity: to reserve pin numbers (or avoid contention as in your kits)\nattribute pin_avoid of mydesign: entity is \"21 24 26\";\n-- the following are less likely to be useful:\nattribute lab_force of mysig: signal is a1;€\nattribute node_num of buried: signal is 202;€\nattribute low_power of mydesign: entity is \"b g e\";€\nattribute slew_rate of count(3): signal is slow; -- or fast€\nPage 14\n-- attempt at short pulse catcher\nlibrary ieee;\nYou may remember this\nuse ieee.std_logic_1164.all;\nexample, which uses the\nentity spulse is port(\nsynthesis_off directive.\nN_GO, CLK, S_CLK:\nin std_logic;\naout, n_aout, xout, p:\nout std_logic);\nend spulse;\nOn the next page are\narchitecture behavioral of spulse is\nexcerpts from the report\nsignal A , N_A, X, N_X, N_CLK : std_logic;\nfile for this code and for\nattribute synthesis_off of A : signal is true;\nthe same code with the\nattribute synthesis_off of N_A : signal is true;\nsynthesis_off directive\nbegin\ncommented out.\nA <= (not N_GO) or (not N_A);\nN_A <= (not A) or (not N_X);\nN_X <= (not X);\nP <= X and N_CLK;\nN_CLK <= not (S_CLK);\naout <= A;\nxout <= X;\nn_aout <= N_A;\nff: process(CLK)\nbegin -- process\nif rising_edge(CLK) then\nX <= A;\nend if;\nend process;\nend behavioral;\nPage 16\n\nSo here is whatg gets synthesized:\nAnd without attribute synthesis_off\nWith attribute synthesis_off\nDESIGN EQUATIONS\n(12:40:06)\np =\nxout.Q * /s_clk\nxout.D =\naout\nxout.C =\nclk\n/aout =\nn_go * n_aout\n/n_aout =\n/xout.Q * aout\nDESIGN EQUATIONS\n(12:41:12)\np =\nxout.Q * /s_clk\nxout.D =\naout\nxout.C =\nclk\n/n_aout =\naout * /xout.Q\naout =\naout * /xout.Q\n+ /n_go\nPage 17"
    },
    {
      "category": "Resource",
      "title": "howto.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/bef539116d7aad1f1813569f9e7a86ab_howto.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\nHow to Make Your 6.111 Project Work\nThere are a few ``tricks of the trade\" which allow an experienced digital designer to fix\nproblems quickly. This note is an attempt to fill you in on some with which you might not\nbe familiar.\nWiring Errors\n1. Do you have a diagram of your circuit? Not that piece of napkin from common's\nlast night, I mean a DIAGRAM. If you don't, then think about making one.\nMaking the diagram may in itself lead you to finding the problem. A timing\ndiagram is often helpful for finding errors as well.\n2. Now that you have a diagram, it should be easy to have your partner check the\nwiring. Not you. Your partner. You will make the same mistake that you made in\nwiring your circuit a second time when you ``check\" it.\n3. Check each IC package. Is there a wire on each of its pins? There probably should\nbe, in most cases. Explain the cases where there is not (unused section of 74LS00,\nparallel inputs not used on counter ...). You would be surprised at how many\nerrors are caught with this simple technique. Be careful especially on the power\nand ground signals.\n4. The pin assignments of a 74LS02 are not the same as those of a 74LS00. When\nyou use them, double check the pin numbers.\nCare and Feeding of the Power Supply\n1. Don't overload the kit power supply. If in doubt, measure the power supply with\nan OSCILLOSCOPE, not a VOM. Many of the power supply overload problems\nshow themselves as hum or ripple on a supply rather than low voltage output.\n2. ``Grid\" your power supply distribution. This means construct an X-Y pattern of\npower interconnections for the ground and power. The extra wires are redundant\nif you believe you are working with superconducting zero inductance wires. You\nare not. Recall that KCL requires that signals which force current to flow OUT a\nwire also cause the SAME CURRENT to flow BACK on the ground and power\nwires.\n3. This means that if you are, for example, building a project with multiple kits, you\nshould be quite careful to provide enough grounds between the kits. I'd say a\nconservative minimum is about 1 ground wire for each 3 signal wires. The ground\nwires should connect diverse points on the grid of each kit, not all be connected to\nthe power supply pin. Don't connect the +5 volt power on adjacent kits together.\nYou can check the adequacy of your grounding between kits by measuring the\nground potential difference between points in your project with a scope. Worry\nabout anything more than about 0.5 volts.\n\n4. You may have heard from an analog course about ``ground loops\" and the\nnecessity to avoid them. In digital systems it is completely impractical to avoid\nground loops, and the opposite approach is taken, best summarized in a phrase\nwhich I will pass on: ``Let Ground Abound\".\n5. If you take care with the ground distribution in your projects, few bypass\ncapacitors will be necessary, but for conservatism you might consider placing a\n0.01 to 0.1 ceramic bypass capacitor between the ground and +5 power grid every\nhalf a dozen packages or so. Your oscilloscope is your best friend here. Look at\nthe +5 power runs while your project is running. Does it look like a DC power\nsupply? Anything more than about 1 volt p-p noise needs to be fixed. Sometimes\nadding power supply bypassing can actually make a project not work. The way\nthis happens is that the ground distribution system is high impedance, and the\naddition of the decoupling capacitors makes the current in the ground lines higher,\nleading to ground noise. Since the noise margin in the low state is worse than in\nthe high state, this can be a bad tradeoff.\nUnused Inputs\nThey have to be connected to either ground or to ``high\". Ground is easy to come by.\n``High\" can be the output of a grounded input inverter, or a resistor tied to the positive\nsupply. The resistor value is non-critical, somewhere in the range of 1K. Many inputs can\nbe wires in parallel to this resistor. Making the run extremely long can be bad from the\nstandpoint of finding errors. It is common, and the source of difficult problems, for the\nhigh run to have some output connected to it. Since you often pull up sets and clears on\nwidely distributed circuits, this can cause very bizarre behavior. Keeping the number of\ninputs on the high run to a reasonable number (5-10) will help isolate these problems.\nBehavior of Ungrounded Parts\nThe behavior of parts which do not have a ground pin connected can be quite\ndisconcerting. They seem to almost work. The reason for this is that the input signals can\nprovide a source of negative supply. So, if you have a NAND gate, for example, in a\npackage with no other sections used, then it can behave correctly for the case when the\ninputs are both low, one or the other high, but incorrectly if both are high. This can be\nMOST confusing, and is even worse if you are using all four sections of some NAND\ngate, since you are (almost) certain to have some input low, and the gates will almost\nwork. Looking at your logic signals with a scope will discover this and other problems,\nsince the signal levels will look very poor.\nTri-State Logic Signals\nBusses which have tri-state signals driving them are tricky to debug at times. Scoping\nthem can give signals which appear to be ``middle\" due to the parts not driving the bus at\nall times. One way to counteract this is to explicitly add pullup resistors to the runs,\nwhich will force the bus to be a logic ``1\" even if it is undriven.\n\nA second problem with tri-state busses can happen when two outputs are ``fighting\" one\nanother over the bus. Large currents and overheating of the design can occur under these\ncircumstances, and the logic levels on the bus will be ``middle\".\nThermal debugging of designs is a quite efficient test strategy, since it is very quick and\ncan find some problems with very little work. Check to see that all of your parts are\ndissipating some power. Are any so hot that you can't touch them? Unless you are using\nsome part with an excuse to be hot, then some output is probably trying to pull down the\n+5 volt power supply, or fighting with some other part.\nOpen Collector Signals\nCalculate the resistor value carefully. To do this, calculate the total input current of all the\nloads on the run. Subtract this from the output drive available from the driver part. If\nmore than one type of part is being used, use the lowest output drive. The remaining\ncurrent is available to pull down the resistor. The resistor value is then given by:\nR = 5/I ohms\nThis will usually be in the several hundred ohm range.\n``PNP\" Inputs\nNewer TTL parts, those with numbers above 300 for the most part, use a low DC current\ninput circuit using a PNP transistor. These parts have a very low TTL current, which\nmight make you think that you can drive hundreds of them with a single part. This\nstrategy is dangerous if you value the time and signal quality of your design. AC\nconsiderations mean that you should limit the number of signals on a run to the 10-15\nrange regardless of the DC current specification. The same comment applies, with even\nmore force, to the MOS inputs of static memory parts and EPROMS. These parts have\nhigh input capacitance which makes driving them with a reasonable number of loads\nessential.\nHandling CMOS Parts\nCMOS devices are static sensitive. They have sufficiently high input impedance that the\nstatic charge stored on your body capacitance can permanently damage them. Ground\nyourself to the bench and your project before touching these devices, and they will work\nwhen you are finished plugging them in.\nWire Routing\nWires, as we mentioned above in the section on power supplies, are not perfect\ncomponents. They have a parasitic inductance, resistance, and a mutual inductance with\nother wires. There are some strategies for minimizing the effect of these imperfections in\nour ideal wire model.\n\nFor many of the signals in a design, the bad properties of the wires are irrelevant, for the\nsame reason that we can afford to ignore combinational logic hazards-we don't look at the\nwires until they behave well. This works fine except for the wires used for timing signals\nin our design. Here are some general guidelines if you want to be careful:\n1. Keep wires short. The shorter your wires are, the less chance of noise pickup,\ncoupling, and other undesirable behavior.\n2. Drive a wire from one end or the other of the string of places it goes, not from the\nmiddle.\n3. Wire all the places a signal goes sequentially, one after another, not as some sort\nof tree-structure. This applies to single electrical runs.\n4. If you have trouble with making your signals look good on a run, consider resistor\ntermination of the far end of the run. Your friend here is your oscilloscope. Does\nthe signal look like it has clean edges in the positive and negative going\ndirections? Is there ringing or strong over and undershoot? Your termination will\nhave to be a Thevenin equivalent resistor to about +3 volts with an impedance of\nabout 150 ohms (bet you thought you would never hear about those again, didn't\nyou ...).\n5. Undershoot on LS series logic, particularly, can lead to drastic changes in the\nguaranteed Tplh and Tphl speeds for parts. If you can't understand why the part\nwhich says it should be a 10ns part takes 20ns to switch, check for the 1.5 volt\nundershoot on its input. Remember that the spec sheet is your contract with the\npart manufacturer. He doesn't guarantee the behavior if you are feeding garbage\ninto the part.\n6. Bundling wires together makes your kit look neat, but it also makes a good\ntransformer. Unfortunately, you probably didn't want a transformer between you\nlogic signals. For clock signals, route the critical wires far away from other wires,\nparticularly wide parallel busses switching at the same time. You might consider\ntwisted pair, which wraps a ground wire around the signal wire. Ground both ends\nof the twisted pair ground.\nClock Distribution\nClocks, and write pulses for RAM's are the most sensitive logic signals in a typical\ndesign. The design methodology which we are teaching in this course allows most signals\nin a machine to have hazards, ringing, and even be slow, without actually making the\ncircuit you are designing not work. The penalty for sloppiness in most signals is simply\nthat the circuit will operate slower, rather than not at all.\nThis is not the case with clock signals. If a clock has ringing on it, or a slow rise time,\nthen your circuit may not work AT ALL. It pays then to take special care in distributing\nthe clock. Loading rules should be strictly obeyed (they should be anyway, of course).\nA more insidious problem sometimes occurs, however, due to the possibility of CLOCK\nSKEW. This means when the clocks for different portions of your logic design have their\nrising edges occur at slightly different times. This can happen as a result of long wires in\n\nthe clock circuit, from different numbers of gates in series with different clocks in the\nmachine, from different loading on different clocks, and from lots of other reasons.\nWhatever the reasons, clock skew is a common source of problems. To see why, consider\na pair of type D flip-flop registers, such as LS374 parts, each clocked by a different\nclock. It may be your intention to load data first into register 1 on the first clock, and then\ninto register 2 from the outputs of register 1 on a second clock. If the clock on register 1\nlags the clock on register 2 by more than the sum of the setup and propagation delays of\nthe part, then the incorrect data will be loaded into register 2: namely, register 2 will\nreceive the data NEWLY clocked into register 1. So it is important to keep the location of\nthe clock edge synchronized over the entire diagram. This is hard sometimes.\nOne technique to use is to build a ``tree\" of clock distribution: The main clock generator\ndrives a set of four gates, each of whose outputs fans out to four more gates, whose 16\noutputs each drive a section of the machine's clock. Try to keep wire lengths the same\nand to keep the clock runs as short as possible. Loads should be distributed evenly across\nall of the clocks available. With the logic family you are using in the course, clock skew\nshould not be a major problem. You should be aware of its existence, though.\nGating the Clock\nDon't do it. This is one of the most common problems novice digital designers encounter.\nAssume you are using positive edge triggered logic. Your clock can be thought of then as\na ``low asserted\" signal. If you were to gate if off, you would use a positive OR gate to\nhold it high. Unfortunately, you need to start holding it high BEFORE it goes LOW.\nGating it off after the clock goes low will actually just make a positive transition of the\nclock occur slightly early.\nClock skews can also arise from being careless in gating clocks. If you absolutely can't\ncontain yourself, and must gate a clock, use a clock from before the final clock fanout to\ncompensate for the gate delay in the gating circuit.\nGating of a clock can almost always be avoided by using registers with a clock enable\ninput. Counter and shift register parts can also be forced into the ``do nothing\" state\neasily.\nRAM Write Pulses\nWrite pulses for static memories are likely to be one of the few areas where you do need\nto gate a clock-like waveform with a logic signal. Since the RAM parts available act as\nlatches, it is important that the signals used to gate the write enable off, and that the\naddress input and clock enable signals arrive early enough during the clock enable cycle\nnot to cause glitches in the RAM functioning. To help you meet the Thold requirement of\nsome parts, it is often helpful if your timing generator terminates the write pulse slightly\nprior to the rising edge of the main clock, assuring an adequate Thold. You can often\nmake the clock signal of a design have a short enough Tlow such that it can be used as\n\nboth the clock edge for registers and as the write-enable for RAM parts. Thold for the\nRAM address and data lines is sometimes a problem with this strategy, however.\nSynchronizer Errors\nWhenever you clock a signal which is asynchronous with the clocking waveform, there is\na probability of producing a meta-stable state in the clocked flip-flop. For low-frequency\nclocks the probability of this meta-stable behavior is low. For LS flip-flops, a flip-flop\noutput will have either set or not set by about 200 ns after the clock edge with very high\nprobability. If you are designing a system which depends on synchronizing external\nsignals faster than this, consider using a 74AS74 flip-flop as the synchronizer, since it is\nmuch faster than the LS parts.\nTesting Strategies\nYou should be able to help yourself considerably in the testing of your project if you\ninclude in the design a means of controlling all of the finite-state machines. This means\nthat you should be able to start the machine in a known state, preferably in any state, so\nthat you can check out subroutines individually. You should be able to single step the\nmachine to track down incorrect behavior. Making the machine loop at full speed doing\nsome repetitive task is also a helpful debugging strategy, since you can then use a scope\nto examine the timing of the device directly. Those of you working with TV monitors\nwill find that the monitor itself is a good debugging tool.\nDriving High Current Devices\nThose of you working with stepping motors and other high power devices should take\ncare in the power/ground routing of motor power. The motor should be driven with a\npower supply other than the logic supply, and here, despite what I said above, you should\nworry about ground loops. Make the ground pin of the driver parts the common point for\nthe motor and logic grounds, and otherwise strictly segregate them.\nYou should use power diodes as flyback protection across your motor windings. A\n1N4001 would do nicely."
    },
    {
      "category": "Resource",
      "title": "projectinfo.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/f3f245fb58055e04c53e1cf632bdcef7_projectinfo.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n\n6.111 - Introductory Digital Systems Laboratory\nProject Information\nIntroduction\nThe term project in 6.111 is your opportunity to specify a small digital system. You will\ndesign, build, debug, demonstrate, and report on this system. This memorandum sets\nforth our expectations and requirements for this project and makes a few suggestions\nwhich should help to make your project a success.\nIn order to accomplish all that is expected by the end of the term, it is essential that you\nstay on schedule.\nBoth the determination of grades and the project time requirements are inherently\nsubjective. Lab 3 provides some guidance to the evaluation of project size and\ncomplexity. A reasonable guideline as to size of 6.111 projects is that it not require more\nthan a kit and a proto board per person.\n6.111 student projects often become too large because of a desire to effect computations\nin parallel and at high speed. Data paths are often unnecessarily wide and redundant. It is\ngenerally far better to minimize the type and extent of the data paths even though this\nresults in more complicated control circuitry.\nUse of microprogrammed sequencers and FSMs implemented with PALs allows\nimplementation of complicated control with a small number of ICs. Please remember that\nmassive data paths that enable computation at speeds far faster than needed do not\nrepresent a good design! It is almost always better to spend more time thinking and less\ntime wiring.\nInstructions\n1. The first step in starting your project is to find a partner with whom you wish to work.\nTwo-person projects are preferred, but three-person projects are permitted. Individual\nprojects must be approved by the lecturer.\n2. The second step is to decide what you wish to do. A list of project suggestions appears\nin this handout. This list may be helpful in this regard since it is compiled from past\nprojects which were successfully completed.\n3. The third step is to submit a PROPOSAL ABSTRACT (one for each student) using the\nattached form. This item and the PROPOSAL which follows are to be prepared jointly\nwith your partner. We will use the proposal abstract to assign project teams to members\n\nof the teaching staff. Those assignments will be posted shortly after the deadline for\nproposal submission.\n4. The fourth step is to write the PROPOSAL. It is comprised of:\n1. A description of the project in words, stating what your system is going to do and how\nyou plan to implement it.\n\n2. A block diagram.\n\n3. A set of specifications that define in detail what your system is (in input, output terms)\nand what tests will be used to prove that it functions properly.\n\n4. A statement of how the project work is to be divided among the partners. The block\ndiagram should be referenced.The project should be partitioned into two separately\ntestable subsystems. Each subsystem is to be the responsibility of a single partner.\nThe proposal should be typewritten. Typically, it should be two to five pages in length,\nsingle-spaced, plus the block diagram and any figures you may need.\n5. The fifth step is the Proposal Conference, which is when the proposal is to be\nsubmitted. Each project Proposal must also be presented orally to the Staff so that both\nyou and we understand what it is you are attempting, and whether your basic design\napproach is sound. Each project group should sign up for a 30 minute session. Sign-up\nsheets will be posted in the lab in advance of the first day of proposal conferences. Be\nsure to bring extra copies of your Proposal with you to the presentation so that TA's can\nfollow your talk without your having to draw your block diagram on the chalkboard.\n6. The sixth step is to prepare detailed Module Designs and Logic Diagrams for each of\nthe blocks in the block diagram, and have these approved by your project TA at the Block\nDiagram Conference. This approval is a prerequisite to your adding 6 extra units of\n6.905. You and your project partner(s) are to present your project design to the rest of the\nclass. You are encouraged to use an overhead slide to show the class the block diagram.\nDo not count on drawing it on the board as there is not enough time for this. The\npresentation day will be chosen by the teaching staff and communicated to you by email\nand also posted on the web.\n7. The seventh step is to build, debug and test your system. Project CONSTRUCTION\nmay not begin until you have:\n- Completed and handed in all problem sets and assigned lab exercises and,\n- Had your detailed logic diagram approved by your TA.\n8. The eighth step is to demonstrate your project to a member of the Staff. It is likely we\nwill want to videotape your presentation.\n\n9. The ninth step is to complete and submit the PROJECT REPORT. Material from the\nproposal can be used. The report may be prepared jointly:\n-\nThe Introduction and Summary sections can be joint efforts of the project team,\nbut\n-\nit must contain separate sections, individually written, describing subsystems for\nwhich each partner is responsible. Each section of the report should indicate the\nresponsible author.\nSee the Report Guide handout for general requirements for the Final Project Report.\n10. The final step is to turn in your kit and other components. Remove all wires from the\nsocket strips and return the chips to their places in the box.\nSchedule\nRefer to the on-line syllabus for pertinent due dates. Pertinent milestones are as follows:\n\nFormation of Project Teams\nProject Abstracts\nProposal Submission and Conferences\nDesign Conferences\nLast Day to ADD 6.905 (Drop Date)\nProject Design Presentations\n\nProject Demonstrations\nVide-taping of Project Demonstrations\nProject Reports\n\nMassachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 - Introductory Digital Systems Laboratory\nPROPOSAL ABSTRACT FOR TERM PROJECT\n(Submit one copy per project team.)\n\nNAME:\n(last) (first) (initial) (Term residence phone)\n\n(Address)\nNAME:\n(last) (first) (initial) (Term residence phone)\n\n(Address)\nTitle of Project (nine words or less):\nABSTRACT\n(One paragraph description)\n\nTENTATIVE DIVISION OF WORK\n(One paragraph statement of how work is to be divided between partners.)\n\n(Continue on separate sheet if necessary.)"
    },
    {
      "category": "Resource",
      "title": "projectresources.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/615a892b5a45b5fc7e315048dffbd80b_projectresources.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n\n6.111 - Introductory Digital Systems Laboratory\nProject Resources\nProject resources are allocated on a per student basis. This means that a two-person\nproject has twice the resources that an individual project has, etc. You have already been\nissued a kit and a quantity of ICs. The following items are available on an individual\nsign-out basis. Note that the quantities listed must suffice for the entire class.\nQuantity Item\nProto-boards which do not have switches, lights, or\npower supplies. Suitable 5 volt power supplies are\nmounted on the lab benches. Each proto-board will\nhold about one-half the number of ICs that can be\nmounted on your kit.\n50 pin 3M ribbon cables for kit to kit connections\n\nThe following items may have to be shared. Cables for the TVs, and VT100s must be\nsigned out and returned daily.\nSeveral VT100 Video Display Terminals with RS 232 cable\nMonochrome TV Monitors with BNC cable\nColor TV Monitors with cable\nSpeakers (with built in amplifier)\nMicrophones\nTelevision Cameras with sync inputs\nDigital shaft encoders\nStepper Motors\n\nThe following items may be signed out from the instrument room. Data sheets are\navailable from the instrument room.\nAD775\nFlash A to D Converter\nLM386\nLow Power Audio Amplifier\n\n10 Mhz Crystal Oscillator\nMC6847\nVideo Display Generator\n\n3.575945 MHz Crystal\n\n2K Pot\nAY 1015D UART\n\nLED Assembly\nHEX LED\nAM25S557 High Speed 8 x 8 Multiplier\nAM25S558\nHigh Speed 8 x 8 Multiplier\nAM29C509DC\nHigh Speed 12 x 12 Multiplier Accumulator\nAsynchronous Communications Interface Adapter\n6N138\nOpto-isolater plus 1N914 diode\n\n5-pin DIN cables (female cable to wires)\nsmall Misc.\nCrystal Oscillator\nMany 28F256A\nFLASH Memory\nAm28F010\n131,072 x 8-Bit CMOS Flash Memory\nAm28F020\n262,144 x 8-Bit CMOS Flash Memory\nAm28F512\n65,536 x 8-Bit CMOS Flash Memory\n6116-3\n2K by 8 SRAM\n6264-15\n8K by 8 SRAM\n62256-12\n32K by 8 SRAM\n22V10 PAL\n\n16V8 PAL\n\n20V8 PAL\n\nMAXIM 233\nRS 232 level converter\nAm29C517APC\n16 bit multiplier\n54ACT/74ACT715 Programmable Video Sync Generator\nGS4981\nMonolithic Video Sync Separator\nCD22204\nHarris 5V Low Power Subscriber DTMF Receiver\nAD8402/3\nDual/Quad Digital Pot\nin kit CY7C374i\nCPLD\nin kit FLEX10K\nAltera gate array board\nP9931\nsmall speaker/microphone\n\nThe following items are in cabinets in the digital lab. Please let the staff know if the stock\nof parts is low. Data sheets are available from the instrument room.\nOp Amp\nLF357\nOp Amp\nLM311\nComparator\nAM26LS32\nLine Receiver (Comparator)\nAD558JN\nD to A Converter\nAD670JN\nA to D Converter\n898-1-R5.1K (or 898-1-R4.7K) resistor pack\nsmall\nmisc. resistors and capacitors- in another cabinet\n74LS00\nQuad 2-input NAND gate\n74LS02\nQuad 2-input NOR gate\n74LS03\nQuad 2-input NOR open collector gate\n74LS04\nHex inverter\n74LS08\nQuad 2-input AND gate\n74LS10\nTriple 3-input NAND gate\n74LS14\nHex Schmitt Trigger INVERTER\n74LS20\nDual 4-input AND gate\n\n74LS30\n8-input NAND gate\n74LS32\nquad 2-input OR gate\n74LS37\nquad 2-input NAND buffer\n74S38\nquad 2-input NAND open collector gate\n74LS42\nBCD to Decimal decoder\n100 74LS47\nBCD to 7-segment decoder driver\n150 74LS74\ndual D flip flop\n150 74LS85\n4-bit comparator\n74LS86\nquad 2-input XOR gate\n74LS107 dual JK flip flop with clear\n74LS112 dual JK flip flop with preset and clear\n74LS123 dual retriggerable monostable\n74LS126 quad tri-state non-inverting buffer\n74LS133 13-input NAND gate\n74LS138 3 to 8 decoder\n74LS139 dual 2 to 4 decoder\n16 to 1 multiplexor\n150 74LS151 8 to 1 multiplexor\n100 74LS153 dual 4 to 1 multiplexor\n150 74LS157 quad 2 to 1 multiplexor\n300 74LS161 binary 4-bit counter with direct clear\n500 74LS163 binary 4-bit counter with synchronous clear\n100 74LS169 4-bit up/down counter\n100 74LS175 quad D edge triggered FF with clear, Q, /Q\n74LS181 4-bit ALU\n74LS193 binary dual clock up/down counter with clear\n100 74LS194 4-bit bidirectional shift register\n300 74LS244 Octal tri-state non-inverting buffer\n100 74LS245 Octal tri-state bidirectional bus buffer\n200 74LS257 quad 2 to 1 tri-state multiplexor\n\n100 74LS259 8-bit addressable latch (positive output decoder)\n150 74LS273 Octal D edge triggered flip flop with clear\n100 74LS283 4-bit adder\n100 74LS367 Hex tri-state non-inverting buffer\n100 74LS368 Hex tri-state inverting buffer\n74LS373 Octal D tri-state latch\n100 74LS374 Octal D edge triggered tri-state flip flop\n200 74LS377 Octal D edge triggered flip flop with enable\n100 74LS393 dual 4-bit binary counter\n100 74LS399 quad 2-input multiplexors with storage\n74LS670 4 by 4 register file\nDAC"
    },
    {
      "category": "Resource",
      "title": "projectsuggestions.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/49600c52e545585aaeb57b88fb22a9f4_projectsuggestions.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n\n6.111 - Introductory Digital Systems Laboratory\nProject Suggestions\nIn past years, a great variety of projects have been successfully completed. The following\nis a list of some of these completed final project reports.\nAll the project reports listed below are on file . You may sign out any one for an\novernight loan or for reading in the lab. You are free to make a copy of part or all of a\nreport if you want to keep it for a longer time. The best and most interesting of your\nproject reports will be used to augment this list for future terms.\nIt is often more satisfying to have projects which do something in addition to blinking\nLEDs. Examples are audio output, TV monitors, or VDT terminal displays.\nBe careful - most unsuccessful projects were too complex. We will help you to size your\nproject appropriately.\n-\nComputer/Editor/Graphics\n94-8 Video Editing in Real Time\n94-11 OSCAR, Optical Character Recognition Machine\n94-16 Digital Oscilloscope\n95-7 A Digital Parrot\n96-3 Visually Controlled Pointer Device\n96-7 An Object Tracker\n96-15 A Personal Location and Navigation System at MIT\n97-4 Stretch\n97-9 Digital Postscript Imager\n2000-2\nThe Design and Implementation of a Digital Oscilloscope\n2000-3\n6.111 Digital Pet Student\n2000-4\nBrushfire: A Hardware Platform for Running a Modern Operating System\n2000-8\nDesign and Implementation of a General Purpose Computer based on the 6.004\nBeta Architecture\n2001-15\nJPEG Decompression\n-\nGames\n90-1\n\nVideo Jigsaw\n90-5\nMEMRUC - The Game\n90-7\nDigital Othello\n90-8\nConnect Four Machine\n90-10\nMaster Mind - A Video Game\n92-9\nNerd Kit Asteroids\n93-16\nTetris\n94-18\nThe 6.111 Pinball Machine\n95-1\nVirtual Kaboom\n95-6\nB-n-B Space Invaders\n96-4\nBattleship\n96-6\nThe Pinball Project\n97-1\nThe Amazing Maze\n97-7\nNinja Master Fighting Game\n98-1\nCore Wars\n98-9\nMain Battle Tank\n98-12\nSign Language Hangman\n98-16\nAutomated Foosball\n99-9\nElectronic Talking Battleship\n99-11\nPac-Man\n99-14\nWireless Marksmanship Trainer\n99-17\nAir Connect Four\n99-21\n3-D Maze Navitgation\n2000-5\n\nStoplight Pitch Nintendo Shifting Controller Entertainmenet System\n2001-3\nCTF.111 (Capture the Flag)\n2001-5\nSuper Mario Brothers\n2001-8\nMonkey Box: an 8-bit Video Game platform\n2001-13\nMole Dance Revolution - A 6.111 Interactive Workout\n-\nMusic/Audio\n90-3\nA Digital Music Synthesize\n90-4\nA MIDI Controlled Digital Music Synthesizer [MIDI]\n90-12\nThe Magic Music Machine\n90-14\n: The Musical Project\n90-15\nThe MIDI Transceiver\n91-1\nAir Piano\n91-4\nElevator Music\n91-7\nOptical Music Recognition\n92-4\nPlaying the sax, or whatever you want\n93-4\nProgrammable Multi-Channel Sound Synthesizer\n94-5\nThe Digital DJ\n94-9\nThe Multi-Mode Windowing Subtitling Machine\n94-10\nSuper Sampling Sound Sequencer\n94-13\nThe Digital Graphic Equalizer\n95-4\nSelf-calibrating Audio Equalizer\n95-13\nThe Accompanist\n95-14\nBach's Napkin\n\n96-11\nBPM 2001: A Digital Odyssey\n97-2\nThe Virtual Conductor\n98-6\nDigital Surround Sound Processor\n98-17\nHumanoid Robot Ear Sound Localization\n99-22\nDigital Air Band\n2001-7\nProgrammable Symphony\n2001-9\nThe Digital DJ\n2001-14\nRhythm Master\n2002-1\nMusic Capturing, Editing, and Playback Unit\n-\nVideo\n90-9\nVideo House of Mirrors\n90-16\nVideo Jigsaw\n91-5\nThe MCG-30 Raster Image Processor\n91-6\nSmart Vision\n92-1\nThe $6000 Answer to AT&T's $1500 Videophone\n92-5\nVideo Tracker\n92-8\nDigital Darkroom\n93-5\nVideo Edge Detection System\n93-9\nDigitial Video Mixing Board\n93-10\nAir Sketcher\n93-11\nKiller Crayons!\n93-15\nRecursive Picture Manipulation\n94-2\n\nDigital Poisson Engine\n94-7\nVideo ``Go''\n94-12\nVideo Chromakeying\n95-11\nPicture in Picture\n95-12\nIntelligent Picture-in-Picture Video\n96-1\nDesign and Implementation of a PONG Game\n96-2\nRelatime Video Motion Detection\n96-5\nThe Digital Conductor\n96-8\nVideo Phone\n96-14\nReal Time Sky Navigation Aid\n98-3\nDowntown Traffic Control Simulator\n98-4\n3-D Vector Graphics Engine\n98-5\nThe Speed Detector\n98-10\nDesign and Implementation of a Target Finding and Termination system\n98-14\nGEORDI: Generalized Enhancement of Real-time Digital Imagery\n98-18\nS.I.M.A.E.D. Still Image Magnification and Enhancement Device\n99-10\nRC4 Video Encryption\n99-13\nTouchscreen Phone\n99-20\nA Closed-Caption Decoder\n2001-6\nMr. Etch-a-Sketch\n2001-2\nA Digital Video Security System\n2001-10\nVisual Target Tracking System\n-\nSpeech and Communications\n\n93-3\nTelephone Switching System with Voicemail\n93-17\nSpeech Synthesis Using Linear Predictive Coding\n93-18\nA Single Phone Line Demultiplexor\n95-2\nTime Multiplexed Single Line Communication System\n96-12\nInteractive Tic-Tac-Toe with Speech Recognition\n97-5\nRobotic Dog with Speech Control\n98-2\nA Flexible Dual Tone Multi Frequency Filter\n98-11\nA Voice Based Data Acquisition System\n98-21\nHome Security System with Telephone Interface\n2001-4\nMagnetic Card Reader\n2001-16\nSmooth Operator: The 6.111 Morse code Interpreter\n-\nRobotics\n90-2\n2-D Robot Arm Solving the Shuttle Puzzle Mechanically\n92-6\nRobothello\n94-6\nSeeing, Object-collecting Robot\n96-13\nThe Digital Duck Terminator\n98-15\nRobot See, Robot do\n98-20\nTo Mars and Beyond\n99-12\nBipedal Walking Robot\n2000-1\nTheseus\n2000-6\nWriting Robot\n2000-7\nOJ Rover\n2001-11\n\nWriting Robot\n2002-2\nThe ``A-Mazing'' Robot *Starring Hank the Tank\n-\nMiscellaneous\n87-1\nA Real Time Spectrum Analyzer with FFT\n87-12\nThe Life Machine\n90-13\nSuper Paint\n92-2\nASPIRE Audio Signal Processor Ideally Realm Exclusive\n92-3\nDigital Patchbay\n93-2\nMAP (Map Algorithm Processing)\n93-6\n6.111 Lab 3 Sights and Sounds Unlimited: A Laser Light Show\n94-4\nThe Conniption Machine\n94-15\nDream Machine\n94-17\nElevator Control System\n93-7\nLaser Diagnosis System\n95-3\nAttitude Control System for a Small Satellite\n95-5\nInfrared Security System\n95-8\nChaotic Scrambler/Descrambler\n96-9\nInternet Message Board\n98-13\nSonar with Pulse Compression\n99-15\nDigital Pet Parrot\n99-16\nDigital Billboard\n99-18\nBarrier-clearning Video Controlled Electronic Target-seeking Car\n2001-12\nPower Wheels: An Autonomous Driving Machine\n\n2002-3\nAutomatic Autobahn"
    },
    {
      "category": "Resource",
      "title": "reportgd.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/e8293a9e9e737e0c6bd9b3a0ab1363ba_reportgd.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n\n6.111 - Introductory Digital Systems Laboratory\nReport Guide\nIntroduction\nThe purpose of this memorandum is to describe general requirements for the reports you\nmust write for laboratory exercises and for the final project.\nGood writing is more important than you think. The documents you produce are the\nprincipal way of communicating your work. Well written reports reflect well on your\nwork and on you. Badly written documents, on the other hand, will produce negative\nimpressions, even if those documents represent very good technical work. It is worth the\neffort to pay careful attention to your writing.\nA well-written document contains more than clear language, correct syntax, grammar and\nspelling. It must also reflect clear thinking. Particularly with documents such as those you\nwill produce in 6.111 (dealing with complex technical issues), it is important that care be\ntaken to ensure that the writing clearly and accurately describe the topic. Pictures such as\nwiring and timing diagrams should be incorporated into the text and be clearly described.\n\nReport Style and Audience\nWrite for your colleagues. You should assume an audience with technical capabilities\nsimilar to your own. It should be possible for other students and for faculty to understand\nyour report. Thus you can assume general technical knowledge on the part of your reader.\nYou should not assume that your reader has a lot of specific knowledge about your\nsubject area.\nWrite for yourself. A careful job of documenting your work can help you to organize your\nproject. This can be particularly helpful if done early in the project. Your own carefully\nthought out explanation of how each element of your circuitry works can help in the\nprocess of design. Describe the function of each element and how the elements work\ntogether. Then think about what you have written. A surprising number of design errors\ncan be discovered by this process, even before you start wiring.\nOrganize your work carefully and do a neat job. Each of the reports should be typed.\nPowerful word processing tools are readily available to students in 6.111. Use them.\nFigures should be drawn with drafting aids (template and straight-edge) or a computer\ngraphics system (Xfig, ...). Lettering on figures can be done by hand, but must be neat\nand legible.\n\nRemember to leave yourself enough time to do the report properly. Proofread your\nreport! Eliminate typographical and spelling errors. Remember, your report is\nrepresenting you to the world (and to the good folks who determine your grade!).\n\nOrganization\nYour reports should be long enough to fully describe your work, but no longer. We\nexpect that your reports for Labs 2 and 3 will be perhaps ten or twelve pages long. Phase\nII papers must be at least ten pages of text, not counting front matter, back matter, or\ngraphics. The project proposal document should be only a few pages, but the project\nreport will probably exceed twenty pages (in some cases by a substantial amount). Your\nreport should include schematic, timing, and state diagrams and other figures, where\nappropriate. These pictures, with appropriate descriptions, will help to make your report\nclearer.\nTerm projects in 6.111 are team efforts. You will be working with one or two other\nstudents to build a (hopefully) working system. It may be appropriate to submit a joint\nreport. This is permitted (but not required), but it is important that the work of each\nstudent be clearly labeled.\nYour reports should have the following parts:\nTitle and Abstract\nTable of Contents\nList of Figures\nOverview\nDescription\nConclusions\nAppendices\nIn the title, identify the device that you have created. Avoid such deadwood as ``Report\non'' or ``Specifications of''. The abstract, which should appear on the title page, is a one-\nparagraph description of your project. The same abstract may appear in both the project\nproposal and final report, or it may be necessary to modify the abstract to reflect changes\nin scope or direction after the proposal.\nIf the report has joint authorship, the Table of Contents should disclose the authorship of\ndifferent sections.\nStyle Considerations\nAccuracy and Completeness:\nBe sure that your report accurately and completely describes your work. One of your\ncolleagues (fellow students, teaching assistants or faculty) should be able to understand\nwhat you have done and to, on the basis of your descriptions, reproduce your work.\n\nWell-organized, logical structure:\nEach section of the report should state an objective, provide examples and reach a\nconclusion. The paper should proceed systematically; and transitions from each section,\nparagraph and sentence to the next should be smooth and coherent.\nAppropriate language and tone:\nTechnical terminology will, of course, be used, but you should avoid jargon. Write\nsimply and clearly.\nCorrect grammar, spelling, punctuation and capitalization:\nProofread carefully. Rid your paper of little bugs.\nThoroughness:\nDo not assume that your reader already knows what you are writing about. You are not\ntaking a quiz. Avoid answering questions with:\nPart B) 30 nanoseconds\nWhat does that mean? How did you measure it? Without the lab handout, someone\nreading this doesn't know what this measurement refers to. Describe what you measured,\nhow you measured it, what calculations (if any) were involved in arriving at this answer.\nDescribe logic analyzer or oscilloscope traces if appropriate.\nThoroughness also means including all the necessary pieces in your lab report. If you\nprogram a CPLD, PAL, or EPROM, you must include the programming files (VHDL\nfiles,\nCode assembler source (.as) and specification (.sp) files, etc.). Most of the time it\nis appropriate to put these computer printouts in an appendix.\nAlways fully document any ``non-standard'', clever or ``hack'' mechanisms. It will help\nothers to understand your design as well as remind you why you built that thing that way\nin the first place.\nOverview (1 - 2 pages)\nThe most important rule of thumb for organizing a technical description is ``Describe the\nwhole before the parts''. This rule is based on the assumption that the device which you\nare describing is unknown to the reader and that a general view of the purpose and\nconstruction is needed before the details can be understood.\nWith this rule in mind, start your 6.111 report with an overview of the purpose, use and\ndesign of the device, what a user does with it and how he or she would do it. Describe in\n\ngeneral the subsystem organization of the device. Emphasize those internal features\nwhich implement the main user-visible features.\nDescription (5 - 7 pages)\nThe device must be described in enough detail for a skilled engineer to understand how it\nworks and to enable reconstruction of the same functions. This is the heart of any\ntechnical description.\nThe description normally includes the project functional specifications, the design used to\nimplement these specifications and a detailed description of how the design works.\nDescriptions are usually organized in a way that mirrors the design of the device. Thus,\nthere is a separate subsection for each module. A useful criterion for ordering the\nsubsections is the flow of information (input to output) within the device as a whole.\nWhen this criterion is not applicable, it often suffices to specify more important modules\nbefore less important ones.\nYour 6.111 project report has the special requirement that each subsystem be described\nby the partner who is responsible for it. Thus, use a sub-heading to identify the subsystem\nand the modules within subsystems. Use this sort of organization:\nSubsystem 1 (by Richard Francis Burton)\nNormalizing Shift Module\nMaster Control Module\nSubsystem 2 (by Alistair Cooke)\nRule-Interpreter Module\nRAM-Control Module\nAnalog Conversion Module\nInclude at least one-sentence introductions at each level (e.g., ``The device consists of\ntwo subsystems which ...'').\nIllustrate the descriptions with the block diagrams that you prepared earlier in the project\n(you may want to re-draw them). Refer to these by figure number. Detailed logic\ndiagrams usually belong in an appendix.\nTesting and Debugging (2 or 3 pages)\nVery infrequently will something you have built actually work the first time you turn on\nthe power. Testing and debugging are natural parts of the engineering process. If your\ncircuit is comprised of several smaller subsystems, you should include a description of\nhow you tested each one after you built it. If a subsystem did not work as you had\nplanned, give an overview of the debugging steps that you followed to make it work. In\n\nthe worst case, if you just could not get a lab project working, describe which subsystems\nworked and to what extent. You should also indicate what the remaining problems and\nobstacles were and what your next testing and debugging steps would have been to solve\nthose problems.\nConclusion (1 - 2 pages)\nThe conclusion of a project report typically summarizes the most important or innovative\ndesign features. The conclusion also often suggests ways in which the design could be\nimproved. In your 6.111 report you should also make a point of summarizing the test\nresults. If these were not fully satisfactory, they provide a natural basis for suggesting\nimprovements. As a guide to others, it is very helpful to include some discussion of the\nproblems you met in your initial design and what you did to overcome these problems.\nCircuit Diagrams\nCircuit diagrams help convey information about a piece of design work you have\naccomplished and implemented. Learning to ``speak the language'' of circuit diagrams\nwill facilitate getting your ideas across to others and make things easier to build and\ndebug.\nPoints to remember:\n1.\nAlways use a template and straight-edge, or use a computer-based drawing\npackage.\n2.\nWhere possible, information ``flows'' across circuit diagrams from left to right\nand top to bottom.\n3.\nPin numbers, part numbers and part locations are essential for a diagram of a\ncircuit you are actually going to build. It makes both wiring and debugging easier,\nas you will not have to search for a gate on a particular chip by tracing wires. Part\nlocation is most easily derived from the column (pads A through E, left to right on\nyour kit) and row (chip position, from top to bottom) coordinates.\n4.\nAdhere to the convention of gate input on the left, output on the right whenever\npossible. For chips containing small gates (including buffer and register chips),\ndraw out the individual gates. Do not draw a block that represents a chip, with\nwires connected to the pins in their real-world positions. This practice leads to\nconfusing diagrams that obscure the functions of circuits. Larger, complicated\nchips (counters, adders, etc.) should be drawn as blocks, but label them by\nfunction (signal inputs together, outputs together, similar control inputs together,\netc.), not by the physical layout of the chip's pins.\n5.\n\nLabel all input and output signals to a circuit. One starting point for each is best,\nsplitting the signal as required for multiple inputs. In dense diagrams, this may not\nbe possible. In that case, label all instances of a signal. A logic diagram fragment\nis shown in Figure 1.\n\n6. Wires: use horizontal and vertical lines only, drawn with a straight-edge. Connections\nare noted by dots. Do not use ``hop-overs'' to indicate non-connection points. (See Figure\n\n7. Use proper symbology: Inversion bubbles should match up, as shown in Figure 3.\n\nTiming Diagrams\nTiming diagrams demonstrate that the signals within a system behave in an orderly\nfashion to achieve a design goal. They show the cause and effect relationships between\nsignals.\nPoints to remember about timing diagrams:\n1. Try to group signals by operations of short duration. Examples include memory\nreads and writes, data buffering, video frame sync, etc. Draw separate diagrams for\neach operation.\n2. Show only the relevant signals. These include control signals and some indication of\nthe state of data lines (usually showing ``valid'' and ``invalid'' states).\n3. Show a clock signal in synchronous systems.\n4. Draw a separate trace for all signals shown, even if the trace is identical to that of\nanother signal. Label all signals.\n5. Propagation delays do not usually have to be shown.\n6. Indicate situations where an edge on one signal causes a change in another signal, as\nshown in Figure 4.\n\n7. Data bus contents should be abbreviated as shown in Figure 5, unless one of the data\nbits must be drawn separately for one of the reasons above.\n\nFigure 6 shows an example of a timing diagram."
    },
    {
      "category": "Resource",
      "title": "adaptiveproc.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/f972f54d6db2a70cd39e2bd183fc5471_adaptiveproc.pdf",
      "content": "Adaptive Processes:\nAdaptive Processes:\nLinking Strategy with\nLinking Strategy with\nExecution\nExecution\n\nContributions of the Delta Model\nContributions of the Delta Model\nBusiness is nonlinear.\nconcentrated, particularly when it involves\nbonding.\nfocus on underlying performance drivers,\nto detect variability, explain, learn, and act\nManaging by averages leads\nto below average\nperformance\nDiscovering\nperformance drivers\nGranular\nGranular\nMetrics and\nMetrics and\nFeedback\nFeedback\nAggregate performance metrics need to\nreflect each of the Adaptive Processes and\ntheir role based upon the strategic position\nz Product performance\nz Customer performance\nz Competitor performance\nGood financials do not\nalways lead to good results\nMeasuring success\nAggregate\nAggregate\nMetrics\nMetrics\nExecution is captured through three\nAdaptive Processes:\nz Operational Effectiveness\nz Customer Targeting\nz Innovation\nwhose roles need to change to achieve\ndifferent strategic positions\nExecution is not the\nproblem, linking to strategy\nis\nLinking strategy with\nexecution\nAdaptive\nAdaptive\nProcesses\nProcesses\nThree distinct strategic options\nz Best Product\nz Total Customer Solutions\nz System Lock-In\nThe best product does not\nalways win\nOpening the mindset to\nnew strategic positions\nThe Triangle\nThe Triangle\nMethod:\nMethod:\nImplication:\nImplication:\nGoal:\nGoal:\nContribution:\nContribution:\nPerformance is\nGranular Metrics allows us to\n\nLinking Strategy with Execution\nLinking Strategy with Execution\nThe Adaptive Processes:\nThe Adaptive Processes:\n-- The process of new product\nThe process of new product\ndevelopment\ndevelopment\n-- Should ensure a continuous\nShould ensure a continuous\nstream of new products and\nstream of new products and\nservices to maintain the\nservices to maintain the\nfuture viability of the business\nfuture viability of the business\n-- The management of the customer\nThe management of the customer\ninterface\ninterface\n-- Identification and selection of\nIdentification and selection of\nattractive customers and enhancement\nattractive customers and enhancement\nof customers' performance\nof customers' performance\n-- Should establish best revenue\nShould establish best revenue\ninfrastructure for chosen strategy\ninfrastructure for chosen strategy\nBusiness Model\nBusiness Model\nInnovation\nInnovation\nCustomer Targeting\nCustomer Targeting\nOperational Effectiveness\nOperational Effectiveness\n-- The production and\nThe production and\ndelivery of products\ndelivery of products\nand services to the\nand services to the\ncustomer\ncustomer\n-- Should produce the\nShould produce the\nmost effective cost and\nmost effective cost and\nasset infrastructure to\nasset infrastructure to\nsupport the chosen\nsupport the chosen\nstrategic position of the\nstrategic position of the\nbusiness\nbusiness\n\n-- Operational Effectiveness:\nOperational Effectiveness: This process is\nThis process is\nresponsible for the delivery of products and services\nresponsible for the delivery of products and services\nto the customer.\nto the customer.\nall the elements of the internal supply chain.\nall the elements of the internal supply chain.\nprimary focus is on producing the most effective cost\nprimary focus is on producing the most effective cost\nand asset infrastructure to support the desired\nand asset infrastructure to support the desired\nstrategic position of the business.\nstrategic position of the business.\ncomprehensive sense, operational effectiveness should\ncomprehensive sense, operational effectiveness should\nexpand its external scope to include suppliers,\nexpand its external scope to include suppliers,\ncustomer, and key\ncustomer, and key complementors\ncomplementors, thus establishing\n, thus establishing\nan extended supply chain.\nan extended supply chain.\na company's productive engine as well as its source of\na company's productive engine as well as its source of\ncapacity and efficiency.\ncapacity and efficiency.\nIn a traditional sense, this includes\nIn a traditional sense, this includes\nIts\nIts\nIn a more\nIn a more\nThis process is the heart of\nThis process is the heart of\n\n-- Customer Targeting:\nCustomer Targeting: This process addresses the\nThis process addresses the\nbusiness\nbusiness--to\nto--customer interface.\ncustomer interface.\nactivities intended to attract, satisfy, and retain\nactivities intended to attract, satisfy, and retain\ncustomers, and ensures that customer relationships\ncustomers, and ensures that customer relationships\nare managed effectively. s primary objectives are to\nare managed effectively.\ns primary objectives are to\nidentify and select attractive customers and to\nidentify and select attractive customers and to\nenhance their performance, either by helping to\nenhance their performance, either by helping to\nreduce their costs or increase their revenues.\nreduce their costs or increase their revenues.\nultimate goal of this process is to establish the best\nultimate goal of this process is to establish the best\nrevenue infrastructure for the business.\nrevenue infrastructure for the business.\nIt encompasses the\nIt encompasses the\nItIt\nThe\nThe\n\n-- Innovation:\nInnovation: This process ensures a continuous\nThis process ensures a continuous\nstream of new products and services to maintain the\nstream of new products and services to maintain the\nfuture viability of the business.\nfuture viability of the business.\ncreative resources of the firm\ncreative resources of the firm-- including its technical,\nincluding its technical,\nproduction, and marketing capabilities\nproduction, and marketing capabilities-- to develop an\nto develop an\ninnovative infrastructure for the business.\ninnovative infrastructure for the business.\nnot limit itself to the pursuit of internal product\nnot limit itself to the pursuit of internal product\ndevelopment, but should extend the sources of\ndevelopment, but should extend the sources of\nInnovation to include suppliers, customers, and key\nInnovation to include suppliers, customers, and key\ncomplementors\ncomplementors. .\nrenewal of the business in order to sustain its\nrenewal of the business in order to sustain its\ncompetitive advantage\ncompetitive advantage\nperformance.\nperformance.\nIt mobilizes all the\nIt mobilizes all the\nIt should\nIt should\nThe heart of this process is the\nThe heart of this process is the\nand its superior financial\nand its superior financial\n\nThe Changing Role of Operational Effectiveness\nThe Changing Role of Operational Effectiveness\nIn supporting the chosen Strategic Position\nIn supporting the chosen Strategic Position\nStrategic Position\nStrategic Position\nBest Product\nBest Product\nDescription of the Role\nDescription of the Role\nFocus of Attention\nFocus of Attention\nOutput\nOutput\nObjective\nObjective\nInternal Value\nInternal Value\nInternal cost\nInternal cost\ninfrastructure\ninfrastructure\nBest Product Cost\nBest Product Cost\nTotal\nTotal\nCustomer\nCustomer\nSolutions\nSolutions\nInternal and\nInternal and\ncustomer value chain\ncustomer value chain\nCombined internal and\nCombined internal and\ncustomer infrastructure\ncustomer infrastructure\nMaximum customer\nMaximum customer\nvalue\nvalue\nSystem Lock\nSystem Lock--In\nIn\nInternal, customer,\nInternal, customer,\nand\nand complementor\ncomplementor\nvalue chain\nvalue chain\nSystem infrastructure\nSystem infrastructure\nEnhance system\nEnhance system\nperformance\nperformance\n\nThe Changing Role of Customer Targeting\nThe Changing Role of Customer Targeting\nIn supporting the chosen Strategic Position\nIn supporting the chosen Strategic Position\nBest Product\nBest Product\nDescription of the Role\nDescription of the Role\nFocus of Attention\nFocus of Attention\nOutput\nOutput\nObjective\nObjective\nDistribution channel\nDistribution channel\n''generic customer\ngeneric customer''\nChannel mix\nChannel mix\nMaximize product volume\nMaximize product volume\nand product market share,\nand product market share,\nminimize distribution cost\nminimize distribution cost\nTotal\nTotal\nCustomer\nCustomer\nSolutions\nSolutions\nTargeted customer\nTargeted customer\nTarget market intelligence,\nTarget market intelligence,\nCustomer interface\nCustomer interface\nMaximize share of each\nMaximize share of each\ncustomer\ncustomer\nSystem Lock\nSystem Lock--In\nIn\nRelevant business system\nRelevant business system\nNetwork of\nNetwork of complementors\ncomplementors, ,\nComplementor\nComplementor interfaces\ninterfaces\nMaximize share of\nMaximize share of\ncomplementors\ncomplementors\n\nBest Product Companies Take a Horizontal Market Cut, Total\nBest Product Companies Take a Horizontal Market Cut, Total\nCustomer Solutions Businesses Take a Vertical Market Cut\nCustomer Solutions Businesses Take a Vertical Market Cut\nAA\nB\nB\nC\nC\nDD\nE\nE\nFF\nCustomer Segments\nCustomer Segments\nProduct 1\nProduct 2\nBest Product, emphasis on\nChannel 1\nChannel 2\nChannel 3\nBest Product\nDirect\nChannel 1\nProduct\nProduct\nItems\nItems\n\nThe Traditional Customer Interface in the Best\nThe Traditional Customer Interface in the Best\nProduct Strategy\nProduct Strategy\nSupplier\nCustomer\nSalesforce\nRest of the\norganization\nBuyers\nRest of the\norganization\nSource: Patrick Preux, \"Customer Targeting, Sustainable Competitive Advantage, and he Competencies\"\n\nThe Traditional Customer Interface in the Total\nThe Traditional Customer Interface in the Total\nCustomer Solutions Strategy\nCustomer Solutions Strategy\nSource: Patrick Preux, \"Customer Targeting, Sustainable Competitive Advantage, and he Competencies\"\nLine Executives\nR & D\nManufacturing\nMarketing and\nDistribution\nFinance\nAfter Sales\nAfter Sales\nFinance\nMarketing and\nDistribution\nManufacturing\nR & D\nLine Executives\n\nThe Changing Role of Innovation\nThe Changing Role of Innovation\nIn supporting the chosen Strategic Position\nIn supporting the chosen Strategic Position\nBest Product\nBest Product\nDescription of the Role\nDescription of the Role\nFocus of Attention\nFocus of Attention\nOutput\nOutput\nObjective\nObjective\nCommon product\nCommon product\nplatform\nplatform\nFamily of\nFamily of\nFirst to market, dominant\nFirst to market, dominant\ndesign\ndesign\nTotal\nTotal\nCustomer\nCustomer\nSolutions\nSolutions\nCustomer\nCustomer''s platform\ns platform\nJoint development\nJoint development\n-- Enhance customer\nEnhance customer''s s\nresults\nresults\n-- Customized bundle of\nCustomized bundle of\nproducts\nproducts\n-- Integrate into\nIntegrate into\ncustomer\ncustomer''s activities\ns activities\nSystem Lock\nSystem Lock--In\nIn\nOpen platform\nOpen platform\n--Manage proliferation of\nManage proliferation of\ncomplementors\ncomplementors\n-- Breadth/range of\nBreadth/range of\napplications\napplications\n-- Application interfaces\nApplication interfaces\nHarmonized system\nHarmonized system\narchitecture\narchitecture\nStrategic Position\nStrategic Position\nproducts\nproducts\n\nThe Role of Adaptive Processes\nThe Role of Adaptive Processes\nIn supporting the Strategic Positioning of the Business\nIn supporting the Strategic Positioning of the Business\nAdaptive Process Objectives\nAdaptive Process Objectives\nOperational\nOperational\nEffectiveness\nEffectiveness\nCustomer\nCustomer\nTargeting\nTargeting\nInnovation\nInnovation\nStrategic Positioning\nStrategic Positioning\nBest Product\nBest Product\nTotal Customer Solutions\nTotal Customer Solutions\nSystem Lock\nSystem Lock--In\nIn\nBest Product Cost\nMaximize Product\nVolume, Low\nDistribution Cost\nFirst to Market,\nDominant Design\nMaximum Customer\nValue\nCustomer Share\nBest System\nPerformance\nComplementor Share\nHarmonize System\nArchitecture\nCustomized Bundle\nOf Products\n\nThe Role of Adaptive Processes\nThe Role of Adaptive Processes\nIn supporting the Strategic Positioning of the Business\nIn supporting the Strategic Positioning of the Business\nStrategic Positioning\nSystem Innovation\n- Create customer and system lock-\nin, and competitive lock-out\n- Design propriety standard within\nopen architecture\n- Complex interfaces\n- Rapid evolution\n- Backward compatibility\nCustomer Service Innovation\n- Identify and exploit joint development\nlinked to the customer value chain\n- Expand your offer into the customer value\nchain to improve customer economics\n- Integrate and innovate customer care\nfunctions\n- Increase customer lock-in through\ncustomization and learning\nProduct Innovation\n- Develop family of products\nbased on common platform\n- First to market, or follow rapidly-\nstream of products\nTarget System Architecture\n- Identify leading complementors\nin the system\n- Consolidate a lock-in position\nwith complementors\n- Expand number and variety of\ncomplementors\nTarget Customer Bundles\n- Identify and exploit opportunities to\nadd value to key customers by\nbundling solutions and customization\n- Increase customer value and possible\nalliances to bundle solutions\n- Select key vertical markets\n- Examine Channel ownership options\nTarget Distribution Channels\n- Maximize coverage through\nmultiple channels\n- Obtain low cost distribution\n- Identify and enhance the\nprofitability of each product by\nchannel\nBest System Performance\n- Improve system performance\ndrivers\n- Integrate complementors in\nimproving system performance\nBest Customer Benefits\n- Improve customer economics\n- drivers\n- Improve horizontal linkages in the\n- components of total solutions\nBest Product Cost\n- Identify product cost drivers\n- Improve stand alone product cost\nBest Product\nBest Product\nTotal Customer Solutions\nTotal Customer Solutions\nSystem Lock\nSystem Lock--In\nIn\n\nThe Priorities of Adaptive Processes in Each\nThe Priorities of Adaptive Processes in Each\nStrategic Position\nStrategic Position\nAdaptive\nAdaptive\nProcesses\nProcesses\nStrategic Positioning\nStrategic Positioning\n3.\nCustomer Service\nInnovation\n1.\nSystem\nArchitecture\nInnovation\nProduct Economics\nBest Product\nBest Product\nTotal Customer Solutions\nTotal Customer Solutions\nSystem Lock\nSystem Lock--In\nIn\nCustomer Economics\nSystem Economics\n3.\nBest System\nPerformance\n2.\nTarget System\nComplementors\n1.\nTarget Customer\nBundles and\nCustomization\n2.\nBest Customer\nBenefits\n1.\nBest Product\nCost\n3.\nTarget Distribution\nChannels\nOperational\nEffectiveness\nInnovation\nCustomer\nTargeting\n2.\nProduct\nInnovation"
    },
    {
      "category": "Resource",
      "title": "assembler.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/99b3fd506e87b1c8fafe2cbcb9d68190_assembler.pdf",
      "content": "ASSEMBLER(1)\nASSEMBLER(1)\nNAME\nassembler, assem, assem16to8, assem24to8, assem32to8 - translate symbolic microcode into hex integer\nfile(s)\nSYNOPSIS\nassembler < xxx.as > xxx.dat\nassem xxx\nassem16to8 xxx\nassem24to8 xxx\nassem32to8 xxx\nDESCRIPTION\nThis program translates symbolic microcode instructions into a file of hex integers. An optional listing file\ncan also be produced which reproduces the source file with the addition of the address and value for each\nmicroinstruction. The assembler output must then be processed by the dat2ntl program to format this file\ninto one that can be sent to the PROM programmer. The dat2ntl program is described in a separate man-\npage. The assembler accommodates a large number of microinstruction formats. The user can (must)\ndefine individual keywords and instruction formats in a specification file.\nThere are several shell scripts which run both assembler and dat2ntl so these programs do not have to be\nrun separately. These scripts pipe the output of assembler through the program dat2ntl.\nBy the recommended convention, the source file name has an extension of .as, i.e., it is of the following\nform:\nxxx.as\nThe specification file name is of the form:\nxxx.sp\nThe listing file name should be of the form:\nxxx.list\nUSE OF THE PROGRAM\nTo use the program one must create a specification file and a source file.\nThe specification file, xxx.sp, contains the declaration of the command names and the bits which each com\nmand asserts. It also specifies which bits will be used for the address field, the instruction size, and, option-\nally, whether the default assertion for signals is low or high. The microinstructions must all be of the same\nlength and can only reference a single address.\nThe source file, xxx.as, contains the assembly code which uses the declarations given in xxx.sp. It must\ninclude a #SPEC_FILE statement in order to know where to look for these declarations. It may also\ninclude a #LIST_FILE statement which provides a file name for the assembler listing, a #SET_ADDRESS\nstatement to tell the assembler the beginning address for the assembled code, and a #NEW_PROGRAM\nstatement to tell the assembler to treat the following text as a completely new program. Any other com\nmand statement - \"#command_name = value ;\" - will be passed through the assembler.\nThere can be multiple #SET_ADDRESS statements interspersed within the code so that the address can be\nchanged anywhere in the code. This is useful for subroutines or when a certain part of the code needs to\nbe put in a specific position in memory. The formats of these statements can be obtained from the examples\nor from the man page for dat2ntl.\nMIT EECS Dept.\n\nASSEMBLER(1)\nASSEMBLER(1)\nNote that the LIST_FILE produced by the assembler can be used in your project reports.\nWHAT THE ASSEMBLER DOES\nThe assembler operates in two passes. It first opens xxx.as. From this it determines the name of your spec\nification file, xxx.sp, and processes this file to determine your instruction formats. The assembler then pro\nceeds to process xxx.as. During this first pass, the values of all address labels are evaluated and stored.\nExcept for forward address references, the values of the microinstructions are also determined during this\nfirst pass. During the second pass, the values of the forward referenced address labels are included in the\nfinal microinstruction values; and the final output is produced along with the optional listing file.\nTo produce an output number for a microinstruction, the assembler first evaluates a token. It then shifts the\nvalue left so that it lines up with the specified field and logically ORs the value into the output number.\nWhile doing this it checks to see if the value is wholly contained within the specified field. If not, it pro\nduces a warning error comment. It also produces a (different) warning if successive tokens cause the same\nbit in the output number to be specified more than once. When the statement terminating semicolon is\nreached, the assembler increments the address counter and processes the next microinstruction.\nYou may include multiple, separate programs within the same source file. All of these programs must use\nthe same specification file. These programs are delineated by the inclusion of a command statement,\n# new_program = prom_address\nThis command statement will be translated into a\n# load_address = prom_address\nstatement.\nHOW TO RUN THE PROGRAM\nThe assembler by itself translates its input file into a data file of hex integers. This file then has to be pro\ncessed by dat2ntl to create the file, xxx.ntl, before you can program a PROM on a DATA I/O programmer.\nassembler <xxx.as >xxx.dat\nThere are several shell scripts which run both assembler and dat2ntl so these programs do not have to be\nrun separately. These scripts pipe the output of assembler through the program dat2ntl.\nThe following shell scripts all process xxx.as:\nassem xxx\nCreates xxx.ntl\nassem16to8 xxx Creates byt0xxx.ntl and byt1xxx.ntl\nassem24to8 xxx Creates byt0xxx.ntl through byt2xxx.ntl\nassem32to8 xxx Creates byt0xxx.ntl through byt3xxx.ntl\nINPUT FILE FORMAT\nThe assembler parses its input into tokens. White space, i.e., spaces, tabs, returns, and newlines, are\nignored, although your file must end with a newline or else the last line will not be read.\nThe parser is case insensitive. Internally, all upper case characters are mapped into lower case characters.\nSince the names of the specification file, xxx.sp, and of the listing file, xxx.list, are specified in the source\nMIT EECS Dept.\n\nASSEMBLER(1)\nASSEMBLER(1)\nfile, xxx.as, the actual UNIX file names must not include upper case characters.\nLegal characters for labels or symbols include a through z, 0 through 9, . (period), _ (underscore), / (slash),\nand %. Labels and symbols must include at least one nonnumeric character.\nThe same label cannot be used as an address label and a command symbol, as the assembler will consider\nthis to be a redeclaration error.\nComments are delimited as in C.\nFor example, /* this is a comment */\n/*\n* This is also\n* a comment.\n*/\nIntegers are normally interpreted as decimal numbers. If you precede an integer with %b or %h, then that\ninteger will be interpreted as a binary or hex number respectively. For example, %b10001 will be read as\n17 and %h1c will be read as 28.\nCAUTION - The integer in a #SET_ADDRESS, #LOAD_ADDRESS, or #NEW_PROGRAM command\nstatement is ALWAYS interpreted as a HEX number.\nAll statements must be terminated with a ; (semicolon). The assembler attempts to give meaningful error\ncomments. However, if you do not understand the error comment, check for a missing semicolon.\nSPECIFICATION FILE\nFields are specified by the construct <n:m> or <n> where n > m and both n and m are in the range 0\nthrough 31. This construct is used to simplify the specification of symbol values and to enable range tests.\nThe first entry in the xxx.sp should specify the instruction length. The maximum allowed length for an\ninstruction is 32 bits, and this is also the default.\nop <n:0>;\nYou must specify the address field. You can only have a single address, and the field must be a single con\ntiguous block of bits. If you must have the address field in split fields, then you can simply wire your\nPROM outputs accordingly.\naddress op <n:m>;\nYou may optionally specify a field into which integer values are placed by including\nvalue op <n:m>;\nThe default value for a field is all zeros, and ones are ORed into the field. If you wish, you may specify the\ndefault value to be all ones by\nassert_low op <n:m>;\nThen zeros will be ORed into those fields. Note that you must also invert the symbol definitions to be used\nin that field. This has an effect similar to inverting those PROM outputs.\nYou may specify noncontiguous bit fields, e.g.,\nMIT EECS Dept.\n\nASSEMBLER(1)\nASSEMBLER(1)\nassert_low op <7:6> op <3:2> op <0>;\nCommand symbols are defined by\nNAME op <n:m> = NUMBER;\nor\nNAME op <n> = NUMBER;\nwhere NAME is any symbol you wish and NUMBER is an integer. Non-contiguous bit fields can be speci\nfied, e.g.,\nNAME op <7:6> = 2 op <4:3> = 1;\nOne can also define new NAMES in terms of previously defined NAMES. Or one can mix NAMES with\nbit field specifications. Forward references are not allowed. Examples are:\nload\nop<3> = 1;\nshift op<2:0> = %b110;\nnew\nload shift;\nnew1\nop<2:0> = 2 load;\nnew2\nop<2:0> = 2 op<3> = 1;\nAs a special case, you may wish to define a symbol (or symbols) that does not do anything, i.e., contribute\nto the output value or produce an error comment. You accomplish this by\nNAME nop;\nLook at the example file to see how this feature can be used to make your microcode more readable.\nSOURCE FILE\nThe source file, xxx.as, consists of command statements, microcode statements, and, of course, comments.\nCommand statements begin with a # and are of the form\n# key_word = value;\nThe first statement in your source file must be\n# SPEC_FILE = xxx.sp;\nwhere xxx can be anything you like. Note that the actual UNIX file name must not include upper case char\nacters as the assembler maps all upper case characters to lower case characters.\nNormally a listing file is desired, so you should include the listing file name specification.\n# LIST_FILE = xxx.list;\nYou may include the following statements to specify the beginning address for your program. If you omit\nthese two statements, then the assembler assumes the default of zero for both NUMBER_SA and NUM-\nBER_NP.\n# SET_ADDRESS = NUMBER_SA;\n# NEW_PROGRAM = NUMBER_NP;\nThis statement is transformed into a\nMIT EECS Dept.\n\nASSEMBLER(1)\nASSEMBLER(1)\n# LOAD_ADDRESS = NUMBER_SA + NUMBER_NP;\nstatement which is passed through so the dat2ntl program can use it to determine where your program is to\nbe loaded into your PROM.\nIf you wish to have your program loaded into your PROM at a different address, you can also include\n# LOAD_ADDRESS = NUMBER;\nto specify that. The effects of #SET_ADDRESS and #LOAD_ADDRESS differ in that #SET_ADDRESS\nis interpreted by the assembler to set the internal location counter. All label references are thus affected.\nThe #LOAD_ADDRESS statement, on the other hand, is not used by the assembler at all, but merely\naffects the PROM locations that are programmed.\nThe #NEW_PROGRAM statement is used to delineate multiple programs within the same file and to spec\nify the beginning PROM address for this new program. Thus, it is possible to have multiple programs in a\nsingle PROM and select a given program by switching the high order address bits.\nOther command statements to be interpreted by the dat2ntl program may be included and will simply be\npassed through to the output without affecting your assembly.\nYou are required to include a #SPEC_FILE statement before any assembly code, but you are not required to\ninclude a #LIST_FILE statement or a #SET_ADDRESS statement. If no #LIST_FILE statement is\nincluded, no list file will be created. If no #SET_ADDRESS statement appears before the first line of the\nmicrocode, then the assembler will start at address zero. The dat2ntl program requires either a\n#SET_ADDRESS or #LOAD_ADDRESS statement. You should include one or the other right after the\n#SPEC_FILE statement.\nMicrocode instructions are of the form\naddr_label : symbol1 symbol2 address;\nA token is interpreted as defining an address label if it is followed by a : (colon). You need not have an\naddress label defined on every instruction. Your microcode instruction can consist of an arbitrary number\nof symbols, but you may have only one address label among them. The assembler will evaluate each token\nand OR it into the field as specified in xxx.sp.\nIntegers can be put directly into the xxx.as file if a value field has been specified. The integers must fit\nwithin the value field. As in the xxx.sp file, they will be read in decimal unless preceded by a %h or %b.\nBy using the assert_low command in the xxx.sp file, all the specified bits will default to ones instead of\nzeros.\nRemember that all statements must be terminated by a ; (semicolon).\nFILES\n/mit/6.111/handouts/labs/lab3.s95/mcu.as\nMCU test program\n/mit/6.111/handouts/labs/lab3.s95/mcu.sp\nMCU spec. file\n/mit/6.111/handouts/labs/lab3.s95/mcu.pal\nMCU test PAL\n/mit/6.111/prom/examples/encr.as\n/mit/6.111/prom/examples/encr.sp\n/mit/6.111/prom/examples/encr.list\nMIT EECS Dept.\n\nASSEMBLER(1)\nASSEMBLER(1)\nSEE ALSO\nprom(1), dat2ntl(1)\nBUGS\nMIT EECS Dept.\nLast change: April 10, 1994"
    },
    {
      "category": "Resource",
      "title": "beginners.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/107c86155af744430ddfc765b259adbd_beginners.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n6.111 -- Introductory Digital Systems Laboratory\nA Beginner's Guide to WARP\nWe have two versions of WARP available on Athena computers, namely 4.3 and 6.2. No\nversions of WARP are available on pcs in the lab as WARP is not available for pcs\nrunning any variant of unix. Sunpal[12] computers in the digital lab have only WARP 4.3\navailable. WARP 4.3 is the default when you access it via an Athena machine and setup\n6.111. If you wish to switch versions then two aliases are provided, namely setwarp43\nand setwarp62. The aliases set the appropriate environment variables and update your\npath.\nWARP is a program donated to MIT by Cypress Semiconductor. You are free to use it\nfor any educational or personal purpose. Should you want to use it in connection with any\njob (i.e., commercial activity), you should secure your own donation or pay Cypress their\nrather modest fee.\nThis rather short tutorial will not tell you all there is to know about WARP. Rather it is\naimed at getting you started by supplying two relatively straightforward VHDL files. One\nof these files implements a half adder. The other implements a full adder by wiring two\nhalf adders and adding a two-input or.\nWhat follows is an outline of the steps to compile a JEDEC file and simulate a design of\na full adder. This design is, of course, simple; but it is done hierarchically to provide\nsome sample VHDL code which you may later edit to design some other digital\ncombinational logic.\nThe basic steps are the same for both versions of WARP but they may differ in the exact\nseries of mouse clicks.\nSelect a project\nSelect a device\nSelect a package\nAdd source files\nSelect a file as the top\nCompile the files\nAfter that you may wish to inspect the report file and/or simulate the jedec file which was\nproduced before programming your device with the jedec file.\nThe exact mouse clicks are different but both versions presume that you have sourced the\nappropriate warp.cshrc file. You can verify that this has been done by typing\n\nwhich galaxy\nThis should tell you the location of the galaxy program which you will execute. From it\nyou can easily tell which version of WARP is currently selected.\nIf you want the other version (and are on a computer which supports both), then use the\nalias setwarp43 or setwarp62 to switch as desired. Remember to use ``setup 6.111'' if you\nare on an Athena Sun computer.\nFirst, make a directory and change to it and start up galaxy.\ncd\nmkdir beginner\ncd beginner\ngalaxy&\nWith 4.3, this pops up a window and tells you the name of a project file that will be\ncreated. Click on OK. This brings up the main window. With 6.2 you just get the main\nwindow.\nYou may use any editor you wish to edit files. You can use emacs or the galaxy text\neditor as you wish.\nCopy 2 xxx.vhd files from /mit/6.111/vhdl/warp/examples/beginner/ to your present\ndirectory\ncp /mit/6.111/vhdl/warp/examples/beginner/*.vhd .\nchmod u+w *.vhd\nThis should give you copies of halfadd.vhd and fulladd.vhd. The chmod instruction is to\nallow you to modify the files. It is not really necessary at first. It is included so that you\nmay experiment with modifications of your choice. Actually, you should use the chmod\ncommand like this anytime you copy files from the 6.111 directory so that you can edit\nthe files as desired.\nCertainly you can look at these files, but, at this point, do not change anything!\nSince the mouse clicks are somewhat different, there are two sections depending on the\nversion you are using.\nWarp 6.2\nClick on File and then New In the window that pops up, select ``Project[Target -\nDevice]'' and click on OK. This pops up another window and you should select VHDL\nand give your project a name, say, beg. Then click on Next. This then allows you to add\nsome files. Select both .vhd files and add them and then click next. Yet another window\npops up and you can select a target device. Click on the button just to the left of CPLD\n\nand then click on c22v10. Select a package of PALCE22V10-5PC. Anything with a P\nafter the hyphen specifies a dip package which is what you want for all the small plds.\nFinally you get to click ``Finish'' and you have defined a project, added the files, and\nspecified a device and package. Yet another window pops up, and yes, you do want to\nsave this new project.\nNow you have to select a file as the top level design file. Click on fulladd.vhd and then\non Project\nSet Top. It looks as if nothing happened, but it did. You can see that it\nactually set a top level design by clicking on project again and noticing that a checkbox\nhas appeared to the left of Set Top.\nFinally you are ready to compile the files. That is easy to do as you just have to click on\nCompile\nProject. Galaxy does a lot of work and prints out WARP done and also that\nthe compilation was successful. If you have been following this part, then skip the next\nsection.\nWarp 4.3\nClick on files\nadd all - two files should show up.\nThere are three blocks of buttons in the main galaxy window, edit, compile, and synthesis\noptions.\nUse the edit buttons if you choose to use the galaxy editor; otherwise, use emacs.\nThere are four buttons for the synthesis options. For now, at least, leave the top two alone\nand accept the defaults. Use the ``Set top\" button to tell galaxy which file is the start of\nyour design. Use the ``Device\" button to select a target device.\nClick on fulladd.vhd and click on set top.\nClick on device, then in the new window click on the upper left down arrow and then\nclick on the device C22V10 (or anything else you want to choose). The only Cypress part\nwe have available is the C374I but the JEDEC files for a 22V10, GAL16V8, GAL20V8,\netc. are usable to program parts we have with the pal program.\nClick on OK to get rid of the device window that popped up and use what you have\nselected.\nNow you are ready to compile. There are two buttons, ``Selected'' and ``Smart\". It is\npretty obvious what ``Selected\" does. What is smart about ``Smart\" is that galaxy will\nlook into the files and compile anything it has to (has been modified since last compiled)\nfor synthesizing your design (as indicated by the ``Set top\" button). It will also compile\nthe files in the right order so that circuits defined in a file are compiled before they are\nused. If you do use the ``Selected\" button, then you must select the files in the right order.\n\nClick on ``Smart\" and see what happens. A galaxy editor window pops up and you get\nsome information as to what galaxy is doing. Wait until you get the message ``WARP\ndone.\".\nTry some touches and reclick on the ``Smart\" button and see what happens. If you don't\nunderstand this, then skip it for now.\nBoth Versions\nIf you feel adventurous, then edit one or the other of the xxx.vhd files and make some\nmistakes on purpose and see what comments you get in the editor window.\nIt is helpful to know how to quit the galaxy editor. Of course, you could hide it behind\nanother window before or after iconifying it but if you quit the galaxy editor then the\nwindow really will disappear! Click on ``File\" and then ``Close\" to close the editor\nwindow. It also will go away when you quit galaxy.\nWhat have you done?\nLook at the files that have been produced. There should be exactly one xxx.jed file and it\ncan be used to program a 22v10 (or your selected device) via the universal programmer.\nLook at the equations in fulladd.rpt. Sometimes one gets timing information. For\nexample, some timing information is in fulladd.rpt for the device C374I.\nYou can program your device at this time with the JEDEC file you produced. Optionally,\nyou can simulate your design as embodied in the JEDEC file to see if the logic is what\nyou intended.\nIf you have been using warp 6.2 then you must use the alias setwarp43 before simulation\nwith nova. If you later want to use warp 6.2, then use the alias setwarp62.\nYou can simulate the JEDEC file with the Nova simulator. You can run this from a shell\nby simply typing nova, In warp 4.3 you can also click on Tools and then on Nova. Either\nway, this brings up a simulation window. In it, click on File, then Open and select the\nJEDEC file, fulladd.jed, by clicking on it. Click on OK to accept your choices.\nThe file is read in and some signals appear. These are the signals defined in the entity in\nfulladd.vhd. You can modify which signals are shown with the Views menu, but skip this\nfor now.\nNext you will create some waveforms for the inputs ina, inb, and inc.\nClick on ``ina\" and then click on ``Edit\" and then ``Clock\". Accept the defaults by\nclicking on ``OK\".\n\nClick on ``inb\" and then click on ``Edit\" and then ``Clock\". Double both the clock period\nto 20 and the clock high time to 10. Click on ``OK\" to accept this clock.\nClick on ``inc\" and then click on ``Edit\" and then ``Clock\". Double both the clock period\nto 40 and the clock high time to 20. Click on \"OK\" to accept this clock.\nFinally, execute the simulation by clicking on \"Simulate\" and then \"Execute\". Verify that\nthe simulation results are what one wanted.\nYou can click on the \"Views\" button and then the \"Zoom In (2X)\" button to avoid\nsquinting at the waveforms.\nWhen you are done, close the simulator window and quit galaxy (hint: read again how\nyou quit the editor)."
    },
    {
      "category": "Resource",
      "title": "cpld.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/33973ec6df60715155350aaf46542bf8_cpld.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer\nScience\n6.111 - Introductory Digital Systems Laboratory\nCPLD Module\nCreated 09/20/99 by D. Seth\nRevised 01/31/01 by D. Troxel\nThe CPLD module comprises of four interconnected\nCypress 374I CPLD's that can be accessed via the kit's\nNuBus interface and 50-pin connectors. The state of the\nI/O lines of the NuBus interconnects are displayed on the\nHEX LED's while the I/O lines of the 50 pin connector\nextend directly to the inputs of the Logic Analyzer.\nThe diagram below shows the architecture of the module\nand its interface to the kit.\n\nFigure 1: System Diagram\nThe major components of the module can be categorized\ninto the NuBus Interface, the 50-pin connector Interface,\nthe Interconnect Bus, the Serial Interface, the Programming\nInterface and the Clocking Scheme.\n\nNuBus Interface\n31 I/O pins of each CPLD are interconnected and extended to the NuBus connector. For\nexample, IO-0 of all 4 CPLD's are tied together to NuBus Address A0. Table 1 elaborates\nthese interconnections.\n\nTable 1: NuBus Interface\n\n50-Pin Connector Interface\n25 I/O pins are interconnected among the 4 CPLD's and the 50-pin connector. The\nsignals of the 50-pin connector interface directly to the logic analyzer via the\nconnector on the kit. Table 2 provides details of these interconnections. Logic\nBlocks are partitions internal to the CPLD chip. This information, at times, can be\nuseful during device fitting.\n\nTable 2: 50-pin Connector Interface\nNote: If you use K1, then IO-53 must not be used. Similarly, if you use K2, then\nIO-11 must not be used.\n\nSerial Interface\nThe CPLD Module supports an RS-232 interface via the DB-9 Male connector.\nThe received serial data from Pin 2 of the DB-9 is brought to logic levels via\n\ninversion from a MAX 233 and is made available on Pin 12 of CPLD 1. The data\nto be transmitted is presented at Pin 73 of CPLD 1, which appears on Pin 3 of the\nDB-9 after being inverted by the MAX 233. Please see /mit/6.111/vhdl/serial/ for\nVHDL code that emulates a receiver and a transmitter.\n\nClock Interface\nFigure 2 below presents the clocking scheme used by the module.\nFigure 2: Clocking Scheme\nThe following are some clocking strategies that can be utilized:\n1. C1 sources its clock from the oscillator by enabling jumper J8, while C\n[2,3 or 4] can buffer this signal (IO-9) to any connection on the NuBus,\ne.g. A30. A short circuit can then be created between this interconnection,\ni.e. A30 and A31 by installing a jumper wire.\n2. C [2,3 or 4] buffer A31 to IO-9 thereby clocking C1. In this scenario,\njumper J8 is removed and an external clock is supplied to A31.\n3. Jumper J8's strategic location makes it possible to insert a wire within the\njumper and plug the other end into NuBus A31. If this is done, a\ntermination resistor (discussed ahead) may be required between A31 and\nGND located on the NUBus connector.\n4. Make C1 use a separate clock, while C [2,3, and 4] share their clock from\nA31.\nIrrespective of the clocking strategy, it is always important to consider the effects\nof clock skew.\n\nInterconnect Bus\nA 3-bit bus exists between CPLD 2, 3, and 4. This bus does not have an external\ninterface, i.e. it cannot be accessed via the NuBus or the 50-pin connector\ninterface. The details of these interconnections are:\nCPLD I/O\nCPLD Pin Logic Block\n[C2,C3 and C4 only]\n\nIO-8\nB\nIO-15\nB\nIO-55\nG\nProgramming\nThe module supports the In-System Re-Programming of CPLD's. The following\nsteps are the programming procedure:\nDisable all clocks to all CPLD's. Cypress admits to a bug in the 374I CPLD in\nwhich the programming is incorrect if the input clock is running. This means\nremoving jumper J8 and the input to A31. This also applies to the CPLD's not\nbeing programmed. For instance, if you want to program CPLD # 2 only, Jumper\nJ8 must be removed to avoid corrupting CPLD # 1. All CPLDs are supplied with\n+12V when any CPLD is programmed.\nInsert the 10-pin ribbon connector from the programmer into the blue 10-pin\nsocket. The right orientation is critical - check the key. The correct orientation is\nso that the key of the cable is in the slot of the socket on the board. Pin 1 of the\ncable must mate with Pin 1 of the connector as shown in Figure 5.\nSelect the proper jumper configuration from the table below. A '1' means\nconnected while a blank signifies 'open'.\nDescription C4 C3 C2 C1 J1 J2 J3 J4 J5 J6 J7\nC1 only\n\n1 1\n\nC2 only\n\nC3 only\n\nC4 only\n\nC1,C2\n\nC1,C2,C3\n\nC1,C2,C3,C4 1\n\nTable 3: Jumper Selections\nThe program to use for the CPLD board in the 6.111 kit is isr374. Thisprogram\nmay be called with one to eight arguments.\nAnother program, isrconf, can be used with an argument naming a Cypress style\nconfiguration file. Information on Cypress style configuration files is in the acco\nbinder alongside of the CPLD programming computers in the digital lab.\nThe arguments for isr374 determine the number of CPLDs to be processed. The\njumper configuration on the board specifies both the number and which CPLDs\nare to be processed. This must agree with the arguments you use for the command\nisr374.\nSee Table 3 for information on the jumpers. Normally, there is a jumper installed\nin position 7 on the right of the board and this specifies that all four of the CPLDs\nare used. To program only one CPLD, the one on the right, one would use the\ncommand:\nisr374 b b <filename> b\nAn argument may consist of a keyword or a filename specifier. The filename\nspecifier may or may not end in .jed but the file must have a .jed suffix. Keywords\nare case independent and may be abbreviated by their first letter. The keywords\nare erase, e, bypass, b, n, verify, v, program, and p. The keyword, n,\nis a synonym for bypass or b. It is used in Cypress style configuration files. Both\nverify and program require a filename as the next argument. You may omit the\nprogram keyword if you like. File names can either be absolute or relative and, of\ncourse, cannot be equal to one of the above keywords or its initial letter\nabbreviation.\nThe isr374 program will output the configuration file it has generated from your\narguments and also the following instructions. Follow them.\nConnect the ISR programmer (10 pin 3M) to the board in your kit. Make sure the\nkey is correct! Turn the kit DC power on. Pull the switch on the board forward\ntowards the front of the kit and check that the red light is on. Ensure that no\nclocks are connected. The left hand jumper should be removed and no wires\nplugged into A31.\nType a return to begin programming.\nPush SW1 forward to enable the green LED and to connect the clock(s) before\nusing the CPLD.\nTest Programs\n\nWe have two programs to test the board. They are intended to verify the operation\nof the CPLD as well as the connections between the 50-pin connector and the\nlogic analyzer.\nDriver: This program loads a 31 bit counter that is displayed on the NuBus\nLED's.\nReader: This program reads the first 25 I/O lines of the NuBus connector and\nextends them to the 50-pin connector .\nThe output of the first 25 bits of the NuBus can therefore be seen on the Logic\nAnalyzer. The remaining 6 bits on the NuBus can be directly probed by the scope.\nThe above files along with an empty pre-numbered VHDL file (374sample.vhd)\ncan be found at /mit/6.111/cpld/sources/test/\nTermination\nThe diagram below shows a high frequency square wave when observed with an\nanalog scope:\nFigure 3: Ringing\nClearly, if this signal were to be a clock-input to a device, there would be some\nserious problems. All signals used as clocks must be verified to see if termination\nis necessary. Inserting a resistor on the protoboard between the signal and ground\ncan reduce this swing. A 100 resistor is ideal for most cases.\nNote that with a 100 termination, the signal's logic high is now about 3.8 Volt,\nwhich satisfies the requirements of a TTL compatible device. If you feel the need\nto terminate a bus, ask the front desk for a resistor network. Its logic diagram is as\nfollows:\nFigure 4: Resistor Network\n\nCommon Errors\no If you use K1 of the kit to interface with the module, then IO-53 must not\nbe used. Similarly, if K2 is used, then IO-11 must not be used. Refer to\nTable 2, which lists these pins as `GND'.\no The 50-pin connector and the programming 10-pin connector must be\ninserted in the right way. The diagram below explains the proper\nalignment of Pin 1.\nFigure 5: Ribbon Connector\nInsertion\no All clocks must be disabled before commencing programming.\no Critical signals such as clock sources may require termination. Verify this\nwith a scope.\no Don't forget to push SW1 backward upon the completion of programming.\n\nAbout the Cypress CYC374I CPLD\nThe 128 macrocells in the 84 pin CY7C374i are divided between eight logic\nblocks. Each logic block includes 16 macrocells, a 72 x 86 product term array,\nand an intelligent product term allocator. You can refer to (cy7c374i) for more\ndetails.\n\nFigure 6: Logic Block Diagram\nThe pin layout of the CYC374I CPLD is\n\nFigure 7: Pin Layout\n\nNuBus Interface\n31 I/O pins of each CPLD are interconnected and extended to the NuBus connector. For\nexample, IO-0 of all 4 CPLD's are tied together to NuBus Address A0. Table 1 elaborates\nthese interconnections.\n\nTable 1: NuBus Interface\n50-Pin Connector Interface\n25 I/O pins are interconnected among the 4 CPLD's and the 50-pin connector. The signals\nof the 50-pin connector interface directly to the logic analyzer via the connector on the\nkit. Table 2 provides details of these interconnections. Logic Blocks are partitions\ninternal to the CPLD chip. This information, at times, can be useful during device fitting.\n\nTable 2: 50-pin Connector Interface\nNote: If you use K1, then IO-53 must not be used. Similarly, if you use K2, then IO-11\nmust not be used.\nSerial Interface\nThe CPLD Module supports an RS-232 interface via the DB-9 Male connector. The\nreceived serial data from Pin 2 of the DB-9 is brought to logic levels via inversion from a\nMAX 233 and is made available on Pin 12 of CPLD 1. The data to be transmitted is\npresented at Pin 73 of CPLD 1, which appears on Pin 3 of the DB-9 after being inverted\nby the MAX 233. Please see /mit/6.111/vhdl/serial/ for VHDL code that emulates a\nreceiver and a transmitter.\nClock Interface\nFigure 2 below presents the clocking scheme used by the module.\n\nFigure 2: Clocking Scheme\nThe following are some clocking strategies that can be utilized:\n1. C1 sources its clock from the oscillator by enabling jumper J8, while C [2,3 or 4]\ncan buffer this signal (IO-9) to any connection on the NuBus, e.g. A30. A short\ncircuit can then be created between this interconnection, i.e. A30 and A31 by\ninstalling a jumper wire.\n2. C [2,3 or 4] buffer A31 to IO-9 thereby clocking C1. In this scenario, jumper J8 is\nremoved and an external clock is supplied to A31.\n3. Jumper J8's strategic location makes it possible to insert a wire within the jumper\nand plug the other end into NuBus A31. If this is done, a termination resistor\n(discussed ahead) may be required between A31 and GND located on the NUBus\nconnector.\n4. Make C1 use a separate clock, while C [2,3, and 4] share their clock from A31.\nIrrespective of the clocking strategy, it is always important to consider the effects of\nclock skew.\nInterconnect Bus\nA 3-bit bus exists between CPLD 2, 3, and 4. This bus does not have an external\ninterface, i.e. it cannot be accessed via the NuBus or the 50-pin connector interface. The\ndetails of these interconnections are:\nCPLD I/O\nCPLD Pin Logic Block\n[C2,C3 and C4 only]\n\nIO-8\nB\nIO-15\nB\nIO-55\nG\n\nProgramming\nThe module supports the In-System Re-Programming of CPLD's. The following steps are\nthe programming procedure:\nDisable all clocks to all CPLD's. Cypress admits to a bug in the 374I CPLD in which the\nprogramming is incorrect if the input clock is running. This means removing jumper J8\nand the input to A31. This also applies to the CPLD's not being programmed. For\ninstance, if you want to program CPLD # 2 only, Jumper J8 must be removed to avoid\ncorrupting CPLD # 1. All CPLDs are supplied with +12V when any CPLD is\nprogrammed.\nInsert the 10-pin ribbon connector from the programmer into the blue 10-pin socket. The\nright orientation is critical - check the key. The correct orientation is so that the key of\nthe cable is in the slot of the socket on the board. Pin 1 of the cable must mate with Pin 1\nof the connector as shown in Figure 5.\nSelect the proper jumper configuration from the table below. A '1' means connected while\na blank signifies 'open'.\nDescription C4 C3 C2 C1 J1 J2 J3 J4 J5 J6 J7\nC1 only\n\n1 1\n\nC2 only\n\nC3 only\n\nC4 only\n\nC1,C2\n\nC1,C2,C3\n\nC1,C2,C3,C4 1\n\nTable 3: Jumper Selections\nThe program to use for the CPLD board in the 6.111 kit is isr374. This program may be\ncalled with one to eight arguments.\nAnother program, isrconf, can be used with an argument naming a Cypress style\nconfiguration file. Information on Cypress style configuration files is in the acco binder\nalongside of the CPLD programming computers in the digital lab.\nThe arguments for isr374 determine the number of CPLDs to be processed. The jumper\nconfiguration on the board specifies both the number and which CPLDs are to be\nprocessed. This must agree with the arguments you use for the command isr374.\n\nSee Table 3 for information on the jumpers. Normally, there is a jumper installed in\nposition 7 on the right of the board and this specifies that all four of the CPLDs are used.\nTo program only one CPLD, the one on the right, one would use the command:\nisr374 b b <filename> b\nAn argument may consist of a keyword or a filename specifier. The filename specifier\nmay or may not end in .jed but the file must have a .jed suffix. Keywords are case\nindependent and may be abbreviated by their first letter. The keywords are erase, e,\nbypass, b, n, verify, v, program, and p. The keyword, n, is a synonym for\nbypass or b. It is used in Cypress style configuration files. Both verify and program\nrequire a filename as the next argument. You may omit the program keyword if you like.\nFile names can either be absolute or relative and, of course, cannot be equal to one of the\nabove keywords or its initial letter abbreviation.\nThe isr374 program will output the configuration file it has generated from your\narguments and also the following instructions. Follow them.\nConnect the ISR programmer (10 pin 3M) to the board in your kit. Make sure the key is\ncorrect! Turn the kit DC power on. Pull the switch on the board forward towards the front\nof the kit and check that the red light is on. Ensure that no clocks are connected. The left\nhand jumper should be removed and no wires plugged into A31.\nType a return to begin programming.\nPush SW1 forward to enable the green LED and to connect the clock(s) before using the\nCPLD.\nTest Programs\nWe have two programs to test the board. They are intended to verify the operation of the\nCPLD as well as the connections between the 50-pin connector and the logic analyzer.\nDriver: This program loads a 31 bit counter that is displayed on the NuBus LED's.\nReader: This program reads the first 25 I/O lines of the NuBus connector and extends\nthem to the 50-pin connector .\nThe output of the first 25 bits of the NuBus can therefore be seen on the Logic Analyzer.\nThe remaining 6 bits on the NuBus can be directly probed by the scope.\nThe above files along with an empty pre-numbered VHDL file (374sample.vhd) can be\nfound at /mit/6.111/cpld/sources/test/\nTermination\n\nThe diagram below shows a high frequency square wave when observed with an analog\nscope:\nFigure 3: Ringing\nClearly, if this signal were to be a clock-input to a device, there would be some serious\nproblems. All signals used as clocks must be verified to see if termination is necessary.\nInserting a resistor on the protoboard between the signal and ground can reduce this\nswing. A 100 resistor is ideal for most cases.\nNote that with a 100 termination, the signal's logic high is now about 3.8 Volt, which\nsatisfies the requirements of a TTL compatible device. If you feel the need to terminate a\nbus, ask the front desk for a resistor network. Its logic diagram is as follows:\nFigure 4: Resistor Network\nCommon Errors\n-\nIf you use K1 of the kit to interface with the module, then IO-53 must not be used.\nSimilarly, if K2 is used, then IO-11 must not be used. Refer to Table 2, which lists\nthese pins as `GND'.\n-\nThe 50-pin connector and the programming 10-pin connector must be inserted in\nthe right way. The diagram below explains the proper alignment of Pin 1.\n\nFigure 5: Ribbon Connector\nInsertion\n-\nAll clocks must be disabled before commencing programming.\n-\nCritical signals such as clock sources may require termination. Verify this with a\nscope.\n-\nDon't forget to push SW1 backward upon the completion of programming.\nAbout the Cypress CYC374I CPLD\nThe 128 macrocells in the 84 pin CY7C374i are divided between eight logic blocks. Each\nlogic block includes 16 macrocells, a 72 x 86 product term array, and an intelligent\nproduct term allocator. You can refer to (cy7c374i) for more details.\n\nFigure 6: Logic Block Diagram\nThe pin layout of the CYC374I CPLD is\n\nFigure 7: Pin Layout"
    },
    {
      "category": "Resource",
      "title": "emacsvhdl.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/b450d7f977ebdfd4ce320f99edd0b910_emacsvhdl.pdf",
      "content": "Electric VHDL mode:\nMajor mode for editing VHDL code.\n\nUsage:\n------\n\n- TEMPLATE INSERTION (electrification) (`SPC'): After typing\na VHDL keyword and entering `SPC', you are prompted for\narguments while a template is generated for that VHDL construct. Typing\n`RET' (or `C-g' in yes-no queries) at the first\nprompt aborts the current template generation. Typing `M-SPC'\nafter a keyword inserts a space without calling the template generator.\nAutomatic calling of the template generators (i.e. electrification) can be\ndisabled (enabled) by setting the variable `vhdl-electric-mode' to nil\n(non-nil) or by typing `C-c C-e' (toggles electrification\nmode).\nTemplate generators can be called using the VHDL menu, the key bindings, or\nby typing the keyword (first word of menu entry not in parenthesis) and\n`SPC'. The following abbreviations can also be used:\narch, attr, conc, conf, comp, cons, func, inst, pack, ret, sig, sub, var.\n\n- HEADER INSERTION (`C-c C-t h'): A customized header can be inserted\nincluding the actual file name, user name, and current date as well as\nprompted title strings. A custom header can be defined in a separate file\n(see custom variable `vhdl-header-file').\n\n- STUTTERING (double strike): Double striking of some keys inserts cumbersome\nVHDL syntax elements. Stuttering can be disabled by variable\n`vhdl-stutter-mode' and be toggled by typing `C-c C-s'.\n'' --> \" [ --> ( -- --> comment\n;; --> \" : \" [[ --> [ --CR --> comment-out code\n;;; --> \" := \" ] --> ) --- --> horizontal line\n.. --> \" => \" ]] --> ] ---- --> display comment\n,, --> \" <= \" aa --> A - zz --> Z\n\n- WORD COMPLETION (`TAB'): Typing `TAB' after a (not\ncompleted) word looks for a word in the buffer that starts alike and\ninserts it. Re-typing `TAB' toggles through alternative word\ncompletions. This also works in the minibuffer (i.e. in template generator\nprompts).\n\nTyping `TAB' after a non-word character indents the line if at the\nbeginning of a line (i.e. no preceding non-blank characters), and inserts a\ntabulator stop otherwise. `M-TAB' always inserts a tabulator\nstop.\n\n- COMMENTS (`--', `---', `----', `--CR'):\n`--' puts a single comment.\n`---' draws a horizontal line for separating code segments.\n`----' inserts a display comment, i.e. two horizontal lines with a\ncomment in between.\n`--CR' comments out code on that line. Re-hitting CR comments out\nfollowing lines.\n`C-c C-c' comments out a region if not\ncommented out, uncomments out a region if already\ncommented out.\n\nYou are prompted for comments after object definitions (i.e. signals,\nvariables, constants, ports) and after subprogram and process specifications\nif variable `vhdl-prompt-for-comments' is non-nil. Comments are\nautomatically inserted as additional labels (e.g. after begin statements)\nand help comments if `vhdl-self-insert-comments' is non-nil.\nInline comments (i.e. comments after a piece of code on the same line) are\nindented at least to `vhdl-comment-column'. Comments go at maximum to\n`vhdl-end-comment-column'. `RET' after a space in a comment will\nopen a new comment line. Typing beyond `vhdl-end-comment-column' in a\ncomment automatically opens a new comment line. `M-q'\nre-fills multi-line comments.\n\n- INDENTATION: `TAB' indents a line if at the beginning of the line.\nThe amount of indentation is specified by variable `vhdl-basic-offset'.\n`C-c TAB' always indents the current line (is bound to `TAB'\nif variable `vhdl-intelligent-tab' is nil). Indentation can be done for\nan entire region (`M-C-\\') or buffer (menu). Argument and\nport lists are indented normally (nil) or relative to the opening\nparenthesis (non-nil) according to variable `vhdl-argument-list-indent'.\nIf variable `vhdl-indent-tabs-mode' is nil, spaces are used instead of tabs.\n`M-x tabify' and `M-x untabify' allow to convert spaces to tabs and vice\nversa.\n\n- ALIGNMENT: `C-c C-a' aligns port maps, signal and\nvariable assignments, inline comments, some keywords, etc., on consecutive\nlines relative to each other within a defined region.\n`C-c M-C-a' only aligns inline comments (i.e. comments\nthat are at the end of a line of code). Some templates are automatically\naligned after generation if custom variable `vhdl-auto-align' is non-nil.\n\n- KEY BINDINGS: Key bindings (`C-c ...') exist for most commands (see in menu).\n\n- VHDL MENU: All commands can be called from the VHDL menu.\n\n- INDEX MENU: For each VHDL source file, an index of the contained entities,\narchitectures, packages, procedures, processes, etc., is created as a menu.\nSelecting a meny entry causes the cursor to jump to the corresponding\nposition in the file. Controlled by variable `vhdl-index-menu'.\n\n- SOURCE FILE MENU: A menu containing all VHDL source files in the directory\nof the current file is generated. Selecting a menu entry loads the file.\nControlled by variable `vhdl-source-file-menu'.\n\n- SOURCE FILE COMPILATION: The syntax of the current buffer can be analyzed\nby calling a VHDL compiler (menu, `C-c C-k'). The compiler to be\nused is defined by variable `vhdl-compiler'. Currently supported are\n`cadence', `ikos', `quickhdl', `synopsys', `vantage', `viewlogic', and\n`v-system'. Not all compilers are tested. Please contact me for\nincorporating additional VHDL compilers. An entire hierarchy of source\nfiles can be compiled by the `make' command (menu, `C-c M-C-k').\nThis only works if an appropriate `Makefile' exists. Compiler options can\nbe defined by variable `vhdl-compiler-options'.\n\n- KEYWORD CASE: Lower and upper case for keywords, predefined types, predefined\nattributes, and predefined enumeration values is supported. If the variable\n`vhdl-upper-case-keywords' is set to non-nil, keywords can be typed in\n\nlower case and are converted into upper case automatically (not for types,\nattributes, and enumeration values). The case of keywords, types,\nattributes, and enumeration values can be fixed for an entire region (menu)\nor buffer (`C-c C-u') according to the variables\n`vhdl-upper-case-{keywords,types,attributes,enum-values}'.\n\n- HIGHLIGHTING (fontification): Keywords, predefined types, predefined\nattributes, and predefined enumeration values (controlled by variable\n`vhdl-highlight-keywords'), as well as comments, strings, and template\nprompts are highlighted using different colors. Unit and subprogram names\nas well as labels are highlighted if variable `vhdl-highlight-names' is\nnon-nil. The default colors from `font-lock.el' are used if variable\n`vhdl-customize-colors' is nil. Otherwise, an optimized set of colors\nis taken, which uses bright colors for signals and muted colors for\neverything else. Variable `vhdl-customize-faces' does the same on\nmonochrome monitors.\n\nSignal highlighting allows distinction between clock, reset,\nstatus/control, data, and test signals according to some signal\nnaming convention. Their syntax is defined by variables\n`vhdl-{clock,reset,control,data,test}-signal-syntax'. Signal coloring\nis controlled by the variable `vhdl-highlight-signals'. The default\nsignal naming convention is as follows:\n\nSignal attributes:\nC clock S control and status\nR asynchronous reset D data and address\nI synchronous reset T test\n\nSyntax:\nsignal name ::= \"[A-Z][a-zA-Z0-9]*x[CRISDT][a-zA-Z0-9]*\"\nsignal identifier -^^^^^^^^^^^^^^^^^\ndelimiter --------------------------^\nabove signal attributes -------------^^^^^^^^\nadditional attributes -----------------------^^^^^^^^^^^^\n\n(`x' is used as delimiter because `_' is reserved by the VITAL standard.)\nExamples: ClkxCfast, ResetxRB, ClearxI, SelectDataxS, DataxD, ScanEnablexT.\n\nIf all VHDL words are written in lower case (i.e. variables\n`vhdl-upper-case-{keywords,types,attributes,enum-values}' are set to nil),\nmake highlighting case sensitive by setting variable\n`vhdl-highlight-case-sensitive' to non-nil. This way, only names fulfilling\nthe above signal syntax including case are highlighted.\n\n- HIDE/SHOW: The code of entire VHDL processes or blocks can be hidden using\nthe `Hide/Show' menu or by pressing `S-mouse-2' within the code\n(not in XEmacs).\n\n- PRINTING: Postscript printing with different fonts (`ps-print-color-p' is\nnil, default faces from `font-lock.el' used if `vhdl-customize-faces' is\nnil) or colors (`ps-print-color-p' is non-nil) is possible using the\nstandard Emacs postscript printing commands. Variable `vhdl-print-two-column'\ndefines appropriate default settings for nice landscape two-column printing.\nThe paper format can be set by variable `ps-paper-type'.\n\n- CUSTOMIZATION: All variables can easily be customized using the `Customize'\n\nmenu entry. For some variables, customization only takes effect after\nre-starting Emacs. Customization can also be done globally (i.e. site-wide,\nread INSTALL file). Variables of VHDL Mode must NOT be set using the\n`vhdl-mode-hook' in the .emacs file anymore (delete them if they still are).\n\nMaintenance:\n------------\n\nTo submit a bug report, enter `C-c C-b' within VHDL Mode.\nAdd a description of the problem and include a reproducible test case.\n\nQuestions and enhancement requests can be sent to .\n\nThe `vhdl-mode-announce' mailing list informs about new VHDL Mode releases.\nThe `vhdl-mode-victims' mailing list informs about new VHDL Mode beta releases.\nYou are kindly invited to participate in beta testing. Subscribe to above\nmailing lists by sending an email to .\n\nThe archive with the latest version is located at\n.\n\nBugs and Limitations:\n---------------------\n\n- Index menu does not work under XEmacs (limitation of XEmacs ?!).\n\n- Re-indenting large regions or expressions can be slow.\n\n- Hideshow does not work under XEmacs.\n\n- Parsing compilation error messages for Ikos and Vantage VHDL compilers\ndoes not work under XEmacs.\n\nKey bindings:\n-------------\n\nkey binding\n--- -------\n\nz\n\nvhdl-stutter-mode-caps\ny\n\nvhdl-stutter-mode-caps\nx\n\nvhdl-stutter-mode-caps\nw\n\nvhdl-stutter-mode-caps\nv\n\nvhdl-stutter-mode-caps\nu\n\nvhdl-stutter-mode-caps\nt\n\nvhdl-stutter-mode-caps\ns\n\nvhdl-stutter-mode-caps\nr\n\nvhdl-stutter-mode-caps\nq\n\nvhdl-stutter-mode-caps\np\n\nvhdl-stutter-mode-caps\no\n\nvhdl-stutter-mode-caps\nn\n\nvhdl-stutter-mode-caps\nm\n\nvhdl-stutter-mode-caps\nl\n\nvhdl-stutter-mode-caps\n\nk\n\nvhdl-stutter-mode-caps\nj\n\nvhdl-stutter-mode-caps\ni\n\nvhdl-stutter-mode-caps\nh\n\nvhdl-stutter-mode-caps\ng\n\nvhdl-stutter-mode-caps\nf\n\nvhdl-stutter-mode-caps\ne\n\nvhdl-stutter-mode-caps\nd\n\nvhdl-stutter-mode-caps\nc\n\nvhdl-stutter-mode-caps\nb\n\nvhdl-stutter-mode-caps\na\n\nvhdl-stutter-mode-caps\n,\n\nvhdl-stutter-mode-comma\n.\n\nvhdl-stutter-mode-period\n]\n\nvhdl-stutter-mode-close-bracket\n[\n\nvhdl-stutter-mode-open-bracket\n;\n\nvhdl-stutter-mode-semicolon\n'\n\nvhdl-stutter-mode-quote\n-\n\nvhdl-stutter-mode-dash\nSPC\n\nvhdl-outer-space\nTAB\n\nvhdl-tab\nRET\n\nvhdl-return\nDEL\n\nbackward-delete-char-untabify\nESC\n\nPrefix Command\nC-c\n\nPrefix Command\n\nESC TAB\ntab-to-tab-stop\nESC C-q\nvhdl-indent-sexp\nESC C-h\nvhdl-mark-defun\nESC C-e\nvhdl-end-of-defun\nESC C-a\nvhdl-beginning-of-defun\nESC C-u\nvhdl-backward-up-list\nESC C-b\nvhdl-backward-sexp\nESC C-f\nvhdl-forward-sexp\nESC e\n\nvhdl-end-of-statement\nESC a\n\nvhdl-beginning-of-statement\n\nC-c C-k\nvhdl-compile\nC-c C-b\nvhdl-submit-bug-report\nC-c C-v\nvhdl-version\nC-c C-h\nvhdl-help\nC-c C-d\nvhdl-kill-line\nC-c C-g\ngoto-line\nC-c C-o\nvhdl-open-line\nC-c -\n\nvhdl-inline-comment\nC-c C-c\nvhdl-comment-uncomment-region\nC-c ESC\nPrefix Command\nC-c C-a\nvhdl-align-noindent-region\nC-c TAB\nvhdl-indent-line\nC-c C-r\nvhdl-regress-line\nC-c C-x\nvhdl-show-syntactic-information\nC-c C-f\nfont-lock-fontify-buffer\nC-c C-u\nvhdl-fix-case-buffer\nC-c C-s\nvhdl-stutter-mode\nC-c C-e\nvhdl-electric-mode\nC-c C-t\nPrefix Command\n\nC-c ESC C-k\nvhdl-make\n\nC-c ESC -\nvhdl-display-comment-line\nC-c ESC C-a\nvhdl-align-comment-region\n\nC-c C-t K\nPrefix Command\nC-c C-t w\nvhdl-while-loop\nC-c C-t W\nvhdl-wait\nC-c C-t v\nvhdl-variable\nC-c C-t u\nvhdl-use\nC-c C-t t\nvhdl-type\nC-c C-t S\nvhdl-subtype\nC-c C-t s\nvhdl-signal\nC-c C-t r\nvhdl-return-value\nC-c C-t R\nvhdl-record\nC-c C-t P\nvhdl-process\nC-c C-t p\nvhdl-procedure\nC-c C-t (\nvhdl-paired-parens\nC-c C-t k\nvhdl-package\nC-c C-t n\nvhdl-next\nC-c C-t M\nvhdl-map\nC-c C-t m\nvhdl-modify\nC-c C-t l\nvhdl-loop\nC-c C-t L\nvhdl-library\nC-c C-t i\nvhdl-if\nC-c C-t h\nvhdl-header\nC-c C-t G\nvhdl-generic\nC-c C-t g\nvhdl-generate\nC-c C-t F\nvhdl-function\nC-c C-t f\nvhdl-for\nC-c C-t x\nvhdl-exit\nC-c C-t e\nvhdl-entity\nC-c C-t E\nvhdl-elsif\nC-c C-t d\nvhdl-disconnect\nC-c C-t C\nvhdl-constant\nC-c C-t I\nvhdl-component-instance\nC-c C-t c\nvhdl-case\nC-c C-t b\nvhdl-block\nC-c C-t A\nvhdl-array\nC-c C-t a\nvhdl-architecture\nC-c C-t ESC\nPrefix Command\n\nC-c C-t K t\nvhdl-package-textio\nC-c C-t K s\nvhdl-package-std-logic-1164\nC-c C-t K n\nvhdl-package-numeric-std\nC-c C-t K b\nvhdl-package-numeric-bit\n\nC-c C-t ESC W vhdl-clocked-wait\nC-c C-t ESC w vhdl-with\nC-c C-t ESC S vhdl-selected-signal-assignment\nC-c C-t ESC p vhdl-port\nC-c C-t ESC e vhdl-else\nC-c C-t ESC C Prefix Command\nC-c C-t ESC s vhdl-concurrent-signal-assignment\nC-c C-t ESC c vhdl-component\nC-c C-t ESC a vhdl-assert\nC-c C-t ESC A vhdl-alias\n\nC-c C-t M-C s vhdl-configuration-spec\n\nC-c C-t M-C d vhdl-configuration-decl\nC-c C-t M-C c vhdl-component-configuration\nC-c C-t M-C b vhdl-block-configuration"
    },
    {
      "category": "Resource",
      "title": "express.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/7441e4f2135b109cede564b6e4fa3671_express.pdf",
      "content": "EXPRESS(1)\nEXPRESS(1)\nNAME\nexpress, exprin, exprout, expression, expressdat - create and convert data for use in PROM lookup tables\nSYNOPSIS\nexprin > xxx.exp\nexprout < xxx.exp > xxx.dat\nexpression xxx\nexpressdat xxx\nDESCRIPTION\nThe two programs exprin and exprout together form a \"friendly\" system for generating PROM data for an\nexpression of a single input variable.\nApplications might include:\n1) A table lookup for trigonometric values. This would be useful in games which need to transfer from\npolar to Cartesian coordinates.\n2) A table lookup for logarithmic values. This would be useful for logarithmic multiplication.\nTo create xxx.ntl which is ready to be sent to the PROM programmer use the shell script expression:\nexpression xxx\nTo create xxx.dat use the shell script expressdat:\nexpressdat xxx\nThis is helpful when you want to concatenate several expressions into a single PROM. Use\ncat a.dat b.dat > final.dat\nand then edit final.dat to insert the appropriate # SET_ADDRESS command.\nOn line help is available for expression and expressdat.\nThe shell script expression consists of the three programs exprin, exprout, and dat2ntl piped together. The\nscript expressdat omits the dat2ntl program. Exprin and exprout are described below; dat2ntl is described\nin another document.\nThe first program, exprin, is simply an interactive guide for creating a file to be used by exprout. The file\nwhich is created has the form shown below. It may be created and edited using an editor instead of using\nexprin.\nNUMBER_OF_STEPS = 314;\nSTART_ADDRESS = 0;\nINPUT_INITIAL_VALUE = 0;\nSTEP_SIZE = .01;\n128 + 127 * SIN(INPUT);\nExample file created by exprin and used by exprout.\nMIT EECS Dept.\n\nEXPRESS(1)\nEXPRESS(1)\nThe expression must obey the following rules.\nAn expression can be of arbitrary size.\nIt must be in infix form.\nIt may contain the following binary operators:\n+ - * /\nand the following unitary functions:\nsin, cos, tan, asin, acos, atan, sinh,\ncosh, tanh, log, exp, abs, and sqrt.\nParentheses can be used in the usual manner.\nIt may contain any real number and the single variable:\nINPUT.\nThe variable INPUT takes NUMBER_OF_STEPS steps starting at the initial value INPUT_INI-\nTIAL_VALUE. Each step increments INPUT by the value of STEP_SIZE. NUMBER_OF_STEPS out-\nputs will be created to be sent to the PROM programmer starting at the address START_ADDRESS.\nThe output will be rounded to the nearest integer.\nThe parser is not case sensitive. All numbers are\ninterpreted as decimal. Spaces are ignored.\nThe output of exprout is in the standard form used by the program dat2ntl.\nFILES\nSEE ALSO\nBUGS\nMIT EECS Dept."
    },
    {
      "category": "Resource",
      "title": "exprin.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/3ab5e12ff08f94ffc34c769e720c0a26_exprin.pdf",
      "content": "NAME\nSYNOPSIS\nexpri\nxxxx.exp\nexpro\nxxxx.e\nxxxx.dat\nexpressi\nxxxx\nexpressd\nxxxx\nDESCRIPTION\nxpri\nxprout\ne_ r_e_\nxpressi\nxpressd\ne_ r_e_s_ o_\ne_ r_e_s_\ne_ r_e_s_\ne_ r_e_s_\nexpri\nxpro\nt2\ne_ r_e_s_\nt2\nxpri\nxprout\nt2\nxpri\nxpro\ne\ne\nE\ne\nEXPRIN(1)\nEXPRIN(1)\nE\nexprin, exprout, expression, expressdat - create and con\nvert data for use in PROM lookup tables\nS\nexprin >x\nexp\nn >\nut <x\nexp >\nexprout <\nxp >x x.dat\nexpr ssion x x\non\nexpr ssdat x x\nat\nN\nn\nThe two programs exprin and exprout\ntogether form a\n\"friendly\" system for generating PROM data for an _x_\n-\np_ s_\n_i_n of a single input variable.\ns_o_\nApplications might include:\n1) A table lookup for trigonometric values. This would be\nuseful in games which need to transfer from polar to\nCartesian coordinates.\n2) A table lookup for logarithmic values. This would be\nuseful for logarithmic multiplication.\nTo create xxxx.ntl which is ready to be sent to the PROM\nprogrammer use the shell script e\non\nexpr ssion :\nexpression xxxx\nTo create xxxx.dat use the shell script e\nat\nexpr ssdat :\nexpressdat xxxx\nThis is helpful when you want to concatenate several\np_ s_ s into a single PROM.\nUse\n_x_\ni_n_\ncat a.dat b.dat > final.dat\nand then edit final.dat to insert the appropriate #\nSET_ADDRESS command.\np_ s_o_\np_ s_a_.\nOn line help is available for _x_\ni_n and _x_\nd_t_\nThe shell script _x_\ni_n consists of the three programs\np_ s_o_\nn , e\nut\nda ntl piped together. The script\nexprin\nexprout , and dat2ntl\np_ s_a_\nda ntl program. Exprin\n_x_\nd_t omits the dat2ntl\nn and exprout\nare described below; dat2ntl\nda ntl is described in another man\npage.\nThe first program, e\nn , is simply an interactive guide\nexprin\nfor creating a file to be used by e\nut\nexprout shown below. It\nmay be created and edited using an editor instead of using\nMIT EECS Dept.\n\nexpri\nxpri\nxprout\ne_ r_e_s_\nxpro\nt2 tl\nFILES\nSE\nALSO\nBUGS\nEXPRIN(1)\nEXPRIN(1)\nexprin.\nn.\nNUMBER_OF_STEPS = 314;\nSTART_ADDRESS = 0;\nINPUT_INITIAL_VALUE = 0;\nSTEP_SIZE = .01;\n128 + 127 * SIN(INPUT);\nExample file created by e\nn and used by e\nexprin\nexprout\nThe _x_\ni_n must obey the following rules.\np_ s_o_\nAn expression can be of arbitrary size.\nIt must be in infix form.\nIt may contain the following binary operators:\n+ - * /\nand the following unitary functions:\nsin, cos, tan, asin, acos, atan, sinh,\ncosh, tanh, log, exp, abs, and sqrt.\nParentheses can be used in the usual manner.\nIt may contain any real number and the single variable:\nINPUT.\nThe variable INPUT takes NUMBER_OF_STEPS steps starting at\nthe initial value INPUT_INITIAL_VALUE. Each step incre\nments INPUT by the value of STEP_SIZE. NUMBER_OF_STEPS\noutputs will be created to be sent to the PROM programmer\nstarting at the address START_ADDRESS.\nThe output will be rounded to the nearest integer.\nThe parser is not case sensitive. All numbers are interpreted as\ndecimal. Spaces are ignored.\nThe output of e\nut\nexprout is in the standard form used by the\nprogram dat2n\nda ntl\nS\nEE\nE A O\ndat2ntl(.)\nS\nMIT EECS Dept."
    },
    {
      "category": "Resource",
      "title": "fpga.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/379b6dd63c39a76f4f9a2b76d1f141c2_fpga.pdf",
      "content": "Massac\nh\nusetts\nInstitute\nof\nT\nec\nhnology\nDepartmen\nt\nof\nElectrical\nEngineering\nand\nComputer\nScience\n6.111\n|\nIn\ntro\nductory\nDigital\nSystems\nLab\noratory\nFPGA\nMo\ndule\nD.\nE.\nT\nro\nxel\n(April\n8,\n2002)\n(Revised:\nSeptem\nb\ner\n25,\n2002)\nW\nARNING\n-\nBURN\nOUT\nA\nn\num\nb\ner\nof\nstuden\nts\nha\nv\ne\nburned\nout\nFPGAs.\nThe\nfollo\nwing\ndescrib\nes\nthe\nprobable\ncause.\nThis\nhas\nnot\nb\neen\nconrmed\nb\ny\nexp\nerimen\nt.\nI\nreally\ndon't\nw\nan\nt\nto\np\nerform\nthis\nexp\nerimen\nt.\nThe\nFPGAs\nthat\nha\nv\ne\nb\neen\nfried\nare\nthe\n10K70\n(the\nrigh\nt\nhand\none).\nThe\n10K70\nis\nsurface\nmoun\nted\nand\nit\nis\nexp\nensiv\ne\nto\nreplace.\nIn\naddition,\nthe\np\nc\nb\noard\nis\noften\ndamaged\nin\ntrying\nto\nreplace\nthe\n10K70.\nW\ne\nha\nv\ne\na\nlimited\nn\num\nb\ner\nof\np\nc\nb\noards!\nAltera\nstates\nthat\nun\nused\npins\nMUST\nb\ne\nunconnected.\nThis\nis\nnot\np\nossible\nfor\nthe\npins\nconnected\nto\nthe\nAD\nbus\n(see\nb\nelo\nw).\nIn\nparticular,\ny\nou\nm\nust\nnot\nha\nv\ne\nthe\nswitc\nhes\ndriving\nthe\nAD\nbus\nunless\nthe\nFlex\ndevices\nare\ntristated\nfor\nall\nof\nthe\nAD\nbus\npins\nthat\nare\ndriv\nen\nb\ny\nthe\nswitc\nhes.\nRemo\nv\ne\nthe\njump\ner\nused\nto\nenable\nthe\nswitc\nhes\nb\ny\ngrounding\nNUSW.\nIf\nin\ndoubt,\nread\nthe\nhandout\nthat\ndescrib\nes\nthe\nkit\nwiring.\nIf\ny\nou\ncan't\nnd\nit\nthen\nlo\nok\nfor\nit\non\nthe\nw\neb\npage.\nAll\nof\nthese\nAD\nbus\npins\nm\nust\nb\ne\nused\nas\ninputs,\noutputs,\nor\nsp\necically\ntri-stated.\nIn\naddition,\nall\npins\nthat\nare\nconnected\nto\na\npin\nconnector\n(see\nb\nelo\nw)\nshould\nb\ne\nused\nas\ninputs,\noutputs,\nor\nsp\necically\ntri-stated.\nUnfortunately\n,\nthere\nis\nno\neasy\nw\na\ny\nto\ntristate\nun\nused\npins.\nAltera\nliterature\nsa\nys\nthat\nun\nused\npins\nare\ngrounded\nand\nMUST\nb\ne\nunconnected.\nUn\nused\npins\nm\nust\nb\ne\nsp\necically\nlisted\nin\nthe\ntop\nlev\nel\nen\ntit\ny\nand\nsp\necically\ntri-stated.\nSee\nthe\nexample\nles\ntristate.acf\nand\ntristate.vhd\nin\nthe\ndirectory\n/mit/6.111/altera/tristate/.\nPlease\nuse\nthe\n10K10\n(on\nthe\nleft)\nun\ntil\ny\nou\nare\nfamiliar\nwith\nthe\nuse\nand\nprogramming\npro\ncedures.\nThis\ndevice\nis\nin\na\nso\nc\nk\net\nand\nat\nleast\nw\ne\ncan\nreplace\nit\nif\ny\nou\nburn\nit\nout.\nFPGA\nMo\ndule\nThe\nFPGA\nmo\ndule\nconsists\nof\nt\nw\no\nof\nAltera's\nFLEX\n10K\nPLDs,\none\nFLEX\n10K10\nand\none\nFLEX\n10K70,\nwhic\nh\ncan\nb\ne\naccessed\nthrough\nthe\nlab\nkit's\nNuBus\nin\nterface\nand\n50-pin\nribb\non\ncable\nconnectors.\nThe\nstate\nof\nthe\nNuBus\nin\nterconnects\ncan\nb\ne\ncon\ntin\nuously\ndispla\ny\ned\non\nthe\nlab\nkit's\nhex\nleds\nb\ny\nconnecting\njump\ners\n/LHEX\nand\n/HHEX\nto\n/CLK\n(or\nan\ny\nother\nclo\nc\nk).\nAlso,\nthe\nProto\nstrip\nconnection\nlab\neled\nNUHEX\nm\nust\nb\ne\ngrounded.\nThis\ndo\ncumen\nt\nhas\nb\neen\nmo\ndied\nfrom\nthe\noriginal\nv\nersion\nwritten\nb\ny\nBrian\nP\nerrin\nApril,\n4,\n2002.\n\n6.111\n|\nFPGA\nMo\ndule\n32 PIN NUBUS Proto Strip\nConnector\nJTAG\nConnector\n50 - PIN Connector\n50 - PIN Connector\nEPC2\nEPC2\nFLEX 10K10\nFLEX 10K70\nJTAG\nFigure\n1:\nFPGA\nMo\ndule\nBlo\nc\nk\nDiagram\nThe\n50-pin\nribb\non\ncable\nconnectors\ncan\nb\ne\nfed\ndirectly\nin\nto\nthe\ninputs\nof\nthe\nLogic\nAna-\nlyzer\nvia\n50-pin\nconnectors\non\nthe\nkit.\nNote\nthat\neac\nh\ngate\narra\ny\nhas\nits\no\nwn\n50-pin\nconnector\nwhic\nh\ncan\nb\ne\nconnected\neither\nto\nthe\nK1\nor\nK2\nconnectors\non\nthe\nkit.\nBEW\nARE,\nthe\nsignals\nwhic\nh\nare\ngrounded\nb\ny\nthe\nK1\nand\nK2\nconnectors\nare\ndieren\nt!\nIt\nis\nnev\ner\na\ngo\no\nd\nidea\nto\nuse\nEDGEs\nof\nsignals\non\nthe\n50-pin\nconnectors.\nUse\nonly\n\\lev\nels\"\nand\nw\nait\nfor\nthe\nringing\nto\nsettle\ndo\nwn\nb\nefore\nsampling\nthem.\nMost\nof\nthe\nNuBus\nconnections\nto\nthe\nFPGA\nare\nto\nI/O\npins,\nbut\none\nis\na\nclo\nc\nk\npin.\nBoth\ngate\narra\nys\nare\ndriv\nen\nb\ny\nthe\nsame\nclo\nc\nk.\nNote\nthat\nAD31\nis\nused\nfor\nsupplying\nthe\nclo\nc\nk\nto\nthe\nCPLD\nmo\ndule\nif\none\nis\nalso\nused.\nTh\nus,\nthis\nshould\nnot\nb\ne\nused\nb\ny\neither\nFPGA\nif\na\nCPLD\nb\noard\nis\nused.\nBecause\nof\na\nmistak\ne,\nAD1\nis\nnot\nconnected\nto\neither\nFPGA.\nInformation\non\nthe\nFlex\ndevices\ncan\nb\ne\nfound\non\nAltera's\nw\neb\nsite.\nThe\nURL\nis\nh\nttp://altera.com/pro\nducts/devices/ex10k/f10-index.h\ntml.\nF\nrom\nthere,\ny\nou\ncan\nclic\nk\non\nData\nSheets\nand\nnd\nh\nttp://altera.com/literature/lit0f10.h\ntm\nl\nand\nthen\nclic\nk\non\nthe\nrst\ndata\nsheet.\nThis\ntells\ny\nou\nmore\nthan\ny\nou\nw\nan\nt\nto\nkno\nw!\nPlease\ndon't\nprin\nt\nit\nout\nunless\ny\nou\nreally\nw\nan\nt\nto\nsa\nv\ne\nthe\npap\ner\ncop\ny\n{\nit\nis\npages\nlong!\nP\nages\nthrough\ngiv\ne\ny\nou\na\ngo\no\nd\nsummary\nof\ncapabilities.\nThis\ndata\nsheet\ntells\ny\nou\nthat\nthe\n10K10\nhas\n10,000\ngates\nand\nlogic\nelemen\nts\nwhile\nthe\n10K70\nhas\n70,000\ngates\nand\nlogic\nelemen\nts.\nThat\nis\na\nlot\nof\ncapabilit\ny\n.\nEv\nen\nbadly\nwritten\nVHDL\nco\nde\nis\nlik\nely\nto\nt!\nThese\nFPGAs\nha\nv\ne\nem\nb\nedded\nRAM\nso\nmo\nderate\nsized\nRAMs\nand\nR\nOMs\ncan\nb\ne\nrealized\nb\ny\nusing\nLPM\n(Library\nof\nP\narameterized\nMo\ndules).\nThe\nR\nOM\ncon\nten\nts\ncan\nb\ne\npro\nvided\nb\ny\nan\nINTEL\nHex\n(xxxx.n\ntl)\nle.\nSee\nthe\nw\neb\npage\nfor\nthe\nPR\nOM\nprogramming\nhandout\nand\n\n6.111\n|\nFPGA\nMo\ndule\nthe\ndat2n\ntl\nman\npage.\nProgramming\nOv\nerview\nThe\ngate\narra\nys\nare\nSRAM\nbased\nwhic\nh\nmeans\nthey\nneed\nto\nb\ne\ncongured\neac\nh\ntime\np\no\nw\ner\nis\napplied.\nHappily\n,\nthis\nis\ndone\nautomatically\nas\nthe\ngate\narra\nys\nare\nwired\nto\na\nash\nprom\n(EPC2).\nHo\nw\nev\ner,\none\ndo\nes\nha\nv\ne\nto\nprogram\nthe\nEPC2.\nThis\nis\ndone\nb\ny\nthe\nMax+plus\nI\nI\nsoft\nw\nare\nusing\ninformation\nin\na\n<project\nname>.p\nof\nle\nand\ncomm\nunicating\nwith\nthe\nEPC2\nvia\na\nJT\nA\nG\nin\nterface.\nY\nou\nm\nust\ngenerate\nthe\nappropriate\n<project\nname>.p\nof\nle\nb\ny\nselecting\nthe\nappropri-\nate\ndevice\n(EPF10K10LC84-3\nor\nEPF10K70R\nC240-2\nand\nthe\nconguration\ndevice\noption\nof\nEPC2LC20).\nSee\nthe\nb\neginner's\nguide\nfor\ndetails\non\nho\nw\nto\ndo\nthis.\nThere\nis\nno\nsimple\n(quic\nk)\nw\na\ny\nto\nerase\nthe\nEPC2s.\nInstead\none\nm\nust\n\\erase\"\nthem\nb\ny\nprogramming\nthem\nwith\na\nVHDL\nle\nwhic\nh\ntri-states\nall\nof\nthe\nI/O\npins\nconnected\nto\neither\nthe\nNuBus\nin\nterface\nor\nthe\n50-pin\nconnector\n(should\ny\nou\nev\ner\nuse\nit).\nThis\nshould\nb\ne\ndone\nwhenev\ner\ny\nou\nuse\na\nnew\n(to\ny\nou)\nFPGA\nMo\ndule.\nThen\nall\ny\nou\nneed\ndo\nis\nto\nprogram\ny\nour\nFPGAs.\nOf\ncourse\ny\nou\nw\nan\nt\nto\nmak\ne\nsure\nthat\nthe\nt\nw\no\nFPGAs\nnev\ner\ndriv\ne\nthe\nsame\npin\non\nthe\nNuBus\nin\nterface,\ne.g.,\nAD13.\nAppropriate\nles\nare\n/mit/6.111/altera/test/blank*.\nAlso\nsee\n/mit/6.111/altera/tristate/.\nProgramming\nThe\nfollo\nwing\nsteps\nare\nthe\nprogramming\npro\ncedure:\nSet\nup\ny\nour\nlab\nkit\nnext\nto\na\ncomputer\nwith\na\nprogrammer\n(BitBlaster)\nattac\nhed\nto\nit.\nCurren\ntly\nthe\nSun\nUltra\n5s\nin\nthe\nlab\nha\nv\ne\na\nBitBlaster\ninstalled.\nT\nurn\non\nthe\nlab\nkit.\nA\nt\nsome\np\noin\nt\nw\ne\nwill\nha\nv\ne\nbitblasters\nor\nb\nyteblasters\ninstalled\non\nthe\nPCs\nrunning\nA\nthena\nLin\nux.\nInsert\nthe\n10-pin\nribb\non\nconnector\nfrom\nthe\nprogrammer\nin\nto\nthe\n10-pin\nconnector\nso\nc\nk\net\ncorresp\nonding\nto\nthe\nFLEX\n10K\nPLD\ny\nou\nwish\nto\nprogram;\nthe\nleft\nconnector\nprograms\nthe\nFLEX\n10K10,\nthe\nrigh\nt\nconnector\nprograms\nthe\nFLEX\n10K70.\nBe\nsure\nthe\norien\ntation\nof\nthe\ncable\nin\nthe\nso\nc\nk\net\nis\ncorrect\nb\ny\nlining\nup\nthe\nnotc\nh\non\nthe\nso\nc\nk\net\nwith\nthe\ngro\no\nv\ne\non\nthe\ncable.\nThe\ngreen\nligh\nt\non\nthe\nprogramming\nb\no\nx\nconnected\nto\nthe\ncable\nshould\nligh\nt\nup.\nIf\nthe\ngreen\nligh\nt\nis\nnot\non,\nthen\nlik\nely\nthe\nkit\np\no\nw\ner\nis\nnot\non\nor\nthe\ncable\nis\nin\nbac\nkw\nards.\nUsing\nAltera's\nMaxPlus2\nsoft\nw\nare,\nload\nthe\nProgrammer\nmo\ndule\n(from\nthe\nMAX+plus\nII\nmen\nu).\nIf\nthis\nis\nthe\nrst\ntime\ny\nou\nare\nusing\nthe\nprogrammer,\na\nhardw\nare\nconguration\nwindo\nw\nwill\napp\near.\nThe\nfollo\nwing\nassumes\nthe\ncomputer\ny\nou\nare\nusing\nis\nan\nUltra\n5.\nThe\n\n6.111\n|\nFPGA\nMo\ndule\nRS-232\nb\no\nx\nshould\nread\n/dev/term/a\nand\nthe\nbaud\nrate\nshould\nb\ne\n38,400\nwhic\nh\nshould\nmatc\nh\nthe\nswitc\nh\nsettings\non\nthe\nBitBlaster\nprogramming\nb\no\nx.\nY\nou\ncan\nedit\nthe\nhardw\nare\nconguration\nan\ny\ntime\nb\ny\nclic\nking\non\nOptions>Hardw\nare\nSetup.\nT\no\nsp\need\nup\nthe\nprogramming\npro\ncess\nturn\no\nthe\nautomatic\nblank\nc\nhec\nk\nand\nv\nerify\n.\nClic\nk\non\nOptions>Programming\nOptions\nto\nget\na\np\nop-up\nwindo\nw.\nIf\nan\ny\nof\nthese\noptions\nare\nselected,\nthen\nde-select\nthem.\nBe\nsure\nMulti-Device\nJTAG\nChain\nis\nselected\nin\nthe\nJTAG\nmen\nu,\nthen\nselect\nMulti-Device\nJTAG\nChain\nSetup...\nfrom\nthe\nJTAG\nmen\nu.\nIn\nthe\nnew\nwindo\nw,\nselect\nEPC2\nas\nthe\nDevice\nName,\nand\nselect\nthe\nprogramming\nle\nusing\nthe\nbutton.\nY\nou\nw\nan\nt\nthe\n.pof\nv\nersion\nof\ny\nour\ncompiled\nco\nde.\nAfter\nc\nho\nosing\nthe\nle,\nclic\nk\nthe\nAdd\nbutton\nand\nthen\nOK.\nClic\nk\nthe\nProgram\nbutton\nto\nprogram\nthe\nle.\nx\nProgramming\nwill\ntak\ne\na\nwhile.\nWhen\nthe\nprogrammer\nis\ndone,\nit\nwill\nreturn\na\n\\Programming\nSuccessful\"\nmessage.\nY\nour\nnew\nprogram\nwill\nnot\ntak\ne\neect\nun\ntil\ny\nou\nturn\nthe\nlab\nkit\no\nand\nbac\nk\non\nagain.\nNuBus\nIn\nterface\nThere\nare\nI/O\npins\nfrom\neac\nh\nFLEX\n10K\nPLD\nconnected\nto\nthe\nNuBus\nin\nterface,\nas\nw\nell\nas\nto\neac\nh\nother.\nOne\nclo\nc\nk\npin\nis\non\nAD0\nof\nthe\nNuBus\nproto\nstrip.\nEac\nh\ngate\narra\ny\nhas\nt\nw\no\nclo\nc\nks\nbut\ny\nou\ncan\nonly\nuse\none.\nNote\nthat\nAD31\nis\nused\nfor\nsupplying\nthe\nclo\nc\nk\nto\nthe\nCPLD\nmo\ndule\nif\none\nis\nalso\nused.\nThe\nclo\nc\nk\npin\nis\ndenoted\nin\nT\nable\nas\nCLK.\n\n6.111\n|\nFPGA\nMo\ndule\nT\nable\n1:\nCorrelation\nb\net\nw\neen\nNuBus\nPins\nand\nFLEX\n10K\nPins\nNuBus\nFLEX\n10K10\nFLEX\n10K70\nAddress\nPin\nNum\nb\ner\nPin\nNum\nb\ner\nAD0\n(CLK)\n(CLK)\nAD1\nNONE\nNONE\nAD2\nAD3\nAD4\nAD5\nAD6\nAD7\nAD8\nAD9\nAD10\nAD11\nAD12\nAD13\nAD14\nAD15\nAD16\nAD17\nAD18\nAD19\nAD20\nAD21\nAD22\nAD23\nAD24\nAD25\nAD26\nAD27\nAD28\nAD29\nAD30\nAD31\n\n6.111\n|\nFPGA\nMo\ndule\n50-pin\nRibb\non\nCable\nIn\nterface\nThere\nare\nt\nw\no\n50-pin\nribb\non\ncable\nconnectors\non\nthe\nFPGA\nmo\ndule.\nThe\none\non\nthe\nleft\naccesses\nonly\npins\nfrom\nthe\nFLEX\n10K10\nPLD,\nwhile\nthe\none\non\nthe\nrigh\nt\naccesses\nonly\npins\nfrom\nthe\nFLEX\n10K70\nPLD.\nThe\nFLEX\n10K10\n50-pin\nconnector\npro\nvides\naccess\nto\nan\nadditional\npins,\nwhile\nthe\nFLEX\n10K70\n50-pin\nconnector\npro\nvides\naccess\nto\nan\nadditional\npins.\nSome\nof\nthe\npins\non\nthe\nFLEX\n10K10\nare\ninput\nonly\n,\ndesignated\nb\ny\nIN\non\nT\nable\n2.\nThe\nsignals\non\nthe\n50-pin\nconnectors\nare\nfed\ndirectly\nin\nto\nthe\nthree\nL\nin\nterfaces\nfor\nuse\nwith\nthe\nLogic\nAnalyzer,\ndep\nending\non\nwhic\nh\nconnector\nis\nused\nto\nconnect\nwith\nthe\nFPGA\nmo\ndule.\nBe\ncertain\nthat\nsignals\nlab\neled\nas\nGND\nare\neither\ngrounded\nor\nleft\noating\nin\nthe\nFLEX\n10K\nPLD\nprogramming,\nas\nthese\nsignals\nare\nset\nb\ny\nthe\nlab\nkit.\nTh\nus,\ny\nou\nonly\nha\nv\ne\naccess\nto\nmore\npins\nof\nthe\n10K10\nand\nmore\npins\nof\nthe\n10K70.\nT\nable\n2:\nCorrelation\nb\net\nw\neen\nRibb\non\nCable\nPins\nand\nFLEX\n10K\nPins\nFLEX\n10K10\nFLEX\n10K70\nK1\nConnector\nK2\nConnector\nPin\nNum\nb\ner\nPin\nNum\nb\ner\nIn\nterface\nIn\nterface\n-\nL1-0\nL2-8\n-\nL1-1\nL2-9\n-\nL1-2\nL2-10\n-\nL1-3\nL2-11\nL1-4\nL2-12\nL1-5\nL2-13\nL1-6\nL2-14\nL1-7\nL2-15\nL1-8\nGND\nL1-9\nL3-0\nL1-10\nL3-1\nL1-11\nL3-2\nL1-12\nL3-3\nL1-13\nL3-4\nL1-14\nL3-5\nL1-15\nL3-6\nGND\nL3-7\nL2-0\nL3-8\nL2-1\nL3-9\nL2-2\nL3-10\nL2-3\nL3-11\n(IN)\nL2-4\nL3-12\n(IN)\nL2-5\nL3-13\n(IN)\nL2-6\nL3-14\n(IN)\nL2-7\nL3-15"
    },
    {
      "category": "Resource",
      "title": "hplogic.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/22e42d6134d93e5b87acc83bec5c7215_hplogic.pdf",
      "content": "Massachusetts Institute of Technology\nDepartment of Electrical Engineering and Computer Science\n\n6.111 - Introductory Digital Systems Laboratory\n\nBrief Introduction to the HP Logic Analyzer\nThere are two principal instruments used by digital engineers to test and debug digital\nsystems. The oscilloscope is used in order to make accurate timing measurements and to\ninvestigate voltage vs. time characteristics of signals. Oscilloscopes generally have a\nlimited number of channels. Logic analyzers have many more channels, have limited\ntiming resolution, and display only binary signals. In the 6.111 lab we have instruments\nwhich combine logic analyzers and digital oscilloscopes. The Model 1663AS has 32\nlogic analyzer channels, the Model 1662AS has 64 channels. Both have two `scope\nchannels. These logic analyzers can be configured as timing analyzers which give a\nwaveform display similar to that of an oscilloscope or as state analyzers which display\nsignals in terms of binary or hex numbers, or both at the same time.\nThe logic analyzer is a fairly complex instrument. There are numerous documents\nprovided by HP to explain its use. At the instrument room desk you may sign out a\nTraining Kit, containing a signal source card and a Guide with a series of tutorial lessons\non how to use the instrument. At several places in the laboratory there is a three-ring\nnotebook containing the full-fledged Reference Manual. All of this documentation,\nincluding this document, are best read in the laboratory while you are seated in front of\nthe logic analyzer so that you can try out various operations as they are described.\nThe logic analyzers are set up and controlled by interacting with menus. It will be much\neasier for you to learn the operation of the analyzer by trying out menu selection as you\ngo along. Indeed, you can learn a considerable amount about the logic analyzer without\neven hooking up any signals to the logic analyzer. Turn on the logic analyzer and wait for\nit to complete its internal diagnostics and load the initial configuration. The logic\nanalyzer has a disk drive that can be used to store configuration files. You will find it\ndesirable to have your own 3.5'' DSDD (1.0 MB) disk, which is available at the\ninstrument room.\nFront Panel Controls\nThe front panel consists of a display, disc drive, menu buttons, key pad, and cursor knob.\nThere is also a mouse which can be used for most control operations. The cursor knob is\nused for scrolling through ranges of fields or for adjusting time per point, delay, etc. The\nmouse, with its buttons, can be used (largely interchangeably) with the ``Menu,''\ndirectional arrow buttons, ``Select'' and ``Done'' buttons to select operations.\nPreparing Your Own Disc\nFrom the power-on state, click on ``Analyzer'' and select ``System,'' then click on ``RS-\n\n232/HP-IB'' and select ``Disk.'' Click on ``Load'' and select ``Format Disk.'' To proceed to\nformatting a disk, insert a BLANK disk in the drive, click on ``Execute'' and ``Continue.''\nNow you can ``Store'' any configuration you want to save to your disk and at some later\ntime ``Load'' it back into the analyzer.\nThere does not seem to be any simple way to initialize the logic analyzer to its power-on\nstate. However, if you store this state into a file on your disc, then you can get back to the\npower-on state at any time by loading the stored file. Go to the I/O menu and select disc\noperations. Select the left-hand field and then select the store operation. Now enter a\nname, such as INITIAL_LD, as the destination file name and execute this operation. Now\nyou can reset the logic analyzer to the initial condition by loading the file INITIAL_LD\nfrom disc.\nSelecting Menus\nThe system configuration screen is one of several menus. The others are easily selectable\nby the mouse. To get back to the system configuration file from one of the other menus,\nselect the upper one-in-from-left field of one of these menus and then select the desired\nmenu. Actually the format, trigger, and display menus consist of a menu for each enabled\nanalyzer. In the system menu the initial condition is that analyzer 1 is selected to be a\ntiming analyzer and analyzer 2 is off. Change Analyzer 2 to be a state analyzer. Now\nselect the configuration menu, and you can get either state format specification for\nmachine 2 or timing format specification for machine 1. You can move between these\neasily using the mouse.\nSystem Menu\nTwo separate analyzers can be configured. Each can be either off, a timing analyzer, or a\nstate analyzer. The system menu is also used to assign pods to analyzer 1 or analyzer 2.\nEach pod has its own cable to a connector on the back of the analyzer and provides\nsixteen channels plus a clock. Each channel is indicated by a dash or an up-down arrow.\nThe up-down arrow indicates that transitions on that signal are occurring.\nFormat Menu\nThe primary use of the format menu is to enter labels and assign individual signal(s) to\nthose labels. You can turn a label on or off or modify it, which means that you can enter\nnew text for that label. In this menu you can also select a threshold which is used to\ndetermine whether the pod signal is 1 or 0. Almost all of the time you will keep the\ndefault threshold set for TTL. When in the state format menu you can also select the\nclock which will be used to sample the pod signals for each state. There is one clock\nsignal for each pod. They are labeled J, K, L, and M for pods 1 through 4 respectively.\nYou can enable the sampling of data on the falling, rising , or both edges of the clock, or\nwhen it is low or high. If you select multiple clocks, then the state will be sampled when\neither of the selected conditions is satisfied. You can even select clocks which are wired\nto pods which are not assigned to this state analyzer. If you have both analyzers as state\nanalyzers you can use one clock to clock the lower eight bits and another to clock the\nupper eight bits. Details are given in Chapter 11 of the Reference Manual.\n\nTrigger Menu\nAs with the format menu, there are two types: the timing trigger specification and the\nstate trigger specification. The basic function of both of these menus is to decide what\ninformation to store and when to stop storing information and switch to the display menu.\nBoth of these menus can be set to capture a single set of data or to repetitively capture\nand display data. The term ``to arm'' means that when the arm condition has occurred, the\nanalyzer starts looking for the trigger condition. Most of the time, the arming is\naccomplished by pushing the run button. Sometimes an analyzer may be armed by the\nother analyzer. The method of specifying the trigger condition is different for timing and\nstate analyzers. A timing analyzer triggers after encountering a selected pattern and then a\nselected edge of one or more signals. You can specify a constraint that the specified\npattern must be present for > some time period or < some time period. If you have\nselected that the pattern be present for >, then you can trigger on an edge. The edge\ntrigger can be falling, rising, or either edge of one or more signals. If you set the base to\nbinary, then the normal display clearly shows which edges cause the trigger. If you set\nthe base to hex, then you will see a $ sign to indicate that some trigger is specified for\nthat hex digit. If you have selected <, then the logic analyzer triggers whenever the\nspecified pattern has existed for less than the specified time period. If you set the\nacquisition mode to glitch and select >, then you can specify the trigger to occur on the\nOR of edges or a glitch. A glitch is any transition crossing the logic threshold more than\nonce between samples. The logic analyzer is not guaranteed to detect glitches which are\nless than 5 ns wide. In glitch acquisition mode, the amount of data that can be stored is\nreduced, as half the memory is used for storing the data samples and the other half for\nstoring the second transition of a glitch in a sample.\nState Trigger Menu\nThe state trigger menu is organized somewhat differently but serves the same function of\nspecifying when the logic analyzer is to trigger. It also specifies the states that are to be\nstored before and after triggering. Rather complicated sequences can be specified. When\nthe state analyzer is used to debug software running on a microprocessor or a\nmicrosequencer, the logic analyzer can be set to look for the nth entry to a particular\nsubroutine and then the nth entry of a subroutine called within that subroutine. This can\nbe continued for up to eight levels.\nA complete description of the state trigger specification menu is given in chapter 12 of\nthe Reference Manual.\nDisplay Menus\nThe display can be of waveforms or listings for either type of logic analyzer selected. In\nthe waveform display, you can set the time/div and the trigger; and the display looks\nmuch like a multi-trace oscilloscope. If you select the markers field, you can turn them\nOff or turn them to indicate Time. You then can control the position of the X and O\nmarkers, and the time difference between these markers and between the markers and the\ntrigger will be displayed.\n\nIn the listing display, the sample number is displayed in the left-hand column with the\nsampled signals in the remaining columns. You can use the knob to scroll this\ninformation up or down. You can also move to any position by entering the number of\nthe data sample. If you wish, you can use the markers and have them placed on specified\npatterns for easy identification of events. For more information on use of the markers, see\npages 13-4 through 13-11 and 14-12 through 14-20 in the Reference Manual.\nYou can switch the type of analyzer between state and timing without changing anything\nelse and re-acquire the data if you wish to go between waveform and state displays. If\nyou have two analyzers enabled, one as a timing analyzer and one as a state analyzer,\nthere is a third mixed mode display which allows you to see both timing and state\ninformation.\nPrinted January 14, 2002"
    },
    {
      "category": "Resource",
      "title": "maxplus.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/a8e09b06579c127706639daa196cb17c_maxplus.pdf",
      "content": "A Beginner's Guide to MAX+plus II\nAuthor: Jacinda Clemenzi - Last Updated: December 20, 2001\nRevised: D. E. Troxel - April 8, 2002\nRevised: D. E. Troxel - May 1, 2002\nThe purpose of this guide is to provide a tutorial that will help you to become familiar\nwith how to use the software provided by Altera to edit VHDL, simulate designs, and\nprogram the FLEX 10K FPGA devices. It will be assumed that you have a basic\nunderstanding of VHDL.\nAltera provides a software package for programming their devices. This package is called\nMAX+plus II and can be accessed from the 6.111 locker from any Sun OS workstation.\nMAX+Plus II will not run on SGIs or Linux machines. To run MAX+plus II, type:\nathena% setup 6.111\nathena% max2win &\nMAX+Plus II is a fairly complete software package. It provides an editor, compiler,\nprogrammer, waveform generator, and simulator. Each of these functions can be chosen\nfrom the MAX+plus II menu option. This guide will give a walk-through of the different\nsteps necessary to program a device, but makes no effort to be exhaustive. At the end is a\nstep-by-step tutorial with an example project.\n\nStarting a Project\nA project consists of all the files necessary to program one device. MAX+plus II can only\nwork with one project at a time. When you first open MAX+plus II you will have to\ncreate a project. The name of the project must be the name of the top level VHDL file.\nThe recommended method for starting a new project is to open an existing top level\nVHDL file or create a new one through the File menu option:\nFile > New...\nor\nFile > Open...\nThen set the name of the project to the current file by doing the following:\nFile > Project > Set Project Name to Current File\n\nIt is easy to change the name of the project and top level file at any time in the future, so\ndo not worry about it too much.\nAll of the components you call in your top level VHDL file need only to be in the same\ndirectory for the compiler to find them.\nWhen you open MAX+plus II next time, it will automatically load the last project.\nWorking With VHDL Files\nMAX+plus II provides an editor that uses color coding much like Emacs. When you open\na VHDL file in MAX+plus II it is the default editor. You can access it directly through\nthe MAX+plus II menu option. You may use any editor to modify files.\nConfiguring the Device\nOnce you have defined a project, you will need to configure the device.\nAssign > Device...\nNow select the FLEX 10K device from the pull-down menu. This will give you a number\nof selections in the Devices scroll menu. For this tutorial choose EPF10K10LC84-3. (If\nyou later use the right hand chip, choose EPF10K70RC240-2.) From this same window\nclick the Device Options button. From the pull-down menu next to the keyword\nConfiguration under Device Options select EPC2LC20.\nCompiling\nCompile the code by selecting the compiler from the MAX+plus II menu option. Before\nyou start the process you should select which version of VHDL syntax you would like the\ncompiler to use. To be consistent with the VHDL code used for programming Cypress\nCPLDs, you should select the 1993 version:\nInterfaces > VHDL Netlist Reader Settings\nNow select the VHDL 1993 option.\nTo compile the file click Start. The process will take some time, especially fitting it to the\ndevice. Be patient. Any errors or warnings will appear in a window that pops up during\nthe process.\nViewing the Report\n\nSeveral files are generated by the fitter after your project is compiled. The two most\nuseful files are the report file and pinout file. The report file will include the pinout close\nto the bottom.\nThe report file is project_name.rpt\nThe pinout file is project_name.pin\nAssigning Pinout\nNow that you have compiled the project once and let MAX+plus II assign the first\npinout, you can set it so it remains constant in three ways.\nFirst, you can directly edit the configuration file project_name.acf. If you edit the\nconfiguration file then you will have to set the project name again for the changes to take\neffect.\nSecond, you can use the graphical interface provided by MAX+plus II to modify this file:\nAssign > Pin/Location/Chip\nEnter the name of the node and the corresponding pin assignment. Be sure to select the\nAdd button after each assignment.\nThe last and easiest option to assign the pinout is to let MAX+plus II back assign the pin\nnumbers automatically to the configuration file for the project:\nAssign > Back-Annotate Project...\nSelect the Chip, Pin & Device option.\nSimulation\nMAX+plus II provides a simulator and waveform generator for verifying that your code\nperforms the way you expect it to. To simulate your design, you must first create a\nwaveform file that includes input waveforms and specifies which output waveforms to\nwatch. Do this by using the waveform editor:\nMAX+plus II > Waveform Editor\nNow select the input and output nodes from your project:\nNode > Enter Nodes from SNF...\n\nThis will allow you to select multiple nodes at once by highlighting the names and\nclicking the arrow button to move them into the box on the right. Click OK to add these\nnodes to the Waveform Editor. Now you will want to define the input waveforms by\nselecting each waveform and using the toolbar along the left. Once you have done this be\nsure to save as project_name.scf.\nNow you are ready to run the simulator.\nMAX+plus II > Simulator\nDeselect all options if any are selected and press Start. You can view the results in the\nWaveform Generator. If you have already closed this window, then click Open SCF.\nProgramming\nSet up your lab kit next to the computer with the programmer in the Digital Lab. Be sure\nto plug the programming cable into the programming port next to the chip you wish to\nprogram. Each port programs the chip closest to it. Be sure to align pin 1 by matching the\narrows when plugging in this cable. Power on your kit. Now open the programmer from\nMAX+plus II:\nMAX+plus II > Programmer\nIf this is the first time that you are using the programmer, a hardware configuration\nwindow will appear. For reference, the hardware you are using is the BitBlaster. The RS-\n232 box should read /dev/term/a, and the baud rate should match the jumper settings on\nthe BitBlaster programming cable. They should be configured for 38400. When you have\nensured that this data is correct, click OK. You can edit the hardware configuration at\nany time as follows:\nOptions > Hardware Setup...\nTo speed up the programming process, you should turn off the automatic blank-check and\nverify. Select the following menu option:\nOptions > Programming Options...\nA pop-up window will appear. If any of the options are selected, deselect them. Click\nOK.\nNow you have to specify the programming method. We are programming the FPGAs\nusing a JTAG chain so make sure that Multi-Device JTAG Chain is selected from the\nJTAG menu.\n\nJTAG > Multi-Device JTAG Chain\nIf this is the first time that you have used this option, the configuration window will pop\nup automatically. From the Device Name pull-down menu select EPC2. Click Select\nProgramming File... and choose the file called project_name.pof. Click Add. Click OK.\nNow you are ready to program the device. To do this, click Program from the main\nprogramming window. The process will take a few minutes.\nYou will have to turn the power to your kit off and on to get the new program to load into\nthe FPGA.\n\nA Simple Example\nThis section will walk you through all the steps above with a short tutorial to create a\nsimple 8-bit counter. The 8-bit counter has two modes: user mode and clock mode. In the\nfirst mode, the counter will increment each time you push a trigger switch. In the second\nmode, the counter will increment on each rising edge of the clock signal. A reset signal\nwill allow the counter to be reset to zero.\nThis section has been divided into two parts because there are two implementations in\nVHDL of the 8-bit counter. The first implementation should be straight forward and\nunderstandable from the notes in the VHDL file. After completing this part you may find\nthat the counter output is unreadable when in clock mode because the clock is too fast.\nThe second implementation divides the clock signal by a power of two to produce a\nslow_clk signal, which is counted instead of the clock signal.\nPart I\nThe steps are listed here with a little explanation. Please see the previous sections for\nmore information.\n- The first step is to create a directory for your work and move the tutorial files to this\ndirectory. The files you will need are counter8.vhd and counter8.acf. The file\ncounter8.vhd is the VHDL file, and counter8.acf is the configuration file that sets the\ndevice, configuration device, and pinout.\nathena% setup 6.111\nathena% mkdir 6.111.example\nathena% cd 6.111.example\n\nCopy the example files from the web or the 6.111 locker to your directory:\n6.111% cp /mit/6.111/altera/beginner/counter8.* ./\n\nThen change the mode so you can write to these files.\n6.111% chmod 644 *\n\nThen start MAX+plus II:\n6.111% max2win &\n- Now open counter8.vhd.\n- Click the File menu and select Open. Now choose counter8.vhd.\n- Now Set your project to the current file.\n- Click the File menu. Click Project and select Set Project to Current File. You have\nnow started your project.\n- Now you have to configure the device. Select Device... from the Assign menu. A small\nwindow will pop up that will allow you to choose the chip you are programming. Select\nFLEX 10K from the device pull-down menu. Select EPF10K10LC84-3 from the Devices\nscroll menu. Now click on Device Options. From the pull-down menu next to\nConfiguration select EPC2LC20. Click OK. Click OK again to get rid of the\nconfiguration window.\n- Save the project at this time.\n- You should now compile the project. Select the Compiler from the MAX+plus II\nmenu. Press Start. This will take a few minutes. Be patient.\n- You may optionally simulate the counter at this point.\n- The pinout has already been assigned for you in the counter8.acf file that you copied\nfrom the 6.111 locker. You can view this file or counter8.pin to see this pinout so you can\nwire your kit.\n- The first time you use a new (to you) FPGA board program both FPGAs (EPC2s) This\nis to ensure that all pins are tristated before you try to use them. The files to use are\n/mit/6.111/altera/beginner/blank10K*0.pof. Do not cd to this directory, rather, copy the\nfi;es to a local directory.\n- You are now ready to program. Set up your kit. Plug in the programming cable and\nturn on the power. Make sure that the programming cable is not plugged in backwards.\nThe red stripe should be on the left with the front of the kit towards you.\n- Open the programmer by selecting the Programmer from the MAX+plus II menu. Two\nmenus pop up.\n- Under Hardware Setup choose BitBlaster.\n- Now select Multi-Device JTAG Chain from the JTAG menu. If a pop-up window does\nnot appear then select Multi-Device JTAG Chain Setup...JTAG menu.\nli>In the pop-up window, select EPC2 from the Device Name pull-down menu and the\nclick Select Programming File... Choose the file called counter8.pof. Click Add. Click\nOK.\n- Click Program from the programmer window. Programming will take a few minutes.\nBe patient.\n- Now you have to prepare your kit for testing. Wire pushbutton switches to the signals\nreset (AD2 on the Nubus) and trigger (AD3 on the Nubus). Wire a toggle switch to the\n\nmode input (AD1 on the Nubus). Make a clock with a crystal oscillator and wire this to\nthe clk input (AD0 on the Nubus). The counter will display on the second and third HEX\nLED display units (AD4 through AD11 on the Nubus).\n- You will have to turn the power to your kit off and on to get the new program to load\ninto the FPGA.\nPart II\nThe second part of this example implements a slightly more complicated version of the 8-\nbit counter from Part I.\nYou should already have a directory for your work from Part I. The files you will need\nfor Part II are slow8.vhd and slow8.acf. The file slow8.vhd is the VHDL file, and\nslow8.acf is the configuration file that sets the device, configuration device, and pinout.\nFollow the same steps that you followed in Part I to program and test the device. The\nfunctionality on the 6.111 kit should be the same as the example in Part I except that the\ncounter will visibly count when in clock mode.\n\nAppendix: Differences between MAX+plus II and Warp\nMAX+plus II is the software provided by Altera for writing VHDL, compiling and\nprogramming their FPGAs. Cypress provides a similar tool for their CPLDs called Warp.\nIf you already have experience with Warp, you may be interested in the specific\ndifferences between the two programs.\nVHDL Libraries\nUnlike Warp, Altera uses the standard IEEE libraries for arithmetic operations with the\nstd_logic_vector type. In Warp, the necessary library is work.std_arith. In MAX+plus II,\nthe standard libraries are ieee.std_logic_arith, ieee.std_logic_unsigned, and\nieee.std_logic_signed. You probably want the latter, especially if you want to subtract.\nWorking With Projects\nIn MAX+plus II projects are handled a bit differently. The project is defined and set to\nthe same name as the top level file. Each VHDL file must have the same name as that of\na component defined in them. Furthermore, all components referenced by a top level\nVHDL file must be in the same directory as the top level file.\nAssigning Pinout\nUnlike Warp, the pinout can not be specified in the VHDL file. The .acf file holds all the\ndevice configuration information including pin assignments, device, configuration\ndevice, and logic block assignments. This file can be edited directly, but Altera also\nprovides a way of editing each of these options through the graphical user interface."
    }
  ]
}