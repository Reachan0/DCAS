{
  "course_name": "Design of Electromechanical Robotic Systems",
  "course_description": "This course covers the design, construction, and testing of field robotic systems, through team projects with each student responsible for a specific subsystem. Projects focus on electronics, instrumentation, and machine elements. Design for operation in uncertain conditions is a focus point, with ocean waves and marine structures as a central theme. Topics include basic statistics, linear systems, Fourier transforms, random processes, spectra, ethics in engineering practice, and extreme events with applications in design.",
  "topics": [
    "Engineering",
    "Electrical Engineering",
    "Electronics",
    "Robotics and Control Systems",
    "Mechanical Engineering",
    "Mechanical Design",
    "Systems Engineering",
    "Systems Design",
    "Mathematics",
    "Applied Mathematics",
    "Engineering",
    "Electrical Engineering",
    "Electronics",
    "Robotics and Control Systems",
    "Mechanical Engineering",
    "Mechanical Design",
    "Systems Engineering",
    "Systems Design",
    "Mathematics",
    "Applied Mathematics"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nLabs: 1 session / week, 4 hours / session\n\nPrerequisites\n\nDynamics and Control I (\n2.003J\n)\n\nStudents are also requested to enroll concurrently in:\n\nThermal-Fluids Engineering I (2.005) or Hydrodynamics (\n2.016\n)\n\nMeasurement and Instrumentation (2.671)\n\nLearning Objectives\n\nObjective 1\n: Apply the principles of linear time-invariant systems\n\nOutcomes (\nAssessment Methods\n)\n\nIdentify time constant, resonance, damping, low-frequency and high-frequency response, and other common elements in LTI systems (\nhomework\n)\n\nCompute the convolution of signals (\nhomework\n)\n\nCompute the Fourier transform and recognize common transforms (\nhomework\n)\n\nObjective 2\n: Comprehend spectra\n\nExplain the underlying concept of a spectrum (\nhomework\n)\n\nUnderstand spectral descriptions of ocean waves and other common processes (\nhomework and project reports\n)\n\nInfer the design impact of large and extreme events (\nhomework and project reports\n)\n\nObjective 3\n: Apply linear systems theory with random inputs\n\nCalculate the spectrum of a given time-series and vice versa (\nhomework\n)\n\nCompute the response spectrum for a system subject to random disturbances, and calculate its statistics (\nhomework and project reports\n)\n\nModify linear system behavior through feedback (\nhomework and project reports\n)\n\nObjective 4\n: Working as part of a team, synthesize a physical system for operation in a given random environment and subject to performance specifications\n\nPerform an iterative design procedure to satisfy given operational requirements in the presence of uncertainty (\nproject reports\n)\n\nPerform engineering analysis to inform and justify critical design decisions (\nproject reports\n)\n\nFabricate, debug, and bring the system to life (\nproject reports\n)\n\nIncrementally test the system, culminating in a full demonstration (\nproject reports\n)\n\nInterpret physical data to characterize successes and failures in meeting the design objectives (\nproject reports\n)\n\nHow We Grade\n\nACTVITIES\n\nPERCENTAGES\n\nAttendance and participation\n\n10%\n\nHomework (ten at 4% each)\n\n40%\n\nLabs (four at 2.5% each)\n\n10%\n\nProject proposal (group grade)\n\n10%\n\nProject milestone presentation slides\n\n5% (group)\n\n10% (individual)\n\nProject final presentation slides\n\n5% (group)\n\n10% (individual)\n\nMissed assignments\ncost 20% each weekday.\n\nHomework\nis assigned on Tuesdays and collected on Tuesdays. The assignment is posted on the course site, but your solutions should be in hardcopy; our solutions are handed out in\nhardcopy\nafter we receive yours. Ten homework assignments were planned, but the last one was cancelled and students were given the full point value (4%) instead.\n\nWe encourage collaboration on homework, but each student has to turn in their own package. We do not want to see identical plots or algorithm listings, and will treat such occurrences seriously. Please make your submissions easy to grade -- for example by: working neatly, clearly indicating your answers, and making sure your answers are given in the order the questions were asked!\n\nThroughout the term, teams in the class will be working together to design, build, and test\nfield robotic systems\nto achieve specified objectives in a random environment or operating condition. Each team is responsible for one written report and two sets of presentation slides; a student's grade is made up of a weighted sum of group and individual grades, as indicated above. We will provide a statement of \"What We Expect\" for each of these items, to guide your preparation.\n\n2.017 is not a CIM class, so we ask for compact documentation; you still have to\ncommunicate\nwith us effectively, however. Reports and presentations are graded on the following merits:\n\nClarity of presentation\n\nTechnical soundness and completeness\n\nOrganization and cohesiveness\n\nEnglish usage\n\nLab notebooks\nwill be given out at the first lab session. You are expected to have your lab notebook with you any time you are in the lab or out in the field working on the assigned labs or the final project assignments. We cannot help you very effectively if you do not have your work recorded (neatly!) in your lab notebook.\n\nAttendance and Participation\n\nEach person has to contribute in lab and in discussions; this starts with good attendance and paying attention.\nNo unexcused absences are permitted\n. An excused absence consists of at least two parts: a) you send us a request, b) we respond that you are excused -- both have to occur before the class or lab session that you will miss. If you are sick or have another excusable situation, we need a note from Medical or the Dean for Student Services. If you have a family emergency, you are also expected to clear it with the Dean for Student Services. In the event of an excused absence it is your responsibility to make up any lost work.\n\nWe expect you to be in lab for the scheduled time each week, unless some specific arrangement has been made; if you leave the lab for 2.017-related tasks, that is fine, but please let us know.\n\nFinally, we all know that in a team effort there is the potential for some students to do\nless than their fair amount of work\n. Please communicate to us your concerns (privately) to be sure we are aware of the situation.",
  "files": [
    {
      "category": "Resource",
      "title": "Aircraft in Winds",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/23579815f2dff482081ef182c2ffe423_MIT2_017JF09_p22.pdf",
      "content": "22 AIRCRAFT IN WINDS\nAircraft in Winds\nThis problem builds on the previous one: you will use the same wind gust spectrum, and\nstudy the response of an air vehicle that is being buffeted by it. Here is the spectrum of the\nwind again, along with a picture of the aircraft:\nSw\n+(ω)\nm2/s\n0.00\n0.50\n0.65\n1.00\n2.80\n3.10\n2.80\n2.00\n1.60\n1.20\n0.80\n0.60\n0.50\n0.40\n0.20\n0.00\nwind\nfluctuations\nw\nI\nerror e\ndesired\ntrackline\nU\nFrequency,\ncycles/hr\n\n22 AIRCRAFT IN WINDS\nThe aircraft has a forward speed of U = 60m/s, or about 120 knots. It employs GPS\nnavigation and a simple feedback loop to stay on a given straight-line path. In particular,\nthe feedback law is φ = 0.003 × e, where φ is the controlled heading of the vehicle relative\nto the desired line of travel, and e is the cross-track error, i.e., the position of the aircraft\nin the direction normal to the desired line of travel. Thus, a cross-track error of ten meters\nleads to a heading command of 0.03 radians, which points the vehicle back toward the track.\nWe assume that wind gusts do not affect the heading of the craft directly, but that there is\na very good heading controller, that will make the vehicle follow the desired φ very closely.\n1. Making the linearizing assumption that φ is small, and including the feedback law,\nwhat is the differential equation relating wind gust velocity w(t) to cross-track error\ne(t)? What is the transfer function E(jω)/W(jω)? Note that the aircraft has negligible\nmass. Hint: it is a low-pass filter.\nSolution: The linearization is e = -Uφ + w or e = -60 × 0.003 × e + w. Note we\nhave not allowed for any sideslip in the the vehicle - that is, it travels exactly in the\ndirection it is pointing. The transfer function taking the disturbance to the error is\nF(jω) = E(jω)/W(jω) = 1/(jω + 0.18).\n2. Make a plot of one thousand seconds of w(t) just as in Homework 4, and show the\ncorresponding system output e(t), in meters. For this, you need to solve the differential\nequation numerically.\nSee attached code and the first two plots.\n3. Using the Wiener-Khinchine relation, make a plot of Se(ω). Then calculate the signif\nicant error e1/3, and plot the plus and minus values of this on your time domain plot\nabove.\nThe W-K relation says that\nSe(ω) = |F(jω)|2Sw(ω),\nso all you need is a pointwise multiplication in frequency space of the input spectrum\nSw(ω) by the squared magnitude of the transfer function, |F(jω)|2. See the code and\nspectrum plot. The significant value of the error amplitude e 1/3 is 7.44 meters.\n4. What happens to e1/3 as you increase or decrease the feedback gain from 0.003, say to\nzero and to 0.006?\nSetting the heading gain to zero means there is no corrective action, and the cross-track\nerror just follows the integral of the disturbance (in the manner of a random walk).\nIncreasing the gain to 0.006 makes the control action stronger; the error is reduced and\nthe frequency content of the error seems higher. In fact, the higher gain is reducing\nmore of the low-frequency part of the error. See the last two sets of plots.\n\n22 AIRCRAFT IN WINDS\nseconds\nseconds\nFigure 5: Time series of wind input and error output, for gain of 0.003.\n-4\n-2\nw(t), m/s\n-15\n-10\n-5\ne(t), m\n+e1/3\n-e1/3\n10*S w, m 2/s\n|H|2 , s 2\nS e, m 2 s\n-2\n-1\nrad/s\nFigure 6: Input and output spectra, with gain 0.003.\n\n22 AIRCRAFT IN WINDS\n-5\nw(t), m/s\nseconds\n-50\n-40\n-30\n-20\n-10\nseconds\ne(t), m\nFigure 7: Time series of wind input and error output, for gain of zero - the wind is simply\nintegrated. There is no significant amplitude because |F | is unbounded at low frequencies,\nand hence the output spectrum is also unbounded here.\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Aircraft response under simple trackline control\nfunction aircraft\nclear all;\nU = 60 ; % aircraft speed\nk = 0.003 ; % heading gain, rad/m\ncph = [0 10 14 20 32 50 71 100 141 200 ...\n320 500 710 1000 1400 2000] ; % freq., in cycles per hour\nSw = [0 .5 .65 1, 2.8 3.1, 2.8 2 ...\n1.6 1.2 .8 .6 .5 .4 .2 0] ; % spectrum to go with cph frequencies\nomega = cph*2*pi/3600 ; % freq., radians/second\nwidths = ([0 diff(omega)] + [diff(omega) 0])/2 ; % make the strip widths\n\n22 AIRCRAFT IN WINDS\n-4\n-2\nw(t), m/s\nseconds\n-10\n-5\nseconds\ne(t), m\n+e1/3\n-e1/3\nFigure 8: Time series of wind input and error output, for gain of 0.006.\n% compute the amplitudes that go with each frequency, and pick\n% some random phase angles, uniformly distributed in [0,2*pi]\nfor i = 1:length(widths),\na(i) = sqrt(2*Sw(i)*widths(i)) ;\nph(i) = rand*2*pi ;\nend;\ndt = .1 ; % time step\nj = 1:10001 ;\nw = zeros(size(j));\nt = dt*(j-1) ;\nfor i = 1:length(widths),\nw = w + a(i)*cos(omega(i)*t + ph(i)) ;\nend;\nfigure(1);clf;hold off;\nsubplot(211);\nplot(t,w) ;\ngrid on; xlabel('seconds'); ylabel('w(t), m/s');\n\n22 AIRCRAFT IN WINDS\ne(1) = 0 ;\nfor i = 2:length(t),\nk1 = dt*f( t(i-1), e(i-1), w(i-1), U, k);\nk2 = dt*f( t(i-1)+dt/2, e(i-1)+k1/2, (w(i-1)+w(i))/2, U, k );\ne(i) = e(i-1) + k2 ;\nend;\nfigure(1);\nsubplot(212);\nplot(t,e);\ngrid on; xlabel('seconds'); ylabel('e(t), m');\nfor i = 1:length(omega),\nH(i) = 1 / (sqrt(-1)*omega(i) + U*k) ;\nH2(i) = H(i)*conj(H(i)) ;\nend;\nSe = H2 .* Sw ;\nevar = sum(Se.*widths);\nesig = 2*sqrt(evar);\ndisp(sprintf('Significant value of e: %g m', esig));\nfigure(1);\nsubplot(212); hold on;\nplot([min(t) max(t)], esig*[1 1],'r--');\nplot([min(t) max(t)], -esig*[1 1],'r--');\ntext(1020,esig,'+e_{1/3}');\ntext(1020,-esig,'-e_{1/3}');\nfigure(2);clf;hold off;\nsubplot(211);\nsemilogx(omega, 10*Sw, omega, H2,':', omega, Se,'--', 'LineWidth',2) ;\nlegend('10*S_w, m^2/s', '|H|^2, s^2','S_e, m^2s');\nxlabel('rad/s');\ngrid;\nfunction [edot] = f(t, e, w, U, k)\nedot = -U*k*e + w ;\nreturn ;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Aliasing",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/904f67d66ba34b2dd3b3e9f30a5a1bfc_MIT2_017JF09_p19.pdf",
      "content": "19 ALIASING\nAliasing\nConsider sampling the sinusoidal process: x(t) = 0.9 sin(2πfot).\n1. When we sample the signal at frequency fs (Hz) or ωs (rad/s), the Nyquist rate of\nfN = fs/2 is the maximum frequency the sampling can detect. See the figure for\nsome examples; undersampling of 1.7 indicates that the process frequency exceeds the\nNyquist rate by a factor of 1.7. What is the required sampling rate to detect fo =\n20kHz? Extrapolating from the figure, is this sampling rate good enough to observe\nthe process with reasonable fidelity?\nThe required rate is twice the process rate, or 40kHz. This rate does not give good\nphase or amplitude information of the 20kHz signal; about 200-400kHz would be much\nbetter, giving five to ten points per cycle.\n2. Suppose that you can only sample at fs = 5.5kHz. What is the time step? For the\ntime interval t = [0 0.002], plot x(t) sampled at a high enough rate that you can clearly\nsee the sine wave, and overlay it with the signal sampled at fs. What is the apparent\n(aliased) frequency of the sampled signal?\nA simple rule to predict this aliased frequency is: decrement fo by fs enough times\nto get within the observable frequency range of [-fN , fN ]. The absolute value of this\nresult is the aliased frequency.\nSampling at 5.5kHz gives a time step of 0.182 milliseconds. From the top subplot in\nFigure 4, this gives 2kHz aliased. Applying the formula above, we find 20kHz - 4 ×\n5.5kHz = -2kHz.\n3. Repeat the above analysis for fs = 6.5kHz.\nSampling at 6.5kHz gives a time step of 0.154 milliseconds. From the middle subplot\nand the calculation, we get 0.5kHz.\n4. Repeat the above analysis for fs = 7.5kHz.\nSampling at 7.5kHz gives a time step of 0.133 milliseconds. From the bottom subplot\nand the calculation, this gives 2.5kHz aliased.\n%-------------------------------------------------------------------\n% Aliasing - explore several different undersampling sins.\n% Franz Hover MIT Mechanical Engineering\nclear all;\ntfinal = .002 ;\n\n19 ALIASING\n0.2\n0.4\n0.6\n0.8\n1.2\n1.4\n1.6\n1.8\n-1\n-0.5\n0.5\nseconds\n-3\nx 10\n0.2\n0.4\n0.6\n0.8\n1.2\n1.4\n1.6\n1.8\n-1\n-0.5\n0.5\nseconds\n-3\nx 10\n0.2\n0.4\n0.6\n0.8\n1.2\n1.4\n1.6\n1.8\nx 10\n-3\n-1\n-0.5\n0.5\nseconds\nFigure 4: Aliasing: sampling a 20kHz signal at 5.5, 6.5, and 7.5kHz. A dangerous business!\nw0 = 20000*2*pi;\nws = 7500*2*pi; % change the sampling rate here [5500 6500 7500]\ndtfi = 2*pi/w0/20 ; % fine time scale\ntfi = 0:dtfi:tfinal ;\ndt = 2*pi/ws ; % sampling time scale\nt = 0:dt:tfinal ;\nxfi = .9*sin(w0*tfi) ; % here are the signals\nx = .9*sin(w0*t) ;\nfigure(1);clf;hold off;\nsubplot(3,1,1);\nplot(tfi,xfi);\nhold on;\nplot(t,x,'ro-','LineWidth',2);\nxlabel('seconds');\ndisp('Save the figure if necessary.');\n\n19 ALIASING\nnfi = length(xfi);\nfxfi = fft(xfi)/nfi;\nwfi = [0:nfi-1]/(nfi-1)*2*pi/dtfi ;\nn = length(x);\nfx = fft(x)/n ;\nw = [0:n-1]/(n-1)*2*pi/dt;\nfigure(2);clf;hold off;\nplot(w/2/pi,abs(fx),wfi/2/pi,abs(fxfi));\nhold on;\nplot(mod(w0,ws)/2/pi,0,'r*','LineWidth',2);\nplot(mod(-w0,ws)/2/pi,0,'r*','LineWidth',2);\ndisp(sprintf('Sampling freq:\n%g Hz.', ws/2/pi));\ndisp(sprintf('Aliased frequencies:\n%g %g Hz.', ...\nmod(w0,ws)/2/pi,mod(-w0,ws)/2/pi));\ndisp('Save figure if you want.');\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Autonomous Vehicle Mission Design, with a Simple Battery Model",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/f62b7c484569d6cb2019b419aa9a4045_MIT2_017JF09_p09.pdf",
      "content": "AUTONOMOUS VEHICLE MISSION DESIGN, WITH A SIMPLE BATTERY MODEL13\nAutonomous Vehicle Mission Design, with a Simple\nBattery Model\nAn autonomous land robot carries its own energy in the form of a E(t = 0) = 700Wh\n(Watt-hour) battery. The robot can stay stationary at a cost of 18W to run its processor\nand instrumentation, or it can move with the additional locomotion cost of 35U 3 Watts,\nwhere U is the speed in m/s. The battery has a nonlinear discharge curve, that penalizes\nhigh loads: -dE/dt = P + 0.005P 2, where P is the total power load (taken in Watts), and\ndE/dt is also in Watts.\n1. What is the longest duration mission that we can run, if the mission ends when E = 0?\nThe longest duration mission is one where we don't move. We simply have the hotel\nload eating away at the battery, drawing 19.6W; the mission time is T = 35.7h.\nFormulas are in the attached MATLAB code.\n2. What is the longest distance mission that we can run? Give the distance, duration,\nand vehicle speed for this mission.\nThe battery energy loss rate is a static function of load, so we have to just pick the best\nspeed and run until the battery is dead. My code takes a numerical approach, sweeping\nthrough a number of possible speeds and picking out the case with greatest distance.\nYou could also do it directly, by writing one equation for the distance as a function of\nthe speed, and then finding the maximum using l'Hopital's rule (zero slope). Either\nway, we find that the greatest distance is about 52.5km, over about 24.3h at a speed\nof 0.60m/s.\n3. What is the longest distance mission, if we alternate resting periods and moving at\na specific speed, with about half of the time spent in each state? Give the distance,\nduration, and the speed when moving.\nThe key here is that half of the time, we have only the hotel load to satisfy, and\notherwise we have hotel plus locomotion. In all, the battery energy discharges at the\naverage of the two rates. But the distance traveled is only the moving speed times half\nof the mission duration. I get a distance of 32.7km, over about 24.6h at a speed of\n0.74m/s.\n4. Comment on how you would use your findings in the design of effective mission plans.\nThe longer the mission, the more important it is to understand the hotel load as distinct\nfrom locomotion. This is especially true for a vehicle that has a lot of power-hungry\nsensors or communication gear on board, but may not have much locomotion cost. In\nthis example, the hotel load costs us 20km of range when we operate in the stop-go\nmode.\n\n9 AUTONOMOUS VEHICLE MISSION DESIGN, WITH A SIMPLE BATTERY MODEL14\nLoad, Watts\nBattery Energy Loss Rate, Watts\nConstant Speed Case\nStop/Go Case\n0.2\n0.4\n0.6\n0.8\n1.2\nU, m/s\nDistance, km\nDuration, hours\nLoad, W\n0.2\n0.4\n0.6\n0.8\n1.2\nU when moving, m/s\nDistance, km\nDuration, hours\nAverage Load, W\n\n9 AUTONOMOUS VEHICLE MISSION DESIGN, WITH A SIMPLE BATTERY MODEL15\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Autonomous Vehicle Energy with Battery Model\n% MIT 2.017 FSH Sept 2009\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nclear all;\nE0 = 700*3600 ;\n% battery capacity, Joules\nhotelLoad = 18 ;\n% Watts\nUvec = 0:.01:1.3 ;\n% a vector of speeds we'll look at\nsquareCoefficient = 0.005 ;\npropLoadCoefficient = 35 ;\n% Show the discharge curve of the battery %%%%%%%%%%%%%%%%%%%%%\nP = 0:1:100 ;\nEdot = P + squareCoefficient*P.^2 ;\nfigure(1);clf;hold off;subplot(211);\nplot(P,Edot,'LineWidth',2);\nhold on;\nplot(P,P,'--k');\nxlabel('Load, Watts');\nlegend('Battery Energy Loss Rate, Watts',2);\ngrid;\n% Problem 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nEdot = hotelLoad + squareCoefficient*hotelLoad^2 ;\nduration1 = E0 / Edot ;\ndisp(sprintf('Max duration mission is %g hours, 0 km.', duration1/3600));\n% Problems 2 and 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\ni = 1 ;\nfor U = Uvec,\npropulsionLoad = propLoadCoefficient*U^3 ;\ntotalLoad = hotelLoad + propulsionLoad ;\n% Problem 2\nEdot2(i) = totalLoad + squareCoefficient*totalLoad^2 ;\nduration2(i) = E0 / Edot2(i) ;\ndistance2(i) = duration2(i) * U ;\n% Problem 3\nEdot3(i) = (hotelLoad + squareCoefficient*hotelLoad^2) / 2 + ...\n(totalLoad + squareCoefficient*totalLoad^2) / 2 ;\n% time-averaged value of Edot\nduration3(i) = E0 / Edot3(i) ;\n\n9 AUTONOMOUS VEHICLE MISSION DESIGN, WITH A SIMPLE BATTERY MODEL16\ndistance3(i) = duration3(i) * U / 2 ; % note division by two\ni = i + 1 ;\nend;\nfigure(2);clf;hold off;\nsubplot(211);\nplot(Uvec,distance2/1000,Uvec,duration2/3600,'--',Uvec,Edot2,':',...\n'LineWidth',2) ;\naxis('tight');\nxlabel('U, m/s');\ntitle('Constant Speed Case');\nlegend('Distance, km', 'Duration, hours', 'Load, W',2);\n[junk,ind] = sort(distance2) ;\nix = ind(end);\nhold on;\nplot(Uvec(ix),distance2(ix)/1000,'ro');\ndisp(sprintf('Max constant-speed distance mission is %g hours, %g km', ...\nduration2(ix)/3600, distance2(ix)/1000));\nsubplot(212);\nplot(Uvec,distance3/1000,Uvec,duration3/3600,'--',Uvec,Edot3,':',...\n'LineWidth',2) ;\naxis('tight');\nxlabel('U when moving, m/s');\ntitle('Stop/Go Case');\nlegend('Distance, km', 'Duration, hours','Average Load, W',2);\n[junk,ind] = sort(distance3) ;\nix = ind(end);\nhold on;\nplot(Uvec(ix),distance3(ix)/1000,'ro');\ndisp(sprintf('Max stop/go distance mission is %g hours, %g km', ...\nduration3(ix)/3600, distance3(ix)/1000));\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "AUV Mission Optimization",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/16502c29ccc3b3e44e23b485b000d2e9_MIT2_017JF09_p24.pdf",
      "content": "24 AUV MISSION OPTIMIZATION\nAUV Mission Optimization\nTradeoffs and optimization are demonstrated by the following simple example. An au\ntonomous robot carries an energy source of E = 1.5 kiloWatt-hours. At operating speed\nU, the drive motors consume Pd = 40U3 Watts. Additionally, no matter what the speed,\nthe \"hotel\" load of the robot - the computers, sensors, communication equipment, etc.\nconsumes Ph = 8 Watts. What speed should the robot travel so as to achieve the greatest\ndistance, how long does this mission last, and how far does the robot go in this case?\nThe drive power is Pd = 40U3, and the hotel load is Ph = 8, so the total power is P =\n40U3 + 8, in Watts. The duration is the available energy divided by the total power, or\n1500 × 3600\nT = 40U3 + 8\nand the distance is simply D = TU. We see that D can be written then as a function of U,\nwith a linear term in the numerator, and a cubic term plus a constant in the denominator.\nThe solution can be obtained by either setting the dD/dU = 0, or looking at the function\ncalculated numerically. The function is shown in the following plot, along with the optimum\npoint. From the graph, the optimum speed is about 0.46m/s, the distance is 209km, and\nthe duration is 127 hours.\n0.2\n0.4\n0.6\n0.8\nspeed, m/s\nTotal power, W\nMission time, h\nMission distance, km\n%-----------------------------------------------------------------\n% Electrical Power Budget on an AUV\nclear all;\nUvec = 0:.01:1; % set up a vector of speeds, m/s\n\n24 AUV MISSION OPTIMIZATION\nfor i=1:length(Uvec),\nPd(i) = 40*Uvec(i)^3 ; % propulsion power, W\nPh(i) = 8 ; % hotel power, W\nPt(i) = Pd(i)+Ph(i) ; % total power, W\nT(i) = 1500 / Pt(i); % time of mission, h\nX(i) = T(i)*3600*Uvec(i) ; % distance traveled, m\nend;\nfigure(1);clf;hold off;\nsubplot('Position',[.2 .2 .5 .4]);\nplot(Uvec,Pt,'-',Uvec,T,'--',Uvec,X/1000,'-.','LineWidth',2) ;\nlegend('Total power, W', 'Mission time, h', 'Mission distance, km');\ngrid;\nxlabel('speed, m/s');\n%-----------------------------------------------------------------\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Bouncing Robot",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/4c5b3a0e9d904dc1cbe3954a4c53c27d_MIT2_017JF09_p15.pdf",
      "content": "15 BOUNCING ROBOT\nBouncing Robot\nYou are asked to explore the simple dynamics of a bouncing robot device, using simulation.\nThere is a single mass with a very light helical spring attached on the bottom of it; the mass\nis 40kg, and the spring constant is 10400N/m. The spring additionally has a little bit of\ndamping, 35Ns/m. The spring is NOT attached to the ground. The initial condition has\nzero vertical velocity and a 15cm compression of the spring.\n1. Formulate the system dynamics with an annotated drawing and a statement of the\ngoverning equations.\nSolution: Let us say that vertical position y = 0 corresponds with the spring in its\nnatural, uncompressed state, and it is just touching the ground. Then when y < 0,\nthere is a compression force pushing the mass upward at ky, and the associated damping\nby . When y > 0, there is no spring force at all. In all cases, there is a steady gravity\nforce acting. We have then:\nmy + by + ky = -mg when y < 0 , or\nmy = -mg when y > 0.\n2. Is this a linear system - why or why not? Since we are not forcing the system, you can\nanswer the question by considering how the response changes as you scale the initial\nconditions.\nSolution: The system is nonlinear. If we apply a very large preload before release, we\nwill get a large hopping response, whereas if we apply a very small preload the mass\nmay not hop at all, because the spring doesn't fully unload.\n3. Run a simulation to get the response up to time ten seconds. Show in a plot both the\nvertical position and the velocity as a function of time.\nSolution: See that attached code and figure. Note that when the spring is unloaded,\nthe velocity is changing linearly with time (constant acceleration), whereas when the\nspring is loaded, a sinusoidal velocity profile occurs.\n4. Answer the specific question: At what time after the release does the lower end of the\nspring stop leaving the ground?\nSolution: The spring does not leave the ground again after 3.48 seconds.\n\n15 BOUNCING ROBOT\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Simulate a bouncing mass\nfunction bouncingMass\nclear all;\n[t,y] = ode45(@func,[0 10],[0 -0.15]) ;\nfigure(1);clf;hold off;\nsubplot(211);\nplot(t,y(:,1),'LineWidth',2); grid;\nylabel('ydot, m/s');\nsubplot(212);\nplot(t,y(:,2),'LineWidth',2); grid;\nylabel('y, m');\nxlabel('time, seconds');\nfunction [ydot] = func(t,y) ;\n% all units MKS\nm = 40 ;\n% mass\nk = 10400 ;\n% spring constant\ng = 9.81 ;\n% gravity\nb = 35 ;\n% spring damping\n% first state is vertical velocity, second is position\nif y(2) < 0,\n% the spring is in action ...\nydot(1,1) = 1/m * ( -k*y(2) - b*y(1)) - g ;\nelse,\n% ... or not\nydot(1,1) = -g ;\nend;\nydot(2,1) = y(1) ;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n15 BOUNCING ROBOT\n-2\n-1\nydot, m/s\n-0.2\n-0.15\n-0.1\n-0.05\n0.05\n0.1\n0.15\ny, m\ntime, seconds\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Bretschneider Spectrum Definition",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/9157c08e1af8a7b42f4d38931c3cd739_MIT2_017JF09_p04.pdf",
      "content": "BRETSCHNEIDER SPECTRUM DEFINITION\nBretschneider Spectrum Definition\nThe formula for the Bretschneider (one-sided) ocean wave spectrum is\nS(ω) =\nω4\nm\nH2\n1/3e-ωm/4ω4\nω\nwhere ω is frequency in radians per second, ωm is the modal (most likely) frequency\ngiven wave, and H1/3 is the significant wave height. Make a single figure that sho\nBretschneider spectrum (S as a function of ω) for these cases:\nSeaState\n2π/ωm, sec\nH1/3, m\n6.3\n0.3\n7.5\n0.9\n8.8\n1.9\n9.7\n3.3\n12.4\n5.0\nHere is the MATLAB code I used and the resulting figure:\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% 2.017 Homework 1.\nBretschnieder Spectrum.\n% FSH MIT Mechanical Engineering\nclear all;\nfigure(1);clf;hold off; hold on; % note:\nhold is on so we can\n% figures\n% show the data from the table in the problem\nSSvec = [2 3 4 5 6] ; % sea states\nwmvec = 2*pi*ones(size(SSvec)) ./ [6.3 7.5 8.8 9.7 12.4] ;\n% modal frequencies\nHsigvec = [0.3 0.9 1.9 3.3 5.0] ; % significant wave heights\n% vector of frequencies for the spectrum calculation\nwvec = [.1:.01:2];\n% step through the different seastates\nfor i = 1:length(wmvec),\nwm = wmvec(i) ;\nHsig = Hsigvec(i) ;\nSS = SSvec(i) ;\nof any\nws the\n%%%%\noverlay\n\n4 BRETSCHNEIDER SPECTRUM DEFINITION\nfor j = 1:length(wvec),\nw = wvec(j) ;\nS(j) = 5/16 * wm^4 / w^5 * Hsig^2 * exp(-5 * wm^4 / 4 / w^4) ;\nend;\n% check that we got the right formula!\ndisp(sprintf(...\n'Square Root of Integral of Area of S: %g; 4*Hsig: %g', ...\nsqrt(sum(S)*mean(diff(wvec))), 1/4*Hsig));\n% add on the curves and some labels\nplot(wvec,S,'LineWidth',2);\nif SS > 3,\ntext(wm-.18,max(S),sprintf('SS %g', SS));\nend;\nend;\n% finish off the plot\ngrid;\ntitle('Sea Wave Spectra for Sea States 2-6');\nxlabel('frequency \\omega, rad/s');\nylabel('S(\\omega)');\nprint -deps hw1_bret.eps\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n4 BRETSCHNEIDER SPECTRUM DEFINITION\nSea Wave Spectra for Sea States 2-6\n4.5\nS(ω)\n3.5\n2.5\n1.5\n0.5\nSS 4\nSS 5\nSS 6\n0.2\n0.4\n0.6\n0.8\n1.2\n1.4\n1.6\n1.8\nfrequency ω, rad/s\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Computations on Recorded RP Data",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/94c89cf18d7719bc1c808a4f572f258f_MIT2_017JF09_p20.pdf",
      "content": "20 COMPUTATIONS ON RECORDED RP DATA\nComputations on Recorded RP Data\nLoad the data file homework4.dat from the course website. The first column is time t and the\nsecond column is a measured signal h(t), in Volts.\n1. What is the variance of h, from the simple time formula? What is the significant\n(average 1/3-highest) height based on this variance?\nThe variance is the time average of h(t)2, because the signal has zero mean; it comes\nout to 0.97V 2 , so that the significant height is 3.93V .\n2. Write a program to count the waves using zero upcrossings as the endpoints for cycles.\nHow many full waves do you get? What is the significant height from these observa\ntions? What is the average period? Make histograms (20 bins please) of the heights\nand of the periods observed.\nThere are 415 complete waves, the one-third average highest height is 3.63V , and the\naverage period is 1.20sec. The height histogram confirms a Rayleigh-like distribution\n(although 415 data are not really enough to be conclusive). Note the significant height\ncalculated here is a little low because this is not a very narrow-band process. You can\nsee this by looking at the signal close-up: lots of false peaks.\n3. Calculate and plot the autocorrelation function R(τ) for τ = [0, 15]sec.\nSee the plot. Notice the value at τ = 0s is 0.97V 2, which is of course the variance\ncalculated another way, 1\nai\n2, where the amplitudes ai are given in the program.\n\n20 COMPUTATIONS ON RECORDED RP DATA\ntime, sec\ntau, seconds\n-4\n-2\nsignal, Volts\n-0.5\n0.5\nAutocorrelation R(tau), V2\n\n20 COMPUTATIONS ON RECORDED RP DATA\nHistogram of Heights\nheight, Volts\nHistogram of Periods\n0.5\n1.5\nperiod, seconds\n2.5\nnumber of samples\nnumber of samples\n\n20 COMPUTATIONS ON RECORDED RP DATA\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Analyze time-domain data\n% MIT 2.017 FSH October 2009\nclear all ;\ndt = .05 ; % time step\nt = 0:dt:10000*dt; % time vector\n%w = [1 2 3 4 5 6 7 8 9 10] ;\n%w = w + randn(size(w))*.3 ;\nw = [1.1871\n1.6613\n3.4060\n3.7160\n5.4306\n6.6176\n...\n7.1664\n7.7864\n8.9320\n9.7945] ; % slightly perturbed freqs\na = [.1 .4 .6 .7 .6 .5 .4 .3 .2 .1] ; % amplitudes\n%phi = 2*pi*rand(1,length(w));\nphi = [6.0486\n6.2545\n5.8839\n4.8933\n1.1329\n5.9219\n...\n6.0299\n1.3844\n4.9657\n4.5073] ; % random phases\nVPure = sum(a.^2)/2 ; % area under the curve = variance\nHsigPure = 4*sqrt(VPure);\n% build up the time-domain signal\nn = length(t) ;\nh = zeros(1,n) ;\nfor i = 1:length(w),\nh = h + a(i)*sin(w(i)*t + phi(i)) ;\nend;\nfigure(1);clf;hold off;\nsubplot(211);\nplot(t,h) ;\nxlabel('time, sec');\nylabel('signal, Volts');\ngrid;\nVt = 1/n*sum(h.*h) ; % the time average\nHsigt = 4*sqrt(Vt) ;\n% calculate the heights from zero up-crossings\n[ind] = find( (h(1:end-1) < 0) & (h(2:end) > 0)) ;\nfor i = 1:length(ind)-1,\nheight(i) = max(h(ind(i):ind(i+1))) - min(h(ind(i):ind(i+1)));\n\n20 COMPUTATIONS ON RECORDED RP DATA\nend;\nfigure(2);clf;hold off;\nsubplot(211);\nhist(height,20);\ntitle('Histogram of Heights');\nxlabel('height, Volts');\nylabel('number of samples');\nheightSort = -sort(-height) ;\nnHeights = length(height) ;\ndisp(sprintf('Calculated %d heights.', nHeights));\ntopThirdHeights = heightSort(1:round(nHeights/3)) ;\navgOneThirdHeight = mean(topThirdHeights);\nperiods = diff(ind)*dt ;\nmeanPeriod = mean(periods);\nfigure(2);subplot(212);\nhist(periods,20);\ntitle('Histogram of Periods');\nxlabel('period, seconds');\nylabel('number of samples');\ndisp(sprintf('Significant heights:\n%g %g %g V.', HsigPure, Hsigt,...\navgOneThirdHeight));\ndisp(sprintf('Mean period is %g seconds.', meanPeriod));\n% calculate the autocorrelation function\nfor i = 1:n,\nR(i) = 1/(n-i+1)*sum( h(1:(n+1-i)).*h(i:n)) ;\nend;\nfigure(1);subplot(212);\nplot(t(1:300),R(1:300)) ;\nxlabel('tau, seconds');\nylabel('Autocorrelation R(tau), V^2');\ngrid;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Control of a High-Speed Vehicle",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/5f0318fc79b4c8232a60df4031b85144_MIT2_017JF09_p36.pdf",
      "content": "36 CONTROL OF A HIGH-SPEED VEHICLE\nControl of a High-Speed Vehicle\nAn instability in certain aircraft and in some high-speed marine vehicles is characterized\nby a pair of complex right-half plane poles, and is due to inadequate aerodynamic stability.\nIt is particularly pronounced in highly maneuverable craft, where open-loop stability in\nthe physical design has been intentionally traded off against agility. In this problem, you\nwill use the Nyquist criterion to bring such a vehicle under control and to achieve specific\nperformance and robustness properties.\n1. The transfer function taking the elevator control surface command into the pitch of\nthe vehicle is given as\ny(s)\n2(s + 2)\nP(s) =\n=\nu(s)\ns2 - 0.2s + 16\nConfirm that this is an unstable system by both stating the poles and by plotting the\nimpulse response.\n2. Plot the complex loci for this plant. This means plotting the real versus the imaginary\nparts of P(s), s = jω, for ω going from zero to infinity. Then plot this same curve\nagain, negating the imaginary part, and you then have covered the range of ω from\n[-inf, inf]. Use logarithmically-spaced frequencies.\n3. Applying the Nyquist criterion to this plot, can the vehicle be stabilized with unity\nfeedback gain, i.e., C(s) = 1? If so, comment on whether it is a useful feedback system.\n4. We need to achieve through feedback a) integral action, b) a phase margin of 30-40\ndegrees, and c) a gain margin of at least two. To do this, design a controller C(s) with\nthe following properties:\n- a real pole just to the left of the origin, corresponding with an integrator (we want\nit to be definitely not in the RHP);\n- a stable complex zero pair that approximately mirrors the unstable plant poles\nacross the imaginary axis, but possibly with a higher damping ratio;\n- two additional stable, real poles so that the compensator has a high-frequency\nroll-off behavior.\nState the complete transfer function of your designed compensator, show that it achieves\nthe desired gain and phase margins on a plot of P(s)C(s) loci, and show a closed-loop\nstep response to prove that it is indeed well-behaved.\n1. The plant poles are at s = 0.1 ± 4j. Since they are in the right-half plane, the system\nis unstable. The open-loop response shows an oscillation of growing amplitude.\n2. See the figures with loci of P(s) and magnitude |P(s)|.\n\n36 CONTROL OF A HIGH-SPEED VEHICLE\n3. |P(s)| goes to zero at high frequencies, and takes a small but definitely nonzero value\nfor low frequencies. Thus, sweeping s from negative to positive infinity and around the\nRHP leads to two counterclockwise encirclements of the critical point 1 + 0j. This is\nmatched by the two unstable poles in the plant, i.e., we do have P = CCW, and the\nsystem is stable with unity feedback!\nIt is not a very good design, however, for at least one reason: the magnitude of P(s)C(s)\nis small at low frequencies, and hence the system will track a reference signal very\npoorly. A simulation quickly verifies this fact.\n4. A feasible compensator is:\nu(s)\n30(s2 + 0.4s + 16.04)\nC(s) =\n=\n.\ne(s)\n(s + 0.0001)(s + 4)2\nAs suggested in the problem statement, this solution has a pole very close to the\norigin but definitely stable, two stable zeros in a mirror configuration plus a little more\ndamping, and two real poles. The mirror configuration zeros provide a clever way to\ndeal with nasty unstable plant poles; the pair roughly cancels the |P(s)| peak. This\ncompensator has quite high gain below about four radians per second, but rolls off to\nzero at high frequencies.\nLooking at the loci of the loop transfer function |P(s)C(s)|, we see immediately\ntwo CCW encirclements of the critical point, with finite magnitudes. The transi\ntion through zero frequency (from small negative to small positive), however, occurs\nat very large magnitude of P(s)C(s) and is approached at ±90 degrees. We have to\nask which way do these lines connect, in the right- or left-half plane? Since the path\nof s encloses the entire RHP, this path must include a positive, real value - putting\na positive real value for s into the loop transfer function shows that the completing\nportion of the P(s)C(s) loci occurs in the RHP. We are then able to conclude that\nthis loop does not encircle the critical point. The remaining two CCW encirclements\nmatch the unstable poles of the plant, P = CCW as before, and the system is stable.\nThe figures show that this design satisfies the gain and phase margin requirements, and\nthat the closed-loop response is acceptable in terms of steady-state error and ringing.\nPlant Impulse Response\ntime, seconds\n-6\n-4\n-2\ny\n\n36 CONTROL OF A HIGH-SPEED VEHICLE\nLoci of Plant P(s)\nMagnitude |P(s)|\n-8\n-6\n-4\n-2\nimag(P(s))\nω > 0\nω < 0\n-40\n-30\n-20\n-10\ndB\n-15\n-10\n-5\n-2\nreal(P(s))\nrad/s\nLoci of Loop Transfer Function P(s)C(s)\nMagnitude |P(s)C(s)|\n-4\n-3\n-2\n-1\nimag(P(s)*C(s))\nω > 0\nω < 0\n-60\n-40\n-20\ndB\n-6\n-4\n-2\n-2\nreal(P(s)*C(s))\nrad/s\nClosed-loop Step Response\n0.5\n1.5\ny\ntime, seconds\n\n36 CONTROL OF A HIGH-SPEED VEHICLE\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Design of a flight controller using Nyquist plot.\n% FSH MIT Mechanical Engineering April 2008\nclear all;\nzP = [-2] ; % zeros in plant\npP = [0.1+4*sqrt(-1), 0.1-4*sqrt(-1)] ; % poles in plant\nkP = 2 ; % gain of plant\nzC = [-0.2+4*sqrt(-1), -0.2-4*sqrt(-1)] ; % zeros in controller\npC = [-4 -4 -0.0001] ; % poles in controller\nkC = 30 ; % gain of controller\nw = logspace(-2,2,3000); % (a very dense) frequency vector\n% compute and plot the plant impulse response\nsysP = zpk(zP,pP,kP);\n[y,t] = impulse(sysP,10);\n% (could also solve the ode explicitly, with a tall\n% rectangle or triangle approximation for the impulse)\nfigure(1);clf;hold off;\nsubplot('Position',[.1 .2 .8 .4]);\nplot(t,y,'k','LineWidth',2);\nxlabel('time, seconds');\nylabel('y');\ntitle('Plant Impulse Response');\nprint -deps flightControl1.eps ;\n% make up the loci of P(s)\n% (could also do this in one line with freqresp() !)\nfor i = 1:length(w),\nP(i) = kP ;\ns = sqrt(-1)*w(i) ;\nfor j = 1:length(zP),\nP(i) = P(i) * (s - zP(j)) ;\nend;\nfor j = 1:length(pP),\nP(i) = P(i) / (s - pP(j)) ;\nend;\nend;\n% plot the loci of P(s)\n\n36 CONTROL OF A HIGH-SPEED VEHICLE\nfigure(2);clf;hold off;\nplot(real(P),imag(P),'k',real(P),-imag(P),'k--','LineWidth',2);\naxis('equal');\na = axis ;\nhold on;\ntitle('Loci of Plant P(s)');\nlegend('\\omega > 0','\\omega < 0',3);\nplot([0 0],[a(3) a(4)],'k',[a(1) a(2)],[0 0],'k');\nplot(-1,0,'kx','LineWidth',2);\nxlabel('real(P(s))');\nylabel('imag(P(s))');\nprint -deps flightControl2.eps ;\n% make up the loci of C(s)\nfor i = 1:length(w),\nC(i) = kC ;\ns = sqrt(-1)*w(i) ;\nfor j = 1:length(zC),\nC(i) = C(i) * (s - zC(j)) ;\nend;\nfor j = 1:length(pC),\nC(i) = C(i) / (s - pC(j)) ;\nend;\nend;\n% plot the loci of P(s)*C(s)\nfigure(3); clf;hold off;\nplot(real(P.*C),imag(P.*C),'k-',real(P.*C),-imag(P.*C),'k--',...\n-1,0,'bx','LineWidth',2);\nhold on;\nlegend('\\omega > 0','\\omega < 0',3);\naxis([-5 5 -4 4]*1.2);\na = axis ;\nplot(sin(.0:.01:2*pi),cos(0:.01:2*pi),'k:');\nplot([-2,-2],[-.1 .1],'k-');\nplot([0 0],[a(3) a(4)],'k',[a(1) a(2)],[0 0],'k');\nplot([0 -sqrt(3)/2]*1.,[0 1/2]*1.,'k:',...\n[0 -sqrt(3)/2]*1.,[0 -1/2]*1.,'k:');\nxlabel('real(P(s)*C(s))');\nylabel('imag(P(s)*C(s))');\ntitle('Loci of Loop Transfer Function P(s)C(s)');\nprint -deps flightControl3.eps ;\n% plot the magnitude of PC\n\n36 CONTROL OF A HIGH-SPEED VEHICLE\nfigure(4);clf;hold off;\nsubplot('Position',[.2 .1 .2 .8]);\nsemilogx(w,20*log10(abs(P.*C)),'k','LineWidth',2);\nhold on;\nsemilogx([min(w),max(w)],[0 0],'k-');\nxlabel('rad/s');\nylabel('dB');\ntitle('Magnitude |P(s)C(s)|');\nprint -deps flightControl4.eps ;\n% compute and plot the closed-loop step response\nsysC = zpk(zC,pC,kC);\n[y,t] = step(feedback(sysP*sysC,1),10);\n% could also do an ode to solve this\nfigure(5);clf;hold off;\nsubplot('Position',[.1 .2 .8 .4]);\nplot(t,y,'k','LineWidth',2);\nhold on;\nplot([0 10],[1 1],'k-');\nxlabel('time, seconds');\nylabel('y');\ntitle('Closed-loop Step Response');\na = axis ; axis([0 10 a(3:4)]);\nprint -deps flightControl5.eps ;\n% plot the magnitude of P - just for good measure\nfigure(6);clf;hold off;\nsubplot('Position',[.2 .1 .2 .8]);\nsemilogx(w,20*log10(abs(P)),'k','LineWidth',2);\nhold on;\nsemilogx([min(w),max(w)],[0 0],'k-');\nxlabel('rad/s');\nylabel('dB');\ntitle('Magnitude |P(s)|');\nprint -deps flightControl6.eps ;\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Convolution",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/09ea96bff65c4888027f38af2fcc8508_MIT2_017JF09_p02.pdf",
      "content": "2 CONVOLUTION\nConvolution\nThe step function s(t) is defined as zero when the argument is negative, and one when the\nargument is zero or positive:\n0 if t < 0\ns(t) =\n1 if t ≥ 0\nFor the LTI systems whose impulse responses are given below, use convolution to determine\nthe system responses to step input, i.e., u(t) = s(t).\n1. h(t) = 1\nThe impulse response is the step function itself - it turns on to one as soon as the\nimpulse is applied, and this makes it a pure integrator. We get for the response to step\ninput\nt\ny(t)\n=\n\ns(τ)s(t - τ)dτ\nt\n=\ns(t - τ)dτ and the integrand is one because always t ≥ τ so\nt\n=\ndτ = t.\nYou recognize this as the integral of the input step.\n2. h(t) = sin(t)\nThis impulse response is like that of an undamped second-order oscillator, having unity\nresonance frequency.\nt\ny(t)\n=\n\ns(t - τ) sin(τ)dτ\nt\n=\nsin(τ)dτ\n= - cos(τ)|t\n0 = 1 - cos(t).\n3. h(t) = 2 sin(t)e-t/4\nThis is a typical underdamped response for a second-order system - a sinusoid multi\nplied by a decaying exponential. We make the substitution and find:\nt\ny(t)\n=\n\ns(t - τ)2 sin(τ)e -τ/4dτ\nt\n=\nsin(τ)e -τ/4dτ\n= 32 1 - e -t/4[sin(t)/4 + cos(t)]\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab Rules and Safety",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/bfe9a4c7c6a92c7479c9d3ae22914bc9_MIT2_017JF09_rules.pdf",
      "content": "2.017 Lab Rules and Safety\nRm. 5-007\nSeptember 9, 2009 (Version 2)\nDr. Harrison H. Chin\n\n9/9/2009\n5-007\nLAB RULES\n1.\nWORK SAFELY IN THE LAB\n2.\nPOWER TOOL USE IS RESTRICTED\n3.\nDO NOT WORK WITH CHEMICALS ALONE\n4.\nCLEAN UP BEFORE YOU LEAVE\n5.\nDO NOT REMOVE ANYTHING FROM THE LAB WITHOUT\nPERMISSION\n6.\nDO NOT GIVE ACCESS CODES TO ANYONE\n7.\nDRESS APPROPRIATELY FOR LAB WORK\n\n9/9/2009\n5-007\nWORK SAFELY IN THE LAB\n- The lab is available to students only when a supervisor (instructor, TA or the lab\nmanager) is present.\n- During scheduled class times, only class members may use the lab, unless granted\npermission by the class instructor.\n- Safe and careful use of hand tools, electronic equipment, and computers is\nunrestricted except as specified by the instructors for safety or other reasons.\n- Learn and follow safety guidelines for each tool and piece of equipment.\n- Be vigilant with electricity. Electrical fires can occur with high currents and high\nresistance. Anything above around 40 Volts is a shock hazard.\n- Use your engineering knowledge, experience and common sense to avoid\ndangerous situations and maintain a safe working environment.\n\n9/9/2009\n5-007\nPOWER TOOL USE IS RESTRICTED\n- In all circumstances, no person is to use power tools alone!\n- Power tools must be kept under lock and key. Regular access to\npower tools is during scheduled class times, and when instructors are\npresent.\n- Students must be trained to use each power tool before using it.\n- Students may not use power tools without an instructor or another\ntrained student present.\n- Students who violate these rules will lose privileges for using power\ntools.\n\n9/9/2009\n5-007\nDO NOT WORK WITH CHEMICALS ALONE\n- In all circumstances, no person uses chemicals alone.\n- Chemicals (including solvents and adhesives) are to be used only\nunder the supervision of an instructor, or with the assistance of\nanother student who has used the same chemicals under instructor\nsupervision.\n\n9/9/2009\n5-007\nCLEAN UP BEFORE YOU LEAVE\n- Many classes, clubs, and students use the lab. Therefore, all benches\nand workspaces must be kept clean and clear for others to use.\n- Lab benches and workspaces must be cleared at the end of class, or\nwhen leaving for more than 1 hour. All common tools must be returned\nwhenever you leave the lab, even for short periods of time.\n- Label items on bench with name, contact info and time of return, or\nthey may not be there when you get back!\n- Project specific parts and equipment can be placed in storage\nlocations designated for each class or student.\n\n9/9/2009\n5-007\nDO NOT REMOVE ANYTHING FROM THE LAB\n- Tools, Equipment, Parts, Supplies, Books, Software and other lab\nproperty are not to leave the lab except for the purpose of class-\nspecific fieldwork, or with specific instructor permission.\n- Items removed from the lab must be logged with the student's name,\nemail, phone number, destination, and return time.\n- The only things you may freely take from the lab are your personal\nbelongings, lab notebook, and disks containing experiment data.\n\n9/9/2009\n5-007\nDO NOT GIVE ACCESS CODES TO ANYONE\n- Do not give the lab door code or access card to anyone.\n- Do not give the lab computer login passwords to anyone.\n\n9/9/2009\n5-007\nDRESS APPROPRIATELY FOR LAB WORK\n- Eye protection must be worn for all tool, chemical and soldering work.\n- Closed-toed shoes must be worn in the lab. and whenever anyone is\nworking with solder, chemicals, tools, power tools, or heavy items.\n- Loose clothing is to be avoided in the lab, and must be secured if\nworn.\n- Long hair must be secured when in the lab.\n\n9/9/2009\n5-007\nSafety in the Lab and in the Field\n- Awake, alert and prepared\n- Do not try to remedy the emergency yourself\n- Notify your instructor and dial 100 to get help\n- It never hurts to be too careful in the lab\n- Bring your concerns and/or questions to the attention of your instructor before you carry-\nout the procedure.\n- If your lab partner or any other student is not acting in a safe, responsible fashion notify\nyour instructor immediately.\n- NEVER WORK ALONE in the lab. Someone should always be nearby, ready to help in the\nevent of an emergency.\n- Familiarize yourself with the layout of the lab\n- Note the location of the doors, the windows, the phone, the first-aid kit and the layout of the\naisles and workbenches.\n- Note also the locations of the nearest fire alarms and security phones and the routes to the\nnearest exits from the building\n\n9/9/2009\n5-007\nElectrical Safety\nhttp://web.mit.edu/environment/ehs/electrical_mechanical.html\n- THE QUANTITY OF CURRENT FLOWING THROUGH THE BODY\n-\nCurrent (amperes) is the killing factor in electrical shock, not the voltage. The voltage only determines how much current will flow through\na given body resistance. In general, the body's resistance to electrical shock is minimal (150,000 to 600,000 Ohms.) Even contact with\nstandard 110-volt circuits can be lethal under certain conditions. Refer to the chart below.\n- THE CURRENT PATH THROUGH THE BODY FROM ENTRY TO EXIT\n-\nHand-to-hand, hand- or head-to-foot, and ear-to-ear current paths are the most dangerous because they may cause severe damage to\nthe heart, lungs and brain. This is why it is important not to wear metal jewelry, not to lean against or use both hands on electrical\nequipment so as not to become part of the circuit.\n- THE LENGTH OF TIME THE BODY IS IN THE CIRCUIT\n-\nThe longer the body is in the circuit, the greater the damage. You may be unable to let go of a 15 to 20 milliampere current. The body\ntemperature may increase possibly damaging tissues, bones, and organs.\n- EFFECTS OF 60 HZ CURRENT PASSING THROUGH THE BODY (CURRENT IN MILLIAMPS)\n-\n1 or less 5\nMay not be felt - Maximum harmless intensity\n-\n1 to 8\nSensation of mild shock, can let go at will\n-\n8 to 15\nPainful shock, muscles contract, may still be able to let go\n-\n15 to 20\nPainful shock, can NOT let go\n-\n20 to 75\nIntense pain, breathing may be paralyzed 100 to 200Ventricular fibrillation; holds unconscious victim to the\ncircuit, could be fatal\n-\n200 or more\nHeart stops, muscles contract intensely & could break bones, severe burns, breathing stops\n\n9/9/2009\n5-007\nElectrical Safety Reminders\nhttp://web.mit.edu/environment/ehs/electrical_mechanical.html\n- Re-route electrical cords or extension cords so they don't run across the aisle/corridor or over\npipes or through doors.\n- Turn off and unplug equipment before removing the protective cover to clear a jam, replace a\npart, etc.\n- Don't use an electrical outlet or switch if the protective cover is ajar, cracked, or missing.\n- Use dry hands and stand on a dry surface when using electrical equipment.\n- Remove any combustible materials, such as paper and wood from the area. Be sure\nflammable liquids and gases are secured away from the area when the appliance is in use.\n- Never put conductive metal objects into energized equipment.\n- Remove cord from the outlet by pulling the plug instead of pulling on the cord.\n- Don't carry equipment by the cord - only by the handle or base.\n- Be sure extension cords are properly rated for the job and used only temporarily.\n- Use extension cords with 3-prong plugs to ensure the equipment is grounded. Never remove\nthe grounding post from a 3-prong plug so you can put it into a 2-prong.\n- Don't overload extension cords, multi-outlet strips or wall outlets.\n- Take seriously any warning signs, barricades or guards posted when electrical equipment is\nbeing repaired, installed, etc.\n\n9/9/2009\n5-007\nDealing with Emergencies\n- Fire: Evacuate the lab and building and pull the fire alarm as you exit. Do not try to\nput out the fire yourself.\n- Electrocution: Dial 100, alert your instructor. Do not attempt to help the person\nyourself. See the detailed discussion of electrical safety published by the MIT Safety\nOffice (http://web.mit.edu/environment/ehs/electrical_mechanical.html).\n- Injury: If a major injury occurs, notify your instructor and dial 100 to get medical help.\n- Chemicals: In general you should wear gloves when gluing or handling toxic\nchemicals.\n- Drowning: Always work cautiously and responsibly when working near water.\n- Security: If you see an unfamiliar person in the lab then immediately bring that\nperson to the attention of your instructor. Don't leave personal belongings in the lab.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 1",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/ab1b6da0d64cb2b7ec84315c7be33c0e_MIT2_017JF09_slides1.pdf",
      "content": "2.017 DESIGN OF ELECTROMECHANICAL\nROBOTIC SYSTEMS\nFall 2009 Lab 1\nSeptember 14, 2009\nDr. Harrison H. Chin\n\n9/14/2009\nOETL\nFormal Labs\n1. Microcontrollers\n-\nIntroduction to microcontrollers\n-\nArduino microcontroller kit\n2. Sensors and Signals\n-\nAnalog / Digital sensors\n-\nData acquisition\n-\nData processing and visualization\n3. GPS and Data Logging\n-\nGPS receiver and shield\n-\nData logging\n-\nVisualization of data\n4. Motor Control\n-\nMotors\n-\nEncoders\n-\nPosition control\n\n9/14/2009\nOETL\nWhy Arduino\n- Popular\n- Open source\n- Low cost\n- Large user community\n- Easy to use development environment\nhttp://todbot.com/\nCourtesy of Tod E. Kurt. Used with permission.\n\n9/14/2009\nOETL\nArduino Hardware\nhttp://todbot.com/\nCourtesy of Tod E. Kurt. Used with permission.\nPhotos by SparkFun Electronics.\nPhotos by SparkFun Electronics.\nPhotos by SparkFun Electronics.\nPhotos by SparkFun Electronics.\nCourtesy of Adafruit Industries. Used with permission.\n\n9/14/2009\nOETL\nArduino Duemilanove Microcontroller\nExpandable by stacking add-on\nmodules for data storage, wireless,\nGPS, audio, motor drive,... etc.\nMicrocontroller\n8-bit ATmega328 (by ATMEL)\nOperating Voltage\n5V\nInput Voltage (recommended)\n7-12V\nInput Voltage (limits)\n6-20V\nDigital I/O Pins\n14 (of which 6 provide PWM output)\nAnalog Input Pins\nDC Current per I/O Pin\n40 mA\nDC Current for 3.3V Pin\n50 mA\nFlash Memory\n32 KB (ATmega328) of which 2 KB used\nby bootloader\nSRAM\n2 KB (ATmega328)\nEEPROM\n1 KB (ATmega328)\nClock Speed\n16 MHz\nhttp://www.arduino.cc/\nCourtesy of Arduino.cc. Used with permission.\n\n9/14/2009\nOETL\nArduino Components\nATmega328\nAnalog Input Pins\nDigital I/O and PWM Output Pins\nReset Button\nUSB\nInterface\nExternal\nPower\nTest LED\n(Pin 13)\nTX/RX LEDs\nPower Pins\nUSB to Serial\nUART Interface\n16 MHz Clock\nIn-Circuit\nSerial Programming\nCourtesy of Arduino.cc. Used with permission.\n\n9/14/2009\nOETL\nArduino Circuit Diagram\nhttp://www.arduino.cc/\nCourtesy of Arduino.cc. Used with permission.\n\n9/14/2009\nOETL\nArduino Programming Environment\nStatus Area\nCode Area\nMenu Buttons\n\"Sketch\"\nOpen source\nSimplified C++ like development\nenvironment that is easy to program\nand to upload the code\nSeveral examples are included that\ndemonstrate various I/O capabilities\nBuilt-in libraries that simplify data\nI/O tasks\nLarge user community\nCourtesy of Arduino.cc. Used with permission.\n\n9/14/2009\nOETL\nResources\n- http://arduino.cc/\n- http://ladyada.net/learn/arduino/\n- http://todbot.com/blog/category/arduino/\n- http://freeduino.org/\n- http://adafruit.com/\n- http://sparkfun.com/\n- Books:\n- \"Arduino Programming Notebook\", Brian W. Evans\n- \"Physical Computing\", Dan O'Sullivan & Tom Igoe\n- \"Making Things Talk\", Tom Igoe\n- \"Hacking Roomba\", Tod E. Kurt\n\n9/14/2009\nOETL\nLabs 1& 2: The Arduio Kit Experiments\n- {CIRC01} Getting Started - (Blinking LED)\n- {CIRC02} 8 LED Fun - (Multiple LEDs)\n- {CIRC03} Spin Motor Spin - (Transistor and Motor)\n- {CIRC04} A Single Servo - (Servos)\n- {CIRC05} 8 More LEDs - (74HC595 Shift Register)\n- {CIRC06} Music - (Piezo Elements)\n- {CIRC07} Button Pressing - (Pushbuttons)\n- {CIRC08} Twisting - (Potentiometers)\n- {CIRC09} Light - (Photo Resistors)\n- {CIRC10} Temperature - (TMP36 Temperature Sensor)\n- {CIRC11} Larger Loads - (Relays)\nLab 1\nLab 2\nLab 1\n\nResistor color code\ntable a nd\n\ne\nxample.\n9/14/2009\nOETL\nResistor Color Code ChartResistor color code table and example.\nFigure by MIT OpenCourseWare.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 1: Introduction to Microcontrollers",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/3ccf965e951cf972e6b9e74ba13114b2_MIT2_017JF09_lab1.pdf",
      "content": "Department of Mechanical Engineering\n2.017 Design of Electromechanical Robotic Systems, Fall 2009\nLab 1: Introduction to Microcontrollers\n1 Overview\nWelcome to 2.017 lab! The purpose of this lab is for you to get familiarized with the lab\nspace and the equipment in the lab. We will then learn about a microcontroller called\nArduino that we will be using in the formal labs. The Arduino microcontrollers are very\npopular because of their ease of use, and they provide a good balance between\ncapabilities and cost. Thanks to their popularity, you can find a wealth of information on\nthe web about these microcontrollers. You may want to check out Arduino's official web\nsite at http://www.arduino.cc/ first to find out more information.\nEach group will be given an experimentation kit (offered by http://www.oomlout.com)\nthat includes all the pieces needed to complete 11 different circuits, along with an\nexperimenter's guide booklet and breadboard layout sheets. You need to keep the kit and\nits contents in a safe place when you are done with the lab. You can also take the kit with\nyou if you want to experiment with the microcontroller outside the lab, but make sure you\ntake good care of it and bring it back for the next lab.\nThe last half hour of the lab is set aside for project discussion. Today you will need to\nformulate your team and decide which project you want to do.\n2 Arduino Experimentation Kit\nThe circuits in the Arduino kit are designed to explore microcontroller basics, covering\nLEDs, transistors, motors, integrated circuits, pushbuttons, variable resistors, photo\nresistors, temperature sensors and relays. They represent common sensors, actuators, and\ncircuitry that are important for building a robotic system. You will also find them helpful\nfor your lab project.\nThe kit includes the following components:\nx\nArduino Prototyping Bundle: Arduino Duemilanove board\n(http://arduino.cc/en/Main/ArduinoBoardDuemilanove), breadboard & acrylic\nholder\nx\n75 Piece Jumper Wire Bundle\nx\nPrinted 29 page Experimenter's Guide\nx\n11+1 Breadboard Layout Sheets\nx\nUSB Cable\nx\nMulti-compartment Plastic Storage Box\nx\nLoads of components\no 5mm Red LEDs (x10)\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\no 5mm Green LEDs (x10)\no 10mm Blue LED (x1)\no Toy DC Motor (x1)\no Mini Servo Motor (x1)\no 8-Bit Shift Register (74HC595) (x1)\no Piezo Element (x1)\no Pushbuttons (x2)\no Potentiometer (10k) (x1)\no Photo Resistor (x1)\no Temperature Sensor (TMP36) (x1)\no Relay (5v DPDT) (x1)\no Transistors (P2N222A) (x2)\no Resistors (560 Ohm x25, 2.2k Ohm x3, 10k Ohm x3)\no Diodes (1N4001) (x2)\nFor this lab you need to complete the fowling 4 circuits:\nx {CIRC01} Getting Started - (Blinking LED)\nx {CIRC02} 8 LED Fun - (Multiple LEDs)\nx {CIRC07} Button Pressing - (Pushbuttons)\nx {CIRC08} Twisting - (Potentiometers)\nWe will finish the rest of the circuits in the next few labs. We encourage you to explore\nthe components and circuits if you finish your circuits early.\n3 Setting Up and Programming Arduino\nThe goals for this microcontroller lab are for you to learn how to:\nx setup the Arduino and the development software on the host computer\nx write simple C code and download to the Arduino\nx interact with simple sensors and actuators\nx acquire data to the host computer through the USB port\nFollow the instructions on Page 3 of the User's Guide to download and install the\nArduino Development software and to setup the USB driver. Using the included USB\ncable, plug your Arduino board into a free USB port on the computer.\nYou will then need to find out the correct USB Serial Port that is connected to the\nArduino. For this, click the \"Start\" menu and select \"Run...\" then type in the command\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\n\"devmgmt.msc\" and click \"OK\". From the \"Device Manager\" window locate the COM\nport number that corresponds to the USB Serial Port, as shown in Figure 1.\nNow run the Arduino software by double-clicking the shortcut on Window's desktop.\nYou should then see the Arduino software development window on the Windows desktop\nas shown in Figure 2.\nBefore we can communicate with the Arduino board we need to configure the software to\npoint to the correct microcontroller board and serial port. This is normally a one-time\nconfiguration so long as you use the same computer and the Arduino board. From the\n\"Tools\" menu, click \"Board\" and select \"Arduino Duemilanove w/ATmega328\", then\nclick \"Serial Port\" and select the correct COM port for the USB Serial Port that we just\nfound.\nNow open the \"Blink\" example code and click the \"Upload to I/O Board\" icon on the tool\nbar. This will compile, build, and download the code to the Arduino board. You should\nsee a blinking LED light on the board once it is done uploading.\nAfter you have successfully configured the board, you should be ready to try out today's\ncircuits. The teaching staff will help you resolve any problems you may encounter.\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nFigure 1. Locating the USB Serial Port on the Device Manager Window\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nFigure 2. Arduino software development environment\n4 Deliverables\nx Show and explain each completed circuit to the teaching staff.\nx Show the teaching staff your lab notebook.\n2.017 Fall 2009\nCourtesy of Arduino.cc. Used with permission.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 2: Sensors and Signals",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/700e1a9160b8f7baa8dca8676a4c9e69_MIT2_017JF09_lab2.pdf",
      "content": "Department of Mechanical Engineering\n2.017 Design of Electromechanical Robotic Systems, Fall 2009\nLab 2: Sensors and Signals\n1 Overview\nThe goal of this lab is to learn how to take sensor measurements and to process the\nacquired data using the Arduino microcontroller board. Specifically you will experiment\nwith analog sensors such as photo resistors and temperature sensors.\nYou will also design and build a simple security system using a digital sensor as a trigger\nfor sounding an alarm and flashing some LED's. Next we will use the Arduino board as\na low cost data acquisition device to digitize a sine wave from a function generator. We\nwill stream the digitized data to the host PC and determine the appropriate sampling\nfrequency for the signal.\nAfter we have completed the above tasks, we will spend an hour assembling the GPS\nlogger shield for Lab 3. We will spend the last half hour of the lab for project discussion.\n2 Part 1: The Arduino Kit Experiments\nFirst each group will complete the following 3 circuits in the Arduino Experimenter's\nGuide:\nx {CIRC09} Light - (Photo Resistors)\nx {CIRC10} Temperature - (TMP36 Temperature Sensor)\nx {CIRC11} Larger Loads - (Relays)\nWe ask you to modify your code so that the input and the output signals can be monitored\nthrough the serial monitor function of the Arduino software. Verify the range and\nresolution of both the ADC (analog to digital converter) and the PWM (pulse width\nmodulation) output. Use a multi-meter to measure the voltages if necessary.\nPut the following line in your setup(){...} to setup a serial communication at 9,600 bps:\nSerial.begin(9600);\nPut the following line in your loop(){...} to print values of the variable val:\nSerial.println(val);\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\n3 Part 2: Arduino Mini-Project\nIn this part of the lab you are asked to design a simple security system using the Arduino\nboard. The objective of this mini-project is to design a system that can trigger an alarm\nwhen a door or a window is opened. In a commercially available home security system\nthe trigger event is detected by using a magnetic switch. Here we will use a Reed switch\nand a permanent magnet to accomplish this.\nThe Reed switch is a digital sensor that is normally open. The switch will close when it\nis exposed to a strong magnetic field. The sensitivity of a reed switch is typically\nquantified by a number called AT (Ampere*Turn) that is related to the magnetic field\nstrength in Tesla or Gauss. Typical applications of reed switches include Reed relays,\nsecurity, limit switching, and telephone hook switch.\nFigure 1 below shows the schematic of the Arduino security system that you will design\nand build.\nFigure 1. Schematic of the Arduino security system\nWrite code to implement the logic and try out different scenarios (such as using a\npushbutton to enable/disable the circuit). You are free to use other sensors in the lab for\nyour system to enhance its capability.\nShow your system to the teaching staff once you are done. Print out your code (with\ncomments) as part of today's deliverables.\n2.017 Fall 2009\nCourtesy of Arduino.cc. Used with permission.\n\nDepartment of Mechanical Engineering\n4 Part 3: Data Acquisition\nIn this part of the lab we will use the Arduino board as a low cost data acquisition device.\nFor this we will send a known sine wave generated by a function generator to one of the\nanalog input pins on the Arduino board and stream the digitized data to the host PC for\nvisualization and analysis. We will also learn how to use an oscilloscope to monitor the\nsine wave signal.\nHere are the steps to accomplish this part of the lab:\nx Grab a PB-503 protoboard (see Figure 2), an oscilloscope, and a BNC cable from\nthe cabinets.\nx Use the scope to monitor the function generator output signal on the protoboard.\nx Use the function generator to generate a 10 Hz sine wave with a peak-to-peak of\n4v centered at 2.5v.\nx Send the signal to one of Arduino's analog input pins.\nCourtesy of Global Specialties. Used with permission.\nFigure 2. PB-503 protoboard\nx Write code to read the signal and send it to the PC via the USB serial port (set it\nto 115,200 bps) at a sampling frequency of 15 Hz, 20 Hz, 100 Hz, and 1,000 Hz,\nrespectively. Put the following line in your loop(){...} to set up the sample rate:\ndelay(10); // delay for 10 milliseconds (i.e., 100 Hz)\nx Use \"RealTerm\" to capture about two second worth of data for each sample rate\n(see Figure 3).\nx Load the data into MATLAB. You need to open the data file with a text editor like\nnotepad to remove the first and the last lines before you load it into MATLAB. Take\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nnote of any discrepancy between the configured data rate in the code and the\nactual sample rate.\nCourtesy of Simon Bridger. Used with permission.\nFigure 3. RealTerm serial capture program\nx Use the scaling factor (V/ADC) you found earlier to convert the digitized values\nto volts.\nx Plot the time history of the data and compute the RMS (root-mean-square) value\nand the first four statistical moments (i.e., mean, variance, skewness, and kurtosis).\nx Plot the spectrum of the data. See Figure 4 for an example plot. When plotting\nthe time history, use stairs instead of plot command in MATLAB to better show the\ndigitization effect.\nFigure 4. Time history and spectrum plots of the captured sine wave\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\n5 Part 4: Assemble The GPS Logger Shield\nWe ask each group to assemble a GPS logger shield in preparation for next week's GPS\nlab.\nx Grab a soldering iron and solder.\nx Power the soldering iron and set the temperature to 4.\nx Follow the on-line instructions on\nhttp://www.ladyada.net/make/gpsshield/solder.html to assemble the board.\nx Also solder the 9v battery holder.\nx We will test and use the board next week.\nSoldering guidelines:\nx Wear safety glasses when soldering.\nx Do not touch a hot iron.\nx Never leave your iron turned on while unattended.\nx Never set the soldering iron down on anything other than an iron stand.\nx Use needle nose pliers, heat resistant gloves, or a third hand tool to hold small\npieces.\nx Practice a few times if you have not done soldering recently.\nx Do not use excess amount of solder.\nx Double check the part you want to solder before you actually do it.\nx When done soldering, tinning the iron is required to protect the tip from oxidation\nthereby dramatically increasing its life.\n6 Part 5: Project Discussion\nx Try out the vehicle.\nx Generate a rough plan (or task list).\nx Identify project needs.\n7 Deliverables\nx Show and explain each completed circuit to the teaching staff.\nx Print out a graph showing the relationship between the input voltages and the\nADC values, and write down the scaling factor (V/ADC) you found.\nx Show your security system to the teaching staff once you are done. Hand in your\ncode (with comments) and a simple description of your system.\nx Plots of time history and spectrum of the captured sine wave data at each sample\nrate. Write down the computed RMS value and the values of the first four\nstatistical moments (i.e., mean, variance, skewness, and kurtosis).\nx Assembled GPS logger shield and battery holder.\nx Show the teaching staff your lab notebook.\n2.017 Fall 2009\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 2: Sensors and Signals",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/ac3910e6ac594f279397c293f547ade4_MIT2_017JF09_slides2.pdf",
      "content": "2.017 DESIGN OF ELECTROMECHANICAL\nROBOTIC SYSTEMS\nFall 2009 Lab 2\nSeptember 21, 2009\nDr. Harrison H. Chin\n\n9/27/2009\nOETL\nLab Open Hours\n- Tuesdays\n2:30 - 5:00 (Jordan)\n- Wednesdays\n1:00 - 2:30 (Harrison)\n- Fridays\n1:00 - 5:00 (Franz)\n\n9/27/2009\nOETL\nFormal Labs\n1. Microcontrollers\n-\nIntroduction to microcontrollers\n-\nArduino microcontroller kit\n2. Sensors and Signals\n-\nAnalog / Digital sensors\n-\nData acquisition\n-\nData processing and visualization\n3. GPS and Data Logging\n-\nGPS receiver and shield\n-\nData logging\n-\nVisualization of data\n4. Motor Control\n-\nMotors\n-\nEncoders\n-\nPosition control\n\n9/27/2009\nOETL\nLab 2: Sensors and Signals\n- Part 1: Do circuits 9, 10, and 11 (1:30 - 2:00)\n- Part 2: Arduino mini-project: security system design (2:00 - 2:30)\n- Part 3: Data acquisition (2:30 - 3:30)\n- Part 4: Assemble the GPS logger shield (3:30 - 4:30)\n- Part 5: Project discussion (4:30 - 5:00)\n\n9/27/2009\nOETL\nPart 1: The Arduio Kit Experiments\n- {CIRC01} Getting Started - (Blinking LED)\n- {CIRC02} 8 LED Fun - (Multiple LEDs)\n- {CIRC03} Spin Motor Spin - (Transistor and Motor)\n- {CIRC04} A Single Servo - (Servos)\n- {CIRC05} 8 More LEDs - (74HC595 Shift Register)\n- {CIRC06} Music - (Piezo Elements)\n- {CIRC07} Button Pressing - (Pushbuttons)\n- {CIRC08} Twisting - (Potentiometers)\n- {CIRC09} Light - (Photo Resistors)\n- {CIRC10} Temperature - (TMP36 Temperature Sensor)\n- {CIRC11} Larger Loads - (Relays)\nLab 2\n\n9/27/2009\nOETL\nPart 2: Arduino Mini-Project\n- Design a security system to sound the alarm with flashing light\nwhen a magnetic switch is tripped:\n- Use a reed switch as the digital sensor\n- Use a buzzer to sound the alarm\n- Use one or more LED's\nReed Switch (MDSR-7 by Hamlin Electronics)\nThe glass envelope is fragile, use extra care when\nbending the leads\nThe glass envelope is fragile, use extra care when\nbending the leads\n\n9/27/2009\nOETL\nSchematic of the System\nBuzzer\nMicrocontroller\nComputer\nReed Switch\nLED's\nCourtesy of Arduino.cc. Used with permission.\n\n9/27/2009\nOETL\nPart 3: Data Acquisition\n- Use the Arduino board as a low cost data acquisition device\n- Use an oscilloscope to monitor the signal\n- Send a known sine wave from a function generator to one of the\nanalog input pins on the Arduino board\n- Stream the digitized data to the host PC via USB serial link for\nvisualization and analysis\n\nProcedures\n- Grab a PB-503 protoboard, an oscilloscope, and a BNC cable from the cabinets\n- Use the scope to monitor the function generator output signal\n- Use the on-board function generator to generate a 10 Hz sine wave with a\npeak-to-peak of 4v centered at 2.5v\n- Send the signal to one of Arduino's analog input pins\n- Write code to read the data and send it to the PC via the USB serial port at 15\nHz, 20 Hz, 100 Hz, and 1000 Hz\n- Use \"RealTerm\" to capture about two second worth of data\n- Load the data to MATLAB\n- Plot the time history of the data and compute the RMS value and the first four\nstatistical moments\n- Plot the spectrum of the data\n9/27/2009\nOETL\n\n9/27/2009\nOETL\nFunction Generator\n- Proto-Board(r) Design Workstation PB-503 by Global Specialties\n(http://www.globalspecialties.com/pb503_spec.html)\nFunction generator\nBNC output\nCourtesy of Global Specialties. Used with permission.\n\n9/27/2009\nOETL\nExample Code\n/*\n* Analog Data Acquisition Test\n*/\nint adcPin = 0; //\nint val = 0; // variable to store the value coming from the sensor\nunsigned long time_1, time_2, delayTime, dt;\nvoid setup() {\npinMode(adcPin, INPUT); // declare the adcPin as an OUTPUT\nSerial.begin(115200); // initialize serial communication with computer\ntime_1 = millis(); // read the initial time stamp\ndelayTime = 10; // delay time in ms\n}\nvoid loop() {\ntime_2 = millis(); // read the current time stamp\ndt = (time_2 - time_1); // compute delta time in seconds\nval = analogRead(adcPin); // read the value from the sensor\nSerial.print(dt, DEC);\nSerial.print(\"\\t\");\nSerial.println(val, DEC); // send it to the computer (as ASCII digits)\ndelay(delayTime); // define sample rate in ms\n}\n\n9/27/2009\nOETL\nSerial Communication\n- Use \"RealTerm\" Serial Capture Program\n(http://realterm.sourceforge.net/) to monitor and capture serial data\n-\nfor plotting\nCourtesy of Simon Bridger. Used with permission.\nImport data to MATLAB\n\n9/27/2009\nOETL\nExample Plots\n- A delay of 1 ms is setup in the code but the actual sampling frequency is 742 Hz.\n- This is due to the code execution time and the time to perform serial communication.\n- On paper the Arduino ADC is capable of achieving 200 kHz sampling frequency.\n>> stairs(time, data);\n\n9/27/2009\nOETL\nCode to Compute DFT\nN = length(x);\n% length of the data x\nfx = fft(x(1:N))/N;\n% perform FFT\nPx = fx.*conj(fx);\n% power density\nPx((N/2+1):N)=[];\n% remove the negative spectrum\nfx = 2*sqrt(Px);\n% one-sided spectrum\nf = SF/N*(0:(N/2-1));\n% form the frequency axis\nSimple MATLAB\n\n9/27/2009\nOETL\nSample Rate = 1,000 Hz\n\n9/27/2009\nOETL\nSample Rate = 200 Hz\n\n9/27/2009\nOETL\nSample Rate = 100 Hz\n\n9/27/2009\nOETL\nSample Rate = 50 Hz\n\n9/27/2009\nOETL\nSample Rate = 20 Hz\n\n9/27/2009\nOETL\nSample Rate = 15 Hz\n\n9/27/2009\nOETL\nRoot-Mean-Square & Statistical Moments\n- The Root-Mean-Square (RMS) value of a signal represents the\noverall energy level of the signal. The RMS value of signal is\ncalculated as:\n- The RMS value can also be computed from the spectrum, as the\nsum of the amplitudes of all frequency components in the\nspectrum, divided by √2.\n- Statistical moments\n- 1st: Mean: location\n- 2nd: Variance (or Standard Deviation): spread\n- 3rd: Skewness: symmetry\n- 4th: Kurtosis: peakedness / flatness\nRMS\nE x\nt\n=\n[\n( )]\n\n9/27/2009\nOETL\nPart 4: Assemble The GPS Logger Shield\n- Grab a soldering iron and solder\n- Power the soldering iron and set the temperature to 4\n- Follow the on-line instructions on\nhttp://www.ladyada.net/make/gpsshield/solder.html to assemble\nthe board\n- Also solder the 9v battery holder\n- We will test and use the board next week\n\n9/27/2009\nOETL\nSoldering Guidelines\n- Wear safety glasses when soldering\n- Do not touch a hot iron\n- Never leave your iron turned on while unattended\n- Never set the soldering iron down on anything other than an iron stand\n- Use needle nose pliers, heat resistant gloves, or a third hand tool to hold small\npieces\n- Practice a few times if you have not done soldering recently\n- Do not use excess amount of solder\n- Double check the part you want to solder before you actually do it\n- When done soldering, tinning the iron is required to protect the tip from\noxidation thereby dramatically increasing its life\n\n9/27/2009\nOETL\nPart 5: Project Discussion\n- Try out the vehicle\n- Generate a rough plan (or task list)\n- Identify project needs\n\n9/27/2009\nOETL\nDeliverables\n- Show and explain each completed circuit to the teaching staff\n- Print out a graph showing the relationship between the input voltages and the\nADC values, and write down the scaling factor (V/ADC) you found\n- Show your security system to the teaching staff once you are done. Hand in\nyour code (with comments) and a simple description of your system\n- Plots of time history and spectrum of the captured sine wave data at each\nsample rate. Write down the computed RMS value and the values of the first\nfour statistical moments (i.e., mean, variance, skewness, and kurtosis)\n- Assembled GPS logger shield and battery holder\n- Show the teaching staff your lab notebook\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 3: GPS and Data Logging",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/3b65623c3b6037de5d92178b89b956c8_MIT2_017JF09_lab3.pdf",
      "content": "Department of Mechanical Engineering\n2.017 Design of Electromechanical Robotic Systems, Fall 2009\nLab 3: GPS and Data Logging\n1 Overview\nThe goal of this lab is to learn how to acquire, log, and process GPS data using the\nArduino microcontroller board and the GPS logger shield. You will also learn how to\ninterpret the GPS string, process the data in MATLAB, and to view the data on a map\nprogram.\nWe will spend the last half hour of the lab for project discussion.\n2 Assemble the GPS Logger Shield\nWe ask each group to assemble a GPS logger shield:\nx Grab a soldering iron and solder.\nx Power the soldering iron and set the temperature dial to 4.\nx Follow the on-line instructions on\nhttp://www.ladyada.net/make/gpsshield/solder.html to assemble the board.\nx Also solder the 9v battery holder.\nx Take your time. Don't rush.\nSoldering guidelines:\nx Wear safety glasses when soldering.\nx Do not touch a hot iron.\nx Never leave your iron turned on while unattended.\nx Never set the soldering iron down on anything other than an iron stand.\nx Use needle nose pliers, heat resistant gloves, or a third hand tool to hold small\npieces.\nx Practice a few times if you have not done soldering recently.\nx Do not use excess amount of solder.\nx Double check the part you want to solder before you actually do it.\nx When done soldering, tinning the iron is required to protect the tip from oxidation\nthereby dramatically increasing its life.\n3 GPS Experiments\n- Download and unzip \"NewSoftSerial_18-02-09.zip\" and \"AF_SDLog v2.zip\" from\nhttp://www.ladyada.net/make/gpsshield/download.html\n- Put the above two unzipped folders in your \"C:\\...\\Arduino\\hardware\\libraries\" folder.\n- Download the file \"lab3files.zip\" from the course website and unzip to your lab3 folder.\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\n- The files are described below:\no \"GPStest_RMC.pde\" - Arduino code by ladyada to test the serial communication with a PC.\no \"GPSLogger_v3.pde\" - Arduino code by ladyada to record GPS data on an SD card.\no \"ReadNMEA.m\" - A MATLAB function to read a recorded NMEA data file to MATLAB workspace.\n- You should also download:\no \"em406a_ug.pdf\" <http://elmicro.com/files/sparkfun/em406a_ug.pdf> - GlobalSat GPS\nEngine Board document.\no \"RouteConverter.exe\" <http://www.routeconverter.de/downloads/en> - A freeware to view\nNMEA data and to convert the data to a Google Earth data file.\n- Decode the following NMEA string:\no $GPRMC,135713.000,A,4221.4955,N,07105.5817,W,4.29,258.17,310809,,*16\no What is the location? (Hint: Enter the coordinate on Google Map to find\nthe location.)\no When was the string acquired?\n\n3.1 Test your GPS device\nx Follow the on-line instructions on http://ladyada.net/make/gpsshield/gpstest.html\nto test your GPS device.\nx You should see a red LED light on the GPS receiver once you power it up.\nx Make sure you are getting valid GPS data on the serial monitor window.\nx Once you are done with the test, you can proceed to test data logging.\nx Follow the on-line instructions on http://ladyada.net/make/gpsshield/logging.html\nto test data logging on the SD card.\nx After several minutes you should see a steady green LED and flashing red LED if\nthe GPS receiver got a lock and data is being logged to the SD card.\nx Power off the GPS (by removing the TX jumper on the upper right hand corner of\nthe GPS shield and wait till the red LED is off) and remove the SD card after a\nfew minutes of data logging. Reinsert the jumper.\nx Copy the data file on the SD card to your computer.\nx Open the file with notepad and see if the file contains GPS data string.\nx If you see valid data strings then you can proceed to the next task, otherwise you\nneed to troubleshoot the problem.\n3.2 Determine the accuracy of the GPS receiver\nx Plug your 9v battery to your GPS device. Bring a spare battery with you just in\ncase.\nx Go outside, pick a location and power up the device.\nx Wait till you get a lock.\nx Stand still to collect about 3 minute worth of data.\nx Press reset.\nx Use the provided MATLAB function to determine the scatter in the data after you are\nback from your field trip.\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\n3.3 Take field data\nx Power up your GPS device.\nx Put it in an OtterBox.\nx Take a walk for about an hour with your GPS device. At a minimum go out to the\nCharles River and walk along the river in either direction and come back. You\nneed to stay outside to ensure good GPS reception.\nx You might want to bring your lab notebook with you to manually log a few data\nsets (time and location) for comparison purposes.\n3.4 Process GPS data\nx Come back to the lab and process your data files with the provided MATLAB\nfunction.\nx Make a plot of your latitude vs. longitude.\nx Write a MATLAB program to compute the distance between two geological\ncoordinates. (Hint: try the haversine formula.)\nx About how far did you go?\nx How fast did you walk?\nx Use \"RouteConverter.exe\" to view and print your data file on the map.\n4 Project Discussion\nx Work on your project proposal.\n5 Deliverables\nx Assembled GPS logger shield and battery holder.\nx Answer all the questions above.\nx Data plots.\nx Estimated GPS data scatter.\nx Show the teaching staff your lab notebook.\n2.017 Fall 2009\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 3: GPS and Data Logging",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/71391f00345485b1e5f78e888ddd089d_MIT2_017JF09_slides3.pdf",
      "content": "2.017 DESIGN OF ELECTROMECHANICAL\nROBOTIC SYSTEMS\nFall 2009 Lab 3: GPS and Data Logging\nSeptember 28, 2009\nDr. Harrison H. Chin\n\n9/28/2009\nOETL\nFormal Labs\n1. Microcontrollers\n-\nIntroduction to microcontrollers\n-\nArduino microcontroller kit\n2. Sensors and Signals\n-\nAnalog / Digital sensors\n-\nData acquisition\n-\nData processing and visualization\n3. GPS and Data Logging\n-\nGPS receiver and shield\n-\nData logging\n-\nVisualization of data\n4. Motor Control\n-\nMotors\n-\nEncoders\n-\nPosition control\n\n9/28/2009\nOETL\nLab 3: GPS and Data Logging\n- Assemble the GPS logger shield (1:30 - 2:30)\n- GPS experiments (2:30 - 4:30)\n- Test your GPS device\n- Determine the accuracy of the GPS receiver\n- Take field data\n- Process GPS data\n- Project discussion (4:30 - 5:00)\n\n9/28/2009\nOETL\nAssemble The GPS Logger Shield\n- Grab a soldering iron and solder\n- Power the soldering iron and set the temperature dial to 4\n- Follow the on-line instructions on the web site:\nhttp://www.ladyada.net/make/gpsshield/solder.html to assemble\nthe board\n- Also solder the 9v battery holder\n- Take your time. Don't rush it.\n\n9/28/2009\nOETL\nSoldering Guidelines\n- Wear safety glasses when soldering\n- Do not touch a hot iron\n- Never leave your iron turned on while unattended\n- Never set the soldering iron down on anything other than an iron stand\n- Use needle nose pliers, heat resistant gloves, or a third hand tool to hold small\npieces\n- Practice a few times if you have not done soldering recently\n- Do not use excess amount of solder\n- Double check the part you want to solder before you actually do it\n- When done soldering, tinning the iron is required to protect the tip from\noxidation thereby dramatically increasing its life\n\n9/28/2009\nOETL\nSome References on GPS\n- References:\n- http://edu-observatory.org/gps/tutorials.html\n- http://www.gpsinformation.org/dale/nmea.htm\n- http://www.cmtinc.com/gpsbook/\n- http://en.wikipedia.org/wiki/NMEA\n- http://vancouver-webpages.com/peter/gpsfaq.txt\n- http://www.trimble.com/gps/index.shtml\n- http://www8.garmin.com/aboutGPS/\n- http://www.nmea.org/\n- ...\n\n9/28/2009\nOETL\nGlobal Positioning System (GPS)\n- The Global Positioning System (GPS) is a worldwide radio-\nnavigation system formed from a constellation of 24\nsatellites and their ground stations. The satellites were\nplaced into orbit by the U.S. Department of Defense. The\n\ntotal cost was around $12B.\n- GPS was originally intended for military applications, but\nin the 1980s, the U.S. Government made the system\navailable for civilian use. GPS works in any weather\nconditions, anywhere in the world, 24 hours a day.\n- GPS uses these satellites as reference points to calculate\npositions accurate to a few meters. In fact, with advanced\nforms of GPS you can make measurements to better than\na centimeter.\nImage by NOAA.\n\n9/28/2009\nOETL\nGPS Background\n- GPS satellites circle the earth twice a day in a very precise orbit and transmit\nsignal information to earth. GPS receivers take this information and use\ntriangulation to calculate the user's exact location. Essentially, the GPS\nreceiver compares the time a signal was transmitted by a satellite with the time\nit was received. The time difference tells the GPS receiver how far away the\nsatellite is. Now, with distance measurements from a few more satellites, the\nreceiver can determine the user's position and display it on the unit's\nelectronic map.\n- A GPS receiver must be locked on to the signal of at least three satellites to\ncalculate a 2D position (latitude and longitude) and track movement. With four\nor more satellites in view, the receiver can determine the user's 3D position\n(latitude, longitude and altitude). Once the user's position has been\ndetermined, the GPS unit can calculate other information, such as speed,\nbearing, track, trip distance, distance to destination, sunrise and sunset time\nand more.\n\n9/28/2009\nOETL\nGPS Satellites\n- NAVSTAR (DoD name for GPS)\n- Orbiting the earth about 12,000 miles above us.\n- Making two complete orbits in less than 24 hours with a speed of roughly 7,000 miles\nan hour.\n- Powered by solar energy.\n- On-board backup batteries to keep them running in the event of a solar eclipse, when\nthere's no solar power.\n- Small rocket boosters on each satellite keep them flying in the correct path.\n- The first GPS satellite was launched in 1978.\n- A full constellation of 24 satellites was achieved in 1994.\n- Each satellite is built to last about 10 years. Replacements are constantly being built\nand launched into orbit.\n- A GPS satellite weighs approximately 2,000 pounds and is about 17 feet across with\nthe solar panels extended.\n- Transmitter power is only 50 watts or less.\n\n9/28/2009\nOETL\nGPS Data (NMEA 0183 Standard)\n- The NMEA 0183 Interface Standard defines electrical signal\nrequirements, data transmission protocol and time, and specific\nsentence formats for a 4800-baud serial data bus.\n- Each bus may have only one talker but many listeners. This\nstandard is intended to support one-way serial data transmission\nfrom a single talker to one or more listeners.\n- This data is in printable ASCII form and may include information\nsuch as position, speed, depth, frequency allocation, etc.\n\n9/28/2009\nOETL\nNMEA Standard Sentences\nMany sentences in the NMEA standard for all kinds of devices that may be used in different\nenvironment. Some of the ones that have applicability to GPS receivers are listed below: (all\nmessages start with GP.)\n- AAM - Waypoint Arrival Alarm\n- ALM - Almanac data\n- APA - Auto Pilot A sentence\n- APB - Auto Pilot B sentence\n- BOD - Bearing Origin to Destination\n- BWC - Bearing using Great Circle route\n- DTM - Datum being used\n- GGA - Fix information\n- GLL - Lat/Lon data\n- GRS - GPS Range Residuals\n- GSA - Overall Satellite data\n- GST - GPS Pseudorange Noise Statistics\n- GSV - Detailed Satellite data\n- MSK - send control for a beacon receiver\n- MSS - Beacon receiver status information\n- RMA - recommended Loran data\n- RMB - recommended navigation data for gps\n- RMC - recommended minimum data for gps\n- RTE - route message\n- TRF - Transit Fix Data\n- STN - Multiple Data ID\n- VBW - dual Ground / Water Spped\n- VTG - Vector track an Speed over the Ground\n- WCV - Waypoint closure velocity (Velocity Made\nGood)\n- WPL - Waypoint Location information\n- XTC - cross track error\n- XTE - measured cross track error\n- ZTG - Zulu (UTC) time and time to go (to destination)\n- ZDA - Date and Time\n$GPRMC,135713.000,A,4221.4955,N,07105.5817,W,4.29,258.17,310809,,*16\n\n9/28/2009\nOETL\nRMC GPS Sentence\nText removed due to copyright restrictions.\nPlease see Table B-9 in GlobalSat Technology Corporation.\n\"GPS Engine Board EM-406a.\"\n\n9/28/2009\nOETL\nConversion\n- UTC (Coordinated Universal Time) to local time\n- Lat, Long, Alt\n- Kts to m/s\n\n9/28/2009\nOETL\nGPS Logger Shield & GPS Receiver\n- EM-406a GPS engine board by GlobalSat\noved due to copyright restrictions.\nee pages 2-3 in GlobalSat Technology Corporation.\n\"GPS Engine Board EM-406a.\"\nPhoto by ladyada on Flickr.\nText rem\nPlease s\n\n9/28/2009\nOETL\nGeographic Coordinate System\nLatitude (N/S, ±90°)\nLongitude (E/W, ±180°)\nMap by CIA World Factbook.\n\n9/28/2009\nOETL\nGeocoding w/ GPSVisualizer\nYou can type in a coordinate in Google Map or Yahoo Map and display its location\nPlease see GPS Visualizer's Geocode\n\n9/28/2009\nOETL\nCalculate Distance Between Two Geographic\nCoordinates\n∆lat = lat2-lat1\n∆long = long2-long1\na = sin2(∆lat/2) + cos(lat1)cos(lat2)sin2(∆long/2)\nc = 2atan2(√a, √(1-a))\nd = Rc\nWhere R = Earth's radius (mean radius = 6,371km)\nHaversine formula:\nPut u at the north pole to get this formula\n)\nsin(\nhaver\n)\nsin(\n)\nsin(\n)\nsin(\nhaver\n)\nsin(\nhaver\nC\nb\na\nb\na\nc\n+\n-\n=\n⎟⎠\n⎞\n⎜⎝\n⎛\n=\nsin\n)\nsin(\nhaver\n2 θ\nθ\n... or use MATLAB's distancefunction to find\nthe arc length in degrees...\n(1 arc deg ≈69.047 miles ≈111.12 km)\n\n9/28/2009\nOETL\nRouteConverter Software\nhttp://www.routeconverter.de/\nCourtesy of RouteConverter. Used with permission.\n\n9/28/2009\nOETL\nProject Discussion\n- Work on the project proposal\n\n9/28/2009\nOETL\nDeliverables\n- Assembled GPS logger shield and battery holder\n- Answer all the questions in the Lab 3 handout\n- Data plots\n- Estimated GPS data scatter\n- Show the teaching staff your lab notebook\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Lab 4: Motor Control",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/6a08e813874b2ea03bf9e4f4e12647b5_MIT2_017JF09_lab4.pdf",
      "content": "Department of Mechanical Engineering\n2.017 Design of Electromechanical Robotic Systems, Fall 2009\nLab 4: Motor Control\n1 Overview\nSo far we have learnt how to use the Arduino to acquire various types of signals from\nsensors such as the GPS receivers, temperature sensors, potentiometers, photo resistors,\npush buttons, Reed switches, etc. We will now turn our attention to actuator control,\nwhich is a critical part of an electromechanical robotic system. With both sensing and\nactuator control capabilities, the robotic system can actively interact with the\nenvironment that it is in.\nThe goal of this lab is to learn how to control a DC motor using the Arduino\nmicrocontroller board and the Motor Shield. We will use the reading from a rotary\nencoder attached to the back of the motor as our feedback signal. You will then learn\nhow to interpret the encoder signal, design a controller for the motor, and drive the motor\nto a set-point or to follow a pre-defined profile. After that we will experiment with an\nRC servo by commanding the servo to go to a set position.\nWe will spend the last half hour of the lab for project discussion.\n2 DC Motor Experiments\n2.017 Fall 2009\nOne Maxon F2140.937 DC brushed servo motor, one Arduino motor shield with encoder interface\ncircuit, and one external power supply will be given to each group. Connect up the above\ncomponents to your Arduino board and PC according to the photo shown in Figure 1.\n\n- Download the file \"lab4files.zip\" from the course site and unzip to your lab4 folder.\n- Unzip \"ServoTimer1-fixedv13.zip\" and \"AFMotor_18-2-09.zip\" (see also:\nhttp://www.ladyada.net/make/mshield/download.html)\n- Put the above two unzipped folders in your \"C:\\...\\Arduino\\hardware\\libraries\" folder.\n- The other files are described below:\no \"DC_Motors_Encoders.pdf\" - Reference document on DC motors, PWM, and encoders.\no \"MotorControlEncoderTemplate3.pde\" - Arduino template code for DC motor control.\no \"Servo1.pde\" - Arduino template code for servo motor control.\n- You should also download:\no \"94_pc6_datasheet_0.pdf\" - Decoder circuit board document.\no \"LS7183_LS7184.pdf\" - Decoder IC chip document.\no Maxon DC motor, encoder and gearhead data sheets.\n- Read the above documents.\n\nDepartment of Mechanical Engineering\nFigure 1. DC motor control lab setup.\n2.1 Processing Encoder Signals\nThe encoder signals are processed by the decoder circuit provided with your motor. It\nhelps count the quadrature outputs and give a decoded signal to the Arduino. We've\nchosen this setup because the Arduino has only two interrupt pins available, one of which\nis used by the motor shield. This makes it difficult to keep an accurate record of the two\nchannels of the quadrature input.\nThe dedicated decoder chip translates the quadrature outputs into a single clock channel\nand a direction channel (see Figure 2). The clock channel changing status indicates that a\nsingle \"tick\" for the encoder in the direction indicated by the direction output. Now the\nArduino needs only interrupt on one signal, read the direction on a standard digital pin\ninstead of an interrupt, and update its count accordingly.\nImage removed due to copyright restrictions.\nPlease see p. 4 in US Digital, \"PC6 Encoder to Counter Interface Board.\"\nFigure 2. PC6-C-X decoder circuit timing diagram. The circuit we use is set up to be\nthe X4 mode.\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nx Use an Oscilloscope to measure the raw encoder signal from either encoder\nchannel.\nx Measure the clock channel from the decoder circuit.\nx How many encoder counts per revolution of the motor shaft? Use the provided\nspec sheets to find the answer.\nFor the purposes of this lab, you can simply use the \"encoder0Pos\" variable to give you\nthe current encoder position and allow the provided interrupt function to keep it updated.\nx Capture encoder data by turning the motor by hand:\no Upload the \"MotorControlEncoderTemplate3.pde\" sketch to Arduino.\no The Arduino program continually prints time and the current encoder\nposition. You can capture this data with the \"RealTerm\" software.\no Run \"RealTerm\". In the Display tab, set \"Display as\" to the second\n\"Ascii\", then under the Port tab, set the correct COM Port and the baud\nrate to match up with the one declared in the Arduino program, then click\nthe change button with the green check mark. You should now be able to\nsee reasonable data coming from the Arduino.\no You can also send commands to the Arduino if you have set the Arduino\nprogram up to receive serial commands.\no To capture data, go to the capture tab. Specify the output location, then\nbegin capturing data of interest by clicking \"Start Overwrite\". When\nfinished, click \"Stop Capture\". Now you have a text file you can import\ninto MATLAB and graph. Be sure that the first and last lines are complete to\navoid uploading partial data. Delete these lines if necessary.\nx Using the captured data, plot encoder position vs. time. Also write code to\ncalculate the derivative of the position, and plot velocity vs. time.\nx Find the calibration factor between angles in radians and encoder counts by\nmanually turning the motor. Is the number the same as the one you found based\non the information on the spec sheets?\n2.2 Implementing Closed-Loop Position Control\nNow implement your position controller on the Arduino.\nx The command to drive the DC motor in the Arduino code is called \"setSpeed()\"\nwhich can be set between 0 and 255, where 0 corresponds to no voltage, 255\ncorresponds to full voltage, and the duty cycle (the percent of the time the voltage\nis set to high) varies linearly in between.\nx Start with a proportional controller and add a derivative term to make a PD\ncontroller. See how well your controller works by manually changing the set\npoint. You can also try using the provided function generators which give you a\nslow square wave and a sine wave.\nx Capture your controller's performance and make a plot in MATLAB once you've\nfound effective gains. A plot of the root locus has been provided in Figure 3 to\nhelp you think about your controller design.\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nFigure 3. A root locus plot of an open-loop PD controlled motor. Your task is to\nadjust the controller gains until the response of the closed-loop system is reasonably\nfast and well damped.\n2.3 Higher Performance from the Control System\nThose of you who have taken a more advanced class in control systems may wonder why\nwe are using PD control, rather than PID or Lead-Lag/Lag-Lead control. We can, in fact,\nuse PID control, but there are a few real-world considerations that need to be addressed.\nFor extra credit, try to make a PID controller that follows the square and the sine waves\nprovided in the code. Remember that a PID compensator is a filter of the following form:\nKi\nKds 2 K ps Ki\nGc (s) K p\nKds\ns\ns\nIt has two zeros and one pole. For the moment, we will not think about these as separate\ngains, but as zero locations:\nG (s) K (s z1)(s z2)\nc\no\ns\nWe will assume that the plant is just two poles at the origin, so the forward transfer\nfunction of the system takes the form:\nG(s) Gc (s)Gp (s) Ko\n(s z1)(\ns z2)\ns\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nUse the root locus tool (i.e., sisotool) in MATLAB to pick values of z1 and z2 that produce a\nreasonable root locus for this open-loop transfer function. The performance of the\ncontroller will be dominated by the location of the closed-loop pole/pole pair closest to\nthe imaginary axis. Once you have chosen these values, use the equations above to solve\nfor the gain values.\nOnce you have successfully implemented this PID controller and have it tracking the\nreference sine wave, connect it up to a square wave reference. You will notice that the\ncontroller exhibits a huge amount of overshoot. This phenomenon is not predicted by the\nlinear model of our system. It is due to the fact that the motor response is rate limited.\nWhen a reference is given that the motor cannot follow, the integral error will increase\nvery quickly. Once you are back on the reference, the integral error effectively acts as a\ndisturbance, causing overshoot. Control designers refer to this problem as integrator\nwind-up. It can be solved either by pre-filtering the reference signal by rate limiting and\nsmoothing so that the controller only receives inputs that it can follow, or by placing\nsaturation limits on the integrator so that it can't wind up too far. Experiment with\nvarious ways to reduce wind-up. You may want to try setting saturation limits on the\nintegrator first.\nPrint out one graph each showing the closed-loop response of the PID controlled system\nwith the square and the sine wave reference input respectively. Is it better than the PD\ncontrol and why?\n2.4 Velocity Control\nSome applications require motor speed control instead of controlling its position. If you\nhave time, design a simple PI controller to control the speed of the motor by modifying\nthe template code.\n3 Controlling a Servo\nRC hobby servos are the easiest way to set up for motor control. They have a 3-pin 0.1\"\nfemale header connection with +5V, ground and signal inputs. The motor shield simply\nbrings out the 16bit PWM output lines to 2 3-pin headers so that it is easy to plug in a\nservo and start sending command signals to it.\nTypically an RC servo can be positioned from 0 to 180 degrees. Inside the servo there is a\nDC motor connected to a potentiometer. PWM signals sent to the servo are translated\ninto position commands by the feedback circuitry inside the servo. When the servo is\ncommanded to rotate, the motor is powered until the potentiometer reaches the value\ncorresponding to the commanded position. RC servos are often used in small-scale\nrobotics applications due to their affordability, reliability, and simplicity of control by\nmicroprocessors.\nThe servo has three wires: ground (usually black), power (red) and control (white).\nHowever the servo we have in the kit has a different color scheme which is wired as\nbrown (negative), red (positive) and orange (signal).\n2.017 Fall 2009\n\nDepartment of Mechanical Engineering\nThe servo will move based on the pulses sent over the control wire, which set the angle of\nthe actuator arm. The servo expects a pulse every 20 ms in order to gain correct\ninformation about the angle. The width of the servo pulse dictates the range of the\nservo's angular motion. The PWM pins of the servo connectors on the Arduino motor\nshield are setup to provide the required duty cycle to drive a typical servo.\nx Attach one of the shaft attachments to the servo.\nx Connect the servo to \"SER1\" male connectors on the motor shield. Make sure the\nbrown wire is connected to ground pin.\nx Open and upload the \"Servo1\" sketch.\nx Open the \"Serial Monitor\" and try sending different shaft angles to the servo.\nx Modify the code so that you can use a potentiometer to control the shaft angle.\n4 Project Discussion\nx Proposal feedback.\n5 Deliverables\nx Answer all the questions above.\nx Plots.\nx Show the teaching staff your lab notebook.\n2.017 Fall 2009\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Applying Optimization: Some Samples",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/a1ea4a4b16003ee9f65c83263e182151_MIT2_017JF09_optimization.pdf",
      "content": "Massachusetts Institute of Technology Subject 2.017\nApplying Optimization:\nSome Samples\nReference\nLinear problems example: A.D. Belegundu and T.R. Chandrupatla (1999).\nOptimization Concepts and Applications in Engineering. Upper Saddle River,\nNew Jersey.\n\nMassachusetts Institute of Technology Subject 2.017\n1. Linear Optimization\n- Idea: many problems of optimization are linear, but of\nhigh dimension.\n- Parameter space is [x1 ,x2 ,x3 ,..., xn ] - this is what we are\ntrying to find the best values of\n- Best parameter set minimizes or maximizes a linear\ncost, e.g.,\nJ = 14x1 + 9x3 + 42x4\n- but the parameter space is confined by some equalities\nE, e.g.,\nx1 + 3x2 + 7x4 = 16,\n- and some inequalities I, e.g.,\n3x1 - 4x3 + x7 <= 30.\n- A total of I+E constraint equations for n parameters.\nObviously, I+E >= n for a solution to exist\n\nMassachusetts Institute of Technology Subject 2.017\nExample of Fuel Selection\nThe problem statement:\n- Natural gas has 0.12% sulfur, costs $55/(kg/s), and gives 61MJ/kg heat energy\n- Coal has 2.80% sulfur, costs $28/(kg/s), and gives 38MJ/kg heat energy\n- We have a steady 4MW load requirement.\n- The sulfur emissions by weight have to be equal to or less than 2.5%.\n- Minimize the money cost.\nIn mathematical form:\nx1 = kg of natural gas to burn per second\nx2 = kg of coal to burn per second\nJ = 55x1 + 28x2\n(cost)\n61x1 + 38x2 = 4\n(E1 )\n0.12x1 + 2.8x2 <= 2.5(x1 + x2 )\n\nx2 <= 8x1\n(I3 )\nDecreasing\nJ\nI3\nI1\nI2\nx1\nx2\nE1\nOptimum: x1 = 0.011, x2 = 0.087 kg/s\nA case where n = I+E ; unique solution\n\nMassachusetts Institute of Technology Subject 2.017\nMore complex cases: the 2D case tells all!\nx1\nx2\nI1\nI2\nI3\nI4\nI5\nI6\nE1\nincreasing J\nSolution always falls within\nadmissible regions defined\nby inequalities, AND along\nequality lines\nOR\nSolution always falls on a\nvertex of n constraint\nequations, either I or E.\nLeads to a simple systematic\nprocedure for small\n(e.g., n < 5, I+E < 10)\nproblems\n\nMassachusetts Institute of Technology Subject 2.017\nIdea: Calculate J at all existent vertices, and pick the best one.\nHow many vertices are there to consider?\nN = \"Combinations of n items from a collection of I+E items\"\nN = (I+E)! / n! (I+E-n)!\nConsider 3-space (n=3);\nIf I+E = 4, N = 4 \"TETRAHEDRON\"\nIf I+E = 6, N = 20 \"CUBE\" Not all 20 vertices may exist!\nConsider 5-space (n=5);\nIf I+E = 10, N ~ 250 (still quite reasonable for calculations)\n1. Step through all combinations of n equations from the I+E\navailable, solving an n-dimensional linear problem for each;\nAx = b, when A is non-singular. If A is singular, no vertex exists\nfor the set.\n2. For a calculated vertex location, check that it meets all of the\nother I+E-n constraints. If it does not, then throw it out.\n3. Evaluate J at all the admissible vertices.\n4. Pick the best one!\nMore general case is Linear Programming;\nvery powerful and specialized tools are available!\n\nMassachusetts Institute of Technology Subject 2.017\n2. Min-Max Optimization\n- Difficulties with the linear and\nnonlinear continuous problems\n- Multiple objectives or costs\n- The real world sometimes offers only\nfinite choices, with no clear \"best\ncandidate.\" Tradeoffs must be made\nsomehow!\n- Sensitivity of solutions depending on\npoorly defined weights or costs\n- Min-max: Select the candidate with\nthe smallest maximum deviation from\nthe optimum value, obtained over all\ncandidates.\nJ1\nJ2\n??\nE\nI\nI\nx1\nx2\n??\n\nMassachusetts Institute of Technology Subject 2.017\nModeling\nExperiments\nWriting\nAlice\nBarbara\nCameron\n0/5\n6/8\n1/2\n5/5\n0/8\n2/2\n5/5\n8/8\n0/2\nFor each attribute and candidate, compute peak value and range, e.g.,\nAlice has smallest\nnormalized\nmaximum deviation\nfrom peak values\n(6/8=0.75)\nRange\nPeak\nCalculate deviation from peak value, normalize by range for given attribute, e.g.,\nAlice wins by ranking first, second, and second; is it fair?\nWe're going to hire a teacher... three were interviewed and scored...\n\nMassachusetts Institute of Technology Subject 2.017\n3. Dynamic Programming\n- Optimal sequences or trajectories, e.g.,\n- minimize a scalar cost J(x(t),u(t),t), subject to\ndx(t)/dt = f(x(t),u(t),t).\n- minimize the driving distance through the American\nhighway system from Boston to Los Angeles\n- minimize travel time of a packet on the internet\n- etc...\n- Dynamic programming is at the heart of nearly all\nmodern path optimization tools\n- Key ingredient: Suppose the path from A to C is optimal,\nand B is an intermediate point. Then the path from B to\nC is optimal also.\nSeems trivial?\nA\nC\nB\n\nMassachusetts Institute of Technology Subject 2.017\n1. Evaluate optima at Stage 1:\n[A,End]opt = min(3 + 8 , 2 + 7 , 6 + 5) = 9, path [A,B,End]\n[B,End]opt = min(5 + 8 , 5 + 7 , 4 + 5) = 9, path [B,C,End]\n2. Evaluate optima from start:\n[Start,End]opt = min(5 + 9 , 4 + 9) = 13, path [Start,B,C,End]\nInherited values from prior optimization\nTotal cost is 8 additions\nPower of Dynamic Programming grows dramatically with number of\nstages, and number of nodes per stage.\nA\nA\nB\nC\nB\nNumerical\nExample\nStart\nEnd\nBrute force:\n12 additions\n\nMassachusetts Institute of Technology Subject 2.017\nS1 :\nN1\nS2 :\nN2\nS3 :\nN3\nConsider three decision stages, with N1 , N2 , and N3 choices respectively.\nTotal paths possible is N1 x N2 x N3 . To evaluate them all costs 3N1 N2 N3 additions.\nDynamic programming solution:\nAt stage 2, evaluate the best solution from each node in S2 through S3 to the end:\nN2 N3 additions. Store the best path from each node of S2 .\nAt stage 1, evaluate the best solution from each node in S1 through S2 to the end;\nN1 N2 additions. Store the best path from each node of S1 .\nAt start, evaluate best solution from start through N1 to the end;\nN1 additions. Pick the best path!\nTotal burden is N2 (N1 +N3 )+N1 additions vs. 3 N1 N2 N3 additions.\nGENERAL CASE: N2(S-1)+N\nvs. SNS\nfor S stages of N nodes each\n\nMassachusetts Institute of Technology Subject 2.017\n4. Lagrange Multipliers\nLet x be a n-dimensional vector - the parameter space\nLet f(x) be a vector of m functions that are functions of x - constraints\nSOLVE: min C(x) subject to constraints f(x) = 0\nWithout the constraints, we can solve the n equations C/xi = 0,\nbecause at the optimum point x*, C(x*) is flat.\nBut in the presence of the constraints, we know only that\nC(x*) = 0 and fk (x*) = 0 or:\ni [C/xi ] dxi = 0 and i [fk /xi ] xi = 0 (m+1 equations)\n\nMassachusetts Institute of Technology Subject 2.017\nLagrange Multipliers cont.\nUse m Lagrange multipliers\n\nto augment the cost function:\nC'(x) = C(x) + k k fk (x)\nNOTE\n\nCAN TAKE ARBITRARY VALUES BY DESIGN\nC' = C + k k fk = i [C/xi + k k fk /xi ] xi\nAt optimum x*, we have C' = 0; Each [ ] has to be zero, so\nwe get n equations: C/xi + k k fk /xi = 0, i = 1,...,n\nWe already had m equations: fk (x*) = 0, k = 1, ...,m\nSolve the (m+n) equations for the n elements of x* and\nthe m values of\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Basic Physics of Underwater Acoustics",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/9647b0bb5dbe2f570cb14fe0a4c58d0a_MIT2_017JF09_acoustics.pdf",
      "content": "Massachusetts Institute of Technology 2.017\nBasic Physics of Underwater\nAcoustics\nReference used in this lecture: Lurton, X. 2002. An introduction to\nunderwater acoustics. New York: Springer.\n\nMassachusetts Institute of Technology 2.017\nDefinitions\np: pressure, measured relative to hydrostatic, Pa\n: density, measured relative to hydrostatic, kg/m3\nE: bulk modulus of the fluid, Pa, p = E [\n\n[u,v,w]: deflections in [x,y,z]-directions, relative to\nthe hydrostatic condition, m\nThen in one\ndimension (pipe)\np = E [ -u / x ]\nx\nu\nu + u\n+x\nundeformed\ndeformed\n\nMassachusetts Institute of Technology 2.017\nOne-dimensional Case cont.\nNewton's Law:\np = -\n\nutt x\nOR\npx = -\n\nutt\nConstitutive Law:\np = - E u / x\nOR\np = - E ux\nx\np\np + p\nu\ndiff wrt x\ndiff wrt tt\npxx = [ / E ] ptt\na wave equation!\n\nMassachusetts Institute of Technology 2.017\nLet p(x,t) = Po sin(t - kx)\nInsert this in the wave equation:\n- Po k2 sin( ) = - [\n\n/ E ] Po 2 sin( )\n[\n\n/ k ]2 = E /\nWave speed c k = [ E\nThis is sound speed in fluid, independent of pressure, or\nfrequency.\nIn water:\n\n~ 1000 kg/m3, E ~ 2.3e9 N/m2 c ~ 1500 m/s\nWavelength k = cc/f1kHz : 1.5m in water\ntime\nspace\n\nMassachusetts Institute of Technology 2.017\nIn Three Dimensions: A CUBE\nNewton's Law:\npx = -\n\nutt pxx = -\n\nuttx\npy = -\n\nvtt pyy = -\n\nvtty\npz = -\n\nwtt pzz = -\n\nwttz\nConstitutive Law:\n- E ux = p / 3 - E uttx = ptt / 3\n- E vy = p / 3 - E vtty = ptt / 3\n- E wz = p / 3 - E wttz = ptt / 3\nx\ny\nz\npxx +pyy +pzz = ptt / c2\nor\n∇2p = ptt / c2\nLead to Helmholtz Equation:\nAll directions deform uniformly\ndeformed\nundeformed\nwhere ∇2 is the LaPlacian\noperator\n\nMassachusetts Institute of Technology 2.017\nParticle Velocity\nConsider one dimension again (Newton's Law):\npx = -\n\nutt\n\npx = -\n\n(ut )t\nIf p(x,t) = Po sin(t - kx) and ut (x,t) = Uto sin(t - kx)\n-kPo cos( ) = -\n\nUto cos( )\n\nUto = Po /\n\nc\nNote velocity is in phase with pressure!\nc]: characteristic impedance;\nwater: c ~ 1.5e6 Rayleighs \"hard\"\nair: c ~ 500 Rayleighs \"soft\"\nIn three dimensions:\n∇p = -\n\nVt where\n∇p = px i + py j + pz k\nand\nV = ut i + vt j + wt k\n\nMassachusetts Institute of Technology 2.017\nNote equivalence of the following:\n\n= c / f and / k = c\nThere is no dispersion relation here; this is the only\nrelationship between\n\nand k!\nConsider Average Power through a 1D surface:\nP(x) = [ 1 / T ] ∫ T p(x) ut (x) d\n\n[ 1 / T ] ∫ T Po Uto sin2(\n\n- kx ) d\n\nPo Uto\n\nPo\n\nc = Uto\n2 c / 2\n\nAcoustic Intensity in W/m2\n\nIf impedance c is high, then it takes little power to\ncreate a given pressure level; but it takes a lot of power\nto create a given velocity level\nPower per unit area is\npressure times velocity\n\nMassachusetts Institute of Technology 2.017\nSpreading in Three-Space\nAt time t1 , perturbation is at radius r1 ; at time t2 , radius r2\nP(r1 ) = Po\n2(r1 ) / 2 c\nP(r2 ) = Po\n2(r2 ) / 2\n\nc\nAssuming no losses in water; then\nP(r2 ) = P(r1 ) r1\n2 / r2\n2 = Po\n2 (r1 ) r1\n2 / 2\n\nc r2\nand\nPo (r2 ) = Po (r1 ) r1 / r2\nLet r1 = 1 meter (standard!)\nP(r) = Po\n2(1m) / 2\n\nc r2\nPo (r) = Po (1m) / r\nUto (r) = Po (1m) /\n\nc r\nr\nr2\nr1\nPressure level and particle velocity\ndecrease linearly with range\n\nMassachusetts Institute of Technology 2.017\nDecibels (dB)\n10 * log10 (ratio of two positive scalars):\nExample:\nx1 = 31.6 ; x2 = 1 1.5 orders of magnitude difference\n10*log10 (x1 /x2 ) = 15dB\n10*log10 (x2 /x1 ) = -15dB\nRECALL log(x1\n2/x2\n2) = log(x1 /x2 ) + log(x1 /x2 ) = 2 log(x1 /x2 )\nIn acoustics, acoustic intensity (power) is referenced to 1 W/m2 ;\npressure is referenced to 1 Pa\n10*log10 [ P(r) / 1 W/m2 ] = 10*log10 [ [ Po\n2(r) / 2\n\nc] / 1 W/m2 ]\n= 20*log10 [ Po (r) ] - 10*log10 (2c)\n= 20*log10 [ Po (r) / 1Pa ] - 120 - 65\n\nMassachusetts Institute of Technology 2.017\nSpreading Losses with Range\nPressure level in dB at range r is\n20 log10 [ Po (r) / 1Pa ] - 185 =\n20 log10 [ Po (1m) / r / 1Pa ] - 185 =\n20 log10 [ Po (1m) / 1Pa ] - 20 log10 [r] -185\nExample: At 100m range, we have lost\n40dB or four orders of magnitude in sound intensity\n40dB or two orders of magnitude in pressure\n(and particle velocity)\n\nMassachusetts Institute of Technology 2.017\nAttenuation Losses with Range\n0.1\n0.001\n0.01\n0.1\nkHz\n, in dB/km (pressure)\nAt 100 Hz, ~1dB/1000km:\nOK for thousands of km,\nocean-scale seismics and\ncommunications\nAt 10kHz, ~1dB/km:\nOK for ~1-10km,\nlong-baseline acoustics\nAt 1MHz, 3dB/10m:\nOK for ~10-100m,\nimaging sonars, Doppler\nvelocity loggers\nLinear approximation!\nFrancois & Garrison (1982) model\nTL = 20log10 r +\n\nr\nAcoustic power does have losses with transmission distance - primarily\nrelated to relaxation of boric acid and magnesium sulfate molecules in\nseawater. Also bubbles, etc.\n(pressure\ntransmission loss)\n\nMassachusetts Institute of Technology 2.017\nThe Piezo-Electric Actuator\nstrain = constant X electric field\n= d X E\nor\nt / t = d X ( V / t )\nwhere d = 40-750 x 10-12 m / V\nDrive at 100V, we get only 4-75 nm thickness change!\nt\nt\nE\nV+\nSeries connection\namplifies\ndisplacement\n**still capable of MHz performance**\nV-\n\nMassachusetts Institute of Technology 2.017\nThe Piezo-Electric Sensor\nelectric field = constant X stress\nE = g X\n\nor\nV = t g\nwhere g = 15-30 x 10-3 Vm/N\nIdeal Actuator: Assume the water does not\nimpede the driven motion of the material\nIdeal Sensor: Assume the sensor does not deform\nin response to the water pressure waves\n\nMassachusetts Institute of Technology 2.017\nTypical Transducer:\n120 to 150 dB re 1Pa, 1m, 1V\nmeans\n106 - 107.5 Pa at 1m for each Volt applied\nor\n1-30 Pa at 1m for each Volt applied\nTypical Hydrophone:\n-220 to -190 dB re 1Pa, 1V\nmeans\n10-11 to 10-9.5 V for each Pa incident or\n10-5 to 10-3.5 V for each Pa incident\nSo considering a transducer with 16Pa at 1m per Volt, and\na hydrophone with 10-4 V per Pa:\nIf V = 200V, we generate 3200Pa at 1m, or 3.2Pa at 1km,\nassuming spreading losses only;\nThe hydrophone signal at this pressure level will be\n0.00032V or 320V !\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Concepts of Design",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/3a956ff5ec6e77b46b7632a317546456_MIT2_017JF09_design.pdf",
      "content": "Massachusetts Institute of Technology, Subject 2.017\nCONCEPTS OF\nDESIGN\n\nMassachusetts Institute of Technology, Subject 2.017\nYours truly, as a high-school senior!\n\nMassachusetts Institute of Technology, Subject 2.017\nTradeoffs\n- Everything interesting that you do in LIFE and in\nDESIGN is a tradeoff - getting what you want at\nthe expense of something else.\nIndustrial\nmachines\nbreakdowns/year\npurchase cost\nstrength\nweight\nBuilding\nmaterials\nBrand A\nB\nC\ncarbon\nfiber\nsteel\nAl\nMotor\nservo\npositioning error\npower consumption\nA smarter\ncontroller!\nOld vs. used?\nMaintenance?\nCost? Fatigue?\nHeterogeneous?\nFinish? Corrosion?\nComplexity?\nRobustness? Cost?\n\nMassachusetts Institute of Technology, Subject 2.017\n- Design is a process of\n- Understanding the problem\n- Creating solutions\n- Evaluating solutions\n- Crucial role of modeling and testing\n- Refining and revising\n- Detailing the design\nNeed/Goal\nProblem Statement\nCandidates\nBest Candidate\nProduct\nClarify\nfunctions and\nobjectives\nCreate\nEvaluate\nDetail\nDOCUMENTATION THROUGHOUT !\n\nMassachusetts Institute of Technology, Subject 2.017\nOther Views of Design ...\nMath, Science,\nEngineering\nFundamentals\nPractical\nKnowledge\nQuantitative\nDesign Analysis,\nOptimization\nPragmatic\nDesign Analysis\nProduct\n\"formal\"\n\"modeling\"\n\"hands-on\"\n\"what works\"\n\"organization\"\n\"classwork\"\n\"planning\"\ntime\ndesign\nfreedom\nknowledge\ngeometry\npayload\nsea-\nkeeping\npropulsion\npower\ncontrol\nsensors\nmaintenance\nDesign\nSpiral\n\nMassachusetts Institute of Technology, Subject 2.017\nThe Objectives Tree\nBroad objectives...\n... Specific objectives\nHOW ?\nWHY ?\nHave a\npositive\nexperience\nin 2.017\nGet a good grade\nLearn a lot\nHave fun\nParticipate, innovate, initiate\nDo assigned work\nTake advantage\nof resources\nRequest lectures\nUse the shop\nApply prior knowledge\nGet along\nPlan ahead\nEstablish responsibilities\nUse a few design\nmethods !\nThe FSH Objectives Tree\n\nMassachusetts Institute of Technology, Subject 2.017\nA Decision Matrix: Flettner Rotorship\nWhat is the impact of these ENGINEERING ATTRIBUTES, relative to REQUIREMENTS?\nA: High rotary speed\nB: Large rotor diameter\nC: Stiff inner structure\nD: Number of rotors\nE: Height of rotor\nREQUIREMENTS Weighting A\nB\nC\nD\nE\nPropels the boat\nRobust to damage\n-1\n-1\n-1\nEasy to fabricate\n-1\n-1\n-1\n-1\nHigh boat stability\n-1\n-1\n-2\nWeighted sums:\n-30\n-40\n-\nAttribute B (a large rotor diameter) is most important to meeting the requirements.\n-\nAttributes C and E (stiff inner structure, tall rotors) have negative impact on meeting\nthe requirements.\n-\nThe calculation helps identify and document priorities and the direction of the design.\n-\nIt suggests areas where further clarification of requirements or attributes is needed.\n-\nRelated to \"House of Quality\" and \"Quality Function Deployment\"\n\nMassachusetts Institute of Technology, Subject 2.017\nKnowledge vs.\nConfidence\n- Knowledge about an idea and confidence\nin it are not the same thing!\n- Target: a specification, criterion, requirement\n- Idea: one possible solution\n- A measure of knowledge: what is the probability of you getting a\ntrue/false question right about the idea?\nClueless: K = 0.5 Expert: K = 1.0\n- A measure of confidence: what is your certainty that the idea will\nmeet the target?\nImpossible\n\nDoubtful\n\nLikely\n\nPerfect\nC = 0.0 C = 0.3 C = 0.7 C = 1.0\nConfidence is subjective!\nKnowledgeable but\nprobably not confident at\nthe moment - his vehicle\njust went into the ocean\nfor the first time!\nPhoto removed due to copyright restrictions.\n\nMassachusetts Institute of Technology, Subject 2.017\nCombine Knowledge and\nConfidence: Belief\n- A measure of belief: confidence that an idea meets the\ntarget, based on current knowledge.\n- Using the above numerical values and Bayesian\nanalysis, Ullman (2001) computes\nBelief = 2KC - K - C + 1,\nleading to a \"belief map\"\nknowledge\nhigh\nlow\nconfidence\nhigh\nlow\n0.5\n0.8\n0.2\n0.6\n0.4\nBelief\nContours:\nDecisions should be\nbased on a high\nlevel of belief - you\nhave to have\nknowledge of the\nidea AND\nconfidence that it\nmeets the target\nEO\nEP\n\nMassachusetts Institute of Technology, Subject 2.017\nFunction Analysis\nFlow-Chart: Algorithm design, Processes\nLayered Functions: A complex system having multiple functions\nDrive robot\ntoward target\nRange rate?\nGo in a straight\nline for one\nminute\nTurn\naround\nCaptured!\n_\n+\nAllows a person to write and\nedit words or images on paper\nMakes mark on paper\nFits in hand\ncomfortably\nErases own marks\nAutonomous underwater vehicle homing to an\nacoustic beacon\nSimilarity to objectives tree\nRobot and\ndocking\nmechanism\n\nMassachusetts Institute of Technology, Subject 2.017\nUnderstanding Complexity\n- Complexity is often what causes the hardest problems - and\nsolutions that are time-consuming and expensive.\n- High costs of errors once a product is out the door.\n- Piecemeal vs. Holistic design.\n- Fundamental rules of design - e.g. grounding & isolation, stainless\nsteel, well-known vendors, etc.\n- Basic rule: Layered Sub-functions Complexity.\nMain function\nSubfunction 1\nSubfunction 2\nSubfunction 3\nSubfunction 1.1\nSubfunction 1.2\nSubfunction 3.1\nLevel 1\nHow many functions does a car door serve?\nFluid mechanics rig at the\nMIT Testing Tank\n\nMassachusetts Institute of Technology, Subject 2.017\nWhy does it take\nso long!?\nPerson-hours design effort can be estimated as\nH = A * B * C where\nA = a constant depending on communication and size of\nengineering group: values typically in the range 30-150 in\ncommercial world - it may be lower or higher for students!\nB = sum of products of level number and number of subfunctions at\nthat level (1+6+9 = 16 in figure above).\nC = difficulty (1 is easy - known technologies, 3 is hard - many\nunknown technologies)\nEven a seemingly simple project easily runs into thousands of\nhours @#$%^&*\nRole of complexity should be kept in mind when milestones\nare defined and set\nAutonomous kayak in\nSingapore Harbor - lots of\nfunctions but not too many\nsubfunctions\n\nMassachusetts Institute of Technology, Subject 2.017\nGantt Charts: a Graphical Schedule\nClarify problem\nModeling\nBrainstorming\nFirst design iteration\nExperiments & research\nTest candidate solutions\nSecond design iteration\nFinalize design choices\nOrder parts\nMake machine drawings\nFabricate subsystems\nAssemble system\nIntegrated testing\nField tests\nDocumentation\nQuarter 1\nWhat are the\ndependencies\namong tasks?\nWhat tasks are\nconcurrent?\nWhat is the\norder of\ntasks?\ntime\nIs the time\nallotted for each\ntask appropriate?\nDoes the division of\neffort make sense?\nDocumentation\n\nMassachusetts Institute of Technology, Subject 2.017\nA Few References...\n-\nD.G. Ullman. The mechanical\ndesign process (Third edition).\nNew York: McGraw-Hill. 2003.\n-\nN. Cross. Engineering Design\nMethods: Strategies for product\ndesign (Third edition). New York:\nWiley. 2000.\nAcoustic image of a metal box on the bottom of a barge,\ntaken from an autonomous underwater vehicle, June 2007.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design for the Ocean Environment",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/7151e72b8574054869f03394f07a843e_MIT2_017JF09_oceans.pdf",
      "content": "Massachusetts Institute of Technology 2.017\nDesign for the Ocean\nEnvironment\n\nMassachusetts Institute of Technology 2.017\nSome Major Considerations\n- Hydrostatic pressure\n- Heat dissipation in housings\n- Waves\n- Forces on bodies in steady flow\n- But don't forget:\nwind and rain, corrosion, biofouling, material fatigue,\ncreep, chemical breakdown, human safety,\nregulations, etc.\n\nMassachusetts Institute of Technology 2.017\nSteel\n200e9\n550e6\nAluminum\n70e9\n480e6\nTitanium\n100e9\n1400e6\nGlass\n70e9\n<35000e6\n(compression!)\nABS Plastic 1.3e9\n34e6\nLOW\n~1100\nMineral oil\n-\n~900\nWater\n2.3e9\n-\nYoung's\nModulus,\nPascals\nUltimate\nStrength,\nPascals\nCoefficient of\nthermal\nconductivity,\nW m / m2 oK\nDensity,\nkg/m3\n\nMassachusetts Institute of Technology 2.017\nWave Fields\nDefinition:\nSeaState\nHeight (ft) Period (s) Wind (knots)\n1 7 9\n3 3 8\n4 6 9\n5 11 10 24\n6 16 12 37\n7 25 15 51\nDistribution:\n30% of world oceans are at 0-1m height\n41% 1-2m\n17% 2-3m\n6% 3-4m\n2% 4-5m\nWave height H1/3\nSignificant wave:\nAverage of one-third\nhighest waves\nWave fields depend on\nstorms, fetch, topography\n\nMassachusetts Institute of Technology 2.017\nLinear Wave Theory\n(deepwater)\nWave elevation:\n\n=\n\ncos( t - k x ) where\n\nis amplitude\n\nis frequency in rad/s\n: period T = 2\nk is wavenumber in rad/m : wavelength\n\n= 2/k\nDispersion Relation: k = 2 / g\nWave speed: V =\n\n/ k\nParticle velocities: u = k\n\nV e-kz cos (\n\nt - k x)\nw = k\n\nV e-kz sin (\n\nt - k x)\nwhere z is depth\nFluctuating pressure: p =\n\ng e-kz cos (\n\nt - k x )\n\nV\n\nMassachusetts Institute of Technology 2.017\nShort-Term Statistics of Extreme Waves\n- Average of one-third highest waves is significant\nwave height Hsig or H1/3 = 4\n- An observer will usually report H1/3\n- H1/10 = 1.27 * Hsig\n- Expected maxima:\nN = 100;\n1.6 * H1/3\nN = 1000 ;\n1.9 * H1/3\nN = 10000 ;\n2.2 * H1/3\n\nMassachusetts Institute of Technology 2.017\nPrinciples of Naval Architecture, E.V. Lewis, ed., SNAME, 1989.\nOriginally published in Lewis, Edward V. Principles of Naval Architecture.\nVol. 3: Motions in Waves and Controllability. Jersey City, NJ: SNAME, 1989.\nReprinted with the permission of the Society of Naval Architects and Marine Engineers (SNAME).\nhttp://www.sname.org/SNAME/SNAME/Publications/Books/Default.aspx\n\nMassachusetts Institute of Technology 2.017\nPrinciples of Naval Architecture, E.V. Lewis, ed., SNAME, 1989. Originally published in Lewis, Edward V. Principles of Naval Architecture.\nVol. 3: Motions in Waves and Controllability. Jersey City, NJ: SNAME, 1989.\nReprinted with the permission of the Society of Naval Architects and Marine Engineers (SNAME).\nhttp://www.sname.org/SNAME/SNAME/Publications/Books/Default.aspx\n\nM\nPrinciples of Naval Architecture, E.V. Lewis, ed., SNAME, 1989.\nOriginally published in Lewis, Edward V. Principles of Naval Architecture.\nVol. 3: Motions in Waves and Controllability. Jersey City, NJ: SNAME, 1989.\nReprinted with the permission of the Society of Naval Architects and Marine Engineers (SNAME).\nassachusetts Institute of Technology 2.017\nhttp://www.sname.org/SNAME/SNAME/Publications/Books/Default.aspx\n\nPrinciples of Naval Architecture, E.V. Lewis, ed., SNAME, 1989.\nOriginally published in Lewis, Edward V. Principles of Naval Architecture.\nVol. 3: Motions in Waves and Controllability. Jersey City, NJ: SNAME, 1989.\nReprinted with the permission of the Society of Naval Architects and Marine Engineers (SNAME).\nhttp://www.sname.org/SNAME/SNAME/Publications/Books/Default.aspx\nMassachusetts Institute of Technology 2.017\n\nMassachusetts Institute of Technology 2.017\nSeven components an =[1 2 3 3 2 2 1] at n ~[1 2 3 4 5 6 7]rad/s\nsignificant amplitude\nabsolute maximum (14)\n\nMassachusetts Institute of Technology 2.017\nm2-s\n\nMassachusetts Institute of Technology 2.017\n\nMassachusetts Institute of Technology 2.017\n\nMassachusetts Institute of Technology 2.017\n\nMassachusetts Institute of Technology 2.017\nHsig is\n~5m\n\nMassachusetts Institute of Technology 2.017\n\nMassachusetts Institute of Technology 2.017\n\nMassachusetts Institute of Technology 2.017\nLikelihood of a wave\n> 15m height is\n0.1%\nLikelihood of a wave\n> 30m height is\n0.00003%\nThe 100-\nyear\nwave\n\nMassachusetts Institute of Technology 2.017\nVehicles: Some Basic Catagories\n- Streamlined vs. Bluff Bodies\n- Bluff: Cylinders, blocks, higher drag, lower\nlift, large-scale separation and wake\n- Streamlined: airplanes and ship hulls,\nLower drag but higher lift, avoids separation\nto minimize wake\n- Tradeoff in Directional Stability of the body:\n- A fully streamlined fuselage/fairing is\nunstable.\n- Drag aft adds stability, e.g., a bullet\n- Wings aft add stability, e.g., fins, stabilizers\n- Wings forward decrease stability, but\nimprove maneuverability.\n- Turbulent vs. Laminar flow\n- High- vs. low-speed flow\n\nMassachusetts Institute of Technology 2.017\nConcept of Drag, Lift, Moment (2D)\nFlow U\nLift (normal\nto the flow)\nDrag (parallel to the flow)\nF\nr\nMoment = r X F\ndepends on location\nof body frame!\nbody\nframe\nTypical nondimensionalization:\nDrag = 1⁄2\n\nU2 A Cd , where A is (typically) frontal area or wetted area\nLift = 1⁄2\n\nU2 A Cl , where A is usually a planform area\nMoment = 1⁄2\n\nU2 DL2 Cm , where L is characteristic body length, and D is\ncharacteristic width (or diameter)\nCenter of\nForce\n\nMassachusetts Institute of Technology 2.017\nAerodynamic Center\nConsider streamlined, balanced (symmetric) forms in free flight.\nAerodynamic center is the location on the body of lift force that would\ncreate the observed moment, e.g.,\nxAC = Cm DL2 / CL A ,\nreferenced to the same location as for Cm\nxAC\nref\nLift\nDrag\n- For an Odyssey-like shape, xAC is up to one body length forward\nof the nose Extremely unstable!\n- For a typical zero-camber foil section, xAC is around 20-30% of the\nchord length aft from the leading edge more stable but\ncan flutter\nFlow\n\nMassachusetts Institute of Technology 2.017\nDestabilizing body lift force\nStabilizing fin lift force\nCenter of mass\nDirection of travel\nat speed U\nAerodynamic\ncenter without fin\nFins\nBody is neutrally directionally stable if sum of moments\nabout center of mass is zero:\nM ~ Lbody xAC + Lfins xfins + Dfins xfins\nStabilizing\nDrag force\n(small)\nStreamlined Vehicle Design using Aft Lifting Surfaces\n\nMassachusetts Institute of Technology 2.017\nOrigins of the Destabilizing\nMoment: Slender-Body Theory\nDiff. lateral force on body is derivative of fluid momentum (as drawn):\nF = D( ma (x) w x )/Dt = (d/dt + U d/dx) (ma (x) w x)\nAssume steady-state and uniform cross-section so all d()/dt = 0\nF = U d/dx ( ma (x) w x )\nIntegrate by parts to get the moment:\nM = ∫\n\nx F = U w [ xstern ma (xstern ) - xbow ma (xbow ) - ∫\n\nma (x) dx ]\nDerivative of property\n\nwith the particle motion:\nD/Dt\n= lim ((t+t,x+x) - (t,x)) / t\n= t + x x / t (Taylor series expansion)\n= t + x U\n= (d/dt + U d/dx)\nw\nU\nF\n+x\ny\n-Uwm33\n\nMassachusetts Institute of Technology 2.017\nForces in steady flow\n- Streamlined vs. Bluff Bodies\n- Bluff: Cylinders, blocks, higher drag, lower lift, large-\nscale separation and wake\n- Streamlined: airplanes and ship hulls, Lower drag but\nhigher lift, avoids separation to minimize wake\n- Tradeoff in Directional Stability of the body:\n- A fully streamlined fuselage/fairing is unstable.\n- Drag aft adds stability, e.g., a bullet\n- Wings aft add stability, e.g., fins, stabilizers\n- Wings forward decrease stability, but improve maneuverability.\n- Turbulent vs. Laminar flow\n- High- vs. low-speed flow\n\nMassachusetts Institute of Technology 2.017\nTypical Drag Coefficients (frontal area)\n- Square cylinder section\n2.0\n- Diamond cylinder section\n1.6\n- Thin rect. plate\nAR=1\n1.1\n-\nAR=20\n1.5\n-\nAR>>1\n2.0\n- Circular cylinder section\n1.1\n- Circular cylinder end on\n1.0\n- 1920 Automobile\n0.9\n- Volkswagon Bus\n0.42\n- Modern Automobile\n< 0.3\n- MIT Solar Car?\nPotter & Foss (1982)\n\nMassachusetts Institute of Technology 2.017\nFigures from PNA\nOriginally published in Lewis, Edward V. Principles of Naval Architecture.\nVol. 3: Motions in Waves and Controllability. Jersey City, NJ: SNAME, 1989.\nReprinted with the permission of the Society of Naval Architects and Marine Engineers (SNAME).\nhttp://www.sname.org/SNAME/SNAME/Publications/Books/Default.aspx\n\nMassachusetts Institute of Technology 2.017\nFigure from PNA\nOriginally published in Lewis, Edward V. Principles of Naval Architecture.\nVol. 3: Motions in Waves and Controllability. Jersey City, NJ: SNAME, 1989.\nReprinted with the permission of the Society of Naval Architects and Marine Engineers (SNAME).\nhttp://www.sname.org/SNAME/SNAME/Publications/Books/Default.aspx\n\nMassachusetts Institute of Technology 2.017\nImages removed due to copyright restrictions. Please see Fig. 30-33 in Hoerner,\nSighard F., and Henry V. Borst. Fluid-Dynamic Lift. Bakersfield, CA: Hoerner Fluid Dynamics.\n\nMassachusetts Institute of Technology 2.017\nRecommended References\n- Fluid-Dynamic Lift. S.F. Hoerner, 1975, Hoerner Fluid\nDynamics, Bakersfield, CA.\n- Principles of Naval Architecture, Volume III (Motions in\nWaves and Controllability), E.V. Lewis, ed., 1989,\nSNAME, Jersey City, NJ.\n- Fluid Mechanics, M.C. Potter and J.F. Foss, 1982, Great\nLakes Press, Okemo, MI.\n- Theory of Flight, R. von Mises, 1945, Dover, New York.\n- http://naca.larc.nasa.gov/: NACA reports on bodies and\nsurfaces\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "Electronics Essentials",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/c3d201dcb167287eea266d41f2cf2d41_MIT2_017JF09_electronics.pdf",
      "content": "Massachusetts Institute of Technology, Subject 2.017\nElectronics Essentials\nfor 2.017\n\nMassachusetts Institute of Technology, Subject 2.017\nReviewing Basics\n- Kirchoff's Voltage rule: voltages V at a node are the\nsame.\n- Kirchoff's Current rule: sum of currents i flowing into and\nout of a node is zero.\n- Analogy: Voltage is like fluid pressure, current is like\nfluid volumetric flow rate. The wire is like a pipe.\n- Resistor R: V = IR,\n- Dissipation: Resistive Power P = I2R = V2/R\n- Analogy: viscous losses in pipe flow\n- Capacitor C: i = C dV/dt\n- Analogy: a hydraulic accumulator\n- Inductor H: V = L di/dt\n- Analogy: inertia of water in a pipe\nOhms,\nfarads, f\nhenries, h\n\nMassachusetts Institute of Technology, Subject 2.017\nThe Op-Amp\nTwo inputs (called inverting and non-inverting); one\noutput.\nThe output voltage is a HUGE gain multiplied by the\ndifference between the inputs.\nHoriwitz's & Hill's golden rules:\na. The op-amp enforces (in proper use)\nVinv = Vnon-inv\nb. No current flows into the device at either input\nVinv\nVnon-inv\nV+ (supply)\nV- (supply)\nVout\n\nMassachusetts Institute of Technology, Subject 2.017\nVinv\nVnon-inv\nV+\nV-\nVout\nR1\nR2\nV\n(V-Vinv )/R1 = (Vinv -Vout )/R2 and\nVinv = Vnon-inv\nVR2 = Vinv (R1 +R2 ) - Vout R1\nVout = Vnon-inv (R1 + R2 )/R1 - VR2 /R1\nLetting R1 = R2, then\nVout = 2Vnon-inv - V\nThe circuit inverts the input V and\nadds on 2Vnon-inv\nIF Vnon_inv is ground, then\nVout is just -V. This is just an\ninverting amplifier.\nExample Op-Amp: Adding a Voltage Bias\nVoltage bias useful for bringing\nsignal levels into the range of\nsensors.\nThe op-amp is discussed in detail\nby Horowitz and Hill, covering\nintegrators, filters, etc.\n\nMassachusetts Institute of Technology, Subject 2.017\nSerial Communications\n- How to transmit digital information fast and reliably over\na few wires?\n- Examples: RS-232, RS-485, etc. refer to pins & wires\n- A minimal case of RS-232 (DB25 connector is full case):\n- Asynchronous operation; both sides agree on BAUD rate\n- Three wires: send (TX), receive (RX), ground\n- No error checking! No flow control!\nStart bit\nnormally high\nStop bit\n1's\n(LSB)\n2's\n4's\n8's\n16's\n32's\n64's\n128's\n(MSB)\nEXAMPLE using CMOS components:\nSuccessive bits read at midpoints,\nbased on baud rate and on start bit\nleading edge\n5V\nGND\n2+4+8+16+128 = 158 = '_' (underline)\n\nMassachusetts Institute of Technology, Subject 2.017\n- Garmin GPS25 series - Smart embedded device!\n- Similar to TT8's interface with you - I/O strings are\npassed through a serial port\n- Reconfigurable through special commands\n- Output at 1Hz\n- String maintains exactly the same syntax: e.g.,\n$GPRMC,hhmmss,V,\nddmm.mmmm,N,dddmm.mmmm,E,\n000.0,000.0,ddmmyy,000.0,E,N,*XX<CR><LF>\n73 chars appear as one line:\n$GPRMC,hhmmss,V,ddmm.mmmm,N,dddmm.mmmm,E,000.0,000.0,ddmmyy,000.0,E,N,*XX\nEXAMPLE: A GPS String\n\nMassachusetts Institute of Technology, Subject 2.017\nSerial devices communicate using characters encoded into bits. This includes\nupper- and lowercase letters, carriage returns and linefeeds, punctuation, etc.\nCharacters are not numbers! E.g.,\nchar c = '7' ;\nchar d[2] = '92' ;\nint n ;\nThe numerical value of c is [00110111] (binary) or 55 (decimal).\nBut because the ASCII characters '0','1','2','3','4','5','6','7','8', and '9' occur in\norder, making simple conversions is easy:\nn = c - '0' ;\nassigns to n the actual number 7. The ASCII character that goes with 7 is\nknown as BEL - on many machines this will ring a bell if it is sent to the screen\nas a character! - printf(\"%c\",n) ;\nHow to turn d[2] into a number?\nn = 10*( d[0] - '0' ) + ( d[1] - '0' ) ;\nASCII: American Standard Code for Information Interchange\n\nMassachusetts Institute of Technology, Subject 2.017\nPulse Width Modulation\n- A Regular Waveform\nPWM period\nPulsewidth\n- PWM frequency (Hz) = 1 / PWM period\n- Duty cycle = Pulsewidth / PWM period\n- PWM frequencies typically range from 100Hz into MHz\n- Duty cycles can be used from 0 - 100%, although some systems\nuse much smaller ranges, e.g. 5-10% for hobby remote servos.\n- The waveform has two pieces of information: Period and\nPulsewidth, although they are usually not changed simultaneously.\nVolts\nVpeak\n\nMassachusetts Institute of Technology, Subject 2.017\nSome PWM Uses\n-\nThe Allure: very fast, cheap switches and clocks to approximate\ncontinuous processes. Also, two-state signal resists noise corruption.\n-\nSensors: PWM period is naturally related to rotation or update rate:\nHall effect, anemometers, incremental encoders, tachometers, etc.\n-\nCommunication: PWM duty cycle is continuously variable like an D/A\nand an A/D.\n-\nActuation: At very high frequencies, physical systems filter out all but\nthe mean; i.e.,\nVeffective = duty_cycle * Vpeak\nHigh frequency\nswitching is the\ndominant mode\nfor powering\nlarge motors!\n\nMassachusetts Institute of Technology, Subject 2.017\nField Effect Transistor (FET)\n- Like a \"valve\", that is very easy to open or close. When\nFET is open, resistance is low (milli-Ohms); when FET is\nclosed, resistance is high (mega-Ohms or higher)\n- Typically three connections:\n- Gate: the signal; low current\n- Source: power in\n- Drain: power out\n- N- and P-type junctions are common, and involve the\npolarity of the device. (N is shown)\n- Extremely sensitive to static discharge! Handle with\ncare.\n- MOSFET: modern FET's capable of handling higher\npower levels.\ngate\nLoad\nSupply\n_\n+\n+\n_\ndrain\nsource\n\nMassachusetts Institute of Technology, Subject 2.017\nBipolar Control with a MOSFET H-Bridge\ngate\nLoad\nSupply\n_\n+\n+\n_\ndrain\nsource\ngate\nLoad\nSupply\n+\n_\n_\n+\ndrain\nsource\nN-channel\nP-channel\nMOSFET turns on when Vgate > Vsource\nMOSFET turns on when Vgate < Vsource\nload\nP1\nP2\nN2\nN1\nd\nd\nd\nd\ns\ns\ns\nVs\ns\ng\ng\ng\ng\nA\nB\nC\nD\nTo make flow UL to LR,\nset A = GND and D = Vs\nTo make flow UR to LL,\nSet B = GND and C = Vs\nConnect A and B to Vs with pull-up resistors;\nConnect C and D to GND with pull-down resistors;\nControl all four gates explicitly\n\nMassachusetts Institute of Technology, Subject 2.017\nThe Basic DC Brush Motor\nS\nN\ni\n\nTorque\n\n(coils)(flux density)(current i),\nor, in a given motor,\n= kt * i\nwhere kt is the torque constant\nBut the motion of the coils also induces a\nvoltage in the coil, the back-EMF:\neb = kt * YES, that's the same kt\nAnd the windings have a resistance R:\neR = R * i\nSumming voltages around the loop,\nVsupply = eb + eR\nVector relations:\nforce = current x flux\nfield = velocity x flux\n\nMassachusetts Institute of Technology, Subject 2.017\nProperties of the DC Brush Motor\n- No-load speed:\n= 0 i = 0\n\n= V / kt\n- Zero-speed torque (BURNS UP MOTOR IF SUSTAINED):\n= 0 eb = 0 i = V / R\n\n= kt V / R\n- Power output:\nPout = = i eb\n\nPout = i ( V - Ri )\n- Efficiency:\n= Pout / Pin = / i V\n\n= 1 - i R / V\n\n= V / kt\n= kt V/R\nPoint of maximum power: = kt V / 2 R\nPout\n\nd/d\n\n= - R / kt\n\nMassachusetts Institute of Technology, Subject 2.017\nIncremental Encoders for Control\n- What is the position of the motor?\n- Take advantage of cheap, fast counters make a large\nnumber of pulses per revolution, and count them!\n- Advantages of the incremental encoder:\n- High resilience to noise because it is a digital signal\n- Counting chip can keep track of multiple motor turns\n- Easy to make - phototransistor, light source, slotted disk\n- Two pulse trains required to discern direction: quadrature\n5V\n5V\nA\nB\nZ\nslots\n\nMassachusetts Institute of Technology, Subject 2.017\nStepper\nMotors\nS\nStator\nRotor with\npermanent\nmagnets\nS\nS\nN\nN\nDC Voltage\nDC Voltage\nON\nOFF\nSwitched coils at\nfixed positions on\nthe stator attract\npermanent\nmagnets at fixed\npositions on the\nrotor.\nSmooth variation\nof switching leads\nto half-stepping\nand micro-\nstepping\nEncoder still\nrecommended!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Experiments, Tests, and Data",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/bd430dfda1e01e3ec4897dca30fc69d2_MIT2_017JF09_experiments.pdf",
      "content": "Massachusetts Institute of Techology 2.017\nExperiments, Tests, and Data\n\nMassachusetts Institute of Techology 2.017\nPurpose of Experiments and Tests\n- Prove or Support a Hypothesis\n- The Earth's diameter is 6500km.\n- Multiple propellers on a single shaft can reduce cavitation (Turbinia).\n- Prokaryotes in the ocean fix carbon and consume other organisms, and the\nbalance has profound impact on ocean uptake of CO2 . (Ed Delong, Ann\nPearson, etc.)\n- Outriggers provide better roll stability than does a single hull in random beam\nseas, when wavelength is much larger than the beam.\n- Prove a Capability, Support Design\n- Manned flight to the upper atmosphere can be achieved bi-weekly with a\nspecialized aircraft (X-Prize).\n- Characteristic of lift force as a function of elevator aspect ratio and inflow angle.\n- Delay calculation in pulsed 20kHz acoustic signals is possible with the TattleTale\nModel 8, and the performance obtained is XX.\n\nMassachusetts Institute of Techology 2.017\n- Does the work\nstand up to\nscrutiny?\n- Use of controls\n- Calibration\n- Data quality\n- Data processing\n- Documentation and\nrecord-keeping!\n\nMassachusetts Institute of Techology 2.017\nControls\n- Did you really measure what you thought?\n- Rat Maze: Is the maze acoustically navigable?\n(R. Feynman)\n- Mass Spectroscopy: When you put in a sample\nof known composition, are the other bins clean?\n- When measuring electrical resistance, touch the\nprobes together. Check a precision resistor too.\n- Resonance in load measurement rigs?\n- When measuring hull resistance, does zero\nspeed give zero force?\nDUH!\n\nMassachusetts Institute of Techology 2.017\nCalibration\n- More time can be spent on calibration than the rest of the experiment!\n- Sensors should be calibrated and re-checked using independent\nreferences, such as:\n- Manufacturer's specifications\n- Another sensor with very well-known calibration\n- A tape measure, protractor, calipers, weights & balance, stopwatch, etc..\n- Calibration range should include the expected range in the experiment.\n- Some statistics of the calibration:\n- Precision of fit (r-value or )\n- Linearity (if applicable)\n- Understand special properties of the sensor, e.g., drift, PWM\n\nMassachusetts Institute of Techology 2.017\nData and Sensor Quality\n- Signal-to-Noise Ratio\n(SNR): compares\n\nto the\nsignal you want\n- Repeatability/Precision: If\nwe run the same test again,\nhow close is the answer?\n- Accuracy: Take the average\nof a large number of tests -\nis it the right value?\n\nMassachusetts Institute of Techology 2.017\nSample Statistics\n- Sample mean m:\n- Sample standard dev. :\n\n= sqrt [ ( (x1 -m)2 + (x2 -m)2 + ... + (xn -m)2 ) / (n-1) ]\n- Error budgets for multiplication and addition\n(A is standard deviation of A):\n(A + A)(B + B) ~ AB + AB + BA\nExample: (1.0 + 0.2)(3.0 + 0.3) ~ 3.0 + 0.9\n(A + A) + (B + B) = A + B + (A+B)\nExample: (1.0 + s0.2) + (3.0 + s0.3) = 4.0 + 0.5\n\nMassachusetts Institute of Techology 2.017\nGaussian (Normal) Distribution\nProbability Density Function f(x) ~ Histogram\nf(x) = exp [ - (x-m)2 / 22 ] / sqrt(2) /\nThis is the most common\ndistribution encountered\nin sensors and systems.\n+/- 1\n\ncovers 68.3%\n+/- 2\n\ncovers 95.4%\n+/- 3\n\ncovers 99.7%\nArea under f(x) is 1!\n\nMassachusetts Institute of Techology 2.017\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Feedback Control",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/28a8095968b3e99189fe8c619640a2e1_MIT2_017JF09_feedback.pdf",
      "content": "Massachusetts Institute of Technology Subject 2.017\nFeedback Control\n\nMassachusetts Institute of Technology Subject 2.017\nComponents of Engineered Feedback Systems\n- Plant: the system whose behavior is to be controlled.\nExamples: vehicle attitude, temperature, chemical process,\nbusiness accounting, team and personal relationships, global\nclimate\n- Actuator: systems which alter the behavior of the plant.\nExamples: motor, heater, valve, law enforcement (!), pump, FET,\nhydraulic ram, generator, US Mint\n- Sensor: system which measures certain states of the plant.\nExamples: thermometer, voltmeter, Geiger counter, opinion poll,\nbalance sheet, financial analyst\n- Controller: translates sensor output into actuator input.\nExamples: computer, analog device, human interface, committee\n- Extreme variability in time scales:\n- active noise cancellation requires ~100 kiloHertz sensing and actuation\n- Social Security is assessed and corrected at ~3 nanoHertz (10 years)\n\nMassachusetts Institute of Technology Subject 2.017\nreference\nmeasurement\nController\nSensor\n\nerror\ninput\nFederal\nReserve\nanalysts\n\ninterest\nrates\neconomic\nindicators\nshaft\nposition\ncontroller\nencoder\n\nPWM duty\ncycle\ncruise control\ntachometer\n\nfuel\nrate\nspeed\nPlant\nworld\neconomy\nmotor & load\nengine & car\nstate\n_\n_\n_\n_\n+\n+\n+\n+\nFeedback fundamentally creates a new dynamics!\n\nMassachusetts Institute of Technology Subject 2.017\nBasics in the\nFrequency Domain\nC\nP\n_\n+\nr\ne\nu\ny\ne = r - y\nu = Ce = C(r-y)\ny = Pu = PCe = PC(r-y)\n\n(PC + 1)y = PCr\n\ny / r = PC / (PC + 1)\nSimilarly, e = r - y = r - PCe\n\n(PC+1)e = r\n\ne / r = 1 / (PC + 1)\nu = C(r-Pu) (PC + 1)u = Cr\n\nu / r = C / (PC + 1)\nWhy can we do this? Convolution in time domain = Multiplication in freq. domain!\nP must roll off at high frequencies - because no physical plant can respond to\ninput at arbitrarily high frequency.\n- Ideal case: e is a small fraction of r: e/r << 1, equivalent to y/r ~ 1\n- This implies mag (PC + 1) >> 1 or mag (PC) >> 1.\n- If plant P is given, then C has to be designed to make PC big.\n- But mag (u / r) ~ mag(1 / P): HUGE when P gets small at high frequencies\n\nexcessive control action which will saturate or break actuators, excite\nunmodelled plant behavior, etc.. issues of robustness\n\nMassachusetts Institute of Technology Subject 2.017\ne/r = 1/(PC+1)\ny/r = PC/(PC + 1)\nlog |PC|\nPerformance\nRobustness\n\nGood tracking only possible at low frequencies leads to a \"formula\" for design:\nMake |PC| large at low frequencies, e/r ~ 0, y/r ~ 1;\nGood regulation and tracking at low frequencies\nMake |PC| small at high frequencies, e/r ~ 1, y/r ~ 0, u/r ~ C\nPoor tracking at high frequencies, but reasonable control action\nThe frequency where |PC| = 1 is the crossover frequency c ;\nAbove this point, closed loop t.f. y/r = PC/(PC+1) drops off to zero.\nSo c is about the bandwidth of the closed-loop t.f.\nc\nc\n\nMassachusetts Institute of Technology Subject 2.017\nRandom Physical\nDisturbances\nC\nP\n_\n+\nr\ne\nu\ny\nd\n+\n+\ne = r - y and u = Ce = C(r-y)\ny = Pu + d = PCe + d = PC(r-y) + d\nWith r = 0, (PC + 1)y = d\n\ny / d = 1 / (PC + 1) ( = - e / d also)\nu = C(r- Pu - d)\nWith r = 0, (PC + 1)u = -Cd\n\nu / d = - C / (PC + 1)\nBecause PC+1 is large at low frequencies, y/d will be small at low\nfrequencies; the closed-loop system rejects low-frequency disturbances\ncompeting!\n\nMassachusetts Institute of Technology Subject 2.017\n- d is a random input, sometimes white or with\nfrequency content, e.g., ocean waves!\n- Spectrum of y when system is driven by random\nnoise as in previous analysis:\nSy = [y/d]* [y/d] Sd\n- d can enter either at the plant output (as above),\nor at the plant input, i.e., it has the same units as\ncontrol u. (Equations are different.)\nC\nP\n_\n+\nr\ne\nu\ny\nd\n+\n+\n\nMassachusetts Institute of Technology Subject 2.017\nLaPlace vs. Fourier XFM\nFourier Transform integrates x(t) e -jt over the time range from\nnegative infinity to positive infinity\nLaplace Transform integrates x(t) e-st\nover the time range from\nzero to positive infinity\nResult: X(j) can describe acausal systems, X(s) describes only causal ones!\nMany important results of Fourier Transform carry over to LaPlace Transform:\nL (x(t)) = X(s) (notation)\nL\n\n(ax(t)) = a X(s) (linearity)\nL\n\n(x(t) * y(t)) = X(s)Y(s) (convolution)\nL (xt (t)) sX(s) (first time derivative)\nL (xtt (t)) s2X(s) (second and higher time derivatives)\nL (∫\n\nx(t)dt) X(s) / s (time integral)\nL ((t)) = 1 (unit impulse)\nL (1(t)) = 1/s (unit step)\n\nMassachusetts Institute of Technology Subject 2.017\nLaPlace Transform and Stability\n- For linear systems, stability of a system refers to whether\nthe impulse response has exponentially growing\ncomponents.\n- No pre-determined input can stabilize an unstable system;\nno pre-determined input can destabilize a stable system.\n- Some examples you can work out:\nL (e-t) = 1 / (s + )\nL\n\n(t e-t) = 1 / (s + )2\nL\n\n[ e-t sin(t) ] =\n\n/ (s2 + 2s + 2 + 2)\nL\n\n[ d e-nt sin (d t) / (1-2) ] = n\n2 / (s2 + 2n s + n\n2)\nMajor observation: stable signal roots of L\n\ndenominator\nhave negative real parts: EQUALITY IS TRUE FOR ALL\nFIRST- AND SECOND-ORDER SYSTEMS\n\nMassachusetts Institute of Technology Subject 2.017\nDecoding the transfer function\nNumerator polynomials are a snap:\n(s + 2)/(s2+s+5) = s/(s2 + s + 5) + 2/(s2+s+5)\n\"input derivative plus two times the input, divided by the denominator\"\nFor higher-order polynomials in the denominator: use partial fractions, e.g.,\n(s+1)/(s+2)(s+3)(s+4) = -0.5/(s+2) + 2/(s+3) -1.5/(s+4) (all real poles)\n(s+1)/s(s2+s+1) = -s/(s2+s+1) + 1/s (some complex poles)\nAny high-order transfer function can always be broken down into a sum of transfer\nfunctions with factored first- and second-order polynomials in the denominator.\nstability the roots of the characteristic\nequation have negative real part.\nMore details:\nreal negative root -: the mode\ndecays with time constant 1/\ncomplex roots at -n\n\n+/- jd\nthe mode decays with frequency d\nand exponential envelope having\ntime constant n\n\nMassachusetts Institute of Technology Subject 2.017\nExample with a double integrator: e.g., a\nmotor or dynamic positioning\nSystem is mxtt (t) = u(t) where:\nm is mass\nxtt (t) is double time derivative of position\nu(t) is control action; thrust\nLet a Control law be: u = - kp x (Proportional Control: P)\nClosed-loop system dynamics become mxtt + kp x = 0\nResponse to an initial condition is undamped oscillations at frequency n = sqrt(kp /m)\nP = 1/ms2\nC = kp\nPC = kp /ms2\ne/r = 1/(PC + 1)\n= ms2 / (ms2 + kp )\nTracking error is small when s is small; large when s is large, as desired.\nBUT characteristic equation ms2 + kp = 0 has two imaginary poles - undamped!\nP = 1 / ms2\nC = kp\n_\n+\nr\ne\n\nMassachusetts Institute of Technology Subject 2.017\nTry the control law u = -kpx - kd xt (Proportional +\nDerivative: PD)\nClosed-loop system dynamics become mxtt + kd xt + kp x = 0\nRecall for a second-order underdamped oscillator:\n0 < kd < 2 sqrt(kp /m)\nn = sqrt(kp /m) (undamped natural frequency)\n\n= kd / 2 sqrt(kp m) (damping ratio)\nd = n sqrt(1-2) (damped natural frequency)\nResponse to an initial condition is either:\n- Damped oscillations at frequency d = sqrt(1-2)n ,\ninside an exponential envelope with time constant 1/n\nOR\n- Sum of two decaying exponentials (overdamped case)\n\nMassachusetts Institute of Technology Subject 2.017\nConsider a constant disturbance: mxtt + kd xt + kp x = F;\nSystem will settle at x = F/kp ; this is a steady-state error!\nBut kp cannot be increased arbitrarily - natural frequency\nwill be too high and too much control action\nTry the control law u = -kpx - kd xt - ki ∫\n\nx dt\n(Proportional + Derivative + Integral: PID)\nClosed-loop system dynamics become\nmxtt + kd xt + kp x + ki ∫\n\nx dt = F\nIf the system is stable (ms3 + kd s2 + kp s + ki = 0 has roots\nwith negative real part), then differentiate:\nmxttt + kd xtt + kp xt + ki x = 0 settles to x = 0!\n\nMassachusetts Institute of Technology Subject 2.017\nThe PID\nC = kp + kd s + ki /s\n= (kp s + kd s2 + ki ) / s\nHigh-frequency response is ~kd s; increases with frequency\nand disobeys the rule of finite power. High frequency\nerrors will lead to very large control action!\nSensor noise solutions:\n-\nuse a very clean and high-res. sensor for x, which can\nbe easily differentiated numerically, e.g., motor encoder\n-\nuse a sensor that measures dx/dt directly, e.g.,\ntachometer\n-\nfilter the measurement. For a low-pass, we would get\nCf = [ (kp s + kd s2 + ki ) / s ] [ / (s+) ]\n=\n\n(kp s + kd s2 + ki ) / s (s+)\nBut combine with a double integrator plant P = 1/ms2\nPC = m(kp s + kd s2 + ki ) / s3, which does go to zero at high\nfrequencies, as desired the system does have a real\nbandwidth, which can be tuned.\n\nMassachusetts Institute of Technology Subject 2.017\nSelected Application Notes\n\nMassachusetts Institute of Technology Subject 2.017\nHeuristic Tuning of PID loops\n- Assuming a reasonably simple and stable plant,\nrule of thumb is:\n- Turn on the proportional gain and the derivative gain\ntogether until the system transient response is\nacceptable\n- Turn on the integral gain slowly so as to eliminate the\nsteady-state error\n- Why does it work?\n- Proportional gain is like a spring, the derivative gain is\nlike damping. They are like physical dissipative\ndevices and unlikely to destabilize your system (until\nyou take the spring and damping too high)\n- Integral gain IS DESTABILIZING proceed\ncautiously!\n\nMassachusetts Institute of Technology Subject 2.017\n1. Zeigler-Nichols Methods for\nTuning of PID Controllers\n- Ultimate cycle method\n- Increase proportional gain only until the system has\nsustained oscillations at a period Tu ; this gain is Ku .\n(If no oscillations occur, don't use this method!)\n- For proportional-only control, use\n- Kp = Ku / 2\n- For proportional-integral control use\n- Kp = 0.45 Ku and Ki = 0.54Ku / Tu\n- For full PID, use\n- Kp = 0.6Ku , Ki = 1.2Ku / Tu and Kd = 4.8Ku / Tu\nExplanation\n\nMassachusetts Institute of Technology Subject 2.017\nAssume the plant is of the form P = k / (s2 + 2n s + n\n2)\n(no zeros, undamped natural frequency n , damping ratio )\nWith proportional-only control at Ku , the CL characteristic equation is\ns2 + 2n s + n\n2 + kKu = 0\nBecause system has oscillations at frequency 2/Tu, we know that\nn\n2 + kKu ~ [ 2/Tu ]2\nOR kKu = [ 2/Tu ]2 - n\n2 = Q\nAt this condition, the damping is not enough to counter the unmodelled\ndynamics that are causing the oscillation, so it is ignored.\nThe characteristic equation with the Z-N PID gains becomes:\ns2 + 0 + n\n2 + k * [ PID controller ] = 0\ns2 + 0 + n\n2 + Q [ 0.6 + 1.2 / Tu / s + 4.8 s / Tu ] = 0\ns3 + [ 4.8 Q /Tu ] s2 +\n[ 4 2 / Tu\n2 - Q + 0.6 Q ] s + 1.2 Q / Tu = 0\nFor a wide range of Q and Tu , this will give ~20%\novershoot (~0.7) because the poles look like this:\nx\nx\nx\nreal\nimag\nasin\n\nMassachusetts Institute of Technology Subject 2.017\n2. The 2\n\nDiscontinuity in\nHeading Control\nPlant\nController\nConditioner\n+\n_\nreference\nmeasured\naction\nerror\nObjective of Conditioner is to make sure:\nController never gets an error signal that is discontinuous\nbecause of this effect\nController will always go for the shortest path - i.e., will\nturn 90 degrees left instead of 270 degrees right!\nSimple logic:\nSubtract or add 2\n\nto error to bring it into the range [ -, ].\n\nMassachusetts Institute of Technology Subject 2.017\n3. Integrator Windup\n- A purely linear effect that has broken many systems and\ncaused damage and injury!\n- Basic issue: The integrator in the controller builds up a\nlarge control signal over time if the system is prevented\nfrom responding.\nPID: Kp *error + Kd *d(error)/dt + Ki ∫\n\nerror dt\nSolution: constrain this part of the control to be within a\ncertain neighborhood of zero.\nplant output\nreference\nintegrator channel\nof control\ntime\n\"release\"\nMotions so large models\ndon't hold and\ncomponents fail!\n\nMassachusetts Institute of Technology Subject 2.017\n4. Sensor Noise & Outliers\n- Most common model for sensor\nnoise is Broadband, Gaussian:\n- Broadband means no particular\nfrequency is favored - spectrum\nis flat; white noise.\n- Gaussian means samples fit the\nprobability distribution function:\nN(0,1) = 1 / sqrt(2) * exp [ - x2 / 2 ]\nSuch processes are defined\ncompletely by variance\n\nand\nmean value xo :\nN(xo ,) = xo + sqrt() N(0,1)\n1000 samples of a zero-mean,\nunit variance normal variable\nComputing the variance from n samples:\n\n= [ (x1 -xo )2 + (x2 -xo )2 + ... + (xn -xo )2 ] / (n-1)\nN(0,1)\nx\nnumber of samples\n\nMassachusetts Institute of Technology Subject 2.017\nLinear Filtering\nUse good judgment!\nfiltering brings out trends, reduces noise BUT\nfiltering obscures dynamic response\nCausal filtering: yf (t) depends only on past measurements - appropriate for\nreal-time implementation\nExample: yf (t) = (1-) yf (t-t) + y(t) (\"first-order lag\")\nAcausal filtering: yf (t) depends on all measurements\n- appropriate for post-processing\nExample: yf (t) = [ y(t+t) + y(t) + y(t-t) ] / 3 (\"moving window\")\nConvolution implies that the filter transfer function F(s) times the LaPlace\ntransform of the input signal will give the LaPlace transform of the filter\noutput:\nYf (s) = F(s) [ Yclean (s) + V(s) ]\nSince a white noise process has uniform spectrum, the quantity |F(j)|\ndetermines what frequencies will get through idea is to eliminate enough\nof the noise frequency band that the system dynamics can be seen.\nIMPACT ON CONTROL LOOP.\nFilter\nyclean + v = y\ny f\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Feedback Control System Design",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/bfcda6f40bad59b61b3f28ab8da1c86f_MIT2_017JF09_control.pdf",
      "content": "Feedback Control System Design\n2.017 Fall 2009\nDr. Harrison Chin\n10/29/2009\n\nAnnouncements\n- Milestone Presentations on Nov 5 in class\n- This is 15% of your total grade:\n5% group grade\n10% individual grade\n- Email your team's PowerPoint file to Franz and Harrison by 10 am on Nov 5\n- Each team gets 30 minutes of presentation + 10 minutes of Q&A\n- Select or design your own presentation template and style\n\nControl Systems\n- An integral part of any industrial society\n- Many applications including transportation, automation,\nmanufacturing, home appliances,...\n- Helped exploration of the oceans and space\n- Examples:\n- Temperature control\n- Flight control\n- Process control\n- ...\n\nTypes of Control Systems\nPlant\ny\nr\nSensors\nActuators\nController\nu\nd\ncontrol\ninput\ndisturbance\ncommand\noutput\nOpen loop system\nPlant\n+\n_\ny\nr\ne\nSensors\nActuators\nController\nu\nd\nerror\ncontrol\ninput\ndisturbance\ncommand\noutput\nClosed loop system\n\nControl System Comparison\n- Open loop:\n- The output variables do not affect the input variables\n- The system will follow the desired reference commands if no unpredictable effects occur\n- It can compensate for disturbances that are taken into account\n- It does not change the system stability\n- Closed loop:\n- The output variables do affect the input variables in order to maintain a desired system behavior\n- Requires measurement (controlled variables or other variables)\n- Requires control errors computed as the difference between the controlled variable and the reference\ncommand\n- Computes control inputs based on the control errors such that the control error is minimized\n- Able to reject the effect of disturbances\n- Can make the system unstable, where the controlled variables grow without bound\n\nOverview of Closed Loop Control Systems\nDisturbances\nComputer /\nMicrocontroller\nPlant\nInputs\nOutputs\nSensors\nActuators\nADC\nDAC\nControl Algorithm\nScope\nFunction\nGenerator\nModel\nPower Amp\nReference Inputs\n(Setpoints)\n\nControl System Representations\n- Transfer functions (Laplace)\n- State-space equations (System matrices)\n- Block diagrams\n⎩\n⎨\n⎧\n+\n=\n+\n=\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\nt\nu\nt\nx\nt\ny\nt\nu\nt\nx\nt\nx\nD\nC\nB\nA\n&\n+\n_\n)\n(s\nY\n)\n(s\nR\n)\n(s\nE\n)\n(s\nG\n)\n(s\nD\n)\n(s\nGc\n)\n(s\nH\n)\n(s\nGd\n+\n+\n\nLaplace Transform\n- Convert functions of time into functions that are algebraic in the\ncomplex variables.\n- Replaces differentiation & integral operations by algebraic\noperations all involving the complex variable.\n- Allows the use of graphical methods to predict system\nperformance without solving the differential equations of the\nsystem. These include response, steady state behavior, and\ntransient behavior.\n- Mainly used in control system analysis and design.\n\nLaplace vs. Fourier Transform\n- Laplace transform:\n- Fourier transform\n- Laplace transforms often depend on the initial value of the\nfunction\n- Fourier transforms are independent of the initial value.\n- The transforms are only the same if the function is the same both\nsides of the y-axis (so the unit step function is different).\n∫\ninf\n-\n=\n)\n(\n)\n(\ndt\ne\nt\nf\ns\nF\nst\n)\n(\n)\n(\ns\nsF\nt\nf\n⇒\n′\n∫\ninf\ninf\n-\n-\n=\ndt\ne\nt\nf\nF\nt\njω\nω\n)\n(\n)\n(\n\nSystem Modeling (1st Order System)\nTransfer function:\nDifferential equation:\nLaplace transform\n)\n(\n)\n(\n)\n(\ns\nF\ns\nbV\ns\ns\nmV\n=\n+\n)\n(\n)\n(\n)\n(\nt\nf\nt\nbv\nt\nv\nm\n=\n+\n&\n(\n)\n(\n)\n/\n/\n)\n(\n)\n(\n+\n=\n+\n=\ns\nb\nm\nb\nb\nms\ns\nF\ns\nV\n)\n(\n)\n(\n=\n+\nt\nbv\nt\nv\nm&\nt\nm\nb\ne\nt\nv\nt\nv\n⎟⎠\n⎞\n⎜⎝\n⎛\n-\n=\n)\n(\n)\n(\n(\n)\nτ\n/\n-\n=\n-\n=\n-\n=\nm\nb\nb\nm\ns\n.1\n1 =\n×\n-e\n5.1\n≈\nτ\nTime constant\n\nSystem Modeling (2nd Order System)\n)\n(\n)\n(\n)\n(\n)\n(\nt\nf\nt\nkx\nt\nx\nb\nt\nx\nm\n=\n+\n+ &\n&&\nb\nk\nm\nv\nx,\n)\n(\n)\n(\n)\n(\nt\nf\nt\nbv\nt\nv\nm\n=\n+\n&\n⎟⎠\n⎞\n⎜⎝\n⎛\n+\n=\n-\n-\n-\n-\nt\nm\nk\nm\nb\nt\nm\nk\nm\nb\nt\nm\nb\nBe\nAe\ne\nx\n)\n/\n(\n)\n/\n(\n)\n/\n(\n)\n/\n(\n)\n/\n(\n⎪\n⎪\n⎩\n⎪⎪\n⎨\n⎧\n=\n=\n⇒\n+\n+\n⇔\n+\n+\nkm\nb\nm\nk\nk\nbs\nms\ns\ns\nn\nn\nn\nζ\nω\nω\nζω\n\n2nd Order System Poles\n%\n×\n=\n=\n-\n=\n⎟\n⎟\n⎠\n⎞\n⎜\n⎜\n⎝\n⎛\n-\n-\nζ\nζπ\nζω\nζ\nω\nπ\ne\nOS\nT\nT\nn\ns\nn\np\n=\n+\n+\nn\nns\ns\nω\nζω\n,1\n1 ζ\nω\nζω\nω\nσ\n-\n±\n-\n=\n±\n-\n=\nn\nn\nd\nd\nj\nj\ns\n\nSystem Identification (Time Domain)\nStep Input, Open Loop\nτ\n\nSystem Identification (Frequency Domain)\n-2\nFrequency (Hz)\nGain\nZ-Axis\n\n-300\n-200\n-100\nFrequency (Hz)\nPhase Lag (deg)\nMeasured\nModel\nFit\nCenter Stage Modes\n\nClosed-Loop Transfer Function\n- The gain of a single-loop feedback system is given by the\nforward gain divided by 1 plus the loop gain.\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\ns\nH\ns\nG\ns\nG\ns\nG\ns\nG\ns\nG\nc\nc\ncl\n+\n=\n+\n_\n)\n(s\nE\n)\n(\n)\n(\ns\nG\ns\nGc\n)\n(s\nH\n)\n(s\nR\n)\n(s\nY\n\nPID Controller Transfer Function\n⎟\n⎟\n⎟\n⎟\n⎠\n⎞\n⎜\n⎜\n⎜\n⎜\n⎝\n⎛\n⎟⎠\n⎞\n⎜⎝\n⎛\n+\n⎟\n⎠\n⎞\n⎜\n⎝\n⎛\n+\n=\n+\n+\n=\n+\n+\n=\ns\ns\nK\nK\ns\nK\nK\nK\ns\ns\nK\ns\nK\nK\ns\nK\ns\nK\nK\ns\nG\ni\nd\ni\np\ni\nd\np\ni\nd\ni\np\nc\n)\n(\n\nDisturbance Rejection\n(Active Vibration Cancellation)\nController\ndisturbance\nP, PI, PD, PID,...\nPlant\n\nControl Actions\n- Proportional - improves speed but with steady-state error\n- Integral - improves steady state error but with less stability, overshoot,\nlonger transient, integrator windup\n- Derivative - improves stability but sensitive to noise\n\nRoot Locus\n- Can we increase system damping with a simple proportional control ?\nDominant Poles\nσ\nσ\n\nSISO Design Tool\n-\ncommand: 'sisotool' or 'rltool'\nPID Controller Transfer Function\nCourtesy of The MathWorks, Inc. Used with permission.\nMATLAB and Simulink are registered trademarks of The MathWorks, Inc.\nSee www.mathworks.com/trademarks for a list of additional trademarks.\nOther product or brand names may be trademarks or registered trademarks of their respective holders.\nMATLAB\nMATLAB\n\nState-Space Representation\n⎩\n⎨\n⎧\n+\n=\n+\n=\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\nt\nu\nt\nx\nt\ny\nt\nu\nt\nx\nt\nx\nD\nC\nB\nA\n&\n⎩\n⎨\n⎧\n+\n=\n+\n=\n⇒\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\ns\nU\ns\nX\ns\nY\ns\nU\ns\nX\ns\nsX\nD\nC\nB\nA\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\ns\nU\ns\ns\nX\ns\nU\ns\nX\ns\nB\nA\nI\nB\nA\nI\n-\n-\n=\n⇒\n=\n-\nD\nB\nA\nI\nC\nD\nB\nA\nI\nC\n+\n-\n=\n=\n⇒\n+\n-\n=\n-\n-\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\ns\ns\nU\ns\nY\ns\nG\ns\nU\ns\nU\ns\ns\nY\n\nCharacteristic Polynomial\nResolvent\n)\ndet(\n)\ndet(\n)\ndet(\n)\ndet(\n)\n(\nadj\n)\n(\n)\n(\n\nA\nI\nA\nI\nBC\nA\nI\nB\nA\nI\nA\nI\nC\nB\nA\nI\nC\nD\n-\n-\n-\n+\n-\n=\n⎥⎦\n⎤\n⎢⎣\n⎡\n-\n-\n=\n-\n=\n⇒\n=\n-\ns\ns\ns\ns\ns\ns\ns\nG\nif\nMATLAB ss2tf command uses\nthis formula to compute the\ntransfer function(s)\nCharacteristic polynomial\n\nControllability\nx2\nx(tf)\nx(t0)\nx1\nCourtesy of Kamal Youcef-Toumi. Used with permission.\n\nObservability\nCourtesy of Kamal Youcef-Toumi. Used with permission.\n\nStabilizability and Detectability\nCourtesy of Kamal Youcef-Toumi. Used with permission.\n\nExample\n- Can we observe and/or control the position (x) of the following\nsystem?\nx&\nx\nu\n\nFull-State Feedback\n⎩\n⎨\n⎧\n=\n+\n=\nx\ny\nu\nx\nx\nC\nB\nA\n&\n[\n]\ndet\n=\n-A\nIs\nOpen-loop characteristic equation:\nx\nu\nK\n-\n=\n(\n)x\nx\nx\nx\nBK\nA\nBK\nA\n-\n=\n-\n=\n&\n[\n]\n)\n(\ndet\n=\n-\n-\nBK\nA\nIs\nClosed-loop characteristic equation:\n\nWhere to Place The Poles?\n- Must meet the performance requirements:\n- Stability\n- Speed of response\n- Robustness\n- For a given state the larger the gain, the larger the control input\n- Avoid actuator saturation\n- Avoid stressing the hardware (not exciting any structural modes)\n- The gains are proportional to the amounts that the poles are to be\nmoved. The less the poles are moved, the smaller the gain matrix.\n\nButterworth Pole Configurations\n- The bandwidth of a system is governed primarily by its dominant\npoles (i.e., the poles w/ real parts closest to the origin)\n- Efficient use of the control signal would require that all the\nclosed-loop poles be about the same distance from the origin\n(a.k.a Butterworth configuration)\n(\n)\n.2\n.2\n)\n(\n)\n(\n)\n(\n)\n(\n+\n+\n+\n+\n+\n=\n+\n+\n+\n=\n+\n+\n=\n+\n=\ns\ns\ns\ns\ns\nB\ns\ns\ns\ns\nB\ns\ns\ns\nB\ns\ns\nB\n\nState-Space Design Summary\n- Formulate the state-space model\n- Make sure the system is both controllable and observable by checking the\nranks of the controllability and the observability matrices\n- Add additional actuators if necessary\n- Add additional sensors if necessary\n- Eliminate redundant states\n- Select a bandwidth high enough to achieve the desired speed of response\n- Keep the bandwidth low enough to avoid exciting unmodeled high-frequency\nmodes and noise\n- Place the poles at roughly uniform distance from the origin for efficient use of\nthe control effort\n\nExample\n⎩\n⎨\n⎧\n=\n+\n=\n)\n(\n)\n(\n)\n(\n)\n(\n)\n(\nt\nx\nt\ny\nt\nu\nt\nx\nt\nx\nC\nB\nA\n&\n⎥⎦\n⎤\n⎢⎣\n⎡\n= 1\nB\n⎥⎦\n⎤\n⎢⎣\n⎡\n-\n=\nA\n[\n]1\n=\nC\nPlace closed-loop poles according to the Butterworth configuration\n[\n]\n)\n(\n)\n(\ndet\n+\n+\n=\n=\n-\n-\ns\ns\ns\nB\ns\nBK\nA\nI\n(\n)\n(\n)\na\na -\n⎥⎦\n⎤\n⎢⎣\n⎡\n′\n=\n-)\nQW\nK\nBass-Gura formula:\nAckermann's formula: MATLAB command \"acker(A,B,p)\"\n\nCode\n% 2.14/2.140 State-Space Method Example\n%% Set up an SS model\nA = [0 1\n4 -2];\nB = [0\n1];\nC = [1 1];\nD = 0;\n%% Convert to transfer function\n[num,den] = ss2tf(A,B,C,D,1);\nsys_tf = tf(num,den)\nzpk(sys_tf)\npzmap(sys_tf)\nhold\n%% Test controllability and observability\nCtrlTestMatrix = ctrb(A,B)\nrank(CtrlTestMatrix)\nObsrbTestMatrix = obsv(A,C)\nrank(ObsrbTestMatrix)\n%% Place the poles to Butterworth configuration\np = roots([1 sqrt(2) 1])\n% K = acker(A,B,p) % this method is not numerically\nreliable and starts to break down rapidly for problems of\norder greater than 5\nK = place(A,B,p)\n% check the closed-loop pole locations\neig(A-B*K)\npzmap(1,poly(eig(A-B*K)))\nMATLAB\nExample\n\nFrequency Design Methods\n- Loop shaping\n- Bode, Nyquist\n- Crossover frequency\n- Closed-loop bandwidth\n- Phase margin\n\nFrequency Response (Gain and Phase)\n)\n(s\nGcl\n)\n(t\nvin\n)\n(t\nvout\nVin p-p\nVout p-p\nPhase shift\n\nFrequency Response (Bode Plot )\n- The frequency response of a system is typically expressed as a Bode plot.\nGain Plot\nPhase Plot\n.0\nsin\nM\nM\nM c\n⋅\n=\n⎟\n⎠\n⎞\n⎜\n⎝\n⎛\n⋅\n=\nπ\nτ\nπ\nω\n=\n=\nc\nc\nf\ndB\n)\n.0\n(\nlog\n=\n⋅\nCutoff frequency\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Introduction to Discrete-Time Systems",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/a0272c475e92eb7dce1a8b9deaac58c4_MIT2_017JF09_discrete.pdf",
      "content": "Massachusetts Institute of Technology 2.017\nIntroduction to Discrete-Time\nSystems\n\nMassachusetts Institute of Technology 2.017\n- Linear filters will not handle outliers very well - they are\ninterpreted as impulses\n- First defense against outliers: find out their origin and\neliminate them at the beginning!\n- Detection: Exceeding a known, fixed bound, or an\nimpossible deviation from previous values. Example: vehicle\nspeed >> the possible value given thrust level and prior tests.\n- Second defense: set data to NaN (or equivalent), so it\nwon't be used in any calculations.\n- Third defense: try to fill in.\nExample:\nif abs(x(k) - x(k‐1)) > MX,\nx(k) = x(k‐1) ;\nend;\nCan get lost if multiple outliers occur!\n\nMassachusetts Institute of Technology 2.017\nTime Resolution in\nSampled Systems\n- The Sampling Theorom shows that the highest frequency that\ncan be detected by sampling at frequency s = 2t is the\nNyquist rate: N = s / 2.\n- Higher frequencies than this are \"aliased\" to the range below\nthe Nyquist rate, through \"frequency folding.\" Includes sensor\nnoise!\n- The required rate for \"visual\" analysis of the signal, and phase\nand magnitude calculation is much higher, say ten samples per\ncycle.\nFrequency\nfolding\nN\nN\n\nMassachusetts Institute of Technology 2.017\nFiltering of Signals in\nDiscrete Time\nUse good judgement!\n- filtering brings out trends, can reduce noise, but\n- filtering obscures some properties of the signal\nCausal filtering: xf (t) depends only on past measurements -\nappropriate for real-time implementation\nExample: xf (t) = (1 - ) xf (t-t) + x(t-t)\nFirst-order lag, backward Euler\nAcausal filtering: xf (t) depends on past and future measurements\n- appropriate for post-processing\nExample: xf (t) = [ x(t+t) + x(t) + x(t-t) ] / 3\nMoving window, centered, uniform weighting\nFilter\nx\nxf\n\nMassachusetts Institute of Technology 2.017\nA first-order filter transfer\nfunction in the freq. domain:\nxf (j) / x(j) =\n\n/ (j\n\n+ )\nAt low , this is approximately\n1 ( = )\nAt high , this goes to 0\nmagnitude, with 90 degrees\nphase lag (/ j\n\n= -j)\nTime domain equivalent:\ndxf / dt =\n\n(x - xf )\nIn discrete time, try this quick\nalgorithm:\nxf (k) = (1-t) xf (k-1) +\nt x(k-1)\n\nMassachusetts Institute of Technology 2.017\nThinking about discrete-time signals: time step t\nbetween xk and xk-1\nExample:\ndx/dt = u\nFourier Transform:\nj\n\nX(j) = U(j)\nX(j) / U(j) = 1 / j\nLet q be the delay operator: q-transform: X(q) =\n\nxk q-k\nThis means: X(q) = x0 + x1 q-1 + x2 q-2 + ...\nMake a discrete-time approximation for the example:\ndx/dt = u\n\n(xk - xk-1 ) / t = uk-1\nX(q) (1 - q) / t = q U(q)\nX(q) / U(q) = q t / (1 - q)\nSo j\n\n= (1 - q) / q t\nfor this case backward Euler\nq = 1 / (1 + jt)\nt\nxk\nxk-1\ninf\n\nMassachusetts Institute of Technology 2.017\nTry a different method:\ndx/dt = u\n\n(xk - xk-1 ) / t = uk\nX(q) (1 - q) / t = U(q)\nX(q) / U(q) = t / (1 - q)\nSo j\n\n= (1 - q) / t\nfor this case forward Euler\nq = 1 - jt\nLet's do a more careful job by using both old and new u's:\ndx/dt = u\n\n(xk - xk-1 )/ t = (uk + uk-1 ) / 2\nX(q) (1 - q) / t = U(q) (1 + q) / 2\nX(q) / U(q) = (1 + q) t / 2 (1 - q)\nSo j\n\n= 2 (1 - q) / (1 + q) t\nbilinear approximation\nq = (1 - jt / 2) / (1 + jt / 2)\n\nMassachusetts Institute of Technology 2.017\nexact\nbilinear\nforward\nEuler\nbackward Euler\nFourier Transform of the Delay:\nF (q) = ∫-inf\n\ne-j\n\n(\n\n- t) d\n= e-jt\nHeuristic\ndiscretizations are\napproximations of the\nexponential!\ninf\n\nMassachusetts Institute of Technology 2.017\nTranslating an analog system into discrete-time, e.g.,\nDigital Filtering and Control:\nExample:\ndx/dt = -x + u (low-pass filter with cutoff frequency 1rad/s)\nX(j) / U(j) = 1 / (j\n\n+ 1)\nSubstitute the bilinear approximation:\nX(q) / U(q)\n= (1 + q) / [(1 + 2 / t) + q (1 - 2 / t) ]\nxk = [-(1 - 2 / t) xk-1 + uk + uk-1 ] / (1 + 2 / t)\nPseudo-code: It's ready to go!\nFact: TF's X(j) / U(j)\nand X(q) / U(q) have almost\nthe same magnitude and\nphase plots vs\n\nwhen\nq = e-jt (up to the Nyquist rate)\ndiscrepancy\n\nMassachusetts Institute of Technology 2.017\nConsider vector case:\ndx/dt = Ax, x(0) = x0\nSolution must satisfy\ndx(0)/dt = Ax0 and x(0) = x0\nSolution is\nx(t) = eAt x0\nwhere the eAt is a matrix exponential, obeying many of the rules of\nthe scalar exponential:\nd(eAt)/dt = AeAt\neAt = I + At + A2t/2! + ...\ne0 = I (identity)\netc...\nConsider the system\ndx/dt = Ax + Bu\neAtB is the impulse response of the system such that\nx(t) = eAt x0 + ∫\n\neA(t-) B u() d\n\nOR\nxk = eAt xk-1 + ∫tk-1 eA(tk-) B u() d\nLet u be constant on tk-1 to tk (zero-order hold):\nxk = eAt xk-1 + ∫tk-1 eA(tk-t) duk-1\nxk = xk-1 + uk-1\ntk\nt\ntk\n1:1 mapping between continuous and\ndiscrete-time systems\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Navigation Sensors and Systems",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/29bd12e4c5efe888fafabfce35a276ce_MIT2_017JF09_navigation.pdf",
      "content": "Massachusetts Institute of Technology Subject 2.017\nNavigation Sensors and\nSystems\nA reference used:\nTitterton, D.H., and J.L.\nWeston 1997. Strapdown\ninertial navigation technology.\nPeter Peregrinus and IEE,\nLondon.\n\nMassachusetts Institute of Technology Subject 2.017\nCoordinate\nFrames\nx\ny\nz,z'\nx'\ny',y''\nx'',x'''\nz''\ny'''\nz'''\nObjective: to express a vector q in various\nframes of reference\nAny frame can be transformed to another\nframe through a translation and a rotation\nthrough three Euler angles []. One of\ntwelve possible sequences is:\nBase frame is [x,y,z]\na. Rotate about z by to give [x',y',z']\nb. Rotate about y' by\n\nto give [x'',y'',z'']\nc. Rotate about x'' by\n\nto give [x''',y''',z''']\nLet q be given in the base frame - then q'''\n(given in the rotated frame) is:\nq''' = R() q\nwhere R is the rotation matrix\n\nq\nBoard example!\n\nMassachusetts Institute of Technology Subject 2.017\nDead-Reckoning\n- If you have nothing but compass and an\nestimate of speed:\n- U = speed\n-\n\n= heading\n- dX/dt = U cos\n- dY/dt = U sin\n- RELATIVE ONLY\nt\nUt\nX\nY\nX(t),Y(t)\nX(t+t),Y(t+t)\n\nMassachusetts Institute of Technology Subject 2.017\nWhat is Inertial Navigation?\n- Navigation: Locating oneself in an\nenvironment, e.g., dead-reckoning.\n- Inertial: use of Newtonian mechanics:\n- Body in linear motion stays in motion unless\nacted on by an external force, causing an\nacceleration:\nf = d(m v)/dt m dv/dt ( * if dm/dt = 0!)\n- A mechanical accelerometer is effectively a\nload cell.\n- Rotational velocity is given by a gyroscopic\neffect:\n\n= d (J ) /dt\nor\nyaw torque = Jspin X spin_rate X pitch_rate\n- A mechanical rate gyro is effectively a\ngyroscope with a load cell.\nforce\nv(t+t)\nv(t)\nspin\npitch\nyaw\ntorque\nm\nv\n\nMassachusetts Institute of Technology Subject 2.017\nspin\npitch\n(t+t)\n(t)\n\nv(t)\nv(t+t)\nv\nAccelerometer measures\ntotal acceleration in the\ninertial frame, projected\nonto sensor frame.\nIncludes, e.g.,\ncentrifugal effect, and\nradius x d/dt, etc.\nRate gyro measures\nplatform-referenced\nangular rates:\np (roll rate)\nq (pitch rate)\nr (yaw rate)\n\n= d/dt(J )\n= J\n\n/ t *\nF = d/dt(mv)\n= m v / t *\nm = mass\nv = velocity vector\nF = force vector\nJ = inertia matrix\n\n= rotation rate vector\n\n= torque vector\n\nMassachusetts Institute of Technology Subject 2.017\nWhat does accelerometer give? Sum of\nactual linear acceleration at sensor\nPLUS projection of gravity\nSuppose a 2D sensor is inclined at\nangle . Then measurements are:\nm1 = dv1 /dt + g sin\nm2 = dv2 /dt + g cos\nCase of three sensors:\nm1 = dv1 /dt + g R13 ()\nm2 = dv2 /dt + g R23 ()\nm3 = dv3 /dt + g R33 ()\nOR\nm = dv/dt + g R*,3 ()\nsensor\naxis 1\nsensor\naxis 2\nactual\nacceleration\nat the sensor\nApparent\nacceleration due\nto gravity\nmeasured\nacceleration\n\nSuppose\n\n= 0 , you know the Euler\nangles, and you can correct for gravity;\nthen integrate directly:\nv is sensor-referenced velocity, related\nto velocity in an inertial frame by\nvi = RT()v\n[] are Euler angles; they completely\ndefine the attitude of the sensor\n\nMassachusetts Institute of Technology Subject 2.017\nRate gyros are pure - they give exactly the sensor-referenced rates\nCan a combination of three accelerometers and three rate gyros provide attitude?\nAccelerometers contain g projected through the attitude.\nGyros give only angular rate; an integral will drift over time!\nConsider one rate gyro and two accelerometers:\nmg1 = ddt\nma1 = dv1 /dt + g sin\nma2 = dv2 /dt + g cos\nOne procedure for an attitude package (if accelerations are small compared to g:\nintegrate\n\nestimate\ng cos()\ng sin()\ndv2 /dt ~ 0\ndv1 /dt ~ 0\nma1\nma2\nmg1\nk\n+\n+\n+\n_\n+\n_\n\nMassachusetts Institute of Technology Subject 2.017\nSome Gyro Corrections:\nRotation of the earth:\nE cos L\nCurvature of the earth:\nv / R\nCoriolis acceleration:\nE x v\nSome Accelerometer Corrections:\nCentripetal acceleration due to Earth rotation:\nE\n2 / R cos L\nVariation of gravity field with lat./long.: e.g.,\ng(z=0) = 9.780318 * [1 + 0.00530 sin2 L -\n0.000006 sin2 2L ]\nL: lattitude\nE : earth rotation vector;\nmagnitude is 0.0042 deg/s\nR: Earth radius, 6400km\nv: platform velocity\nE\nv(t)\nv(t+t)\nv\n(view from above North Pole)\n\nMassachusetts Institute of Technology Subject 2.017\nmodel of Earth's\ngravitational field\nIntegrate\nResolve\nCorrections from\ngravity, Earth rotation\nand curvature, and\nCoriolis effects\nIntegrate,\nintegrate\nTransform to\nglobal frame\nattitude\nangular\nrates\nvelocity,\nposition\nAccelerometer\nmeasurements\nGyro\nmeasurements\nThe General Case\n\nMassachusetts Institute of Technology Subject 2.017\nGyroscope Types\n- Mechanical: 0.05-20 degrees per hour drift.\n- Vibration (e.g., tuning fork) : 360 - 3600 degrees\nper hour. Cheap and small!\n- Optical (ring laser): 0.001-10 degrees per hour.\n- Optical (fiber optic) : 0.5 - 50 degrees per hour.\nAccelerometer Types\n- Displaced spring\n- Pendulous mass: 0.1-10 mg bias\n- Silicon MEMS: < 25 mg Small, can be cheap\nHoneywell HG1700:\n1 deg/hr ring-laser (3),\n1 mg silicon (3)\nCrossbow IMU700:\n20 deg/hr fiber optic (3),\n9 mg silicon (3)\nLitton LM100 INS:\n0.003 degree/hr ring laser\n0.025 mg silicon\n\nMassachusetts Institute of Technology Subject 2.017\nWhat is achievable with INS?\nThe Litton LM100 alone achieves ~1mile/hr drift; depends\nstrongly on errors in initialization.\nINTEGRATED NAVIGATION SYSTEM augments the inertial\nsystem with complementary sources - i.e., an absolute\nmeasurement:\nGPS hits (in air only)\nRadio beacon (aircraft)\nCelestial navigation (clear air only)\nDoppler radar (air) or Doppler acoustics (seabed)\nAltitude (air) or depth (water)\nRange using lasers (air) or acoustics (underwater)\nMagnetic field dip angle, relative to a map\nTerrain/scene matching, relative to an image database\nEtc.\n\nMassachusetts Institute of Technology Subject 2.017\nTwo Ranging Systems for Positioning\n1. GPS: Global Positioning Satellite\n- Speed of EM signals is 3x108 m/s in free\nspace, covering about 30cm in 1ns a\nGPS system with 5m precision is\nachieving time control of all components at\ntimes, which encode\ngarmin.com\nImage by NOAA.\nthe level of 15ns\n- Extremely well-described paths\n- Extremely accurate clocks on-board\n- Satellites fire words toward Earth at precise\ntheir own precise position and trajectory and time.\n- Receiver gets signals from multiple satellites triangulation\n\nsolution in 3-space\n- A one-way transmission - from the satellites to your receiver. We\nneed a very good time estimate on the receiver. This is found\niteratively, and is part of the \"warm-up\" time of your receiver.\n\nMassachusetts Institute of Technology Subject 2.017\nInterpreting Latitude/Longitude\n- Boston is at\nlatitude 42.37o N,\nlongitude 71.03o W (approx.)\n- 1 international nautical mile = 1852.00m\n- 1 degree of latitude\n= 60 nm = 111.12 km\n- 1 degree of longitude\n= 60 nm * cos(42.37o)\n= 44.33 nm = 82.10 km\n60 minutes in a degree\none minute latitude = 1852 m\none minute longitude = 1368 m\n60 seconds in a minute, etc.\nCommon format: decimal degrees (DD) - a double type\n\nMassachusetts Institute of Technology Subject 2.017\n2. Acoustic Ranging\n- Similar to GPS; speed of sound in water is ~1450 m/s, so\n1m precision requires timing precision around 0.6ms.\n- Accuracy limited by spatial variation of sound speed\n- Some use of one-way travel times, but two-way systems\nhave been more common to date, e.g., a long-baseline\n(LBL) system:\n- Vehicle pings using a source or transducer\n- Responders hear it, and ping back with unique frequencies.\nResponder locations are known to the vehicle\n- Vehicle receives the signals with a hydrophone, and measures a set\nof two-way travel times to each responder triangulation\n- An \"inverse\" problem: multiple hydrophones on vehicle, but\none responder\n\nan ultra-short baseline (USBL) system\nthat gives relative direction and range to target.\n\nMassachusetts Institute of Technology Subject 2.017\ntransponder\nsource\nhydrophone\nLong-Baseline\nAcoustic Navigation\nRequires: recording a signal at the\nhydrophone with high timing resolution,\nseparating multiple responses by\nfrequency (or some other\ncharacteristic), and solving a\ntrigonometry problem\n\nMassachusetts Institute of Technology Subject 2.017\nUltra-Short Baseline\nAcoustic Navigation\ndRange\nNote: the source can replace\nthe responder if it is only\nrequired to know the direction,\nnot the range\nRequires: recording signals at\nmultiple hydrophones with\nsynchronized and high-resolution\ntiming, calculating time\ndifferences between the signals,\nand solving a trigonometry\nproblem.\ntransponder\nhydrophone\nsource\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Autonomous Navigation of a Quadrotor Helicopter Using GPS and Vision Control",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/7369bbc1f12d80ecfdaba444961c44d0_MIT2_017JF09_sw1_final.pdf",
      "content": "Autonomous Navigation\nof a Quadrotor Helicopter Using\nGPS and Vision Control\nGroup 1\nDecember 10, 2009\n\nProject Tasks\nFly helicopter to a predetermined location\nusing GPS feedback\nTake pictures at this location\nFly a planned path along GPS coordinates\nTake pictures along the reference path\nUse GPS and camera feedback to visually\nservo to and land on a marked target\n\nPractical Applications\nAny process involved with the discovery\nand inspection of small objects\nUAV refueling midflight\nLand mine detection by autonomous\nground robots\nLanding of an AUV or parking an\nautonomous ground vehicle at a certain\nlocation based on object recognition\n\nQuadrotor Specifications\nWeighs 1.25 kg\n200 g maximum payload\n23 minute battery life (hovering)\n12 minute battery life (with max load)\nPhoto of the Ascending Technologies Hummingbird Autopilot Quadrocopter removed due to copyright restrictions.\n\nQuadrotor Dynamics\nIndependent thrust, pitch, roll and yaw.\nQuadrotor able to make precise maneuvers.\nCan move one of two ways\nPitch/Yaw Pitch/Roll\nOperates in random environment (wind)\n\nMain Battery\nCompass\nCompass XBee\nGPS\nGPS XBee\nQuadrotor XBee\nPower Circuit\nCurrent Hardware Layout\n\nElectrical and Signal Flow Schematic\nCompass\nGPS\n12V Battery\nPower\nCircuit\nQuadrotor\nXBee\nXBee\nXBee\nXBee\nXBee\nXBee\ninv\n9V Battery\n\nBlock Diagram\nActual\nPosition\nController\nQuadrotor\nSensors\nError\nDesired\nPosition\n+\n_\nCommands\nObserved\nPosition\nDisturbances\n\nController:\n- Point and go control strategy\n- Needs to be robust against\nsensor noise and wind gusts\n- Written in MATLAB\nController\nQuadrotor\nSensors\n\n- Controllable pitch, roll,\nthrust, and yaw-rate.\n- Low drag\n- Internal stabilizing controls\nController\nQuadrotor\nSensors\nQuadrotor:\n\nSensors:\n- GPS\n- Compass\n- Camera\n- Quadrotor's internal\nsensors\n- Communicate wirelessly\nController\nQuadrotor\nSensors\n\nCompass, Power\nCircuit, and Anemometer\nStudent A\n\nCompass\nWireless serial\nconnection\nSends data to the\nlaptop via XBee.\nSIGNAL FROM THE\nCOMPASS MUST\nBE INVERTED\nBEFORE IT IS FED\nTO THE XBEE\nMounted on the vehicle\nInverting Op-Amp\nwww.digi.com\nwww.ocean-server.com\nImages from the OpenClipArt Library and mangonha on Flickr.\n\nVehicle\nCompass\nThe heading is saved directly to a variable in MATLAB. (Using a C++\nmex function called \"compmat\").\nCompass\nMATLAB\nHeading Data\nCommands\n\nPower Board Circuit\n5 V out\n3 V out\n12 V in\nBig, but more reliable\nPhoto by Ed Halley.\n\nA small AC generator. The output voltage\nincreases linearly to the wind speed.\nAnemometer\nCoded the Arduino so it could\nread the analog signal\nwww.nrgsystems.com\nwww.arduino.cc\nPhoto by Ed Halley.\n\nWindy Environment\nThe data was collected on a windy\nday, within the same hour.\n\nRough Simulation\nPath of the vehicle\nWind direction is\nassumed to vary\nwithin this angle\nDesired Position\n\nRough Simulation\nIdeal path with no wind\nActual path due to wind\nCommand: Move to (10,-10).\nThe effect is quite significant -\nThis should be considered if we\nwant to land on a small target\n\nGPS Hardware and\nIntegration\nStudents C and E\n\nGPS Hardware\nXBee Communication\nBack-up Battery\nRetains configuration settings\nQuadrotor Integration\n5V from power circuit\n\nCurrent GPS Set-up\nPower\nCircuit\n3.3V\nWatch\nBattery\nDiode\nImages from the OpenClipArt Library and mangonha on Flickr.\n\nGPS Accuracy Tests (Stationary)\nGPS Only ± 15m\nWAAS Enabled GPS ± 5m\nhttp://www.gpsvisualizer.com/map?output_home\n-30\n-20\n-10\nTime (sec)\nX Error (meters)\nError in X\n\n-20\n-10\nTime (sec)\nY Error (meters)\nError in Y\n\nGPS alone\nGPS w/ WAAS\n10m\n\nWalk with GPS and Mock Controller\n-5\nTimesteps\nRoll\n-5\nTimesteps\nPitch\n10m\nRight\nLeft\nForward\nBack\nhttp://www.gpsvisualizer.com/map?output_home\n\n10m\nProposed Region for Switch to Vision Control\nhttp://www.gpsvisualizer.com/map?output_home\n\nWaypoint Testing\nCombines compass and GPS\nAdds heading\nUse GPS to pick waypoints\nWalk quadrotor by following commands\nfrom controller\nCheck for arrival at destinations\n\nWaypoint Testing\nhttp://www.gpsvisualizer.com/map?output_home\n10m\n\nGPS on Flying Quadrotor\n10m\nStart\nT=50 sec\nhttp://www.gpsvisualizer.com/map?output_home\n\nThe Next Step:\nRead GPS signal through XBee communication\nMaintain GPS settings using a watch battery\nIntegrate GPS hardware with Quadrotor\nTransmit GPS signal from Quadrotor\nSend GPS data to flight controller\nControl quadrotor with GPS feedback\nAccomplished:\n\nControl System\nStudent B\n\nDeliverables\nDemonstrate closed loop control on a LTI\nmodel of the quadrotor\nDemonstrate closed loop control of the\nquadrotor\n\nControl System Design\nStrategy: Point and go\nHeading is set initially and is static\nControlled variables\nYaw rate: points at the target\nRoll: keeps on line to target\nPitch: determines speed forward or backwards\nThrust: offsets gravity and brings rotor to correct\nheight\nMeasured variables\nHeading: compass\nLatitude, Longitude positions: GPS\nHeight: internal pressure sensor\nPD control\n\nModel Assumptions\nLinear Time Invariant\nSmall angle pitch and roll (less than 5\ndeg)\nMax, Min thrust = 1.25mg and 0.75mg\nRate of system: 4 Hz\nAdded random noise to position data:\n+/- 5m Gaussian error in X,Y\n+/- 1m Gaussian error in height\n+/- 10 Gaussian error degree for heading\n\nFeatures\nSimulation mode and communication mode\nWaypoints enabled\nMid-run user-activated terminate\nMid-run user-activated hover toggle\nFlight data written to a file\nRecalculates route when overshoots\n\nFuture Work\nDesign against bad data-packets\nTune gains for the real quadrotor\n\n-50\nPosition in X,Y\nX (m)\nY (m)\n-500\nHeading\nTime (s)\nAngle (degrees)\n-5\nx 10\n-4\nPitch\nTime (s)\nAngle (degrees)\n-4\n-2\nx 10\n-5\nRoll\nTime (s)\nAngle (degrees)\n-10\nHeight\nTime (s)\nHeight (m)\nSimulator Performance\n\nSimulator Performance\n-200\n-50\nPosition in X,Y\nX (m)\nY (m)\n-400\n-200\nHeading\nTime (s)\nAngle (degrees)\n-1\n-0.5\n0.5\nx 10\n-3\nPitch\nTime (s)\nAngle (degrees)\n-10\n-5\nx 10\n-5\nRoll\nTime (s)\nAngle (degrees)\n-10\nHeight\nTime (s)\nHeight (m)\n\nTo Do Differently\nUse a Cartesian coordinate control system\ninstead of radial\nStart with a control system that only uses\nGPS\n\nYaw Test\nDisturbed Quadrotor manually\nString contributed a restoring force\nInternal controls prevented fast\nmovements\nSet-up:\nquadrotor\ncompass\nUSB cable\nceiling\nstring\nImage from the OpenClipArt Library.\n\nData\n-200\n-150\n-100\n-50\nHeading\nTime (s)\nHeading (degrees)\n\nResults\nSteady state error\nGains too low\nSteady disturbance from the string\n30 second settling time\n\nArduino Microcontroller\nand Communication\nStudent D\n\nMega Arduino\nOn board control\nNo need for XBees\nSuccessful compass\ncommunication\nSuccessful camera\ncommunication\nCourtesy of Arduino.cc. Used with permission.\n\nHelped with CMUCam communication\nFailed to successfully communicate with\nquadrotor\nHelped others with programming\nOther Work\n\nNext Steps\nContinue work with Mega Arduino\nRead more about serial communication\nWhat Could've Been Done Differently\nResearch more early on\nBetter use of available resources (mentors)\n\nCMUCam and\nImage Processing\nStudent F\n\nImage Processing Goals\n\nTake pictures of a predetermined location\nand also along a reference flight path\n\nTrack a landing target at a known location\n\nVisually servo to the target using\nfeedback from the image\n\nFinding Distances in X, Y, and Z\nFind target size as fraction of pixels in the\nimage at known ranges\nWith a target of known size, we can find a\nparameter that converts pixels to distance\nat a known range\n\nT Packets\nT 84 132 4 1 172 250 255 12\nIndicates a color\ntracking data packet\nCentroid of\ntracked data\nBounding box\ncoordinates\nNumber of pixels that match\nthe tracked color\nConfidence\n\nWhat Went Wrong\nNeither CMUCam is ideal for our mission\nWireless communication never really\nworked\n\nXBee drops too many packets\nGPS waypoint tracking did not work\nRan out of time\n\nWhat We Could Have Done Differently\nProblem\nWorked independently--not the most effective\nSolution\nWeekly group meetings\nProblem\nStrategy depended on all hardware components working\nSolution\nDesign a simpler, more independent system\nProblem\nInexperience\nSolution\nTake more advantage of our resources\n\nQuestions?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Autonomous Navigation of a Quadrotor Helicopter Using GPS and Vision Control",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/b952caf995909ab13a7c34814555e212_MIT2_017JF09_sw1_milstone.pdf",
      "content": "Autonomous Navigation of a Quadrotor\nHelicopter Using GPS and Vision Control\nGroup 1\nPhoto of the Ascending Technologies Hummingbird Autopilot\nQuadrocopter removed due to copyright restrictions.\n\nProject Goals\n-\nFly helicopter to a predetermined location\nusing GPS feedback\n-\nTake pictures at this location\n-\nFly a planned path along GPS coordinates\n-\nTake pictures along the reference path\n-\nUse GPS and camera feedback to visually\nservo to and land on a marked target\n\nAutonomous\nlanding on\ntarget\nObtain\ncompass data\nObtain\nGPS data\nCommunicate\nbetween\nXBees\nPick a\ncontrol\nalgorithm\nWrite MATLAB\nflight control\ncode\nTest code on\na simulation\nCollect data\nwirelessly\nPut data into\nMATLAB\nSend commands\nand receive data\nto and from\nquadrotor\nMount hardware\non quadrotor\nHover in place,\nfly to position,\nand fly to multiple\npositions\nautonomously\nImage\nprocessing\nFlight\nControl\n\nObtain image\ndata from\ncamera\nSend\ncommands to\ncamera\nCommunicate\nbetween XBees\nwith camera\nTake pictures\nwirelessly\nPut data into\nMATLAB\nRecognize target\nwith camera\nFigure out\nvertical distance\nfrom target\nFind error in\nX, Y in image\nTurn signal\ninto visible image\nFind error in\nQuadrotor's\nposition\nSend data to\ncontroller\nLand autonomously\non marked target\n\nSoftware and Compass\nStudent A\n\nAccomplished\n-> Serial connection with XBees\n-> Wireless connection between the\ncompass and my laptop\n->Importing the readings to a MATLAB variable\n\nCompass\nWireless serial\nconnection\nSends data to the laptop\nvia XBee.\nSIGNAL FROM THE\nCOMPASS MUST BE\nINVERTED BEFORE IT\nIS FED TO THE XBEE!\nMounted on the vehicle\nInverting Op-Amp\nImages from the OpenClipArt Library and mangonha on Flickr.\n\nGetting the compass to work\n- In order to collect data, the output signal from\nthe compass must be inverted.\nReceiving serial data from\nthe compass via XBee. This\ndata can be imported to\nMATLAB.\n\nImporting Serial data to MATLAB\n- Luckily, we already have a VC++ code that can read the\nheading of the compass.\n- \"MexFunction\" and some other lines are added to the C Code\nin order to send the heading to matlab\n......\n..........\n#define\nYP_OUT\nplhs[0]\nvoid mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray* prhs[] ) { //start of\nthe mexfunction.\ndouble *yp;\nfloat tempheading;\nopencompass(); //opens compass\ntempheading = readcompass();\nWaitForSingleObject(headingMutex, INFINITE);\nheading = tempheading;\nReleaseMutex(headingMutex);\n..............\n...\n\nWhat the code is doing\n- The mex function \"compmat\" reads the\nheading of the compass at that instant.\n(returns one float type number)\n- Example: code that reads the heading for 10\nseconds (10 readings per sec)\nfor i=1:100\nheading(i) = compmat;\npause(0.1);\nend\nresults\n\nFuture Plans\n- Solder the whole thing up so it can be attached to the vehicle.\n- The XBee and the compass needs 3.3V. Figure out how to get\nthis voltage from the quadrotor's battery.\n- Try out the control code by flying the quadrotor with the\ncompass and the GPS attached.\n- After we start getting decent results, we can take off all the\nXBees and replace it with an Arduino; which will be much\nmore elegant.\n\nGPS Integration and Hardware\nStudents C and E\n\nProgress\nRead GPS signal directly connected to computer\nSuccessful XBee communication\nRead GPS signal through XBee communication\nTransmit GPS signal from Quadrotor\nSend data to MATLAB\n\nCurrent Set-up\nImages from the OpenClipArt Library and mangonha on Flickr.\n\nAccuracy Tests\nGPS Only ±20m\nWAAS Enabled GPS\n±5m\n\nQuadrotor Test\n\nThe Next Step:\n- Get MATLAB to read data from the XBee\n- Build a more permanent housing for the GPS\nFly to preset GPS coordinate\nMaintain position\nFly a planned path based on GPS\nMission Goals:\nRead GPS\nPut data into\nMATLAB\nSend to\ncontroller\nPosition command\n\nControl System\nStudent B\n\nDeliverables\nDemonstrate closed loop control on a LTI\nmodel of the quadrotor\nDemonstrate closed loop control of the\nquadrotor\n\nControl System Design\n- Yaw is set initially and is static\n- Depends on ability of quadrotor to pivot\n- Controlled variables\n- Yaw rate: points at the target\n- Roll: keeps on line to target\n- Pitch: determines speed forward\n- Thrust: offsets gravity and brings rotor to correct height\n- Measured variables\n- Yaw: compass\n- X, Y positions: GPS, camera\n- Height: Pressure sensor, GPS\nStrategy: Point and go\n\nModel Assumptions\n- Linear Time Invariant\n- Small angle pitch and roll\n- Max, Min thrust = 1.25*m*g and 0.75*m*g\n- Delta t=0.001 seconds\n- Added in a lot of random noise to x_dot,\ny_dot, z_dot and yaw\n\nPretty Pictures\n-20\n-12\n-10\n-8\n-6\n-4\n-2\nPosition in X, Y\nX (meters)\nY (meters)\n\nPretty Pictures\nDistance from target in X-Y plane\nTime (seconds)\nDistance (meters)\n\nPretty Pictures\n-2\nHeight\nTime (seconds)\nHeight (meters)\n\nImage Processing Goals\n-\nTake pictures of a predetermined location\nand also along a reference flightpath\n-\nTrack a landing target at a known location\n-\nVisually servo to the target using feedback\nfrom the image\n\nThe CMUCam2+\nz Specifications\nz Low res: 87x142\nz Hi res: 174x254\nz Features\nz Tracks motion\nz Tracks colors\nz Makes real-time\nhistograms\nz Face recognition\nPhoto of the CMUCam2+ removed due to copyright restrictions.\n\nLow Resolution Image\nHigh Resolution Image\n\nObstacles in Using the CMUCam\nz Poor implementation\nz GUI can directly execute functions, but the data\ngoes nowhere\nz GUI can't take frames and data simultaneously\nz Serial communications\nz CMU's recommendations don't work\nz Crashes MATLAB\nz Camera cannot directly save an image\n\nRelevant CMUCam Functions\nz Frame Difference (FD)\nz Track Color (TC)\nz Track Window (TW)\nz We choose to exclusively use TC\nz FD only works when the camera is stationary\nz TW only tracks colors in the center of the frame\n\nT Packets\nT 84 132 4 1 172 250 255 12\nIndicates a color\ntracking data packet\nCentroid of\ntracked data\nBounding box\ncoordinates\nNumber of pixels that\nmatch the tracked color\nConfidence\nThis is all the data we need to achieve the mission goals\n\nWhat's Next\nz Set up an XBee to work with CMUCam and\nMATLAB (without crashing)\nz Test CMUCam parameters in a mission\nenvironment\nz Establish visual servoing procedures\n\nArduino Microcontroller and\nCommunication\nStudent D\n\nAccomplished\nz Reading output from compass in Arduino\nMega\n\nBenefits of On Board Data Collection\nz Range:\nz 120 m (line of sight, outdoors) XBee\nz 40 m (indoor) XBee\nz Not an issue with on board Arduino\nz Always in contact:\nz On board Arduino will not lose contact with\nsensors due to range or signal issues\n\nDisadvantages of on Board Data\nCollection\nWeight:\nz 4 XBee's weigh 12-16g (depending on type)\nz Arduino Mega weighs 40g\n\nWork Left\nz Read GPS output\nz Communicate with CMU cam\nz Communicate with quadrotor\nz Communicate with computer via XBee\n\nPossible On Board Control\nz Benefits\nz 'cordless' - no XBee tether\nz Elegant\nz Disadvantages\nz Less computing power\n-Mega has only 124 KB of flash memory\nz Programming restrictions\n-XBee can receive instructions from any code/program on\ncomputer (MATLAB ...)\n-Arduino has only C/C++ and Arduino language extensions\n\nAutonomous\nlanding on\ntarget\nObtain\ncompass data\nObtain\nGPS data\nCommunicate\nbetween\nXBees\nPick a\ncontrol\nalgorithm\nWrite MATLAB\nflight control\ncode\nTest code on\na simulation\nCollect data\nwirelessly\nPut data into\nMATLAB\nSend commands\nand receive data\nto and from\nquadrotor\nMount hardware\non quadrotor\nHover in place,\nfly to position,\nand fly to multiple\npositions\nautonomously\nImage\nprocessing\nFlight\nControl\n\nObtain image\ndata from\ncamera\nSend\ncommands to\ncamera\nCommunicate\nbetween XBees\nwith camera\nTake pictures\nwirelessly\nPut data into\nMATLAB\nRecognize target\nwith camera\nFigure out\nvertical distance\nfrom target\nFind error in\nX, Y in image\nTurn signal\ninto visible image\nFind error in\nQuadrotor's\nposition\nSend data to\ncontroller\nLand autonomously\non marked target\n\nQuestions?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Autonomous Navigation, Position Control, and Landing of a Quadrotor Using GPS and Vision",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/dc6204dc6a5062c4134b6dcbe4724791_MIT2_017JF09_sw1_proposal.pdf",
      "content": "Autonomous Navigation, Position Control, and\nLanding of a Quadrotor Using GPS and Vision\nGroup 1\nPhoto of the Ascending Technologies Hummingbird Autopilot Quadrocopter\nremoved due to copyright restrictions.\nSeptember 29, 2009\n2.017 Design of Electromechanical Robotic Systems\nMIT Department of Mechanical Engineering\n\nI. Objectives\nThe purpose of this project is to design and implement an integrated navigation system for the Ascending\nTechnologies Hummingbird quadrotor that enables it to autonomously hold a position, fly through a fixed course,\ntake pictures, and land on a marked location.\nII. Project Description and Proposed Approach\nA. Background\nOne of the biggest challenges facing unmanned aerial vehicles (UAVs) today is landing safely without\nhuman control. The ability to make precision landings is important for designing aircrafts that can inspect\nsmall targets or that need to re-fuel automatically. An error range of a few meters is unacceptable when landing\na high speed vehicle. Generally, UAVs rely on a Global Positioning System (GPS) for movement since they tend\nto fly over obstacles and observe from a distance. However, UAVs designed for use in more claustrophobic\nenvironments (i.e. urban, forest) need a more reliable source of relative positioning information. Combining\nGPS with another type of control such as camera vision would provide UAVs with this extra precision.\nB. Goals and Functional Requirements\nThere are four final goals of this mission: maintain a given position, navigate through a preset course, take\npictures, and land on a marked target. Ultimately, we will collect GPS data during each part of the mission and\nplot them on three-dimensional coordinate axes.\nFigure A: The location of the quadrotor\nhovering in place.\nFigure B: The path of the quadrotor\nfollowing a preset square pattern,\ncentering itself over a marked target to\ntake pictures, and making a precision\nlanding.\nOur projected plan can be summarized in an \"objectives tree\" as seen below. Many functional\nrequirements such as getting the sensors working and writing programming code to implement them into the\nquadrotor system are required before we can accomplish the final tasks, which are highlighted in red.\nLand on a\nmarked target\nHover in place\nand fly a\npreset course\nImage\nrecognition\nAutonomous\npicture\ntaking\nConnect\ncamera to\nArduino\nWrite picture\ntaking code\nAutonomous\nflight\ncontrol\nConnect GPS\nand compass\nto Arduino\nWrite\nnavigation\ncode\nWrite image\nprocessing\ncode\nDetermine\nbest shape for\ntarget\nGet camera\nworking\nModel the\nsystem\nIntegrate\nprevious\nflight control\nGet GPS\nworking\nChoose and\norder camera\nDecide which\nGPS to use\n\n(Courtesy of Arduino.cc.\nAll of the quadrotor's sensors currently have separate connections that communicate with the computer.\nOne of our goals for this project is to link the sensors through an Arduino board, which will then communicate\nwith the computer. This will allow us to have a quadrotor that is completely autonomous and capable of flying\non its own.\nUsed with permission.)\nOpenClipArt Library.)\nC. Functional Block Diagrams\nTwo of the most important aspects of this mission are the programs to control the flight of the quadrotor\nusing GPS coordinates and using images taken from the camera. The following two diagrams show the steps\nwe will take to write these codes and how we can use them to control the movement of the quadrotor.\nArduino\nGPS\nCompass\nCamera\nFlight Controls\nComputer\n(Image from\nHovering R\nlocation\nIs the vehicle\nNorth/South of\nR?\nMaintain pitch,\nyaw, roll, and thrust\nControl pitch, yaw,\nroll, and thrust to\nmove North/South\nIs the vehicle\nlocated on R?\nYes\nNo\nYes\nNo\nIs the vehicle\nEast/West of\nR?\nControl pitch, yaw,\nroll, and thrust to\nmove East/West\nYes\nNo\nGPS Control\nIs the shape on the\nright/left of the\npicture?\nHover in place\nControl pitch, yaw,\nroll, and thrust to\nmove right/left\nTake a picture\nYes\nNo\nYes\nNo\nIs the shape on\nthe top/bottom of\nthe picture?\nControl pitch, yaw, roll,\nand thrust to move\nforward/backwards\nYes\nNo\nDo you recognize\nthe shape we\nwant?\nVision Control\n\n-\n-\nIII. Project Plan\nA. Tasks\nAlthough everyone expressed interest in being involved with multiple areas of the project, we decided\nthat it would be beneficial to have one main person responsible for each section to guarantee that each task gets\naccomplished in the end. We will form subgroups on a week-by-week basis.\nSoftware:\nStudent A will combine the previous flight control code with the on-board sensors' code and generate a\nnew navigation code. He will also brief the rest of the group on the thoughts behind the code to avoid\nconceptual errors.\nModeling and Controls:\nStudent B will design the controls of the new navigation system by choosing a good feedback controller\nbased on our system's models.\nLogistics and Communications:\nStudent C will make sure the team stays on schedule and that the different subgroups hardware and\nsoftware will not conflict or prevent the others from working.\nArduino:\nStudent D will make sure that the sensors ultimately get linked to the computer through an Arduino\nrather than through separate serial links.\nGPS and Additional Sensors:\nStudent E will test the GPS and the additional sensors (i.e. compass, pressure sensor) and implement it\ninto our navigation system.\nCamera and Image Processing:\nStudent F is responsible for getting the camera to take pictures and working with the code so that the\ncamera can recognize an object and determine the quadrotor's relative location to that object.\nB. Model\nWe already have a preliminary model for the dynamics and kinematics of the quadrotor system. We\nfound six partial differential equations to describe the motion of the aircraft.\nAssumptions:\n1. The center of mass is located where the arms meet\n4. The vehicle is rigid\n2. The four thrusts are always parallel\n5. All arms are the same length\n3. \"Flapping\" does not occur in the rotor blades\n6. Ignore drag\nψ: Yaw\n: Roll\nF: Thrust force\nθ: Pitch\nM: Moment\nl: Arm length\n(∑ Fi ) ⋅ (cosφ ⋅ sinθ ⋅ cosψ + sinφ ⋅ sinψ )\nX =\ni=1\nm\nθ\n--\n= l ⋅(-F1 - F2 + F3 - F4)\nI x\n(∑ Fi ) ⋅ (sinφ ⋅ sinθ ⋅ cosψ - cosφ ⋅ sinψ )\n--\nY\n--\n=\ni=1\nψ = l ⋅(-F1 + F2 + F3 - F4)\nm\nI y\n(∑\nFi ) ⋅ (cosφ ⋅ cosψ ) - mg\nφ\n--\n= (M1 - M 2 + M 3 - M 4)\nZ\n--\n=\ni=1\nI z\nm\n\nC. Required Sensors, Equipment, and Resources\nCMUCam2 with OV7620 Camera Module\nThe CMUCam is both a camera and image processor built into one compact device, which is ideal for this\nproject because we need to analyze pictures taken during flight to tell the quadrotor where to move next.\nHaving a built-in image processor allows us to skip the extra step of sending data back to a computer for\nanalysis.\nArduino Mini Board\nAlthough the Hummingbird quadrotor is very robust and can carry a fairly heavy payload, it would still be helpful\nto use a smaller Arduino and leave space for additional sensors. The smaller Arduino should still have enough\nprocessing power for this mission. In the chance that it is not enough, we can switch back to the Arduino we\nhave already been working with.\nD. Risks and Prevention\nEven though the blades of the quadrotor are designed to be \"flexible and harmless,\" we will only fly in\nopen, uncrowded areas and implement an emergency landing mechanism to avoid any possible injury to team\nmembers, bystanders, or the system itself. The quadrotor will also be tethered to the ground to prevent it from\nrunning into obstacles as well as prevent it from leaving the designated flying area.\nE. Backup Plan\nFor most hardware failures, we can replace the damaged parts or, worst case scenario, salvage the\nremaining parts. In the event of a catastrophic failure, where the quadrotor becomes damaged beyond repair or\nwe are unable to retrieve it, we can switch to using the regular helicopter. It would set us back a great deal\nbecause it would introduce the additional obstacles of decreased stability and lower payload, but we would still\nbe able to continue the mission.\nF. Schedule\nWeek\nDate\nObjective\nOct. 5\n- Read through and understand previous flight control code\n- Test previous flight control code with the quadrotor\n- Learn how to fly the quadrotor safely\nOct. 12\n- Experiment with camera, GPS, and their codes\nOct. 19\n- Get the quadrotor flying autonomously (dead reckoning)\nOct. 26\n- Get the quadrotor flying autonomously with GPS\n- Take pictures during flight\nNov. 2\n- Get the quadrotor to hover autonomously\n- Experiment with image recognition\nNov. 5\nMilestone Presentations\n*Have pictures taken from helicopter\nNov. 9\n- Implement vision controlled autonomous flight\n- Use vision to center the quadrotor over a marked target\nNov. 16\n- Improve the accuracy of the quadrotor's positioning\nNov. 23\n- Get the quadrotor to land on a marked target\nNov. 30\n- Perform final tests\n- Last minute debugging\nDec. 7\n- Analyze data\n- Work on PowerPoint for final presentation\nDec. 10\nFinal presentations\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final Presentation Slides: What We Expect",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/bd87a37e50917ab0dceb57f949b9b707_MIT2_017JF09_final.pdf",
      "content": "Department of Mechanical Engineering\n2.017 Design of Electromechanical Robotic Systems, Fall 2009\nFinal Presentation Slides: What We Expect\nDraft (not graded) is Due: 12/1/09 (TUESDAY)\nFinal Slides are Due: 12/10/09 10:00 am (THURSDAY)\nFinal Presentations are Given: 12/10/09 11:00 (THURSDAY)\nWe expect a set of slides from each team, with probably 25 - 30 used in the main presentation.\nBecause this is your major and final deliverable for the class, you may include additional slides in\nthe same file to tell the whole story.\nEach team will have thirty minutes to speak and ten minutes of Q&A. We will likely invite\nguests, so try to make your presentation accessible to the \"intelligent layperson.\" Keep it very\nlinear and easy to follow.\nGrading of the final presentation and slides is for the group 5%, and individually 10%.\nThe slides and presentation should:\nx\nInclude the project title, team name, team members, and date.\nx\nState the final objective of your project and a practical application, and describe the high-\nlevel functional requirements that you identified for your vehicle system.\nx\nThroughout, include design calculations, circuit diagrams, data plots, drawings, photos,\nsoftware flow charts, system block diagrams, etc. where appropriate. Avoid boring text.\nx\nDetail the design process and major results:\no Modeling of the vehicle and its environment, as well as their coupling\no Physical experiments, testing, and prototyping that you performed\no Dynamic behavior including stability, maneuvering\no Sensing\no Actuation\no Power\no Structures (including hydrodynamics)\no General software components\no Control algorithms; description, integration, rationale, and tuning\nx\nPresent high-quality data demonstrating the level of success in accomplishing the final\nobjective. Use clear, annotated plots, figures and images/videos supported by captions\nand descriptions.\nx\nDemonstrate that the vehicle response in an uncertain environment (wind, waves) was\nobserved, modeled, and quantitatively taken into account in the design.\nx\nMake a short self-assessment. What could you, or should you, have done differently? If\nyou did not fully achieve the objective, why? If you did achieve your objective, what\nsteps would you take to improve the reliability of your system?\n2.017 Fall 2009\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final Presentation: Boat Crew",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/7c0787b0c05471d6017f771bbbbc154a_MIT2_017JF09_sw2_final.pdf",
      "content": "Field Grace\nMatt Gildner Rachel Price\nGroup 2\n\nMission Objective Tree\nGoal: Autonomously travel to and survey Harvard Bridge Pylons.\nObjectives\ny\ny\ng\ny\nSupport Tasks\nObjectives\nRugged Vehicle\nSupport Tasks\nAnalyze Vehicle Capabilities\nConstruct Support Structure\nFly Planned Path\nFly Parallel to Wall\nAnalyze Sensors and Motors\nNavigate Bridge with GPS\nCl\nd L\nC\nl\ny\nPhoto‐Survey Bridge\nClosed‐Loop Control\nNavigate Bridge with Sonar\nRecord Images of Bridge Pylon\nSolar Feasibility\nRecord Images of Bridge Pylon\nSpec/ Select Solar Panels\n\nProject Division\ny Vessel Structure ‐ Physical Components\ny Sensors - GPS, Sonar, etc.\ny Propulsion ‐ Motors\ny Control - Data Collection, Commands\ny Solar ‐ Panel Selection/Integration\ny Environment - Waves\n\n-\nStudent D\n- Vessel Modifications\nVessel Modifications\n- Buoyancy\nBuoyancy\n- Weight and Trim\nWeight and Trim\n- Final Desig\nFinal Design\nFinal Design\nFinal Design\n\nV\nl M difi\ni\nVessel Modifications\nMotivation: needed survivable & rugged vessel\ny Functional Requirements:\ny Stable\ny Maneuverable\ny Sensor mounts\ny Rugged design\nRugged design\nPT 2017\nPro Boat Miss Elam\nSpirit of the Challenge\nPhoto of the Pro Boat Miss Elam 1/12 Brushless RTR\nremoved due to copyright restrictions.\n\n=\nFinal Design\nFinal Design\ny Trimaran\ny\npontoons\ny Stability\nStability = pontoons\ny Maneuverability = motors mounted outboard\ny Sensor mounts = metal sheet + hull structure\ny Rugged = strong, non‐corrosive materials\n\n=\nP\nSi\nC l\nl\ni\nPontoon Size Calculations\nV = A\nli -h ~ Aki -h\nV Awaterline h Akite h\nStreamline : d1/d2 ~ 3\nd2\nd\nStreamline : d1/d2\nd1\nV = .5(d1)(d2)(h)\n= .5(6\")(18\")(5.75\")\n= 310.5 in3 > 303 in3\nMold to shape pontoons\n\n=\nH ll St bilit\nHull Stability\nMetacentric height v. Draft\nDraft = 3.5 in\nGM = 44 2 in\nGM\n44.2 in\n0.5\n1.5\n2.5\n3.5\n4.5\nDraft (in)\n\n-\nHull Trim\nHull Trim\nTrim Moment as a Function of Draft\n1in Draft\n2in Draft\n3in Draft\n3 5i\n(T\nT\nk)\n-4\n-3\n-2\n-1\n3.5in (Tow Tank)\n-350\n-150\n-550\nTrim (in)\n- Loaded with battery and\nLoaded with battery and\npontoon assembly only:\n- Freeboard = 0 in !\n- Loaded with extra 3.5 lbs at\nbow:\n- Freeboard = 0.75 in\n- Port-Starboard trim with symmetry\n\n-\n- Pontoon Wave Forcing\nPontoon Wave Forcing\n- Wave\nWave -Frequency Resonance\nFrequency Resonance\n- Transportation Stress Hazards\nTransportation Stress Hazards\n- Crashworthines\nCrashworthiness\nCrashworthiness\nCrashworthiness‐\nStudent B\n\ny\nSpring‐Mass Resonance Model\ny Single cantilever beam w/point loading : Euler Bernoulli Equation\n)\n(\nx\nw\ndx\nu\nd\nEI\n=\n:\nwhere\n)\n(\n)\n(\nL\nx\nF\nx\nw\n-\n⋅\n=\nδ\n3L\nF\ny Mass -Spring System:\nR\nt f\ndx\nL\nEI\nu =\nL\nEI\nk =\nu\nk\nF\n⋅\n-\n=\ny Resonant frequency:\ny Vessel Natural Frequency: ω = 83Hz\nm\nk\n=\nω\nq\ny\ny Far higher than frequency of water waves!\ny Near frequency of transportation vibrations\nh b l\nh\nd l\ny Switch bolt attachments to delrin wingnuts\n\n=\n=\n=\nWave Forcing on Pontoon\n- B = 0 075m T = 0 1m\nB 0.075m, T 0.1m\n- Worst‐case waves :\nω= 1Hz\nA= 0.3m\n- Deep water waves:\n1.0\n~\nm\nk\nω\n=\n- Surface pressure integration:\nm\n)\nsin(\n)\nsin(\n)\n1(\nkb\nt\ne\nag\nL\nF\nkt\nω\nρ\n-\n-\n=\n∫∫\n-\n=\nSw\nFK\nds\nn\np\nF\n)\nsin(\n)\nsin(\n)\n1(\nkb\nt\ne\nag\nL\nFx\nω\nρ\n)\nsin(\n)\n1(\nkb\ne\nag\nL\nF\nkt\nxMax\n-\n-\n=\nρ\nk\nkb\nt\nage\nl\nF\nkT\nZ\n)\nsin(\n)\ncos(\nω\nρ\n-\n=\nkT\nN\nF Max\nx\n.0\n=\nN\nk\nkb\nage\nL\nF\nkT\nzMax\n)\nsin(\n=\n=\n-\nρ\n\nImplications of wave forcing\ny Forcing moment: 50Nm\ny Horizontal force on pontoon is negligible\ny Vertical force causes moment\nDanger zones:\ny Strut bend\ny Vertical force causes moment\ny Reaction force on boat structure: 277.8N\ny Bend in pipes\ny Structural bolts\ny Stress calculated using\ny Max stress: 8.8 x 106 Pa\ny Yield stress of aluminum: 4 x 108 Pa\nI\nMR\n=\nσ\nYield stress of aluminum: 4 x 10 Pa\ny Force on bolts\n- Originally, load distributed over 6 bolts\nIf stress is too high, the internal\nstructure could be ripped\ncompletely out of the boat!\n- Total force on each bolt is 46.3N\n\ny\nFailure of internal boat structure\ny Internal structure to which pontoons are\nmounted is held onto hull with epoxy\ny Approximate that most stress on epoxy is\nApproximate that most stress on epoxy is\nin the shear direction\ny Epoxy much weaker in 'peel' forcing\ny Peel forcing unlikely: hull not pulled outwards independent of plate\nShear force per unit area of epoxy contact: 1 5 x 104 Pa\ny Shear force per unit area of epoxy contact: 1.5 x 104 Pa\ny Shear strength of epoxy: 1.4 x 107 Pa\n\nTransportation and Handling\ny Most likely transportation method is to carry by frame\ny Potential problems due to weight of boat:\n-Total weight of boat hull and components: 26lbs\n-Stress on epoxy << than rated shear stress (8,000 PSI)\n-Original 6‐bolt design: 19.3N per attachment point\n- Internal boat structure failure possible\n- Design modified to reduce these issues\n- Number of bolts increased to 12\n\nPontoon Arm Collision\ny Impact creates moment around central attachments\ny U‐bolts on plate - act as moment constraint\ny Peel forces on epoxy\ny Peel forces on epoxy\ny Crash 1 pontoon while boat travelling at 1 ms‐1 forward\ny Relevant for mission and for vessel transportation\ny Results:\ny Moment around center - 15.87 Nm\ny Force per U‐bolt - 31 24 N (U‐bolt max rating: 1935 N)\nForce per U bolt 31.24 N (U bolt max. rating: 1935 N)\ny Average force on epoxy - 89.25 N\ny Total peel strength of epoxy - 91.44 N/mm epoxy peeled\n\n-\ng\n- Reading GPS Data\nReading GPS Data\n- GPS Test Result\nGPS Test Results\nGPS Test Results\nGPS Test Results\n- Reading Compass Data\nReading Compass Data\n- Reading Sonar Data\nReading Sonar Data\nStudent E\n\nGlobal Positioning System\ny Standard Format:\nGPRMC,135713.000,A,4221.4955,N,07105.5817,W,4.29,258.17,310809,,*16\ny GPS shield is used on Arduino MEGA\n1 i\nl hit/\nd\ny 1 signal hit/second\nCourtesy of Arduino.cc. Used with permission.\n\nTrial 1\n\nTrial‐2\n\nTrial‐3\n\ny\nGPS Output\nI\ni\nX Y\ndi\nt\nt\ny Imaginary X‐Y coordinate system\ny Sailing pavilion as the origin\ny GPS latitude and longitude processing:\ny GPS latitude and longitude processing:\ny Decoded into x‐y coordinates\ny Sent as an input to control system\ny Sent as an input to control system\nPhoto by ladyada on Flickr.\n\nOS5000 3 A i C\nOS5000 3‐Axis Compass\nPrimary Navigation\ny Low Noise\ny Works under the bridge\ny Faster refresh rate than GPS\ny Primary Navigation\ny Outputs to Control System\ny Heading: 0 to 360 degrees\ny Pitch: ‐90 to +90 degrees\ny Roll: ‐180 to +180 degrees\n\n-\nLV MaxSonar WR 1\nLV MaxSonar WR‐1\n- Range 0‐255 inches\n- Analog and serial output\n- Analog accurate 1\" of serial output\n- Maintain moving average of analog output\n- Fully waterproofed\n- M\nt\nMountedd to servo\n- Run at pre‐set heading until wall is detected\n- Wall detection @ 3 05 m\nWall detection @ 3.05 m,\n- Accurate reliable readings @ 2.13 m\n- Safety buffer of 1 52 m from wall\nSafety buffer of 1.52 m from wall\nPhoto of the MaxSonar WR1\nhttp://www.active-robots.com/products/sensors/maxbotix/WR1-large.jpg\nremoved due to copyright restrictions.\n\n-\n\n- Selected Sonar\nSelected Sonar\n- Wall Findin\nWall Finding\nWall Finding\nWall Finding\n- Wall Following\nWall Following\n- Control Architecture\nControl Architecture\nStudent A\n\nMi i\nPl\ni\nMission Planning\nMission stored as an array of way points\nz Mission stored as an array of way points\nz Sample way point: { x, y, heading, speed, range, mode }\nz Modes describe behavior of boat\n\nTest Mission\nz Unreliable GPS and sonar data\nz Reliable compass data\nz Internal clock, counting time\nz Mission composed of target headings, and times at\nwhich to change way points\n\nWall Finding and Following\nTwo modes\nz Two modes:\nz Mode 1: Travel at set heading until wall is detected\nz Mode 2: Hold constant distance from wall assumed to\nz Mode 2: Hold constant distance from wall, assumed to\nface a known heading\nM d\nMode1\nMode 2\n\nz\nData Collection\nSerial\nz Serial\nz GPS: Position\nz Compass: Heading, Pitch and Roll\np\ng,\nz Analog\nz Sonar: Range\nz Solar: Voltage Output\nz Internal\nz Time: Since program start up\nz Way point and error\n\nData Logging\nData Logging\nz Logging constrained to <1 Hz\nz Higher speed causes serial buffers to fill\nz Logged to an onboard netbook\nz Data stored via Realterm\nData stored via Realterm\nz Formatted for MATLAB importing\nz External GPS data stored on SD card\n\n-\n- Propulsion and Speed Control\nPropulsion and Speed Control\n- Thrust Test\nThrust Tests\nThrust Tests\nThrust Tests\n- MATLAB Simulations\nMATLAB Simulations\n- Real\nReal‐World Tests\nWorld Tests\nStudent C\n\ny\nPropulsion System Design\ny 2 Thrusters\ny 1 per outer hull\n1 per outer hull\ny Differential thrust for yaw\nPWM\nt\nl\nith A d i\ny PWM control with Arduino\nand Speed Controllers\ny 12V DC Trolling Motors\n\nSpeed Controller Selection\ny Pro Boat 40A Waterproof ESC\ny Limited PWM frequency range\nq\ny\ng\ny Incompatible with Arduino PWM\nyVictor 884 ESC\ny Victor 884 ESC\ny Compatible with Arduino\nf\ny Not Waterproof\nPhotos removed due to copyright restrictions.\nPlease see:\nPro Boat Waterproof ESC with Reverse 5-12V 40A\nVEX Robotics Victor 884 + 12V Fan\n\nThrust Test\ny Test conducted in water tank\ny Thrust was measured at\ndiff\nt\nt\nlt\ndifferent motor voltages\ny Data fit to linear curve\ny Maximum vehicle\ny Maximum vehicle\nthrust=2X28.17N=56.3N\ny Minimum voltage=1.5V\ng\nForce=Sensor Force X R2/R1\n\nThrust Test Data\n\nC\nt\nl S\nt\nd\nSi\nl ti\nControl System and\nSimulation\ny Closed‐loop proportional control\ny heading and speed using sonar, GPS, and compass\ny Mission set‐points determine control behavior\nMission set points determine control behavior\ny Way‐point Traveling\ny Static Heading Following\ny Wall Following\ny Boat and control system modeled in MATLAB using ODE45\ny M, JJ, B(lateral)\nB(lateral), B(rotational)\ny\nB(rotational)\ny Various set‐points were used as inputs to adjust the gains\nMATLAB\n\nSi\nl ti\nSimulations\n\nSimulations\n\nExperiments\nExperiments\n\nExperiments\n\ner\ner\nCharacterize wave spectrum\nCharacterize wave spectrum\nof Charles Ri\nof Charles Riv\nof Charles River\nof Charles River\nStudent F\n\nSetup\nFlow rate\nFlow rate\nmeter\ncomputer\nLabPro\nLoggerPro\nReal Term\nPressure\ntransducer\nArduino\nmicroprocessor\n\ny\nRiver Wave Data\nRiver Wave Data\nCase 1\ny Fair weather\ny No Wind\ny No river activity\ny Case 3\ny Fair weather\ny Slight wind\ny High boat traffic\nCase 2\ny Raining\ny Steady wind\ny No river activity\nCase 4\ny Raining\ny High winds\ny No river activity\nT\nt D\ny Test Day\n\nRiver Wave Data\nRiver Wave Data\nCase 1\nCase 2\ny Fair weather\ny No Wind\ny Raining\ny Steady wind\ny No river activity\ny No river activity\ny Case 3\ny Fair weather\nCase 4\ny Raining\ny Slight wind\ny High boat traffic\ny High winds\ny No river activity\ny T\nt D\ny Test Day\n\nD t\nData\n\nHeights and Wave Periods\nHeights and Wave Periods\nAverage period length = 1.1487 s\nAverage 1/3 wave height = 0.7174 cm\n\nRiver Wave Data\nRiver Wave Data\nCase 1\nCase 2\ny Fair weather\ny No Wind\ny Raining\ny Steady wind\ny No river activity\ny No river activity\ny Case 3\ny Fair weather\nCase 4\ny Raining\ny Slight wind\ny High boat traffic\ny High winds\ny No river activity\ny T\nt D\ny Test Day\n\nD t\nData\n\nHeights and Periods\nHeights and Periods\nAverage 1/3 wave height = 1.3295 cm\nAverage period length = 0.5450 s\n\nRiver Wave Data\nRiver Wave Data\nCase 1\nCase 2\ny Fair weather\ny No Wind\ny Rain\ny Moderate wind\ny No river activity\ny No river activity\ny Case 3\ny Fair weather\nCase 4\ny Rain\ny Moderate wind\ny High boat traffic\ny High winds\ny No river activity\ny T\nt D\ny Test Day\n\nD t\nData\n\nH i ht\nd P\ni d\nHeights and Periods\nAverage 1/3 wave height = 1.4242 cm\nAverage period length = 0.8082 s\n\nRiver Wave Data\nRiver Wave Data\nCase 1\nCase 2\ny Fair weather\ny No Wind\ny Rain\ny Steady wind\ny No river activity\ny No river activity\ny Case 3\ny Fair weather\nCase 4\ny Rain\ny Slight wind\ny High boat traffic\ny High winds\ny No river activity\ny T\nt D\ny Test Day\n\nD t\nData\n\nHeights and Periods\nHeights and Periods\nAverage 1/3 wave height = 3.5856 cm\nAverage period length = 0.7936 s\n\nW\nS\nWave Spectra\n\nConclusions\ny No real current\ny Waves driven by two sources\ny Wind\ny River activity\nF\nf\ni\nf\ni d\ny Frequency faster in presence of wind source\ny Need more data!\n\n-\nwer\nst\nwer\nst\n-\n- Vehicle Requirements\nVehicle Requirements\nPo\nOutput T\nPo\nOutput Te\nPow\nPo er Output Test\nwer Output Test\n- System Integration\nSystem Integration\n- Feasibility Compariso\nFeasibility Comparison\nFeasibility Comparison\nFeasibility Comparison\nStudent G\n\nProject Overview\ny Tasked with feasibility assessment for solar power use\ny Desired quantitative data\nAssess\nR\ni\nVehicle\nSelect\nPanels\nCheck Panel\nSpecifications\nIntegrate\nS stem\nFull\nSystem\nRequirements\nPanels\nSpecifications\nSystem\nSy\nTe\nst\ns\ne\nt\nm\n\nVehicle Requirements\nSonar\n5 V\n\nmA\n0.250 W\nGPS\n3.3 V\n\nmA\n0.165 W\nArduino Mega\n5 V\n\nmA\n0.25 W\nElectronics Total:\n0.965 W\n(\n)\nMotors (Min)\n12 V\n0.25\n\nA\n\nW\nMotors (Max)\n12 V\n2.50\n\nA\n\nW\nVehicle Minimum Total:\n3 965 W\nVehicle Minimum Total:\n3.965 W\nVehicle Maximum Total Total:\n30.965 W\nComponent\nVoltage\nCurrent\nPower\nAccelerometer\n6 V\n50 mA\n0.300 W\nAccelerometer\n6 V\n50 mA\n0.300 W\n\nCorrecting Specifications\ny Panel output: Pout =η panelEdensityApanel\ny Standard Peak Edensity : 1000 W/m2 (noon @ equator)\ny Boston Dec Peak E\n: 800 W/m2\ny Boston Dec. Peak Edensity : 800 W/m2\ny Ideal: 10am on sunny day\ny 600 W/m2\nSun Power Density\ny Non‐ideal: 10am Cloudy\ny 200 W/m2\ny Power through day\nW/m2\nin\ny Power through day:\nr\ne\nPow\n200 0\nt -t\nP(t) = P⋅sin(\ndawn\n⋅Π)\ntdusk -tdawn\n‐200 0\nTime of Day in Hours\nStandard\nBoston Ideal\nBoston Non‐Ideal\n\nSuntech STP0055‐12\nEstimated Capabilities\ny Peak Rated Power = 5W\nSuntech\nPanel Power Curve\nSunny\nCloudy\ny Peak Power (sunny)= 3W\ny Peak Power (rainy) = 1W\n)\n(V\ne\nag\nt\nMeasured Capabilities\ny Sunny:\ny Short Circuit Current : 0 21 A\ntl\nVo\n0.1\n0.2\n0.3\n‐10\nCurrent (A)\ny Short Circuit Current : 0.21 A\ny Measured Output: 2.8 W\ny Cloudy\nSh\nt Ci\nit C\nt 0 065 A\nV 2\nP =VI+ = R\ny Short Circuit Current: 0.065 A\nR\ny Measured Output: 0.933 W\n\nSystem Integration\nPhysical System\nElectronic System\nR1:\n170 Ω\nPower\n170 Ω\nR2:\n40 Ω\nArduino\n> 21 V\n>4V\nl\nPower\nResistor\n140 Ω\nAr\nVo\nduino\nltage\nLogger\nSolar\nPanel\n21 V\ny Panels sit on motor mounting\ny Servo available for optimization\nV\nR2\nV\ny Servo available for optimization\nVout = R\nR Vin\n1 +\n\nFeasibility‐ Electronics\nMeasured Cloudy Output\nElectronic Power Consumption\nExtrapolated Sunny Output\n(W)\nPower (\nTime (s)\nTime (s)\n\nFull Vehicle Feasibility\nExtrapolated Sunny Panel Output\nVehicle Total Minimum Power Use\nW)\nActual Mission Power Use\nPower (W\nTime (s)\n\nMission Video\ny View from vessel\ny View from shore\n\ny\nFinal Evaluation\ny Vehicle survived well\ny Deployment & leaks\nRugged\nVehicle\nSolar\nFeasibility\ny Path followed\ny Solar power sufficient\nf\nFly\nPlanned\nPath\nSurvey\nBridge\ny No time for bridge test\ny Capability Present\nW ll f ll\ni\nt\nt d\nWall‐\nFollowing\ny Wall following untested\n\nFuture Mission Objectives\ny Add full GPS navigation capabilities\ny Use Sonar for wall following\ny Remote data logging abilities\ny Actively control solar panel angle\ny Test in warmer drier weather!!\n\nSpecial Thanks to:\nFranz Hover\nHarrison Chin\nJosh Leighton\nCharlie Ambler\nMIT Sailing Pavilion\nMIT Towing Tank\nMechanical Engineering Department\nCenter for Ocean Engineering\nCh\nS hl\nb\nChevron\nSchlumberger\n\nQ\ni\n?\nQuestions?\n\nN\nl A hi\nS\nd h\nNaval Architecture Spreadsheet\ny Displacement v. draft\n\nN\nl A hit\nt\nS\nd h\nt\nNaval Architecture Spreadsheet\ny GM calculation\n\nN\nl A hi\nS\nd h\nNaval Architecture Spreadsheet\ny Trim Calculation\n\nFully Constrained Pontoon Attachments\nLeads to stress concentrations at joints\n\nPrevious Designs\nPrevious Designs\n\nPressure Transducer:\nPressure Transducer:\nCalibration Curve\nslope = -0.366 cm/Volt\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Milestone Presentation",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/27892d8374d7ef7583e0b07c98bc39f1_MIT2_017JF09_milestone.pdf",
      "content": "Project Title\nNovember 5, 2009\nTeam Members:\n2.017 DESIGN OF ELECTROMECHANICAL ROBOTIC SYSTEMS\nMilestone Presentation\n\n6/7/2010\n2.017 Fall 2009\nMilestone Presentations\n- This is 15% of your total grade:\n5% group grade\n10% individual grade\n- Email your team's PowerPoint file to Franz\nand Harrison by 10 am on Nov 5\n- Each team gets 30 minutes of\npresentation + 10 minutes of Q&A\n- Select or design your own presentation\ntemplate and style\n\n6/7/2010\n2.017 Fall 2009\nThe Group is Graded on\n- Organization, Clarity, and Completeness\n- Representation and analysis of high- and low-\nlevel functions, e.g., block diagrams\n- How on-target is the work with respect to the\nobjectives we laid out\n- Identification of risk areas and contingencies,\nand mitigation plans\n- Identification of any programmatic issues\n- A go-forward plan from where we are today\n\n6/7/2010\n2.017 Fall 2009\nIndividuals are Graded on\n- Presentation of significant material\n- Individual technical progress\n- Integration with the group goals\n- Focus on major problems or obstacles,\napproaches, decisions, and results\n- Quantitative information (models, designs, data,\netc.) and interpretation of such information\n(graphs, charts, tables, etc.)\n- Representation and analysis of processes, e.g.,\nsoftware structures and architecture\n- Your plan forward from where we are today\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Milestone Presentation: Boat Crew",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/58a32f81147e6fbe685ddff8ee8d7e3a_MIT2_017JF09_sw2_milstone.pdf",
      "content": "Group 2\n\nMission Objective Tree\nTasks\nRugged Vehicle\nFly Planned Path\nFly Parallel to Wall\nPhoto-Survey Bridge\nSolar Feasibility\nObjectives\nAnalyze Vehicle Capabilities\nConstruct Support Structure\nAnalyze Sensors and Motors\nNavigate Bridge with GPS\nClosed-Loop Control\nNavigate Bridge with Sonar\nRecord Images of Bridge Pylon\nSpec/ Select Solar Panels\n\nProject Division\nVessel Structure - Physical Components\nSensors - GPS, Sonar, etc.\nPropulsion - Motors\nControl - Data Collection, Commands\nSolar - Panel Selection/Integration\nEnvironment - Waves\n\nProject Status\nArea\nStatus\nVessel Design - Student D\n\nDesign Complete\nAssembly Underway\nStress Analysis - Student B\n\nPreliminary Analysis Complete\nGPS and Compass - Student E\n\nGPS Data Collected\nCompass Tests Complete\nSonar and Control - Student A\n\nSonar Testing Complete\nControl Designed\nMotors and Control - Student C\n\nSelected and Tested\nWave Environment - Student F\n\nData Collected and Analyzed\nSolar Energy - Student G\n\nData Collected\nControl Protocol Designed\n\nUpcoming Critical Milestones\nSystem Integration\nSensor components all tested and running\nBoat components ready for assembly\nControl Software\nUsing GPS feedback for position control\nWaypoint-triggered mode transition\nSystem Tests\nWall-following tests at tow tank\nYaw dynamics tests\n\nGathering\nData\nGathering\nComponents\nTesting\nComponents\nAssembling\nSystem\nTesting\nSystem\n\nStudent D\n\n-\n- Vessel ModificationsVessel Modifications -\n- Functional RequirementsFunctional Requirements -\n- Significant RisksSignificant Risks -\n- Final DesignFinal Design\n\nPlaning hull: too small\nDisplacement hull: larger\nVessel Modifications\nMotivation: needed survivable and rugged vessel\nPhoto of the Pro Boat Miss Elam 1/12 Brushless RTR\nremoved due to copyright restrictions.\n\nFunctional Requirements\nStable in roll and pitch\nManeuverable\nMounts for sensors\nRugged design\n\nFinal Design\nBest Design = Motors attached to Pontoons\n\nRisk #1: Buoyancy\nmg = Fb\n\nAdditional weight-\n\nMotor: 3.4 lbs\nPipes: 1.16 lbs\nBolts: 0.32 lbs\nPlate: 0.80 lbs\nPlastic: 0.588 lbs\nTotal: 6.268 lbs\n\n= 2.843 kg\n\nMarine spray-in foam:\nDensity = 2 lbs/ft3 = 32.03 kg/m3\n\nFb = (Vdispw-Vdispf)-g = mg\n\nVdisp = 2.843 kg\n1025 kg/m3-32.03 kg/m3\n\n= .00286 m3 = 174 in3\n\nPontoon could be 3\"x3\"x20\"= 180 in3\n\n*Will be more to provide safety factor for\nbattery, solar panels, etc.\n\nRisk #2: Destructive Disturbances\nDegree of Freedom constraints\nForces and Moments in all directions\n\nStress Calculation\n\nStudent B-\n- Main Failure Modes Main Failure Modes -\n- SpringSpring--Mass ModelMass Model -\n- Wave ForcingWave Forcing -\n- Stress CalculationsStress Calculations\n\nMain Failure Modes\n\nResonance with waves in roll\n\nWave forcing on pontoons\nHorizontal forcing\nVertical forcing\nResultant stress on structure, bolts and pipes\n\nResonant Frequency\nModel as single cantilever beam under point loading\n\nUse Euler- Bernoulli Equation\n\n)\n(\nx\nw\ndx\nu\nd\nEI\n\n)\n(\n)\n(\nL\nx\nF\nx\nw\n\nModel as Spring-Mass System\nF = -ku, therefore:\n\nFind resonant frequency of system using:\n\nFor boat values, ω = 83Hz\nωboat >> ωwaves\n\nL\nEI\nF\nu\nL\nEI\nk\nm\nk\n\nWave Forcing on Pontoon\n- B = 0.075m, T = 0.1m\n- Worst-case waves :\nω= 1Hz A= 0.3m\n- Deep water waves:\n\n- Surface pressure integration:\nN\nF Max\nx\n.0\n\n1.0\n~\nm\nk\n\n)\nsin(\n)\nsin(\n)\n1(\nkb\nt\ne\nag\nL\nF\nkt\nx\n\n)\nsin(\n)\n1(\nkb\ne\nag\nL\nF\nkt\nxMax\n\nSw\nFK\nds\nn\np\nF\nk\nkb\nt\nage\nl\nF\nkT\nZ\n)\nsin(\n)\ncos(\n\nN\nk\nkb\nage\nL\nF\nkT\nzMax\n)\nsin(\n\nImplications of wave forcing\n\nHorizontal force on pontoon is negligible\nVertical force causes\nmoment\n\nForcing moment: 50Nm.\nReaction force on boat structure: 277.8N\nCould cause:\nFailure at bend in struts\nBolts securing aluminum plate to damage boat structure\nInternal structure to rip out of boat completely\n\nStress Calculations\n\nBend in pipes\nStress calculated using\nMax stress: 8.8 x 106 Pa\nYield stress of aluminum: 4 x 108 Pa\nForce on bolts\nDesign distributes load over 6 bolts\nTotal force on each bolt is 46.3N\nMay be too high!\nRequires more attachment points\n\nI\nMR\n\nFailure of Internal Structure\nInternal bracing mounted with epoxy\nPontoon stress may be too large\nCalculate stress to ensure safety\nApproximation: stress on epoxy in shear direction\nShear force per unit area of epoxy contact: 1.5 x 104 Pa\nShear strength of epoxy: 1.4 x 107 Pa\nConnection secure!\n\nNote: Epoxy is much weaker in 'peel' forcing. However, hull and\nplate move in tandem, so peel forcing will not occur.\n\nNext steps:\nAnalyze plate design\nadequacy\nModify plate design to\ndistribute load\nDeployment load\nanalysis\nVessel stress analysis for\ntrue wave spectrum\n\n-\n- Reading GPS DataReading GPS Data -\n- GPS Test ResultsGPS Test Results -\n- Reading Sonar DataReading Sonar Data\n\nStudent E\n\nGPS Data\nStandard Format:\nGPRMC,135713.000,A,4221.4955,N,07105.5817,W,4.29,258.17,310809,,*16\nHaversine formula:\nComputes distance between points on sphere\n\nR = sphere radius\nRc\nd\na\na\na\nc\nlong\nlat\nlat\nlat\na\nlong\nlong\nlong\nlat\nlat\nlat\n\n))\n1(\n,\n(\ntan\n)\n/\n(\nsin\n)\ncos(\n)1\ncos(\n)\n/\n(\nsin\n\nTrial 1\n\nTRAIL-2\n\nTRAIL-3\n\nTransition Point Approximation\n- Pavilion = Position 1\n- Cruising mode until Position 225\n- @ 225: change to wall following mode\n@ 271: return to cruising mode\n@ 304: change to wall following mode\n@ 332: final transition to cruising mode\nReturn to pavilion\n\nPosition 225\n\nPositions 225-271\n\n3-axis compass\nOS 5000 3-AXIS compass used\nCompass contains 2.5V inverting circuit\nInverting circuit reads sensor output\nResult is data string of form:\n\n$C..........R............P............T.............*1.A\n\n-\n- Selected Sonar Selected Sonar -\n- Wall FindingWall Finding -\n- Wall FollowingWall Following -\n- Control ArchitectureControl Architecture\n\nStudent A\n\nLV MaxSonar WR-1\nRange 0-255 inches\nAnalog and serial output\nAnalog accurate 1\" of\nserial output\nMaintain moving average\nof analog output\nFully waterproofed\nMounted to a servo\nPhoto of the MaxSonar WR1\nremoved due to copyright restrictions.\n\nWall Finding\nRun at pre-set heading until wall is detected\nWall detection at 3.05 m, accurate reliable readings at\n2.13 m\nSafety buffer of 1.52 m from wall\n\nWall Following\nCalculate wall heading,\nfollow along path\nθ\nd1\nd2\nh\nb\nhw\n\n)\nsin(\n)\ncos(\ntan\n\nd\nd\nd\nH\nH\nb\nw\nw\nH\nb\nH\n\nAccuracy\nGiven sonar accuracy ± 2.54 cm\nPosition error over run < 20 cm\nOptimal theta = 0.1535 radians\n0.2\n0.4\n0.6\n0.8\n1.2\n1.4\n1.6\nPosition error at end of run\nTheta (radians)\nError (cm)\n\nControl Architecture\nMission Controller vs. Boat Controller\nArduino Mega and Duemilanove\nEach can be tested in isolation\nXbee communications with shore\nCourtesy of Arduino.cc. Used with permission.\n\nStudent C-\n- Speed Controller TestsSpeed Controller Tests -\n- Speed Controller SelectionSpeed Controller Selection -\n- Thrust TestsThrust Tests\n\nPropulsion System Design\n2 Thrusters\n1 per outer hull\nDifferential thrust for yaw\nPWM control with Arduino\nand Speed Controllers\n12V DC Trolling Motors\n\nSpeed Controller Selection\nPro Boat 40A Waterproof ESC\nLimited PWM frequency range\nIncompatible with Arduino PWM\nVictor 884 ESC\nCompatible with Arduino\nNot Waterproof\nPhotos removed due to copyright restrictions.\nPlease see:\nPro Boat Waterproof ESC with Reverse 5-12V 40A\nVEX Robotics Victor 884 + 12V Fan\n\nSpeed Controller Test\nPro Boat ESC successfully\ndriven by RC receiver\nRC PWM signal monitored\non O-scope\nPWM frequency = 55Hz\nPWM frequency not in\nArduino range\n\nThrust Test\nTest conducted in water\ntank\nThrust was measured at\ndifferent motor voltages\nData fit to linear curve\nMaximum vehicle\nthrust=2X28.17N=56.3N\nMinimum voltage=1.5V\n\nForce=Sensor Force X R2/R1\n\nThrust Test Data\n\nStudent FCharacterize wave spectrum\nCharacterize wave spectrum of Charles River\nof Charles River\n\nSetup\nFlow rate\nmeter\nLabPro\nPressure\ntransducer\nArduino\nmicroprocessor\nLoggerPro\nReal Term\ncomputer\n\nFlow Data\n\nWave Data\n\nWave Data FFT\n\nAverage period length = 0.3158\nWave Periods\n\nWave Heights\nAverage 1/3 wave height = 1.9875 cm\n\nAutocorrelation\n\nFurther Work\nCollect more data\nDiffering weather conditions\nCreate models\nHeave\nPontoons and vessel response\n\n-\n- Vehicle RequirementsVehicle Requirements -\n- Panel SelectionPanel Selection -\n- Power Output TestPower Output Test -\n- System IntegrationSystem Integration\n\nStudent G\n\nEstimating Requirements\nComponent\nVoltage\nCurrent\nPower\nAccelerometer\n6V\n50mA\n0.300 W\nSonar\n5V\n50mA\n0.250 W\nGPS\n3.3V\n50mA\n0.165 W\nArduino Mega\n5v\n50mA\n0.25 W\nElectronics Total:\n0.965 W\nMotors (2)\n(minimum)\n12V\nVehicle Total:\n\nEstimating Capabilities\nStandard\nRating\nConditions:\n1000 W/m2\nSRCs correct\nfor equator\n@noon\n\n-200\nPower in W/m2\nTime of Day in Hours\nSun Power Density\nStandard Conditions\nBoston Conditions\n\nCorrecting Specifications\nPanel output:\n\nMorning deployment to minimize waves\nIdeal Mission Conditions:\n10am in Boston on sunny day\nMission Edensity = 600 W/m2\nNon-ideal Mission Conditions:\n10am in Boston on cloudy day\nMission Edensity = 200 W/m2\n\npanel\ndensity\npanel\nout\nA\nE\nP\n\nSuntech STP0055-12\nPeak Rated Power = 5W\nPeak Power (sunny)= 3W\nPeak Power (rainy) = 1W\nPurchased 2 12\"x18\" panels\nFinal Estimated Capability:\n10W max\n6W (sun)\n2W (cloudy))\nTotal cost: $120.00\n\nTesting the Panels\n0.1\n0.2\n0.3\nVoltage (V)\nCurrent (A)\nPower Curve for Suntech\nPanel on Sunny Day\nMeasured Short Circuit\nCurrent ~ 0.21 Amps\nRated Short Circuit\nCurrent = 0.33 Amps\nMeasured Power Output\n= 2.8 Watts\n\nControl Architecture\nServo-actuated\npanel repositions to\noptimize power\nTime index\nfrom GPS\nHeading\nfrom\ncompass\nSun\nPosition\nInformation\n\nSystem Integration\n\nSignificant Risks and Mitigations\nMitigated with good planning:\nMajor construction setbacks\nMitigated with testing and debugging:\nPoor power management\nSensor Failure (GPS)\nData Interpretation Failure\nMotor or Boat Controller Failure\nUncontrollable:\nInclement weather\n\nNext Steps\nFinish construction\nVessel: pontoons, solar panel support\nIntegrate sensors and structure\nControl System Implementation\nTesting\nYaw dynamic Tow Tank test\nWall-following Tow Tank test\nTroubleshoot\nMission Day!\n\nQuestions?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Project Descriptions",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/40bfc2b0a047f4e37efd1f5aadda276c_MIT2_017JF09_options.pdf",
      "content": "2.017 Design of Electromechanical Robotic Systems, Fall 2009\nField Robotics Projects\nFinal report and presentation due: 12/07/09\n1 Project 1: Autonomous Air Vehicle Navigation\n1.1 Objective\nDesign and implement an integrated navigation system for a rotorcraft that is capable of\ntaking off, flying through a preset course, collecting data at several waypoints, and\nlanding on a marked target location autonomously.\n1.2 Description\nA modern navigation system generally includes a Global Positioning System (GPS)\nreceiver to determine the position and motion of a vehicle. However GPS alone\nsometimes cannot provide the required accuracy and robustness of Position Location\nInformation (PLI) due to the following limitations.\nx Position error\nTypical position accuracy of a commercial GPS receiver (such as the\nUSGlobalSat EM-406A that we have) is about 10 meters while the velocity\naccuracy is about 0.1 m/s. (Note that a military grade GPS can provide a position\naccuracy of a few centimeters.) As you can see the position accuracy of the GPS\nmay not be good enough to navigate a small vehicle to a specific location or to\nland it on a tight spot reliably. This is important if we want the vehicle to inspect\na small target or to re-fuel automatically at a re-fueling station.\nx Operating conditions:\nThe vehicle may have to operate in conditions where GPS signal is unavailable,\nsuch as a GPS denied battlefield, under foliage, in and around natural\nmountains/canyons, or urban conditions.\nFor the above reasons, a GPS-based navigation system needs to be augmented by adding\nan Inertial Measurement Unit (IMU) with three mutually orthogonal gyros and\naccelerometers. Alternatively, a vision-based system can be used in conjunction with the\nGPS receiver to provide improved position accuracy and reliability.\nThe purpose of this project is to develop an integrated navigation system that includes a\nGPS receiver and an IMU or a camera that will provide accurate PLI to the ob-board\ncomputer on a rotorcraft for unmanned operations.\n1.3 Themes\nThe project is designed to learn the following aspects in robotic system design:\nPage 1 of 5\n\nx Complex system modeling, analysis, and design\nx Design for RC rotorcraft operations in uncertain wind conditions\nx Microcontroller programming and communication\nx Signal and image processing\nx Navigation and feedback control\nx Autonomy\n1.4 Equipment\nTwo rotorcraft will be available to you as the test platform:\nAscending Technologies \"HummingBird\" quadrotor aircraft.\n(http://www.asctec.de/main/index.php?id=4&pid=2&lang=en&cat=pro)\nE-Flite Blade CP Pro 2 RTF Electric Micro Helicopter.\n(http://www.redrockethobbies.com/E_Flite_Blade_CP_Pro_2_RTF_Electric_p/eflh1350.\nhtm)\nAll the sensors, equipment, and parts in the lab are available for the project. Additional\ncomponents, sensors, and supplies will be acquired as justified by design needs.\nPage 2 of 5\n\n1.5 Tasks\n1. Fly the aircraft to a preset coordinate and regulate the aircraft to maintain position\nbased on GPS reference.\n2. Take one or more pictures at that location.\n3. Fly a planned GPS reference path.\n4. Take pictures along the path.\n5. Position control using both GPS reference and camera feedback.\n6. Precision landing on a small marked target.\nPage 3 of 5\n\n2 Project 2: High Speed River Navigation with Energy\nConstraint\n2.1 Objective\nDesign and implement an autonomous surface vessel that is capable of navigating around\nand under the spans of a bridge with minimum energy consumption and time.\n2.2 Description\nHigh speed river or ocean navigation with an unmanned vessel is of great interest to the\nscientific community as it enables researchers to survey a vast area without a human\noperator. One example of such application is the development of an automated bridge\ninspection vessel that can take multiple perspective photos of a bridge footing. However\nthere exist several challenges that require further research and development, such as\nenergy harvesting so that the vessel can operate for a prolong period of time without\nrefueling or recharging.\nFor this project your team will design and implement an autonomous surface vessel that\nmeets the following requirements:\nx Survivable and rugged enough to host sensors that can inspect the Harvard Bridge\non the Charles River as shown below\nx Scavenge wind, solar, or wave energy from the environment for vehicle\npropulsion and electronics, to complement the on-board batteries\nPage 4 of 5\n\n2.3 Themes\nThe project is designed to learn the following aspects in robotic system design:\nx Complex system modeling, analysis, and design\nx Design for RC vessel operations in uncertain wave conditions\nx Microcontroller programming and communication\nx Navigation and feedback control\nx Inspection and data collection\nx Energy harvesting and optimization\nx Autonomy\n2.4 Equipment\nPlatform:\nPro Boat Miss Elam 1/12 Brushless Electric Hydroplane\n(http://www.redrockethobbies.com/ProductDetails.asp?ProductCode=PRB3550)\nAll the sensors, equipment, and parts in the lab are available for the project. Additional\ncomponents, sensors, and supplies will be acquired as justified by design needs.\n2.5 Tasks\n1. Control the hydroplane to fly a planned GPS path.\n2. Fly parallel to a wall using a laser range finder.\n3. Photo survey on a bridge footing using both GPS and laser information.\n4. Quantitative assessment and/or experiment on solar power charging strategies for\nthe instrumentation.\nPage 5 of 5\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Project Proposal Guidelines",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/42d60711d5bcd420291c98ae2a1f7267_MIT2_017JF09_proposal.pdf",
      "content": "Department of Mechanical Engineering\n2.017 Design of Electromechanical Robotic Systems, Fall 2009\nProject Proposal Guidelines\nProposal due date: 9/28/09\nx We expect a 2 - 5 page project proposal from each team, including figures,\nsketches, and hand-written notes.\nx Use 11 or 12 pt font size and single-spacing.\nx First page should include:\no Title\no Team Members\no Date\no Class\nx Number each page.\nx The proposal should include the following sections:\no Objective\nBriefly state the objective of your project. What is the purpose of\nthis project?\no Project Description / Proposed Approach\nDescribe some background information on the project and explain\nwhy it is useful.\nWhat specifically you are trying to achieve?\nDescribe the high level functional requirements that you identified\nfor your vehicle, based on the objective.\nPreliminary design or functional block diagram.\no Project Plan\nProvide a list of tasks and the people responsible for each task.\nTry to be as specific as you can for now. Tasks are laid out to be\nincrementally achieved. How will you implement the tasks and\nhow will you measure success in each task?\nBe sure to include in your plan a strategy for understanding and\nreporting the dynamic behavior of the system, using LTI modeling.\nProvide a list of required equipment , sensors, components, parts,\netc.\nWhat resources do you need beyond equipment, e.g., special\ninstruction or knowledge, etc.\nList of potential risks and the steps you will take to minimize the\nrisks?\nBackup plan in case of catastrophic failure.\nSchedule.\n2.017 Fall 2009\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Proposal for a Design of a Autonomous Bridge-Mapping Hydroplane",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-017j-design-of-electromechanical-robotic-systems-fall-2009/03433f921fb2ce014686480d38e1d6ec_MIT2_017JF09_sw2_proposal.pdf",
      "content": "Proposal for a Design of a Autonomous Bridge-Mapping Hydroplane\nProposed for: 2.017 Design of Electromechanical Robotic Systems\nProfessor Franz Hover\nLab Instructor Harrison Chin\nSeptember 29, 2009\n1. Objective\nThis project aims to create an autonomous surface vessel which will be able to investigate under\nand around the supports of a bridge, specifically the Harvard Bridge located in the Charles River of\nBoston, MA. The design will encompass various settings for the speed and level of control used for\ndifferent portions of the mission and will also optimize the energy use and speed of the mission.\n2. Project Description and Approach\n2.1 Background\nThe use of autonomous surface vehicles allows the surveying of large areas of water without the\nneed for directed operation. The researcher may use an unmanned vehicle in situations where it is\nimpractical or dangerous for a human operator to be present. High-speed unmanned vehicles also allow a\nlarger area to be surveyed in a shorter amount of test time, a valuable resource in both research and\nindustry.\n2.2 Specific Goals\nIn this project, the vehicle is being designed to survey the footings of the Harvard Bridge which\nspans the Charles River. The mission sees the vehicle steering itself to the bridge and photographing a\nbridge piling at multiple perspectives.\nThe team is modifying a commercially available, high-speed\nelectric hydroplane to run smoothly at differing optimal speeds. The vehicle, a Pro Boat Miss Elam, will\nbe outfitted with a range of sensors.\nThe energy consumption during the mission is also of concern. Although the vehicle will most\nlikely meet its power requirements with additional batteries, the will also be a proof-of-concept for\nmeeting these needs with an attached solar collector. Further, the motors and main power drawing\nelements of the system will be optimized to conserve energy where possible. This complex autonomous\nsystem will require both a rigorous control system and a rugged, waterproof design.\n2.3 Functional Requirements\nMuch more than just a camera and a means to trigger will be necessary for the successful\ncompletion of this mission. One major challenge will be ensuring the proper positioning of the boat\nwith respect to the bridge pilings. To this end, the boat will be outfitted with a range of sensors such as\ngyroscopes, accelerometers, and a GPS system to assist in the navigation of the river to the bridge. A\nlaser range sensor will be used in positioning the vehicle while it surveys near the bridge, as GPS data\nwill be unreliable beneath the bridge.\nAnother key ability is the power use-optimizing \"modes\" mission plan the team has identified as\ncritical to the completion of the mission. The boat is quite small and can only carry so much on-board\npower. Far from the bridge, high speed will enable the boat to get to the bridge as quickly as possible.\nHowever, near the bridge speed is much less necessary and more power will need to be routed to the\nsensors. The team plans to use \"modes\" as a scheme for the speed of the mission and the power\nallocation within the vehicle.\nThe robustness of the boat and the component attachments is perhaps the most crucial aspects of\nthe mission, despite its mundane nature. The wave environment in the Charles River is roughly 1ft\nGroup 2\n\nwaves at around 1hz, which is probably the worst-case environment for the Pro Boat Miss Elam.\nSensors, such as the gyroscope and the compass, will help to gauge and compensate for these forced\nmotions of the boats.\n2.4 Preliminary Design\nFigure 1: Block Diagram of Planned Tasks\nThe mission requires the boat to act as a stable platform, capable of carrying a large array of\nsensors, batteries and power collectors even at high speeds. To that end, several vehicle modifications\nhave been planned to make room for the equipment and ensure that it is optimally positioned.\nSensors such as the gyroscope, accelerometer, compass, and the Arduino microcontroller will need\nto be housed in a waterproof housing, so the geometry of the boat must be altered. The removable\ncowling currently encloses a mostly empty space, but this space will not be large enough to\naccommodate these sensors plus the additional batteries required to power them so it will need to be\nenlarged. The gyroscope and accelerometer will be mounted as close as possible to the center of mass of\nthe vehicle, to try to minimize the lateral motion the gyro will experience and the rotational motion the\naccelerometer will experience.\nThe laser rangefinder and camera will be mounted as high on the vehicle as possible, to minimize\nthe impact of waves on the readings. If possible, the existing spoiler will be used as the mounting point.\nHowever, if the spoiler proves to be too far back, or structurally incapable of sustaining the required\nload, the camera and laser can be attached to the extended cowling. To allow the vehicle to both follow\nthe walls of the supports by \"looking\" at the wall from the side of the boat and to avoid obstacles by\nseeing them from the front, the laser rangefinder will be mounted to a small servo which will rotate the\ncomponents as needed.\nIt is currently unknown whether the steering ability of the boat will be sufficient for this mission.\nExperiments are planned to test this aspect of the boat control and if it is deemed insufficient, the first\nstep will be to add bow planes to increase the ship stability in pitch and roll.\nFinally, the ability of the hull to cut through waves may also need to be improved. As currently\ndesigned, the boat seeks to ride over waves instead of cutting through them. This is a good design for a\n900 Watt boat with no purpose or ballast other than speed, but it will not work for this mission. The\nheavy components will weigh down the ship and the position sensors would be quite confused by the\nwave motion of the ship. The front of each pontoon will be made sharper and less sloped to allow the\nboat to cut through the waves.\n3. Project Plan\n3.1 LTI Modeling\nTo successfully complete the mission, a robust control system must be developed that takes into\naccount both the dynamics of the boat and the wave characteristics of the Charles River. The design such\n\na complex control system will require several steps. Once the close-loop model is developed and\nintegrated into the control system, its performance will be tested in the tow tank and the Charles River to\nassess its performance. Adjustments will be made accordingly to improve vehicle performance.\nFirst the team must develop a model of the boat dynamics. The model will relate the speed and\nyaw of the boat to propeller speed, rudder position, and outside disturbances such as the waves and wind\nusing basic hydrodynamic principles. If need be, tests will be performed in the MIT Tow Tank to obtain\ncharacteristics used by the model such as the boat's moment of inertia and viscous drag coefficient. The\ntow tank will also be used to conduct experiments to determine the boat's open loop response to different\nsea states. One such experiment would involve mounting the boat at different angles in the tow tank and\nmeasuring the torque exerted on it by waves of varying frequency and amplitude. These measurements\nwould then be use to determine the relationship between sea-state and disturbance torque.\nOnce the boat dynamics have been determined, a closed-loop model to take desired speeds and\nheadings and adjust the boat's rudder and propeller speed based according to sensor readings and the\nboat's response can be developed. Part of building this model will involve incorporating the boat's stock\nmotor controller and rudder control. These controls have specific gains relating the RC signals used to\ncontrol the boat to the rudder position and propeller speed. Once these gains are incorporated, the signals\nfrom the controller will be able to correctly adjust the propeller speed and rudder position.\nThe close loop model will utilize several sensors to report the real time speed, orientation and\nlocation. These sensors will include a 3-axis accelerometer, laser range finder and GPS and will be used\nin conjunction to determine the boat's speed, orientation and location.\nSince the boat will be operating in the random environment of the Charles River, a wave spectra of\nthe river will be a valuable asset because it will allow for optimization of control system gains. If no\naccurate data is readily available, we will deploy sensors in Charles River to obtain the wave height over\ntime at several locations. This data can then be processed using the FFT function to determine the wave\namplitude spectrum of the Charles.\n3.2 Tasks and Responsibilities\nTable 1: Mission Tasks and Responsibilities\nCMU Integration\nStudent A\nLaser Range Finder Integration\nStudent B\nControl System Design\nStudents A, C, D\nSensor Mounting and Boat Modification\nStudents C, E\nData Collection and Modeling\nStudents B, F\nEnergy Collection and Management\nStudent G\nMission Planing, Team Management\nStudent D\nTesting, Administrative Work\nAll\n\n3.3 Required Equipment\nTable 2: Required Equipment, Costs, and Functions\nEquipment Name\nFunction\nCost\nGPS\nPositioning when ship not under bridge (incl. surge and sway)\n$0 *\nCompass\nShip Heading (Yaw)\n$0 *\n3-Axis Accelerometer Measures Pitch and Yaw (removes DOFs from system)\n$0 *\nGyroscope\nPitch and Roll (Redundancy)\n$0 *\nLaser Range Finder\nPositioning Under Bridge\n$300-$750\nCMU Camera\nReal-time image processing (navigation, retrieval, pillar recognition) $0*\n-\nItem already available in the OETL\nMost of the sensors to be used will be for navigation either on the river or underneath the bridge.\nThese sensors include the GPS and gyroscope. However, two other pieces of equipment are currently\nbeing considered. The CMU camera allows for more precise navigation, especially near the bridge and\nthe dock. A CMU camera performs on-board real-time image processing for object and color\nrecognition. It could potentially be used to recognize a pillar of the bridge, or an object near the dock to\nsimplify the recovery of the hovercraft at the end of the mission. The OETL would need to be purchased\nfor this project, but it is probably prohibitively expensive. Finally, a laser range finder could be used to\nmeasure the distance between the craft and a pillar of the bridge, helping to maintain a precise, constant\ndistance but would also need to be purchased.\n3.4 Additional Resources\nTo create the 3D image of the bridge support envisioned by the team members,\nguidance/instruction will be needed on how to combine the images taken by the camera into a believable\ncomposite. Interpreting data from the laser range finder, and ensuring that we are able to communicate\nwith the range finder that is purchased, is also expected to be a roadblock.\n3.5 Potential Risks\nThe sources of risk in this project spring from two major possibilities: crashing the hydroplane\ninto walls, the bridge, or regular boats and wave damage to the boat or the equipment it carries.\nBefore any modifications are made, the boat must be fully tested at its entire speed range and its\nmaneuvering capabilities must be assessed to prevent overshoot. The boat may also continue to collect\ndistance sensor data (from the laser range finder) even when not surveying the bridge, so that it can\ndetect unexpected collisions elsewhere in the mission. The tests and mission runs will be performed\nwhen river traffic is at a minimum.\nThe wave spectrum of the Charles River will be measured and assessed and the hydroplane\nmodifications will be made accordingly. However, in the case of unexpected turbulence, adequately\nwaterproofed sensors and a robust watertight design for the payload of the boat will be critical. The hull\ngeometry and stability will be assessed to avoid capsizing the boat.\n3.6 Back-Up Plan\nThere are a few ways in which catastrophic failure could be encountered during a mission, the\nworst of which are GPS failure or loss of battery/ insufficient power. Every possible precaution will be\ntaken\nto\nprevent\neither\nof\nthese\nfrom\noccurring,\nbut\nshould\nany\nsuch\nevent\noccur, there are plans in place.\n\n3.6.1 GPS/Sensor Failure\nIf the plane either loses GPS or loses close-range sensor capacity when under the bridge, there are\ntwo options for recovery. One would use dead-reckoning and the acceleration/ gyroscopic data and use a\nprogram to estimate the plane's position from its past movement. The program could estimate the plane's\npast position and direction, although with a certain amount of error. Despite the error, the data would\nprobably still be enough to direct the plane roughly to the side of the river where it could be recovered. A\nsecond option would be to retain the functionality of RC control, so that the plane could switch back if\noptions were limited. This could also be useful if we could see the plane to be distinctly off-course or\nabout to make an unexpected collision.\n3.6.2 Loss of Battery/ Insufficient Power\nBattery life will clearly be a great concern in the design, and some design measures have been proposed\nas possible power-safety features. The power consumption could be tracked over time and the mission\naborted when the power reaches a critical level. Additionally, if the solar panels make it past the proof-\nof-concept stage, then the vehicle could enter a \"charge mode\" until it has enough power to complete the\nmission.\n3.7 Schedule\nOur tentative schedule over the course of the project will be as follows:\nTable 3: Tentative Schedule\nDates\nActivity\n9/21-10/4\nLearn boat controls to find its response under RC control\n9/21-10/4\nDetermine and purchase necessary sensors\n10/5-10/18\nModify the boat to get desired response.\n10/5-10/18\nCorrect for placement of sensors.\n10/5-10/18\nCollect data on river wave characteristics.\n10/19-10/25\nDevelop a close-loop, LTI model of system\n10/26-11/8\nTest in controlled environment\n11/9-11/15\nDebug and retest\n11/16-11/29\nField Test\n11/30-12/6\nDebug and Retest\n12/07/09\nFinal Presentation\n* This schedule may change based on certain setbacks or difficulties, but sticking to as closely as\npossible should allow for the proper completion of this project.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n2.017J Design of Electromechanical Robotic Systems\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    }
  ]
}