{
  "course_name": "Wavelets, Filter Banks and Applications",
  "course_description": "Wavelets are localized basis functions, good for representing short-time events. The coefficients at each scale are filtered and subsampled to give coefficients at the next scale. This is Mallat’s pyramid algorithm for multiresolution, connecting wavelets to filter banks. Wavelets and multiscale algorithms for compression and signal/image processing are developed. Subject is project-based for engineering and scientific applications.",
  "topics": [
    "Engineering",
    "Electrical Engineering",
    "Signal Processing",
    "Mathematics",
    "Algebra and Number Theory",
    "Applied Mathematics",
    "Differential Equations",
    "Engineering",
    "Electrical Engineering",
    "Signal Processing",
    "Mathematics",
    "Algebra and Number Theory",
    "Applied Mathematics",
    "Differential Equations"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nText\n\nStrang, and Nguyen.\nWavelets and Filter Banks.\n\nWellesley-Cambridge Press\n, 1997.\n\nCourse Structure\n\nThe course will consist of lectures, homework assignments and a project on a topic related to the student's area of interest. We will aim for the right balance of theory and \"applications\". The course has no specific prerequisites, although a basic knowledge of Fourier transforms is recommended. We start with time-invariant filters and basic wavelets. The text gives an overall perspective of the field - which has grown with amazing speed. The topics will include\n\nAnalysis of Filter Banks and Wavelets\n\nDesign Methods\n\nApplications\n\nHands-on Experience with Software\n\nThese four key areas will be developed in detail.\n\nAnalysis\n\nMultirate Signal Processing: Filtering, Decimation, Polyphase, Perfect Reconstruction and Aliasing Removal.\n\nMatrix Analysis: Toeplitz Matrices and Fast Algorithms.\n\nWavelet Transform: Pyramid and Cascade Algorithms, Daubechies Wavelets, Orthogonal and Biorthogonal Wavelets, Smoothness, Approximation, Boundary Filters and Wavelets, Time-Frequency and Time-Scale Analysis, Second-Generation Wavelets.\n\nDesign Methods\n\nSpectral Factorization, Cosine-Modulated Filter Banks, Lattice Structure, Ladder Structure (Lifting.)\n\nApplications\n\nAudio and Image Compression, Quantization Effects, Digital Communication and Multicarrier Modulation, Transmultiplexers, Text-Image Compression: Lossy and Lossless, Medical Imaging and Scientific Visualization, Edge Detection and Feature Extraction, Seismic Signal Analysis, Geometric Modeling, Matrix Preconditioning, Multiscale Methods for Partial Differential Equations and Integral Equations.\n\nSimulation Software\n\nMATLAB\n(r)\nWavelet Toolbox, Software for Filter Design, Signal Analysis, Image Compression, PDEs, Wavelet Transforms on Complex Geometrical Shapes.\n\nWe encourage you to learn about wavelets and their applications.\n\nMultiresolution representation of a complex shape. Courtesy of Igor\n\nGuskov, University of Michigan. Used with permission.",
  "files": [
    {
      "category": "Assignment",
      "title": "pset1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/04c04912cebb9b7b795e5a3a82227c59_pset1.pdf",
      "content": "18.327/1.130: Wavelets, Filter Banks and Applications\nProblem Set 1\nIssued: SES #3\nDue: SES #6\nMatlab Exercises\nPlease submit your Matlab code and plots.\n1. Consider a two channel√perfect reconstruction filter√bank (see pp. 103 in the text) with the analysis fil\n√\n√\nters h0[n] = {1/ 2, 1/ 2} and h1[n] = {1/ 2, -1/ 2}. Consider also a signal x[n] = {0, 1, -1, 2, 5, 1, 7, 0}.\n(a) Find the corresponding dual(synthesis) filters f0[n] and f1[n].\n(b) Find (and plot) the signals v0[n], v1[n] and x[n].\n(c) Plot the zeros of the filters h0[n], h1[n], f0[n] and f1[n] (use zplane).\n(d) Plot the frequency spectra of v0[n] and v1[n].\n√\n√\n2. Repeat the previous problem for the filters h0[n] = {-1, 2, 6, 2, -1}/(4 2)} and h1[n] = {1, -2, 1}/(2 2).\nTextbook Problems\n1. Problem Set 1.3, pp. 15. Problems 1 and 3.\n2. Problem Set 1.4, pp. 21. Problems 9 and 11.\n3. Problem Set 3.3, pp. 100. Problems 2 and 7.\n4. Problem Set 4.1, pp. 113-114. Problems 3, 4, 9 and 12."
    },
    {
      "category": "Assignment",
      "title": "pset2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/389fdc4bd3d21e6b760386280b7d1946_pset2.pdf",
      "content": "18.327/1.130: Wavelets, Filter Banks and Applications\nProblem Set 2\nIssued: SES #6\nDue: SES #10\nMatlab Exercise\nPlease submit your Matlab code and plots.\nDevelop a Matlab program to compute the spectral factors of a symmetric, positive definite filter (i.e., a filter\nwhose Toeplitz matrix is symmetric and positive definite) using the Matlab root finding algorithm roots.\nTest your algorithm by using it to factor the degree 10 product filter to obtain the Daubechies 6-tap filter.\nTextbook Problems\n1. Problem Set 3.4, pp. 102. Problem 3.\n2. Problem Set 4.2, pp. 121. Problems 1, 4 and 7.\n3. Problem Set 4.3, pp. 126. Problems 2 and 17(b,c).\n4. Problem Set 4.4, pp. 133. Problem 9.\n5. Problem Set 5.2, pp. 152. Problems 2 and 4.\n6. Problem Set 5.4, pp. 164. Problem 3."
    },
    {
      "category": "Assignment",
      "title": "pset3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/b08a46eaef6845fc19e2477d01892246_pset3.pdf",
      "content": "18.327/1.130: Wavelets, Filter Banks and Applications\nProblem Set 3\nIssued: SES #10\nDue :SES #15\nTextbook Problems\n1. Problem Set 6.1, pp. 186\n2. Problem Set 6.2, pp. 193. Problems 5 and 6.\n3. Problem Set 6.3, pp. 201. Problem 3.\n4. Problem Set 6.4, pp. 208. Problem 4.\n5. Problem Set 6.5, pp. 218. Problems 7 and 8.\n6. Problem Set 7.2, pp. 242. Problem 6.\n7. Problem Set 7.3, pp. 250. Problem 4.\n8. Problem Set 7.5, pp. 262. Problem 4."
    },
    {
      "category": "Resource",
      "title": "Handout1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/c582ab14f4b0657b1b2a432724371653_Handout1.pdf",
      "content": "⇔\n⇔\n⇔\nCourse 18.327 and 1.130\nWavelets and Filter Banks\nDiscrete-time filters: convolution;\nFourier transform; lowpass and\nhighpass filters\nDiscrete Time Filters\nInput\nOutput\n→\nFilter\n→\nx[n]\ny[n]\nn denotes the time variable: {..., -2, -1, 0, 1, 2, ...}\nx[n] denotes the sequence of input values:\n{..., x[-2], x[-1], x[0], x[1], x[2], ...}\ny[n] denotes the sequence of output values:\n{..., y[-2], y[-1], y[0], y[1], y[2], ...}\nAssume that\na) the principle of superposition holds ⇔ system is\nlinear, i.e. combining any two inputs in the form\nAx1[n] + Bx2[n]\nresults in an output of the form\nAy1[n] + By2[n]\n\n∑∑∑\nδδδ\n∑∑∑\ninfinfinf\ninfinfinf\ninfinfinf\ninfinfinf\nb) the behavior of the system does not change with\ntime, i.e. a delayed version of any input\nxd[n]\nx[n - d]\nproduces an output with a corresponding delay\nyd[n]\ny[n - d]\nUnder these conditions, the system can be\ncharacterized by its response, h[n], to a unit\nimpulse, δδδδ[n], which is applied at time n =\ni.e. the particular input\nx[n]\nδδδδ[n]\nproduces the output\ny[n]\nL\nL\nL\nL\nL\nL\nL\nL\nUnit\nImpulse\n- 2 - 1 0\n- 2 - 1 0\nL\nL\nL\nL\nL\nL\nL\nL\nh[-2]\nh[-1]\nh[0]h[1]\nh[2]\nImpulse\nResponse\n=\n=\n0,\n=\nh[n]\n=\nn\nn\nThe general input\ninf\nx[n] =\nk = ∑\n-infx[k] δ[n - k]\nwill thus produce the output\ninf\ny[n] =\nk = ∑\n-infx[k]h[n-k]\nConvolution sum\n\nωωω\n∑∑∑\nωωω\nωωω\nωωω\nωωω\ninfinfinf\ninfinfinf\nπππ\n⌠⌠⌠\n⌡⌡⌡\nπππ\nπππ\nωωω\n→\n→\n→\n→\n→\n∑∑∑\nωωω ∑∑∑\nωωω\nωωω\nωωω\nωωω\nωωω\nFourier Transform\nDiscrete time Fourier transform\ninf\nX(ω) = ∑ x[n] e-iωn\nn = -inf\nInverse\nπ\n⌠\nx[n] = 2π\n⌡ X(ω) eiωn dω\n- π\nFrequency Response\nSuppose that we have the particular input\nx[n] = eiωn\neiωn\nH(ω) eiωn\nWhat is the output?\n→\n→\n→\ny[n] = ∑ h[k] x [n - k]\nk\n= eiωn ∑ h[k] e-iωk\nk 14243\nH(ω)\nFrequency Response\n\nωωω\nωωω\nωωω\nωωω\nωωω\nωωω\nωω →\n→\nωωω\nωωω\nωωω\n∗∗∗\n∑∑∑\nπππ ⌡⌡⌡\nπππ\nπππ\nπππ ⌡⌡⌡\n⌠⌠⌠\nπππ\nπππ\n⌠⌠⌠\nωωω\nConvolution Theorem\nA general input\n1 ⌠\nπ\nx[n] = 2π ⌡ X(ω) eiωn dω\n- π\nwill thus produce the output\nπ\ny[n] = 1 ⌠ X(ω) H(ω) eiωn dω →\n2π ⌡\nω → Y(ω) = X(ω) H(ω)\n- π 14243\nY(ω)\nConvolution\nConvolution of sequences x[n] and h[n] is denoted by\nh[n] ∗ x[n] = ∑ x[k] h[n - k] = y[n] (say)\nk\nMatrix form:\n=\nh[0] h[-1] h[-2]\nh[1] h[0]\n[-2]\nh[2] h[1]\nh[2]\nh[2]\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nMMMM\nx[-2]\nx[-1]\nx [0]\nx [1]\nx[2]\nMMMM\nMMMM\ny[-2]\ny[-1]\ny[0]\ny[1]\ny[2]\nMMMM\nToeplitz matrix\nh\nh[-1]\nh[-1] h[-2]\nh[0]\nh[-1]\nh[0]\nh[1]\nh[0]\nh[1]\n\n∑∑∑\nωωω\n∑∑∑\nωωω\nωωω\nωωω\nωωω\nConvolution is the result of multiplying polynomials:\n(... + h[-1]z + h[0] +h[1]z-1 + ...) (... + x[-1]z + x[0] +\nx[1]z-1 + ...) = (... + y[-1]z + y[0] + y[1]z-1 + ...)\nExample:\n-3\n-9\n↑↑↑↑\n↑↑↑↑\n↑↑↑↑\n↑↑↑\n↑↑↑\n↑↑↑↑\nz-5 z-4 z-3\nz-2\nz-1 z0\n-5\nx[n]\n0-1\nh[n]\n-2\n-9\ny[n]\n-17\n-5\n-1\n-2\n-1\n-20\n-10\n-2\n-17\n↑\n↑\nDiscrete Time Filters (summary)\nDiscrete Time:\nx[n]\ny[n]\n→\nh[n]\n→\ny[n] = ∑ x[k] h [n-k]\n(Convolution)\nk\nDiscrete -time Fourier transform\nX(ω) = ∑ x[n] e-iωn\nn\nFrequency domain representation\nY(ω) = H(ω) - X(ω)\n(Convolution theorem)\n\nToeplitz Matrix representation:\nh[0] h[-1] h[-2]\nh[1] h[0]\n[-2]\nh[2] h[1]\nh[2]\nh[0]\nh[2]\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nMMMM\ny[-2]\ny[-1]\ny[0]\ny[1]\ny[2]\nMMMM\nMMMM\nx[-2]\nx[-1]\nx [0]\nx [1]\nx[2]\nMMMM\n=\nFilter is causal if y[n] does not depend on future\nvalues of x[n].\nCausal filters have h[n]\nh\nh[-1]\nh[-1] h[-2]\nh[0]\nh[1]\nh[-1]\nh[0]\nh[1]\n0 for n < 0.\n=\nFilters\na) Lowpass filter example:\ny[n]\n1⁄2 x[n] + 1⁄2 x [n-1]\nFilter representation:\n→\n→\nh[n]\nx[n]\ny[n]\ny[n] = ∑∑∑∑ x[k] h [n-k]\nk\nImpulse response is\n0 1\nL\nL\nL\nL\nL\nL\nL\nL\n1⁄2 1⁄2\nn\nh[n]\n=\n\nL\nL\nL\nL\nL\nL\nFrequency Response is\nH(ωωωω)\n∑∑∑∑ h[k]e-iωωωωk\n=\n+ 1⁄2 e-iωωωω\nRewrite as H(ωωωω)\nH(ωωωω)\niφφφφ(ωωωω)\nH(ωωωω) =\n-iωωωω/2\n; ππππ ≤≤≤≤ωωωω ≤≤≤≤ππππ\nk\nωωωω\n=\n1⁄2\n=\ne\n/2) e\ncos(\n-\nb) Highpass Filter Example\ny[n] = 1⁄2 x[n] - 1⁄2 x[n-1]\nImpulse response is\n1⁄2\nh[n]\nL\nL\nn\n- 1⁄2\n\nωωω\nωωω\nωωω\nωωω\n\nωωω\nπππ\nωωω\nππ ≤ωω <<<\nωωω\nπππ\nωωω\n<<< ωω ≤ππ\nFrequency response is\nH(ω) = 1⁄2 - 1⁄2 e-iω\n= i sin (ω/2) e-iω/2\nπ ≤ω < 0\nsin (ω/2) e-i(π/2 + ω/2) ; -π ≤≤ω\n=\nsin (ω/2) ei(π/2 - ω/2)\n; 0 < ω ≤\nω ≤ π\n≤π"
    },
    {
      "category": "Resource",
      "title": "Slides1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/cda4e0bac613154fc8bf04506de5df1f_Slides1.pdf",
      "content": "Discrete\nDiscrete--time filters: convolution;\ntime filters: convolution;\nFourier transform;\nFourier transform; lowpass\nlowpass and\nand\nhighpass\nhighpass filters\nfilters\n\n→\n→\nFilter\nFilter\nInput\nInput\nOutput\nOutput\nx[n]\nx[n]\ny[n]\ny[n]\nn denotes the time variable: {...,\nn denotes the time variable: {..., --2,\n2, --1, 0, 1, 2, ...}\n1, 0, 1, 2, ...}\nx[n] denotes the sequence of input values:\nx[n] denotes the sequence of input values:\n{..., x[\n{..., x[--2], x[\n2], x[--1], x[0], x[1], x[2], ...}\n1], x[0], x[1], x[2], ...}\ny[n] denotes the sequence of output values:\ny[n] denotes the sequence of output values:\n{..., y[\n{..., y[--2], y[\n2], y[--1], y[0], y[1], y[2], ...}\n1], y[0], y[1], y[2], ...}\nAssume that\nAssume that\na)\na) the principle of superposition holds\nthe principle of superposition holds ⇔\n⇔system is\nsystem is\nlinear, i.e. combining any two inputs in the form\nlinear, i.e. combining any two inputs in the form\nAx\nAx11[n] + Bx\n[n] + Bx22[n]\n[n]\nresults in an output of the form\nresults in an output of the form\nAy\nAy11[n] + By\n[n] + By22[n]\n[n]\n\nb)\nb) the behavior of the system does not change with\nthe behavior of the system does not change with\ntime, i.e. a delayed version of any input\ntime, i.e. a delayed version of any input\nxxdd[n] = x[n\n[n] = x[n -- d]\nd]\nproduces an output with a corresponding delay\nproduces an output with a corresponding delay\nyydd[n] = y[n\n[n] = y[n -- d]\nd]\nUnder these conditions, the system can be\nUnder these conditions, the system can be\ncharacterized by its response, h[n], to a unit\ncharacterized by its response, h[n], to a unit\nimpulse,\nimpulse, δδ[n], which is applied at time n = 0,\n[n], which is applied at time n = 0,\ni.e. the particular input\ni.e. the particular input\nx[n] =\nx[n] = δδ[n]\n[n]\nproduces the output\nproduces the output\ny[n] = h[n]\ny[n] = h[n]\nL\nL\nL\nL\nUnit\nUnit\nImpulse\nImpulse\n-- 22 -- 1 0 1 2 n\n1 0 1 2 n\n-- 22 -- 1 0 1 2 n\n1 0 1 2 n\nL\nL\nL\nL\nh[\nh[--2]\n2]\nh[\nh[--1]\n1]\nh[0]\nh[0]\nh[1]\nh[1]\nh[2]\nh[2]\nImpulse\nImpulse\nResponse\nResponse\n\nThe general input\nThe general input\nx[n] =\nx[n] = ∑∑x[k]\nx[k] δδ[n\n[n -- k]\nk]\nwill thus produce the output\nwill thus produce the output\ny[n] =\ny[n] = ∑∑x[k]h[n\nx[k]h[n--k] Convolution sum\nk] Convolution sum\ninfinf\nk =\nk = --infinf\ninfinf\nk =\nk = --infinf\n\nDiscrete time Fourier transform\nDiscrete time Fourier transform\nX(\nX(ωω) =\n) = ∑∑\nx[n] e\nx[n] e--iiωωnn\nInverse\nInverse\nx[n] = X(\nx[n] = X(ωω) ) eeiiωωnn ddωω\ninfinf\nn =\nn = --infinf\n22ππ\n⌠⌠\n⌡⌡\nππ\n-- ππ\n\nFrequency Response\nFrequency Response\nSuppose that we have the particular input\nSuppose that we have the particular input\nx[n] =\nx[n] = eeiiωωnn\nWhat is the output?\nWhat is the output?\n→\n→\n→\n→\ny[n] =\ny[n] = ∑∑h[k] x [n\nh[k] x [n -- k]\nk]\n=\n= eeiiωωn\nn ∑∑h[k] e\nh[k] e--iiωωk\nk\neeiiωωnn\nH(\nH(ωω)) eeiiωωnn\nkk\nkk\nH(\nH(ωω))\nFrequency Response\nFrequency Response\n\nConvolution Theorem\nConvolution Theorem\nA general input\nA general input\nx[n] =\nx[n] = X(\nX(ωω) ) eeiiωωn\nn ddωω\nwill thus produce the output\nwill thus produce the output\ny[n] = X(\ny[n] = X(ωω) H(\n) H(ωω) ) eeiiωωn\nn ddωω →\n→Y(\nY(ωω) = X(\n) = X(ωω) H(\n) H(ωω))\nConvolution\nConvolution\nConvolution of sequences x[n] and h[n] is denoted by\nConvolution of sequences x[n] and h[n] is denoted by\nh[n]\nh[n] ∗∗x[n] =\nx[n] = ∑∑x[k] h[n\nx[k] h[n -- k] = y[n] (say)\nk] = y[n] (say)\n22ππ ⌡⌡\nππ\n-- ππ\n22ππ ⌡⌡\n⌠⌠\nππ\n-- ππ\n⌠⌠\nkk\nY(\nY(ωω))\n\nMatrix form:\nMatrix form:\n==\nh[0] h[\nh[0] h[--1] h[\n1] h[--2]\n2]\nh[1] h[0] h[\nh[1] h[0] h[--1] h[\n1] h[--2]\n2]\nh[2] h[1] h[0] h[\nh[2] h[1] h[0] h[--1] h[\n1] h[--2]\n2]\nh[2] h[1] h[0] h[\nh[2] h[1] h[0] h[--1]\n1]\nh[2] h[1] h[0]\nh[2] h[1] h[0]\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nMM\nx[\nx[--2]\n2]\nx[\nx[--1]\n1]\nx [0]\nx [0]\nx [1]\nx [1]\nx[2]\nx[2]\nMM\nMM\ny[\ny[--2]\n2]\ny[\ny[--1]\n1]\ny[0]\ny[0]\ny[1]\ny[1]\ny[2]\ny[2]\nMM\nToeplitz\nToeplitz matrix\nmatrix\n\nConvolution is the result of multiplying polynomials:\nConvolution is the result of multiplying polynomials:\n(... + h[\n(... + h[--1]z + h[0] +h[1]z\n1]z + h[0] +h[1]z--1\n1 + ...) (... + x[\n+ ...) (... + x[--1]z + x[0] +\n1]z + x[0] +\nx[1]z\nx[1]z--11 + ...) = (... + y[\n+ ...) = (... + y[--1]z + y[0] + y[1]z\n1]z + y[0] + y[1]z--11 + ...)\n+ ...)\nExample:\nExample:\n3 1\n3 1 --5 2\n5 2\n2 4\n2 4 --11\n--3\n3 --1 5\n1 5 --22\n12 4\n4 --20 8 0\n20 8 0\n6 2\n6 2 --10 4\n10 4 0 0\n0 0\n6 14\n6 14 --9\n9 --17 13\n17 13 --22\n↑↑\n↑↑\n↑↑\n↑↑\n↑↑\n↑↑\nzz--55 zz--44\nzz--33\nzz--22\nzz--11 zz00\n--55\nx[n]\nx[n]\n--11\nh[n]\nh[n]\n--22\n--99\ny[n]\ny[n]\n--17\n\nDiscrete Time Filters\nDiscrete Time Filters (summary)\n(summary)\nDiscrete Time:\nDiscrete Time:\ny[n] =\ny[n] = ∑∑x[k] h [n\nx[k] h [n--k]\nk]\n(Convolution)\n(Convolution)\nDiscrete\nDiscrete --time Fourier transform\ntime Fourier transform\nX(\nX(ωω) =\n) = ∑∑x[n] e\nx[n] e--iiωωnn\nFrequency domain representation\nFrequency domain representation\nY(\nY(ωω) = H(\n) = H(ωω) ) -- X(\nX(ωω) (Convolution theorem)\n) (Convolution theorem)\n→\n→\nh[n]\nh[n]\nx[n]\nx[n]\ny[n]\ny[n]\nkk\nnn\n\nToeplitz\nToeplitz Matrix representation:\nMatrix representation:\nh[0] h[\nh[0] h[--1] h[\n1] h[--2]\n2]\nh[1] h[0] h[\nh[1] h[0] h[--1] h[\n1] h[--2]\n2]\nh[2] h[1] h[0] h[\nh[2] h[1] h[0] h[--1] h[\n1] h[--2]\n2]\nh[2] h[1]\nh[2] h[1] h[0] h[\nh[0] h[--1]\n1]\nh[2] h[1] h[0]\nh[2] h[1] h[0]\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nO\nMM\ny[\ny[--2]\n2]\ny[\ny[--1]\n1]\ny[0]\ny[0]\ny[1]\ny[1]\ny[2]\ny[2]\nMM\nMM\nx[\nx[--2]\n2]\nx[\nx[--1]\n1]\nx [0]\nx [0]\nx [1]\nx [1]\nx[2]\nx[2]\nMM\n==\nFilter is causal if y[n] does not depend on future\nFilter is causal if y[n] does not depend on future\nvalues of x[n].\nvalues of x[n].\nCausal filters have h[n] = 0 for n\nCausal filters have h[n] = 0 for n < 0.\n< 0.\n\nFilters\nFilters\na)\na) Lowpass\nLowpass filter example:\nfilter example:\ny[n] =\ny[n] = 1⁄2\n1⁄2 x[n] +\nx[n] + 1⁄2\n1⁄2 x [n\nx [n--1]\n1]\nFilter representation:\nFilter representation:\n→\n→\nh[n]\nh[n]\nx[n]\nx[n]\ny[n]\ny[n]\ny[n] =\ny[n] = ∑∑x[k] h [n\nx[k] h [n--k]\nk]\nkk\nImpulse response is\nImpulse response is\nL\nL\nL\nL\n1⁄2\n1⁄2\n1⁄2\n1⁄2\nnn\nh[n]\nh[n]\n\nFrequency Response is\nFrequency Response is\nH(\nH(ωω) =\n) = ∑∑h[k]e\nh[k]e--iiωωkk\n=\n= 1⁄2\n1⁄2 +\n+ 1⁄2\n1⁄2 ee--iiωω\nRewrite as H(\nRewrite as H(ωω) = H(\n) = H(ωω)\n) eeiiφφ((ωω))\nH(\nH(ωω) =\n) = cos\ncos( /2) e\n( /2) e--iiωω/2\n/2 ;\n; --ππ ≤≤ωω ≤≤ππ\nkk\nωω\n\nb)\nb) Highpass\nHighpass Filter Example\nFilter Example\ny[n] =\ny[n] = 1⁄2\n1⁄2 x[n]\nx[n] -- 1⁄2\n1⁄2 x[n\nx[n--1]\n1]\nImpulse response is\nImpulse response is\n-- 1⁄2\n1⁄2\nnn\nL\nL\nL\nL\n1⁄2\n1⁄2\nh[n]\nh[n]\n\nFrequency response is\nFrequency response is\nH(\nH(ωω) =\n) = 1⁄2\n1⁄2 -- 1⁄2\n1⁄2 ee--iiωω\n= i sin (\n= i sin (ωω/2) e\n/2) e--iiωω/2\n/2\n==\nsin (\nsin (ωω/2) e\n/2) e--i(i(ππ/2 +\n/2 + ωω/2)\n/2) ;\n; --ππ ≤≤ωω << 00\nsin (\nsin (ωω/2)\n/2) eeii((ππ/2\n/2 -- ωω/2)\n/2)\n; 0\n; 0 << ωω ≤≤ππ"
    },
    {
      "category": "Resource",
      "title": "Handout2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/8c2863a0c6229a0755ff3a910c260307_Handout2.pdf",
      "content": "Course 18.327 and 1.130\nWavelets and Filter Banks\nSampling rate change operations:\nupsampling and downsampling;\nfractional sampling; interpolation\nDefinition:\nDownsampling\nMMMM\nx[0]\nx[1]\nx[2]\nx[3]\nx[4]\nMMMM\n(↓↓↓↓2)\nMMMM\nx[0]\nx[2]\nx[4]\nMMMM\n&&&&\n=\nAs a matrix operation:\nMMMM\nL 1\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nMMMM\nMMMM\nx[0]\nx[1]\nx[2]\nx[3]\nx[4]\nMMMM\n=\n:\nx[0]\nx[2]\nx[4]\n:\n:\n\nDefinition:\nUpsampling\nMMMM\nx[0]\nx[1]\nx[2]\nMMMM\n(↑↑↑↑2)\nMMMM\nx[0]\nx[1]\nx[2]\nMMMM\n=\nAs a matrix operation:\nMMMM\nL 1\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nL 0\nL\nL\nL\nL\nMMMM\nMMMM\nx[0]\nx[1]\nx[2]\n:\n:\n:\n=\nMMMM\nx[0]\nx[1]\nx[2]\nMMMM\n\nDownsampling\nDownsampling by 2\n→\n→\n↓↓↓↓2\nx[n]\ny[n]\n0 1 2\nL\nL\nL\nL\nL\nL\nL\nL\nx[n]\nL\nL\nL\nL\nL\nL\nL\nL\ny[n]\nn\nm even\nm\nm\nm\ny[n]\nY(ωωωω) = ∑∑∑∑ x[2n]e-iωωωωn\n= ∑∑∑∑ x[m]e-iωωωωm/2\n=\n∑∑∑∑ {1 + (-1)m} x[m]e-iωωωωm/2\n=\n{∑∑∑∑ x[m]e-iωωωωm + ∑∑∑∑ x[m]e-i( + ππππ )m} ;\n(-1)m = e-iππππm\n=\n{X (ωωωω/2) + X (ωωωω/2 + ππππ )}\nωωωω\nn\nn\nx[2n]\n=\n1⁄2\n1⁄2\n1⁄2\nDownsampling by M\n→\n→\n↓↓↓↓M\nx[n]\ny[n]\nM\n1 if m = nM\n0 if m ==== nM\nM\nm = nM\nM m\nM-1\nM\nk = 0\nk = 0\nM-1\nM k=0\nM-1\ny[n]\nx[Mn]\nY(ωωωω)\n∑∑∑∑\nx[m]e-iωωωωm/M\n= 1 ∑∑∑∑ { ∑∑∑∑ e-i2ππππkm } x[m]e-iωωωωm/M ;\n∑∑∑∑ (e-i2ππππm)k =\n= 1 ∑∑∑∑ X(ωωωω + 2 ππππk)\nM\n=\n=\n\n↑↑↑\n===\nωωω\n∑∑∑\nωωω\nωωω\nUpsampling\nUpsampling by 2\n→\n→\n↑↑↑↑2\nx[n]\ny[n]\n0 1 2\nL\nL\nL\nL\nL\nL\nL\nL\nx[n]\nL\nL\nL\nL\nL\nL\nL\nL\ny[n]\ny[n] =\n\nx[n/2] ; n even\nY(ωωωω)\n∑∑∑∑ x[n/2]e-iωωωωn\n= ∑∑∑∑ x[m]e-iωωωω2m\n=\nωωωω)\nn even\nm\nn\nn\n; n odd\n=\nX(2\nUpsampling by L\ny[n] = x[n/L] ; n = mL\nx[n]\ny[n]\n→\n↑L\n→\n; n = mL\nY(ω) = ∑ x[n/L] e-iωn\nn=mL\n= X(Lω)\n\n-\n-\n-\nn\n-\n-\n0 1\n- -\n- -\nL\nL\nL\nL\nL\nL\nL\nL\nx[n]\n- -\n-\n- -\n-2 -1\n2 3\nn\n-2 -1\n2 3\n0 1\n-\n-\n-\n-\n-\n-\n-\nL\nL\nL\nL\nL\nL\nL\nxs[n]\nx[0]x[2]\n-\n-\n-\n-\n-\nL\nL\nL\nL\nL\nL\nL\nL\n-\n-\n-\nn\n-1 0 1\nx[-2]\ny[n]\n2ππππ\nX(ωωωω)\nωωωω\n- 2ππππ\n0 ωωωω0\nL\n-ωωωω0\nL\nωωωω\nY(ωωωω)\n- 2ππππ\n2ωωωω0\nL\n-2ωωωω0\nL\n-ππππ\n↑\n↑\n2ππππ\n1⁄2\nππππ\nXs(ωωωω)\nωωωω\n- 2ππππ\nππππ\nL\n-ππππ\nL\n1⁄2\n2ππππ\nDownsampling\nY(ωωωω)\n{ X(\nππππ)}\ny[n]\n(↓↓↓↓2) x[n] =\nωωωω\nωωωω\nL\n1⁄2\n=\n+\n) + X(\n=\nx[2n]\nUpsampling\n-1 0 1\n-\n-\n-\nL\nL\nL\nL\nL\nL\nL\nL\n-\n-\n-\nn\nx[n]\n-1 0\n-2\nn\n-\n-\n-\n-\nL\nL\nL\nL\nL\nL\nL\nL\n- -\n-\nx[-1]\ny[n]\nx[0] x[1]\n-3\ny[n] =\nx[n/2] ; n even\nn odd\nY(ωωωω)\nωωωω\n- 2ππππ\nππππ\nL\n-ππππ\nL\n2ππππ\n-ωωωω0\nωωωω0\nX(ωωωω)\n- 2ππππ\n0 ωωωω0\nL\n-ωωωω0\nL\n-ππππ\n2ππππ\nππππ\nωωωω\nY(ωωωω)\nX(2ωωωω)\n;\n=\n\nInterpolation\nUse lowpass filter after upsampling\nx[n]\n↑↑↑↑L\nH(ωωωω)\ny[n]\nu[n]\nX(ωωωω)\nωωωω\n- 2ππππ\nωωωω0 2ππππ\n- 2ππππ\n0 ωωωω0\nL\n2ππππ\nωωω\nU(ωωωω)\nωωωω\n- 2ππππ\nL\nY(ωωωω)\nωωωω0\n2ππππ\nω\nFractional Sampling\nConsider\nx[n]\n↑↑↑↑L\n↓↓↓↓M\ny[n]\nu[n]\nY(ωωωω)\n1 ∑∑∑∑ U (\nM\nωωωω + 2ππππk\nM\nM-1\nk=0\n= M\nM-1\n1 ∑∑∑∑ X (\nk=0\nωωωω + 2ππππk\nM\nL\nWhat about x[n]\n↓↓↓↓M\n↑↑↑↑L\ny[n]\nd[n]\nY(ωωωω)\nD(ωωωωL)\n=\n∑∑∑∑ X (\nM\nk=0\nM-1\nωωωωL + 2ππππk\nM\n=\n)\n)\n=\n)\n\nMatlab Example 1\nBasic filters, upsampling and\ndownsampling.\nLowpass filter\n\nHighpass filter\nLinear interpolating lowpass\nfilter\n\nUpsampling\nDownsampling\n\nDownsampling\nDownsampling"
    },
    {
      "category": "Resource",
      "title": "Slides2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/aa27dbf675422d956f17129fe72d3852_Slides2.pdf",
      "content": "Sampling rate change operations:\nSampling rate change operations:\nupsampling\nupsampling and\nand downsampling\ndownsampling; ;\nfractional sampling; interpolation\nfractional sampling; interpolation\n\nDefinition:\nDefinition:\nDownsampling\nDownsampling\nMM\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\nx[3]\nx[3]\nx[4]\nx[4]\nMM\n((↓↓2)\n2)\nMM\nx[0]\nx[0]\nx[2]\nx[2]\nx[4]\nx[4]\nMM\n&&\n==\nAs a matrix operation:\nAs a matrix operation:\nMM\nL\nL 1 0 0 0 0\n1 0 0 0 0 L\nL\nL\nL 0 0 1 0 0\n0 0 1 0 0 L\nL\nL\nL 0 0 0 0 1\n0 0 0 0 1 L\nL\nMM\nMM\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\nx[3]\nx[3]\nx[4]\nx[4]\nMM\n==\n::\nx[0]\nx[0]\nx[2]\nx[2]\nx[4]\nx[4]\n::\n::\n\nDefinition:\nDefinition:\nUpsampling\nUpsampling\nMM\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\nMM\n((↑↑2)\n2)\nMM\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\nMM\n==\n\nAs a matrix operation:\nAs a matrix operation:\nMM\nL\nL 1 0 0\n1 0 0 L\nL\nL\nL 0 0 0\n0 0 0 L\nL\nL\nL 0 1 0\n0 1 0 L\nL\nL\nL 0 0 0\n0 0 0 L\nL\nL\nL 0 0 1\n0 0 1 L\nL\nL\nL 0 0 0\n0 0 0 L\nL\nMM\nMM\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\n::\n::\n::\n==\nMM\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\nMM\n\nDownsampling\nDownsampling\nDownsampling\nDownsampling by 2\nby 2\n→\n→\n↓↓22\nx[n]\nx[n]\ny[n]\ny[n]\n1 2 3 4 n\n1 2 3 4 n\nL\nL\nL\nL\nx[n]\nx[n]\n0 1 2 n\n0 1 2 n\nL\nL\nL\nL\ny[n]\ny[n]\nnn\nm even\nm even\nm\nm\nm\nm\nm\nm\ny[n] = x[2n]\ny[n] = x[2n]\nY(\nY(ωω) =\n) = ∑∑x[2n]e\nx[2n]e--iiωωnn\n=\n= ∑∑x[m]e\nx[m]e--iiωωm/2\nm/2\n=\n= 1⁄2\n1⁄2 ∑∑{1 + (\n{1 + (--1)\n1)m\nm} x[m]e\n} x[m]e--iiωωm/2\nm/2\n=\n= 1⁄2\n1⁄2 {{∑∑x[m]e\nx[m]e--iiωωm\nm +\n+ ∑∑x[m]e\nx[m]e--i( +\ni( + ππ )m\n)m} ;\n} ;\n((--1)\n1)m\nm = e\n= e--iiππm\nm\n=\n= 1⁄2\n1⁄2 {X (\n{X (ωω/2) + X (\n/2) + X (ωω/2 +\n/2 + ππ )})}\nωω\n\nDownsampling\nDownsampling by M\nby M\n→\n→\n↓↓M\nM\nx[n]\nx[n]\ny[n]\ny[n]\nM\nM\n1 if m =\n1 if m = nM\nnM\n0 if m\n0 if m ==nM\nnM\nM\nM\nm =\nm = nM\nnM\nM\nM\nm\nm\nM\nM--11\nM\nM\nk = 0\nk = 0\nk = 0\nk = 0\nM\nM--11\nM\nM k=0\nk=0\nM\nM--11\ny[n] = x[\ny[n] = x[Mn\nMn]]\nY(\nY(ωω) =\n) = ∑∑\nx[m]e\nx[m]e--iiωωm/M\nm/M\n=\n= 11 ∑∑{ { ∑∑ee--ii22ππkm\nkm } x[m]e\n} x[m]e--iiωωm/M\nm/M ;;\n∑∑(e\n(e--ii22ππm\nm))kk ==\n=\n= 11 ∑∑X(\nX(ωω + 2\n+ 2 ππkk))\nM\nM\n\nUpsampling\nUpsampling\nUpsampling\nUpsampling by 2\nby 2\n→\n→\n↑↑22\nx[n]\nx[n]\ny[n]\ny[n]\n1 2 n\n1 2 n\nL\nL\nL\nL\nx[n]\nx[n]\n0 1 2 3 4 n\n0 1 2 3 4 n\nL\nL\nL\nL\ny[n]\ny[n]\ny[n] =\ny[n] =\nx[n/2] ; n even\nx[n/2] ; n even\n0 ; n odd\n0 ; n odd\nY(\nY(ωω) =\n) = ∑∑x[n/2]e\nx[n/2]e--iiωωnn\n=\n= ∑∑x[m]e\nx[m]e--iiωω2m\n2m\n= X(2\n= X(2ωω))\nn even\nn even\nm\nm\n\nUpsampling\nUpsampling by L\nby L\ny[n] =\ny[n] =\n→\n→\n↑↑LL\nx[n]\nx[n]\ny[n]\ny[n]\nx[n/L] ; n =\nx[n/L] ; n = mL\nmL\n0 ; n\n0 ; n ==mL\nmL\nY(\nY(ωω) =\n) = ∑∑x[n/L] e\nx[n/L] e--iiωωnn\n= X(L\n= X(Lωω))\nn=\nn=mL\nmL\n\nnn\nL\nL\nL\nL\nx[n]\nx[n]\n--22 --11\nnn\n--22 --11\n00 11\nL\nL\nL\nL\nxxss[n]\n[n]\nx[0]\nx[0]x[2]\nx[2]\nL\nL\nL\nL\nnn\n--11\nx[\nx[--2]\n2]\ny[n]\ny[n]\n22ππ\nX(\nX(ωω))\nωω\n-- 22ππ\n00 ωω00\nL\n--ωω00\nL\nωω\nY(\nY(ωω))\n-- 22ππ\n22ωω00\nL\n--22ωω00\nL\n--ππ\n↑\n↑\n22ππ\n1⁄2\n1⁄2\nππ\nXXss((ωω))\nωω\n-- 22ππ\nππ\nL\n--ππ\nL\n1⁄2\n1⁄2\n22ππ\nDownsampling\nDownsampling\nY(\nY(ωω) =\n) = 1⁄2\n1⁄2 { X( ) + X( +\n{ X( ) + X( + ππ)})}\ny[n] = (\ny[n] = (↓↓2) x[n] = x[2n]\n2) x[n] = x[2n]\nωω\nωω\n\nUpsampling\nUpsampling\n--11\n00 11\nL\nL\nL\nL\nnn\nx[n]\nx[n]\n--11 00\n--22\nnn\nL\nL\nL\nL\nx[\nx[--1]\n1]\ny[n]\ny[n]\nx[0]\nx[0] x[1]\nx[1]\n--33\ny[n] =\ny[n] =\nx[n/2] ; n even\nx[n/2] ; n even\n0 ; n odd\n0 ; n odd\nY(\nY(ωω))\nωω\n-- 22ππ\nππ\nL\n--ππ\nL\n22ππ\n--ωω00\nωω00\nX(\nX(ωω))\n-- 22ππ\nωω00\nL\n--ωω00\nL\n--ππ\n22ππ\nππ\nωω\nY(\nY(ωω) = X(2\n) = X(2ωω))\n\nInterpolation\nInterpolation\nUse\nUse lowpass\nlowpass filter after\nfilter after upsampling\nupsampling\nx[n]\nx[n]\n↑↑LL\nH(\nH(ωω))\ny[n]\ny[n]\nu[n]\nu[n]\nX(\nX(ωω))\nωω\n-- 22ππ\nωω00\n22ππ\n-- 22ππ\nωω00\nLL\n22ππ\nωω\nU(\nU(ωω))\nωω\n-- 22ππ\nLL\nY(\nY(ωω))\nωω00\n22ππ\n\nFractional Sampling\nFractional Sampling\nConsider\nConsider\nx[n]\nx[n]\n↑↑LL\n↓↓M\nM\ny[n]\ny[n]\nu[n]\nu[n]\nY(\nY(ωω) =\n) = 11 ∑∑U ( )\nU ( )\nM\nM\nωω + 2\n+ 2ππkk\nM\nM\nM\nM--11\nk=0\nk=0\n= M\nM\nM\nM--11\n11 ∑∑X ( )\nX ( )\nk=0\nk=0\nωω + 2\n+ 2ππkk\nM\nM\nLL\nWhat about\nWhat about x[n]\nx[n]\n↓↓M\nM\n↑↑LL\ny[n]\ny[n]\nd[n]\nd[n]\nY(\nY(ωω) = D(\n) = D(ωωL)\nL)\n=\n=\n∑∑X ( )\nX ( )\nM\nM\nk=0\nk=0\nM\nM--11\nωωL + 2\nL + 2ππkk\nM\nM\n\nBasic filters,\nBasic filters, upsampling\nupsampling and\nand\ndownsampling\ndownsampling.."
    },
    {
      "category": "Resource",
      "title": "Handout3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/9ae8fd2b4313aea9cb1d828e3d431301_Handout3.pdf",
      "content": "Course 18.327 and 1.130\nWavelets and Filter Banks\nFilter Banks: time domain\n(Haar example) and frequency domain;\nconditions for alias cancellation\nand no distortion\nSimplest (non-trivial) example of a two channel FIR\nperfect reconstruction filter bank.\nHaar Filter Bank\nh0[n]\nh1[n]\neeee2\neeee2\nx[n]\ny0[n]\ny1[n]\naaaa2\naaaa2\nAnalysis\nr0[n]\nr1[n]\nf0[n]\nf1[n]\nx[n]\n^\nSynthesis\nv0[n]\nv1[n]\nt1[n]\nt0[n]\nh0[n] =\nf0[n] =\nμμμμ2\nμμμμ2\nμμμμ2\nμμμμ2\n-1\n\nh1[n] =\nf1[n] =\n-1\nμμμμ2\nμμμμ2\n-1\nμμμμ2\nμμμμ2\n-1\nAnalysis:\nr0[n] =\n(x[n] + x[n œ 1])\nlowpass filter\ny0[n] = r0[2n]\ndownsampler\ny0[n] =\n(x[2n] + x[2n œ 1])\n-----------------j\nj\nj\nj\nSimilarly\ny1[n] =\n(x[2n] œ x[2n œ 1])\n------------------k\nk\nk\nk\nμμμμ2\nμμμμ2\nμμμμ2\nMatrix form\n=\ny0[0]\ny0[1]\n::::\n::::\ny1[0]\ny1[1]\nμμμμ2\n3 1\n0 3\n3 0\n1 3\n3 -1 1\n0 3\n3 0 0\n-1\n1 3\n::::\nx[-1]\nx[0]\nx[1]\nx[2]\n::::\n::::\n-------------------l\nl\nl\nl\nyo\ny1\n=\nL\nB\nx\n\nSynthesis\ny0[n/2]\nn even\nt0[n] =\nupsampler\nn odd\nv0[n] =\n( t0[n + 1] + t0[n])\nlowpass filter\ny0[n/2]\nn even\ny0[\n]\nn odd\n&)')(\n&)')(\n&)')(\n&)')(\nμμμμ2\n&)')(\n&)')(\n&)')(\n&)')(\n=\nμμμμ2\nμμμμ2\nn + 1\nSimilarly\nv1[n] =\n&)')(\n&)')(\n&)')(\n&)')(\n\nμμμμ2 y1[n/2]\nn even\nμμμμ2\n-\ny1[\n]\nn odd\nn + 1\n&)')(\n&)')(\n&)')(\n&)')(\n\nμμμμ2 (y0[n/2] + y1[n/2])\nn even\n^\nSo, the reconstructed signal is\nx[n] = v0[n] + v1[n]\n=\nμμμμ2 (y0[\n] - y1[\n])\nn odd\nn + 1\nn + 1\n\nΩ\nΩ\nΩ\nΩ\nΩ\nΩ\nμμμ\nj\nj\nj\nk\nk\nk\ni.e.\n^\nx[2n-1] = 1\nμμμμ2 (y0[n] œ y1[n]) = x[2n-1]\nfrom j and k\n^\nx[2n]\n= μ2 (y0[n] + y1[n]) = x[2n]\n^\nSo x[n]\n=\nx[n]\nΩ Perfect reconstruction!\nIn general, we will make all filters causal, so we will\nhave\n^\nx[n] = x[n œ n0]\nΩ PR with delay\nMatrix form\n=\nx[-1]\nx[0]\nx[1]\nx[2]\nμμμμ2\n-1 0\n1 1\n0 1\n0 -1\n0 1\n-1 1\n^\n^\n^\n^\ny0[0]\ny0[1]\ny1[0]\ny1[1]\n3 3\n^\nx\n=\nLT\nBT\ny0\ny1\n----------------m\nm\nm\nm\n\nPerfect reconstruction means that the synthesis\nbank is the inverse of the analysis bank.\nx = x Ω\nΩ\nΩ\nΩ\nLT\nBT\n= I\nL\nB\n^\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\nW-1\nW\nWavelet transform\nmatrix\n◊◊◊◊\n''''\n÷÷÷÷\n««««\nΔΔΔΔ\n≈≈≈≈\nIn the Haar example, we have the special case\nWœ1 = WT c\nc\nc\nc orthogonal matrix\nSo we have an orthogonal filter bank, where\nSynthesis bank = Transpose of Analysis bank\nf0[n]\n=\nh0[- n]\nf1[n]\n=\nh1[- n]\nPerfect Reconstruction Filter Banks\nGeneral two-channel filter bank\nH0(z)\nH1(z)\neeee2\neeee2\nx[n]\ny0[n]\ny1[n]\naaaa2\naaaa2\nr0[n]\nr1[n]\nF0(z)\nF1(z)\nx[n]\n^\nv0[n]\nv1[n]\nt1[n]\nt0[n]\nz-transform definition:\nX(z) = ƒƒƒƒ x[n]z -n\nPut z = ei wwww to get DTFT\n§§§§\nNNNN\nn=-NNNN\n\nc\nc\nc\nwww\nwww\nc\nc\nc\nwww\nppp\nc\nc\nc\nwww\nppp\nppp\nwww\nwww\nwww\nwww\nwww\nPerfect reconstruction requirement:\nx[n] = x[n - ????]\n(???? time delays)\nX(z) = z - ???? X(z)\nH0(z) and H1(z) are normally lowpass and highpass,\nbut not ideal\n^\n^\nΩ Downsampling operation in each channel can\nproduce aliasing\n-pppp\n-pppp\npppp\npppp\nwwww\nH1(wwww)\nH0(wwww)\nH1(wwww)\nLet's see why:\nLowpass channel has\nY0(z) = 2{R0(z2) + R0(-z2)}\n(downsampling)\n= 2{H0(z2) X (z2) + H0(-z2)X(-z2)}\nIn frequency domain:\nX(z)\nc X(w)\nor X(eiw)\nX(-z) c X(w + p)\nw\nX(z2) c X(\n)\nw\nw\nw\nw\nY0(w) = 2{H0(\n) X(\n) + H0(\n+ p)X( 2 + p)}\n\n???\nSuppose X(wwww) = 1 (input has all frequencies)\nThen R0(wwww) = H0(wwww), so that after downsampling we have\nY0(wwww) =\npppp\n-pppp\npppp\nwwww\n2R0(\n+ )\n2R0( )\n2R0(\n+ )\nwwww\nwwww\nwwww\npppp\naliasing\nGoal is to design F0(z) and F1(z) so that the overall\nsystem is just a simple delay - with no aliasing term:\nV0(z) + V1(z) = z - ???? X(z)\nV0(z) = F0(z) T0(z)\n= F0(z) Y0(z2)\n(upsampling)\n= 2F0(z){ H0(z) X(z) + H0(-z) X(-z)}\nV1(z) = 2F1(z){ H1(z) X(z) + H1(-z) X(-z)}\nSo we want\n2 {F0(z) H0(z) + F1(z) H1(z) } X(z)\n+\n= z- ? X(z)\n2 {F0(z) H0(-z) + F1(z) H1(-z) } X(-z)\n\nwww\nwww\nppp\nƒƒƒ\nƒƒƒ\nCompare terms in X(z) and X(-z):\n1) Condition for no distortion (terms in X (z) amount\nto a delay)\nF0(z) H0(z) + F1(z) H1(z) = 2z - ????\n2) Condition for alias cancellation (no term in X(-z))\nF0(z) H0(-z) + F1(z) H1(-z) = 0\nTo satisfy alias cancellation condition, choose\nF0(z) = H1(-z)\nF1(z) = -H0(-z)\n--------------j\nj\nj\nj\n--------------k\nk\nk\nk\n----------------------l\nl\nl\nl\nWhat happens in the time domain?\nF0(z) = H1(-z)\nF0(w) = H1(w + p)\n= ƒ h1[n] (-z)-n\nn\n= ƒ (-1)n h1[n] z-n\nn\nSo the filter coefficients are\nf0[n] = (-1)n\nh1[n]\nalternating signs\nf1[n] = (-1)n+1 h0[n]\nrule\nExample\nh0[n] = {\n{ b0, b1, b2}\na0, a1, a2}\nf0[n] = { b0, -b1, b2 }\nh1[n] =\nf1[n] = {-a0, a1, -a2}\n\nj\nj\nj\n???\n???\nn\nn\nn\n???\n???\nn\nn\nn\n???\n???\n???\nProduct Filter\nDefine\nP0(z) = F0(z) H0(z) ------------------------------m\nm\nm\nm\nSubstitute F1(z) = -H0(-z) , H1(z) = F0(-z)\nin the zero distortion condition (Equation j)\nF0(z) H0(z) - F0(-z) H0(-z) = 2z- ?\ni.e.\nP0(z) - P0(-z) = 2z -????\n----------------------------n\nNote: ? must be odd since LHS is an odd function.\nNormalized Product Filter\nDefine\nP(z) = z???? P0(z)\n----------------------------o\no\no\no\nP(-z) = -z? P0(-z) since ? is odd\nSo we can rewrite Equation n as\nz- ? P(z) + z- ? P(-z) = 2z- ?\ni.e.\nP(z) + P(-z) = 2\n---------------------------p\np\np\np\nThis is the condition on the normalized product filter\nfor Perfect Reconstruction.\n\np\np\np\nl\nl\nl\np\np\np\nƒƒƒ\nƒƒƒ\nΩ\nΩ\nΩ\n&'(\n&'(\n&'(\nooo\nDesign Process\n1. Design P(z) to satisfy Equation p. This gives\nP0(z). Note: P(z) is designed to be lowpass.\n2. Factor P0(z) into F0(z) H0(z). Use Equations l to\nfind H1(z) and F1(z).\nNote: Equation p requires all even powers of z\n(except z0) to be zero:\nƒ p[n]z-n + ƒ p[n](-z)-n = 2\nn\nn\n;\nn = 0\nΩ p[n] =\n0 ;\nall even n (n o 0)\n&'(\nFor odd n, p[n] and œp[n] cancel.\nThe odd coefficients, p[n], are free to be designed\naccording to additional criteria.\nExample: Haar filter bank\nH0(z) =\n(1 + z -1)\nH1(z) =\n(1 œ z -1)\nF0(z) = H1(-z) =\n(1 + z -1)\nF1(z) = -H0(-z) =\n(1- z -1)\nP0(z) = F0(z) H0(z) =\n(1 + z -1)2\nμμμμ2\nμμμμ2\nμμμμ2\nμμμμ2\n\nSo the Perfect Reconstruction requirement is\nP0(z) œ P0(-z) =\n1 + 2z -1 + z -2) -\n1 œ2z -1 + z -2)\n= 2z -1\nΩ\nΩ\nΩ\nΩ\n???? = 1\nP(z) = z???? P0(z) =\n(1 + z)(1 + z -1)\n2nd order\nzero at\nz = -1\nlm\nRe\nz\nZeros of P(z):\n1 + z\n= 0\n1 + z -1 = 0"
    },
    {
      "category": "Resource",
      "title": "Slides3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/204a826459bc8236e14f4787e1575cc2_Slides3.pdf",
      "content": "Filter Banks: time domain\nFilter Banks: time domain\n((Haar\nHaar example) and frequency domain;\nexample) and frequency domain;\nconditions for alias cancellation\nconditions for alias cancellation\nand no distortion\nand no distortion\n\nSimplest (non\nSimplest (non--trivial) example of a two channel FIR\ntrivial) example of a two channel FIR\nperfect reconstruction filter bank.\nperfect reconstruction filter bank.\nhh00[n]\n[n]\nhh11[n]\n[n]\nflfl22\nflfl22\nx[n]\nx[n]\nyy00[n]\n[n]\nyy11[n]\n[n]\n››22\n››22\nAnalysis\nAnalysis\nrr00[n]\n[n]\nrr11[n]\n[n]\nff00[n]\n[n]\nff11[n]\n[n]\nx[n]\nx[n]\n^^\nSynthesis\nSynthesis\nvv00[n]\n[n]\nvv11[n]\n[n]\ntt11[n]\n[n]\ntt00[n]\n[n]\nhh00[n] =\n[n] =\nff00[n] =\n[n] =\nOO22\nOO22\nOO22\nOO22\n--11\n\nhh11[n] =\n[n] =\nff11[n] =\n[n] =\n--11\nOO22\nOO22\n--11\nOO22\nOO22\n--11\nAnalysis:\nAnalysis:\nrr00[n] =\n(x[n] + x[n\n[n] =\n(x[n] + x[n -- 1])\n1])\nlowpass\nlowpass filter\nfilter\nyy00[n] = r\n[n] = r00[2n]\n[2n]\ndownsampler\ndownsampler\nyy00[n] =\n[n] =\n(x[2n] + x[2n\n(x[2n] + x[2n -- 1])\n1])\n-----------------\n-----------------j\nj\nSimilarly\nSimilarly\nyy11[n] =\n(x[2n]\n[n] =\n(x[2n] -- x[2n\nx[2n -- 1])\n1])\n------------------\n------------------k\nk\nOO22\nOO22\nOO22\n\nMatrix form\nMatrix form\nMMMM\n==\nMM\nyy00[0]\n[0]\nyy00[1]\n[1]\n::\nM\n::\nyy11[0]\n[0]\nyy11[1]\n[1]\nOO22\nMM\nL\nL 1\n0 L\nL\nL\nL 0\n1 L\nL\nL\nL --1 1\n1 1\n0 L\nL\nL\nL 0 0\n0 0\n--1\n1 L\nL\nMM\n::\nx[\nx[--1]\n1]\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\n::\n::\n-------------------\n-------------------l\nl\nyyoo\nyy11\n==\nLL\nBB\nxx\n\nSynthesis\nSynthesis\nyy00[n/2]\nn even\n[n/2]\nn even\ntt00[n] =\n[n] =\nupsampler\nupsampler\nn odd\nn odd\nvv00[n] =\n[n] =\n( t\n( t00[n + 1] + t\n[n + 1] + t00[n])\n[n])\nlowpass\nlowpass filter\nfilter\nyy00[n/2]\nn even\n[n/2]\nn even\nyy00[\n]\nn odd\n[\n]\nn odd\nOO22\n=\nOO22\nOO22\nn + 1\nn + 1\n\nSimilarly\nSimilarly\nvv11[n] =\n[n] =\nOO22 yy11[n/2]\nn even\n[n/2]\nn even\nOO22\n--\nyy11[\n]\nn odd\n[\n]\nn odd\nn + 1\nn + 1\nOO22 (y\n(y00[n/2] + y\n[n/2] + y11[n/2])\nn even\n[n/2])\nn even\n^^\nSo, the reconstructed signal is\nSo, the reconstructed signal is\nx[n] = v\nx[n] = v00[n] + v\n[n] + v11[n]\n[n]\n==\nOO22 (y\n(y00[\n]\n[\n] -- yy11[\n])\nn odd\n[\n])\nn odd\nn + 1\nn + 1\nn + 1\nn + 1\n\ni.e.\ni.e.\nx[2n\nx[2n--1] =\n(y\n1] =\n(y00[n]\n[n] -- yy11[n]) = x[2n\n[n]) = x[2n--1]\n1]\nx[2n]\n=\n(y\nx[2n]\n=\n(y00[n] + y\n[n] + y11[n]) = x[2n]\n[n]) = x[2n]\nSo x[n]\n=\nx[n]\nSo x[n]\n=\nx[n]\nÞ\nÞ Perfect reconstruction!\nPerfect reconstruction!\nIn general, we will make all filters causal, so we will\nIn general, we will make all filters causal, so we will\nhave\nhave\nx[n] = x[n\nx[n] = x[n -- nn00]]\nÞ\nÞ PR with delay\nPR with delay\nOO22\n^^\nOO22\nfrom\nfrom j\nj and\nand k\nk\n^^\n^^\n^^\n\nMatrix form\nMatrix form\nMMMM\n==\nx[\nx[--1]\n1]\nx[0]\nx[0]\nx[1]\nx[1]\nx[2]\nx[2]\nMM\nOO22\n--1 0\n1 0\n1 1\n1 1\n0 1\n0 1\n0 --11\n0 1\n0 1\n--1 1\n1 1\n^^\n^^\n^^\n^^\nyy00[0]\n[0]\nyy00[1]\n[1]\nMM\nMM\nyy11[0]\n[0]\nyy11[1]\n[1]\nMM\nMM\nMM\nMM\nL\nL\nL\nL\nMM\nMM\nL\nL L\nL\nMM\nMM\nMM MM\nMM\n^^\nx\n=\nL\nx\n=\nLTT\nBBTT\nyy00\nyy11\n----------------\n----------------m\nm\n\nPerfect reconstruction means that the synthesis\nPerfect reconstruction means that the synthesis\nbank is the inverse of the analysis bank.\nbank is the inverse of the analysis bank.\nx = x\nx = x Þ\nÞ\nLLTT\nBBT\nT\n= I\n= I\nLL\nBB\n^^\n123 123\nW\nW--11\nW\nW\nWavelet transform\nWavelet transform\nmatrix\nmatrix\nłł\noo\n÷÷\nŁŁ\ncc\nææ\nIn the\nIn the Haar\nHaar example, we have the special case\nexample, we have the special case\nW\nW--11 = W\n= WTT fi\nfi orthogonal matrix\northogonal matrix\nSo we have an\nSo we have an orthogonal\northogonal filter bank, where\nfilter bank, where\nSynthesis bank = Transpose of Analysis bank\nSynthesis bank = Transpose of Analysis bank\nff00[n]\n=\nh\n[n]\n=\nh00[[-- n]\nn]\nff11[n]\n=\nh\n[n]\n=\nh11[[-- n]\nn]\n\nPerfect Reconstruction Filter Banks\nPerfect Reconstruction Filter Banks\nGeneral two\nGeneral two--channel filter bank\nchannel filter bank\nHH00(z)\n(z)\nHH11(z)\n(z)\nflfl22\nflfl22\nx[n]\nx[n]\nyy00[n]\n[n]\nyy11[n]\n[n]\n››22\n››22\nrr00[n]\n[n]\nrr11[n]\n[n]\nFF00(z)\n(z)\nFF11(z)\n(z)\nx[n]\nx[n]\n^^\nvv00[n]\n[n]\nvv11[n]\n[n]\ntt11[n]\n[n]\ntt00[n]\n[n]\nL\nL\nL\nL\nzz--transform definition:\ntransform definition:\nX(z) =\nX(z) = aa x[n]z\nx[n]z--nn\nPut z =\nPut z = eeii ww to get DTFT\nto get DTFT\n\n¥¥\nn=\nn=--¥¥\n\nPerfect reconstruction requirement:\nPerfect reconstruction requirement:\nx[n] = x[n\nx[n] = x[n -- ll]\n(\n]\n(ll time delays)\ntime delays)\nX(z) = z\nX(z) = z-- ll X(z)\nX(z)\nHH00(z) and H\n(z) and H11(z) are normally\n(z) are normally lowpass\nlowpass and\nand highpass\nhighpass,,\nbut not ideal\nbut not ideal\n^^\n^^\nÞ\nÞ Downsampling\nDownsampling operation in each channel can\noperation in each channel can\nproduce\nproduce aliasing\naliasing\n--pp\n--pp\npp\npp\nww\nHH11((ww))\nHH00((ww))\nHH11((ww))\n\nLet's see why:\nLet's see why:\nLowpass\nLowpass channel has\nchannel has\nYY00(z) =\n(z) = 1⁄2\n1⁄2{R\n{R00(z\n(z1⁄2\n1⁄2) + R\n) + R00((--zz1⁄2\n1⁄2)})}\n((downsampling\ndownsampling))\n== 1⁄2\n1⁄2{H\n{H00(z\n(z1⁄2\n1⁄2) X (z\n) X (z1⁄2\n1⁄2) + H\n) + H00((--zz1⁄2\n1⁄2)X(\n)X(--zz1⁄2\n1⁄2)})}\nIn frequency domain:\nIn frequency domain:\nX(z)\nX(z)\nfi\nfi X(\nX(ww)\nor X(\n)\nor X(eeiiww))\nX(\nX(--z)\nz) fi\nfi X(\nX(ww ++ pp))\nX(z\nX(z1⁄2\n1⁄2)) fi\nfi X(\n)\nX(\n)\nYY00((ww) =\n) = 1⁄2\n1⁄2{H\n{H00(\n) X(\n) + H\n(\n) X(\n) + H00(\n+\n(\n+ pp)X(\n)X(\n++ pp)})}\nww\nww\nww\nww\nww\n\nSuppose X(\nSuppose X(ww) = 1 (input has all frequencies)\n) = 1 (input has all frequencies)\nThen R\nThen R00((ww) = H\n) = H00((ww), so that after\n), so that after downsampling\ndownsampling we have\nwe have\nYY00((ww) =\n) =\npp\n--pp\npp\nww\n1⁄2\n1⁄2RR00(\n+ )\n(\n+ )\n1⁄2\n1⁄2\n1⁄2\n1⁄2RR00( )\n( )\n1⁄2\n1⁄2RR00(\n+ )\n(\n+ )\nww\nww\nww\npp\naliasing\naliasing\nGoal is to design F\nGoal is to design F00(z) and F\n(z) and F11(z) so that the overall\n(z) so that the overall\nsystem is just a simple delay\nsystem is just a simple delay -- with no\nwith no aliasing\naliasing term:\nterm:\nVV00(z) + V\n(z) + V11(z) = z\n(z) = z-- ll X(z)\nX(z)\n\nVV00(z) = F\n(z) = F00(z) T\n(z) T00(z)\n(z)\n= F\n= F00(z) Y\n(z) Y00(z\n(z22))\n((upsampling\nupsampling))\n== 1⁄2\n1⁄2FF00(z){ H\n(z){ H00(z) X(z) + H\n(z) X(z) + H00((--z) X(\nz) X(--z)}\nz)}\nVV11(z) =\n(z) = 1⁄2\n1⁄2FF11(z){ H\n(z){ H11(z) X(z) + H\n(z) X(z) + H11((--z) X(\nz) X(--z)}\nz)}\nSo we want\nSo we want\n1⁄2\n1⁄2 {F\n{F00(z) H\n(z) H00(z) + F\n(z) + F11(z) H\n(z) H11(z) } X(z)\n(z) } X(z)\n+\n=\n+\n= zz-- ll X(z)\nX(z)\n1⁄2\n1⁄2 {F\n{F00(z) H\n(z) H00((--z) + F\nz) + F11(z) H\n(z) H11((--z) } X(\nz) } X(--z)\nz)\n\nCompare terms in X(z) and X(\nCompare terms in X(z) and X(--z):\nz):\n1)\n1) Condition for no distortion (terms in X (z) amount\nCondition for no distortion (terms in X (z) amount\nto a delay)\nto a delay)\nFF00(z) H\n(z) H00(z) + F\n(z) + F11(z) H\n(z) H11(z) = 2z\n(z) = 2z-- ll\n2)\n2) Condition for alias cancellation (no term in X(\nCondition for alias cancellation (no term in X(--z))\nz))\nFF00(z) H\n(z) H00((--z) + F\nz) + F11(z) H\n(z) H11((--z) = 0\nz) = 0\nTo satisfy alias cancellation condition, choose\nTo satisfy alias cancellation condition, choose\nFF00(z) = H\n(z) = H11((--z)\nz)\nFF11(z) =\n(z) = --HH00((--z)\nz)\n--------------\n--------------j\nj\n--------------\n--------------k\nk\n----------------------\n----------------------l\nl\n\nWhat happens in the time domain?\nWhat happens in the time domain?\nFF00(z) = H\n(z) = H11((--z)\nF\nz)\nF00((ww) = H\n) = H11((ww ++ pp))\n== aa hh11[n] (\n[n] (--z)\nz)--nn\n== aa ((--1)\n1)n\nn hh11[n] z\n[n] z--nn\nSo the filter coefficients are\nSo the filter coefficients are\nff00[n] = (\n[n] = (--1)\n1)nn\nhh11[n]\nalternating signs\n[n]\nalternating signs\nff11[n] = (\n[n] = (--1)\n1)n+1\nn+1 hh00[n]\nrule\n[n]\nrule\nExample\nExample\nhh00[n] = { a\n[n] = { a00, a\n, a11, a\n, a22}\nf\n}\nf00[n] = { b\n[n] = { b00,, --bb11, b\n, b2\n2 }}\nhh11[n] = { b\n[n] = { b00, b\n, b11, b\n, b22}\nf\n}\nf11[n] = {\n[n] = {--aa00, a\n, a11,, --aa22}}\nnn\nnn\n\nProduct Filter\nProduct Filter\nDefine\nDefine\nPP00(z) = F\n(z) = F00(z) H\n(z) H00(z)\n(z)\nSubstitute F\nSubstitute F11(z) =\n(z) = --HH00((--z) , H\nz) , H11(z) = F\n(z) = F00((--z)\nz)\nin the zero distortion condition (Equation\nin the zero distortion condition (Equation j\nj))\nFF00(z) H\n(z) H00(z)\n(z) -- FF00((--z) H\nz) H00((--z) = 2z\nz) = 2z-- ll\ni.e.\nP\ni.e.\nP00(z)\n(z) -- PP00((--z) = 2z\nz) = 2z--ll\nNote:\nNote: ll must be odd since LHS is an odd function.\nmust be odd since LHS is an odd function.\n------------------------------\n------------------------------m\nm\n----------------------------\n----------------------------n\nn\n\nNormalized Product Filter\nNormalized Product Filter\nDefine\nDefine\nP(z) = z\nP(z) = zll PP00(z)\n(z)\n----------------------------\n----------------------------o\no\nP(\nP(--z) =\nz) = --zzll PP00((--z) since\nz) since ll is odd\nis odd\nSo we can rewrite Equation\nSo we can rewrite Equation n\nn as\nas\nzz-- ll P(z) + z\nP(z) + z-- ll P(\nP(--z) = 2z\nz) = 2z-- ll\ni.e.\nP(z) + P(\ni.e.\nP(z) + P(--z) = 2\nz) = 2\n---------------------------\n---------------------------p\np\nThis is the condition on the normalized product filter\nThis is the condition on the normalized product filter\nfor Perfect Reconstruction.\nfor Perfect Reconstruction.\n\nDesign Process\nDesign Process\n1.\n1. Design P(z) to satisfy Equation\nDesign P(z) to satisfy Equation p\np. This gives\n. This gives\nPP00(z). Note: P(z) is designed to be\n(z). Note: P(z) is designed to be lowpass\nlowpass..\n2.\n2. Factor P\nFactor P00(z) into F\n(z) into F00(z) H\n(z) H00(z). Use Equations\n(z). Use Equations l\nl to\nto\nfind H\nfind H11(z) and F\n(z) and F11(z).\n(z).\nNote: Equation\nNote: Equation p\np requires all even powers of z\nrequires all even powers of z\n(except z\n(except z00) to be zero:\n) to be zero:\naa p[n]z\np[n]z--nn ++ aa p[n](\np[n](--z)\nz)--nn = 2\n= 2\nÞ\nÞ p[n] =\np[n] =\nnn\nnn\n;\nn = 0\n;\nn = 0\n0 ;\nall even n (n\n0 ;\nall even n (n „„ 0)\n0)\n\nFor odd n, p[n] and\nFor odd n, p[n] and --p[n] cancel.\np[n] cancel.\nThe odd coefficients, p[n], are free to be designed\nThe odd coefficients, p[n], are free to be designed\naccording to additional criteria.\naccording to additional criteria.\nExample:\nExample: Haar\nHaar filter bank\nfilter bank\nHH00(z) =\n(z) =\n(1 + z\n(1 + z--11)\nH\n)\nH11(z) =\n(1\n(z) =\n(1 -- zz--11))\nFF00(z) = H\n(z) = H11((--z) =\nz) =\n(1 + z\n(1 + z--11))\nFF11(z) =\n(z) = --HH00((--z) =\n(1\nz) =\n(1-- zz--11))\nPP00(z) = F\n(z) = F00(z) H\n(z) H00(z) =\n(1 + z\n(z) =\n(1 + z--11))22\nOO22\nOO22\nOO22\n--11\nOO22\n\nSo the Perfect Reconstruction requirement is\nSo the Perfect Reconstruction requirement is\nPP00(z)\n(z) -- PP00((--z) =\nz) =\n(1 + 2z\n(1 + 2z--11 + z\n+ z--22)) --\n(1\n(1 --2z\n2z--11 + z\n+ z--22))\n= 2z\n= 2z--11\nÞ\nÞ\nll = 1\n= 1\nP(z) = z\nP(z) = zll PP00(z) =\n(1 + z)(1 + z\n(z) =\n(1 + z)(1 + z--11))\n22nd\nnd order\norder\nzero at\nzero at\nz =\nz = --11\nlm\nlm\nRRee\nzz\nZeros of P(z):\nZeros of P(z):\n1 + z\n= 0\n1 + z\n= 0\n1 + z\n1 + z--11 = 0\n= 0"
    },
    {
      "category": "Resource",
      "title": "Handout4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/e692831322c0254bc40dea8d454bb7e6_Handout4.pdf",
      "content": "Course 18.327 and 1.130\nWavelets and Filter Banks\nFilter Banks (contd.): perfect\nreconstruction; halfband filters and\npossible factorizations.\nProduct Filter\nExample: Product filter of degree 6\nP0(z) =\n(-1 + 9z\n-2 + 16z-3 + 9z-4 - z-6)\nP0(z) -\nP0(- z) = 2z-3\nΩ Expect perfect reconstruction with a 3 sample delay\nCentered form:\nP(z) = z3P0(z) =\n(- z3\n+ 9z + 16 + 9z-1 œ z-3)\nP(z) + P(- z) = 2\ni.e. even part of P(z) = const\nIn the frequency domain:\nP(wwww) + P(wwww + pppp) = 2\nHalfband Condition\n\npppp 2\npppp\nwwww\nP(wwww)\nNote antisymmetry\nabout wwww = pppp/2\nP(wwww) is said to be a halfband filter.\nHow do we factor P0(z) into H0(z) F0(z)?\nP0(z) = 1////16(1 + z -1)4(-1 + 4z -1 - z -2)\n= -1/16(1 + z -1)4(2 + μμμμ 3 œ z -1)(2 - μμμμ3 œ z -1)\nSo P0(z) has zeros at\nz = -1 (4th order)\nz = 2 eeee μμμμ3\nNote: 2 + μμμμ3 =\n2 -μμμμ3\n4th order\nzero at\nz = -1\n-1\nIm\nP0(z)\nRe\n2-μμμμ3\n2 + μμμμ3\n\n--\nSome possible factorizations\nH0(z)\n(or F0(z) )\nF0(z)\n(or H0(z) )\n(a)\n-1/16(1 + z -1)4(2 + μμμμ3 - z -1)(2 - μμμμ3 - z -1)\n(b)\n2(1 + z -1)\n-1/8(1 + z -1)3(2 + μμμμ3 - z -1)(2 - μμμμ3 - z -1)\n(c)\n3(1 + z -1)2\n-1/4(1 + z -1)2(2 + μμμμ3 - z -1)(2 - μμμμ3 - z -1)\n(d) 2(1 + z -1)(2 + μμμμ3 - z -1)\n-1/8(1 + z -1)3(2 - μμμμ3 - z -1)\n(e)\n1/8(1 + z -1)3\n-1/2(1 + z -1)(2 + μμμμ3 - z -1)(2 - μμμμ3 - z -1)\n(f)\n(1 + z -1)2(2 + μμμμ3 - z -1)\n(1 + z -1)2(2 - μμμμ3 - z -1)\n(g) 1/16(1 + z -1)4\n-(2 + μμμμ3 - z -1)(2 - μμμμ3 - z -1)\n(μμμμ3 œ 1)\n4 μμμμ2\n-μμμμ2\n4 (μμμμ3 œ 1)\nCase (b)\nSymmetric filters (linear phase)\n3rd\norder\n-1\n2-μμμμ3\n2 + μμμμ3\n-1\nfilter length = 2\nfilter length = 6\n2{ 1, 1 }\n-/8 {-1, 1, 8, 8, 1, -1}\n\n-1\nCase (c) -- Symmetric filters (linear phase)\n2nd\norder\n2nd\norder\n-1\n2-μμμμ3\n2 + μμμμ3\nfilter length = 3\nfilter length = 5\n3 { 1, 2, 1 }\n3 { -1, 2, 6, 2, -1}\nCase (f) -- Orthogonal filters\n(minimum phase/maximum phase)\n-1\n2nd\norder\n-1\n2 + μμμμ3\n2nd\norder\n2-μμμμ3\nfilter length = 4\nfilter length = 4\n4μμμμ\n*+,\n*+,\n*+,\n*+,\n\n*+,\n*+,\n*+,\n*+,\n\n1+μμμμ3, 3+μμμμ3, 3-μμμμ3, 1-μμμμ3\n*+,\n*+,\n*+,\n*+,\n\n1-μμμμ3, 3-μμμμ3, 3+μμμμ3, 1+μμμμ3\n*+,\n\n*+,\n\n*+,\n\n*+,\n\n4μμμμ2\nNote that, in this case, one filter is the flip (transpose)\nof the other:\nf0[n] = h0[3 - n]\nF0(z) = z -3 H0(z -1)\n\nƒƒƒ\nƒƒƒ\n&'(\n&'(\n&'( &))))))')))))))(\n&))))))')))))))(\n&))))))')))))))(\nppp\nGeneral form of product filter (to be derived later):\np - 1\nP(z) = 2( 1 + z )p( 1 + z-1)p ƒ ( p + k - 1)( 1 - z )k(1 œ z-1)k\nk\nk = 0\nP0(z) = z-(2p œ1) P(z)\n= (1 + z-1)2p\npƒ\n- 1 ( p + k - 1)(-1)k z -(p - 1) + k( 1 œ z-1 )\n2k\n2 2p-1k = 0\nk\n&'( &))))))')))))))(\nBinomial\nQ(z)\n(spline)\nCancels all odd powers\nfilter\nexcept zœ(2p-1)\nP0(z) has 2p zeros at p (important for stability of iterated\nfilter bank.)\nQ(z) factor is needed to ensure perfect reconstruction.\np = 1\nP0(z) has degree 2 c\nc\nc\nc leads to Haar filter bank.\n1 + z -1\n1 - z -1\neeee2\neeee2\n\"\n1, 1, 1, 1\n\"\n\"\n\"\n\"\n0, 0\n1 + z -1\neeee2\n\"\n\"\n1 - z -1\neeee2\n\"\n\"\n1, 1\nF0(z) = 1 + z -1 , H0(z) =\nSynthesis lowpass filter has 1 zero at pppp\nc Leads to cancellation of constant signals in analysis\nhighpass channel.\nAdditional zeros at pppp would lead to cancellation of\nhigher order polynomials.\n1 + z -1\n\np = 2\nP0(z) has degree 4p œ 2 = 6\nP0(z) = (1 + z -1)4\n{ ( ) z -1 œ ( )(\n)2}\n=\n(1 + z -1)4( - 1 + 4z -1 - z -2)\n=\n{- 1 + 9z -2 + 16z -3 + 9z -4 œ z -6}\n1 œ z -1\n4th order\n-1\n2-μμμμ3\n2 + μμμμ3\nPossible factorizations\n1/8 trivial\n2/6\n3/5\n4/4 orthogonal\n(Daubechies-4)\n*+,\n*+,\n*+,\n*+,\nlinear phase\np = 4\nP0(z) has degree 4p œ 2 = 14\n8th order\n-1\n\nCommon factorizations (p = 4):\n(a) 9/7\nKnown in Matlab\nas bior4.4\n4th\norder\n-1\n4th\norder\n-1\n(b) 8/8 (Daubechies 8) -- Known in Matlab as db4\n4th\norder\n-1\n4th\norder\n-1\n\nWhy choose a particular factorization?\nConsider the example with p = 2:\ni. One of the factors is halfband\nThe trivial 1/8 factorization is generally not desirable,\nsince each factor should have at least one zero at pppp.\nHowever, the fact that F0(z) is halfband is interesting\nin itself.\nV(z)\nX(z)\nY(z)\nLet F0(z) be centered, for convenience. Then\nF0(z) = 1 + odd powers of z\nNow\nX(z) = V(z2) = even powers of z only\naaaa2\nF0(z)\nSo\nY(z) = F0(z) X(z)\n= X(z) + odd powers\ny[n] =\nx[n]\n; n even\nƒƒƒƒ f0[k]x[n œ k] ; n odd\nΩ\nΩ\nΩ\nΩ f0[n] is an interpolating filter\n*+,\n*+,\n*+,\n*+,\nk odd\ny[n]\n4 n\nx[n]\n-\n-\n-\n-\n-\n-\n-\n-2\nn\nAnother example: f0[n] =\n(ideal bandlimited\ninterpolating filter)\nsin\nppppn\npppp\n2 n\n( )\n-\n-\n-\n-\n-\n-\n-\n-\n\nii. Linear phase factorization e.g. 2/6, 5/3\nSymmetric (or antisymmetric) filters are desirable for\nmany applications, such as image processing. All\nfrequencies in the signal are delayed by the same\namount i.e. there is no phase distortion.\nh[n] linear phase Ω\nΩ\nΩ\nΩ A(wwww)eœi(wwww aaaa + qqqq)\nreal\ndelays all\n0 if symmetric\nfrequencies\nby aaaa samples\nLinear phase may not necessarily be the best choice for\naudio applications due to preringing effects.\npppp\n2 if antisymmetric\niii. Orthogonal factorization\nThis leads to a minimum phase filter and a maximum\nphase filter, which may be a better choice for\napplications such as audio. The orthogonal\nfactorization leads to the Daubechies family of\nwavelets œ a particularly neat and interesting case.\n4/4 factorization:\nH0(z) =\n(1 + z -1)2[(2 + μμμμ3) œ z -1]\n=\n{(1 + μμμμ3) + (3 + μμμμ3)z -1 + (3 -μμμμ3)z -2 + (1- μμμμ3)z -3}\nF0(z) =\n(1 + z -1)2[(2 - μμμμ3) œ z -1]\n=\nz -3 (1 + z2)[(2 + μμμμ3) - z]\nμμμμ3 - 1\n4μμμμ2\n4μμμμ2\n- μμμμ2\n4(μμμμ3-1)\nμμμμ3-1\n4μμμμ2\n= z -3 H0 (z -1)\n\n???\nΩ\nΩ\nΩ\nP(z) = z?P0(z)\n= H0(z) H0(z-1)\nFrom alias cancellation condition:\nH1(z) = F0(-z) = -z-3 H0(-z-1)\nF1(z) = -H0(-z) = z-3 H1(z-1)\nSpecial Case: Orthogonal Filter Banks\nChoose H1(z) so that\nN odd\nTime domain\nh1[n] = (- 1)n h0[N œ n]\nF0(z) = H1 (- z) = z-N H0(zœ1)\nΩ\nf0[n] = h0[N œ n]\nF1(z) = - H0(- z) = z-N H1(z-1)\nΩf1[n] = h1[N œ n]\nSo the synthesis filters, fk[n], are just the time-reversed\nversions of the analysis filters, hk[n], with a delay.\nH1(z) = - z-N H0(- z-1)\n\nWhy is the Daubechies factorization orthogonal?\nConsider the centered form of the filter bank:\nno delay\nin centered\nform\nH0[z]\nH1[z]\neeee2\neeee2\nx[n]\ny0[n]\ny1[n]\naaaa2\naaaa2\nH0(z -1)\nx[n]\nH0(z -1)\n§\nAnalysis bank\ncausal œ only\nnegative powers\nof z\nSynthesis bank\nanticausal œ only\npositive powers\nof z\nIn matrix form:\nAnalysis\nSynthesis\nyo\ny1\n=\nL\nB\nx\nx\n= LT\nBT\ny0\ny1\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\nW\nWT\nSo\nx = WTW x for any x\nWTW = I = WWT\nAn important fact: symmetry prevents orthogonality\n\nMatlab Example 2\n1. Product filter examples\nDegree-2 (p=1): pole-zero plot\n\nDegree-2 (p=1): Freq. response\nDegree-6 (p=2): pole-zero plot\n\nDegree-6 (p=2): Freq. response\nDegree-10 (p=3): pole-zero plot\n\nDegree-10 (p=3): Freq. response\nDegree-14 (p=4): pole-zero plot\n\nDegree-14 (p=4): Freq. response"
    },
    {
      "category": "Resource",
      "title": "Slides4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/efcb0bfba4a0e1859eb5b32e3913d1cc_Slides4.pdf",
      "content": "Course 18.327 and 1.130\nCourse 18.327 and 1.130\nWavelets and Filter Banks\nWavelets and Filter Banks\nFilter Banks (contd.): perfect\nFilter Banks (contd.): perfect\nreconstruction;\nreconstruction; halfband\nhalfband filters and\nfilters and\npossible factorizations.\npossible factorizations.\n\nProduct Filter\nProduct Filter\nExample: Product filter of degree 6\nExample: Product filter of degree 6\nPP00(z) = (\n(z) = (--1 + 9z\n1 + 9z--2\n2 + 16z\n+ 16z--33 + 9z\n+ 9z--44 -- zz--66))\nPP00(z)\n(z) --\nPP00((-- z) = 2z\nz) = 2z--33\n⇒\n⇒Expect perfect reconstruction with a 3 sample delay\nExpect perfect reconstruction with a 3 sample delay\nCentered form:\nCentered form:\nP(z) = z\nP(z) = z33PP00(z) = (\n(z) = (-- zz33 + 9z + 16 + 9z\n+ 9z + 16 + 9z--11 -- zz--33))\nP(z) + P(\nP(z) + P(-- z) = 2 i.e. even part of P(z) = const\nz) = 2 i.e. even part of P(z) = const\nIn the frequency domain:\nIn the frequency domain:\nP(\nP(ωω) + P(\n) + P(ωω +\n+ ππ) = 2\n) = 2 Halfband\nHalfband Condition\nCondition\n\nππ 22\nππ\nωω\nP(\nP(ωω))\nNote\nNote antisymmetry\nantisymmetry\nabout\nabout ωω =\n= ππ/2\n/2\nP(\nP(ωω) is said to be a\n) is said to be a halfband\nhalfband filter.\nfilter.\nHow do we factor P\nHow do we factor P00(z) into H\n(z) into H00(z) F\n(z) F00(z)?\n(z)?\nPP00(z) = 1\n(z) = 1//16(1 + z\n16(1 + z--11))44((--1 + 4z\n1 + 4z--1\n1 -- zz--22))\n=\n= --11/16(1 + z\n/16(1 + z--11))44(2 +\n(2 + √√3\n3 -- zz--11)(2\n)(2 -- √√3\n3 -- zz--11) )\n\nSo P\nSo P00(z) has zeros at\n(z) has zeros at\nz =\nz = --1 (4\n1 (4th\nth order)\norder)\nz = 2\nz = 2 ±± √√3 Note: 2 +\n3 Note: 2 + √√3 =\n3 =\n2 --√√33\n44th\nth order\norder\nzero at\nzero at\nz =\nz = --11\n--11\nIm\nIm\nPP00(z)\n(z)\nRe\nRe\n22--√√33\n2 +\n2 + √√33\n\nSome possible factorizations\nSome possible factorizations\nHH00(z) (or F\n(z) (or F00(z) ) F\n(z) ) F00(z) (or H\n(z) (or H00(z) )\n(z) )\n(a)\n(a)\n1 --1/16(1 + z\n1/16(1 + z--11))44(2 +\n(2 + √√3\n3 -- zz--11)(2\n)(2 -- √√3\n3 -- zz--11))\n(b)\n(b)\n1⁄2\n1⁄2(1 + z\n(1 + z--11)\n) --1/8(1 + z\n1/8(1 + z--11))33(2 +\n(2 + √√3\n3 -- zz--11)(2\n)(2 -- √√3\n3 -- zz--11))\n(c)\n(c)\n1⁄4\n1⁄4(1 + z\n(1 + z--11))2\n2 --1/4(1 + z\n1/4(1 + z--11))22(2 +\n(2 + √√3\n3 -- zz--11)(2\n)(2 -- √√3\n3 -- zz--11))\n(d)\n(d)\n1⁄2\n1⁄2(1 + z\n(1 + z--11)(2 +\n)(2 + √√3\n3 -- zz--11))\n--1/8(1 + z\n1/8(1 + z--11))33(2\n(2 -- √√3\n3 -- zz--11))\n(e)\n(e)\n1/8(1 + z\n1/8(1 + z--11))3\n3 --1/2(1 + z\n1/2(1 + z--11)(2 +\n)(2 + √√3\n3 -- zz--11)(2\n)(2 -- √√3\n3 -- zz--11))\n(f)\n(f)\n(1 + z\n(1 + z--11))22(2 +\n(2 + √√3\n3 -- zz--11) )\n(1 + z\n(1 + z--11))22(2\n(2 -- √√3\n3 -- zz--11))\n(g)\n(g)\n1/16(1 + z\n1/16(1 + z--11))4\n4 --(2 +\n(2 + √√3\n3 -- zz--11)(2\n)(2 -- √√3\n3 -- zz--11))\n((√√3\n3 -- 1)\n1)\n4 √√22\n--√√22\n4 (\n4 (√√3\n3 -- 1)\n1)\n\nCase (b)\nCase (b) ---- Symmetric filters (linear phase)\nSymmetric filters (linear phase)\n3rd\n3rd\norder\norder\n--11\n22--√√33\n2 +\n2 + √√33\n--11\nfilter length = 2 filter length =\nfilter length = 2 filter length = 66\n1⁄2\n1⁄2{ 1, 1 }\n{ 1, 1 } 11//8\n8 {{--1, 1, 8, 8, 1,\n1, 1, 8, 8, 1, --1}\n1}\n\n--11\nCase (c)\nCase (c) ---- Symmetric filters (linear phase)\nSymmetric filters (linear phase)\n22nd\nnd\norder\norder\n22nd\nnd\norder\norder\n--11\n22--√√33\n2 +\n2 + √√33\nfilter length = 3 filter length = 5\nfilter length = 3 filter length = 5\n1⁄4\n1⁄4 { 1, 2, 1 }\n{ 1, 2, 1 } 1⁄4\n1⁄4 { { --1, 2, 6, 2,\n1, 2, 6, 2, --1}\n1}\n\nCase (f)\nCase (f) ---- Orthogonal filters\nOrthogonal filters\n(minimum phase/maximum phase)\n(minimum phase/maximum phase)\n--11\n22nd\nnd\norder\norder\n--11\n2 +\n2 + √√33\n22nd\nnd\norder\norder\n22--√√33\nfilter length = 4 filter le\nfilter length = 4 filter length = 4\nngth = 4\n44√√\n1+\n1+√√3, 3+\n3, 3+√√3, 3\n3, 3--√√3, 1\n3, 1--√√33\n11--√√3, 3\n3, 3--√√3, 3+\n3, 3+√√3, 1+\n3, 1+√√33\n44√√22\nNote that, in this case, one filter is the flip (transpose)\nNote that, in this case, one filter is the flip (transpose)\nof the other: f\nof the other: f00[n] = h\n[n] = h00[3\n[3 -- n]\nn]\nFF00(z) = z\n(z) = z--33 HH00(z\n(z--11))\n\nGeneral form of product filter (to be derived later):\nGeneral form of product filter (to be derived later):\nP(z) = 2( )\nP(z) = 2( )pp( )\n( )p\np ∑∑( )( )\n( )( )kk( )\n( )kk\nPP00(z) = z\n(z) = z--(2p\n(2p --1)\n1) P(z)\nP(z)\n= (1 + z\n= (1 + z--11))2p\n2p ∑∑\n( )(\n( )(--1)\n1)k\nk z\nz --(p\n(p -- 1) + k\n1) + k( )\n( )\n1 + z\n1 + z\n1 + z\n1 + z\n--11\np\np -- 11\nk = 0\nk = 0\np + k\np + k -- 11\nkk\n1 -- zz\n1 -- zz--11\n2 2p\n2p--11\np\np -- 11\nk = 0\nk = 0\np + k\np + k -- 11\nkk\n1 -- zz--1 2k\n1 2k\n123 1444444244444443\nBinomial\nBinomial\n((spline\nspline))\nfilter\nfilter\nQ(z)\nQ(z)\nCancels all odd powers\nCancels all odd powers\nexcept z\nexcept z--(2p\n(2p--1)\n1)\nPP00(z) has 2p zeros at\n(z) has 2p zeros at ππ (important for stability of iterated\n(important for stability of iterated\nfilter bank.)\nfilter bank.)\nQ(z) factor is needed to ensure perfect reconstruction.\nQ(z) factor is needed to ensure perfect reconstruction.\n\np = 1\np = 1\nPP00(z) has degree 2\n(z) has degree 2 →\n→leads to\nleads to Haar\nHaar filter bank.\nfilter bank.\n1 + z\n1 + z--11\n1 -- zz--11\n↓↓22\n↓↓22\nO\n1, 1, 1, 1\n1, 1, 1, 1\nO\nO\nO\nO\n0, 0\n0, 0\n1 + z\n1 + z--11\n↓↓22\nO\nO\n1 -- zz--11\n↓↓22\nO\nO\n1, 1\n1, 1\nFF00(z) = 1 + z\n(z) = 1 + z--11 , H\n, H00(z) =\n(z) =\nSynthesis\nSynthesis lowpass\nlowpass filter has 1 zero at\nfilter has 1 zero at ππ\n→\n→Leads to cancellation of constant signals in analysis\nLeads to cancellation of constant signals in analysis\nhighpass\nhighpass channel.\nchannel.\nAdditional zeros at\nAdditional zeros at ππ would lead to cancellation of\nwould lead to cancellation of\nhigher order polynomials.\nhigher order polynomials.\n1 + z\n1 + z--11\n\np = 2\np = 2\nPP00(z) has degree 4p\n(z) has degree 4p -- 2 = 6\n2 = 6\nPP00(z) = (1 + z\n(z) = (1 + z--11))4\n4 { ( ) z\n{ ( ) z--1\n1 -- ( )( )\n( )( )22}}\n= (1 + z\n= (1 + z--11))44( ( -- 1 + 4z\n1 + 4z--11 -- zz--22))\n= {\n= {-- 1 + 9z\n1 + 9z--22 + 16z\n+ 16z--33 + 9z\n+ 9z--44 -- zz--66}\n}\n1 -- zz--11\n44th\nth order\norder\n--11\n22--√√33\n2 +\n2 + √√33\nPossible factorizations\nPossible factorizations\n1/8 trivial\n1/8 trivial\n2/6\n2/6\n3/5\n3/5\n4/4 orthogonal\n4/4 orthogonal\n((Daubechies\nDaubechies--4)\n4)\nlinear phase\nlinear phase\n\np = 4\np = 4\nPP00(z) has degree 4p\n(z) has degree 4p -- 2 = 14\n2 = 14\n88th\nth order\norder\n--11\n\nCommon factorizations (p = 4):\nCommon factorizations (p = 4):\n(a) 9/7 Kn\n(a) 9/7 Known in\nown in Matlab\nMatlab\nas bior4.4\nas bior4.4\n44th\nth\norder\norder\n--11\n44th\nth\norder\norder\n--11\n\n(b) 8/8 (\n(b) 8/8 (Daubechies\nDaubechies 8)\n8) ---- Known in\nKnown in Matlab\nMatlab as db4\nas db4\n44th\nth\norder\norder\n--11\n44th\nth\norder\norder\n--11\n\nWhy choose a particular factorization?\nWhy choose a particular factorization?\nConsider the example with p = 2:\nConsider the example with p = 2:\ni.i.\nOne of the factors is\nOne of the factors is halfband\nhalfband\nThe trivial 1/8 factorization is generally not desirable,\nThe trivial 1/8 factorization is generally not desirable,\nsince each factor should have at least one zero at\nsince each factor should have at least one zero at ππ..\nHowever, the fact that F\nHowever, the fact that F00(z) is\n(z) is halfband\nhalfband is interesting\nis interesting\nin itself.\nin itself.\nV(z) X(z)\nV(z) X(z)\nY(z)\nY(z)\nLet F\nLet F00(z) be centered, for convenience. Then\n(z) be centered, for convenience. Then\nFF00(z) = 1 + odd powers of z\n(z) = 1 + odd powers of z\nNow\nNow\nX(z) = V(z\nX(z) = V(z22) = even powers of z only\n) = even powers of z only\n↑↑22\nFF00(z)\n(z)\n\nSo\nSo\nY(z) = F\nY(z) = F00(z) X(z)\n(z) X(z)\n= X(z) + odd powers\n= X(z) + odd powers\ny[n] = x[n]\ny[n] = x[n]\n; n even\n; n even\n∑∑ff00[k]x[n\n[k]x[n -- k] ;\nk] ; n odd\nn odd\n⇒\n⇒ff00[n] is an interpolating filter\n[n] is an interpolating filter\nk odd\nk odd\ny[n]\ny[n]\n--22\n0 2 4\n0 2 4\nnn\n-\nx[n]\nx[n]\n0 2 4\n0 2 4\n-\n-\n-\n- -\n-\n-\n-\n--\n--22\nnn\nAnother example: f\nAnother example: f00[n] =\n[n] =\n(ideal\n(ideal bandlimited\nbandlimited\ninterpolating filter)\ninterpolating filter)\nsin\nsin\nππnn\nππ\n22 nn\n((\n))\n-\n-\n-\n- -\n-\n-\n-\n-- -\n-\n-\n-\n\nii.\nii. Linear phase factorization e.g. 2/6, 5/3\nLinear phase factorization e.g. 2/6, 5/3\nSymmetric (or\nSymmetric (or antisymmetric\nantisymmetric) filters are desirable for\n) filters are desirable for\nmany applications, such as image processing. All\nmany applications, such as image processing. All\nfrequencies in the signal are delayed by the same\nfrequencies in the signal are delayed by the same\namount i.e. there is no phase distortion.\namount i.e. there is no phase distortion.\nh[n] linear phase\nh[n] linear phase ⇒\n⇒A(\nA(ωω)e\n)e--i(i(ωω αα +\n+ θθ))\nreal delays all 0 if symmetric\nreal delays all 0 if symmetric\nfrequencies\nfrequencies\nby\nby αα samples\nsamples\nLinear phase may not necessarily be the best choice for\nLinear phase may not necessarily be the best choice for\naudio applications due to\naudio applications due to preringing\npreringing effects.\neffects.\nππ\nif\nif antisymmetric\nantisymmetric\n\niii.\niii. Orthogonal factorization\nOrthogonal factorization\nThis leads to a minimum phase filter and a maximum\nThis leads to a minimum phase filter and a maximum\nphase filter, which may be a better choice for\nphase filter, which may be a better choice for\napplications such as audio. The orthogonal\napplications such as audio. The orthogonal\nfactorization leads to the\nfactorization leads to the Daubechies\nDaubechies family of\nfamily of\nwavelets\nwavelets -- a particularly neat and interesting case.\na particularly neat and interesting case.\n4/4 factorization:\n4/4 factorization:\nHH00(z) = (1 + z\n(z) = (1 + z--11))22[(2 +\n[(2 + √√3)\n3) -- zz--11]]\n= {(1 +\n= {(1 + √√3) + (3 +\n3) + (3 + √√3)z\n3)z--11 + (3\n+ (3 --√√3)z\n3)z--22 + (1\n+ (1-- √√3)z\n3)z--33}}\nFF00(z) = (1 + z\n(z) = (1 + z--11))22[(2\n[(2 -- √√3)\n3) -- zz--11]]\n= z\n= z--33 (1 + z\n(1 + z22)[(2 +\n)[(2 + √√3)\n3) -- z]\nz]\n√√3\n3 -- 11\n44√√22\n44√√22\n-- √√22\n4(\n4(√√33--1)\n1)\n√√33--11\n44√√22\n= z\n= z--33 HH00 (z\n(z--11))\n\nP(z) = z\nP(z) = zllPP00(z)\n(z)\n= H\n= H00(z) H\n(z) H00(z\n(z--11))\nFrom alias cancellation condition:\nFrom alias cancellation condition:\nHH11(z) = F\n(z) = F00((--z) =\nz) = --zz--33 HH00((--zz--11))\nFF11(z) =\n(z) = --HH00((--z) = z\nz) = z--33 HH11(z\n(z--11)\n)\n\nSpecial Case: Orthogonal Filter Banks\nSpecial Case: Orthogonal Filter Banks\nChoose H\nChoose H11(z) so that\n(z) so that\nHH11(z) =\n(z) = -- zz--NN HH00((-- zz--11) N odd\n) N odd\nTime domain\nTime domain\nhh11[n] = (\n[n] = (-- 1)\n1)nn hh00[N\n[N -- n]\nn]\nFF00(z) = H\n(z) = H11 ((-- z) = z\nz) = z--NN HH00(z\n(z--11))\n⇒\n⇒\nff00[n] = h\n[n] = h00[N\n[N -- n]\nn]\nFF11(z) =\n(z) = -- HH00((-- z) = z\nz) = z--NN HH11(z\n(z--11))\n⇒\n⇒ff11[n] = h\n[n] = h11[N\n[N -- n]\nn]\nSo the synthesis filters,\nSo the synthesis filters, ffkk[n], are just the time\n[n], are just the time--reversed\nreversed\nversions of the analysis filters,\nversions of the analysis filters, hhkk[n], with a delay.\n[n], with a delay.\n\nWhy is the\nWhy is the Daubechies\nDaubechies factorization orthogonal?\nfactorization orthogonal?\nConsider the centered form of the filter bank:\nConsider the centered form of the filter bank:\nno delay\nno delay\nin centered\nin centered\nform\nform\nHH00[z]\n[z]\nHH11[z]\n[z]\n↓↓22\n↓↓22\nx[n]\nx[n]\nyy00[n]\n[n]\nyy11[n]\n[n]\n↑↑22\n↑↑22\nHH00(z\n(z--11))\nx[n]\nx[n]\nHH00(z\n(z--11))\n⊕\nAnalysis bank\nAnalysis bank\ncausal\ncausal -- only\nonly\nnegative powers\nnegative powers\nof z\nof z\nSynthesis bank\nSynthesis bank\nanticausal\nanticausal -- only\nonly\npositive powers\npositive powers\nof z\nof z\n\nIn matrix form:\nIn matrix form:\nAnalysis Synthesis\nAnalysis Synthesis\nyyoo\nyy11\n==\nLL\nBB\nxx\nx = L\nx = LTT\nBBTT\nyy00\nyy11\nW W\nW W TT\nSo\nSo\nx = W\nx = WTTW x for any x\nW x for any x\nW\nWTTW = I = WW\nW = I = WWTT\nAn important fact: symmetry prevents\nAn important fact: symmetry prevents orthogonality\northogonality\n\nMatlab\nMatlab Example 2\nExample 2\n1.\n1. Product filter examples\nProduct filter examples\n\nDegree\nDegree--2 (p=1): pole\n2 (p=1): pole--zero plot\nzero plot\n\nDegree\nDegree--2 (p=1): Freq. response\n2 (p=1): Freq. response\n\nDegree\nDegree--6 (p=2): pole\n6 (p=2): pole--zero plot\nzero plot\n\nDegree\nDegree--6 (p=2): Freq. response\n6 (p=2): Freq. response\n\nDegree\nDegree--10 (p=3): pole\n10 (p=3): pole--zero plot\nzero plot\n\nDegree\nDegree--10 (p=3): Freq. response\n10 (p=3): Freq. response\n\nDegree\nDegree--14 (p=4): pole\n14 (p=4): pole--zero plot\nzero plot\n\nDegree\nDegree--14 (p=4): Freq. response\n14 (p=4): Freq. response"
    },
    {
      "category": "Resource",
      "title": "Handout5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/48b610fc0f1cc941fb7d1677d48b7a1f_Handout5.pdf",
      "content": "Course 18.327 and 1.130\nWavelets and Filter Banks\nModulation and Polyphase\nRepresentations:\nNoble Identities;\nBlock Toeplitz Matrices\nand Block z-transforms;\nPolyphase Examples\nModulation Matrix\nMatrix form of PR conditions:\n[F0 (z) F1 (z)]\nH0(z) H0(-z)\n= [ 2z œ???? 0 ]\nH1(z) H1(-z)\nSo\n[ F0(z) F1(z)] = [2z œ???? 0] H\nœ1(z)\nH m\nœ1(z) =\n&'(\n&'(\n&'(\n&'(\nModulation matrix, H m(z)\nH0(z) H1(-z) - H0 (-z) H1 (z) (must be non-zero)\nH1(-z) -H0(-z)\n-H1(z)\nH0(z)\n\nΩ\nΩ\nΩ\n???\n???\n*+,\n*+,\n*+,\n???\n*+,\n*+,\n*+,\nΩ F0(z) =\n2z-? H1(-z)\nRequire these\nF1(z) =\n2z -? H0(-z)\nto be FIR\nSuppose we choose\n= 2z - ?\nThen\nF0(z) = H1(-z)\nF1(z) = -H0(-z)\n*+,\n*+,\nSynthesis modulation matrix:\nComplete the second row of matrix PR conditions\nby replacing z with œz:\nF0(z) F1(z)\nH0(z)\nH0(-z)\nz -????\nF0(-z) F1(-z)\nH1(z)\nH1(-z)\n(-z) - ????\nSynthesis\nmodulation\nmatrix, F m(z)\n&'(\n&'(\n&'(\n&'(\nNote the transpose convention in F m(z).\n= 2\n\nNoble Identities\n1. Consider\nU(z) = H(z2)X(z)\nY(z) = 2 {U(z 2 ) + U(-z 2 )}\n(downsampling)\n= 2 { H (z) X (z 2 ) + H(z) X (-z 2 )}\n= H(z) - 2 {X (z 2) + X (-z 2 )} Ω\nΩ\nΩ\nΩ can downsample\nfirst\nFirst Noble identity:\nx [n]\nx [n]\nH(z2)\neeee 2\ny[n]\nu[n]\neeee 2\nH(z)\ny[n] oooo\ny[n]\nx[n] H(z2)\neeee 2\n2. Consider\nx[n]\nu[n]\ny[n]\nU(z) = H(z) X(z)\nY(z) = U(z2)\n(upsampling)\n= H(z2) X(z2)\nΩ\nΩ\nΩ\nΩ can upsample first\nSecond Noble Identity:\nx[n]\ny[n]\nx[n]\ny[n]\nH(z)\naaaa2\noooo\naaaa2\nH(z)\naaaa2\nH(z2)\n\nDerivation of Polyphase Form\n1. Filtering and downsampling:\nx[n]\ny[n]\neeee2\nH(z)\nH(z) = H even(z2) + z -1 H odd(z2); h even[n] = h[2n]\nh odd[n] = h[2n+1]\nx[n]\n\nH even(z2)\nH odd(z2)\neeee2\ny[n]\nz -1\nx[n]\nz -1\nH even(z2)\nH odd(z2)\neeee2\neeee2\ny[n]\n+\nz -1\nH even(z)\nH odd(z)\neeee2\neeee2\ny[n]\n+\nx[n]\nPolyphase\nForm\nx even[n]\nx odd[n-1]\n\n2. Upsampling and filtering\nx[n]\ny[n]\nF(z) = F even(z2) + z -1 F odd (z2)\nF(z)\naaaa2\nx[n]\n+\nF even(z2)\nF odd(z2)\naaaa2\ny[n]\nz -1\nF even(z2)\nF odd(z2)\naaaa2\naaaa2\ny[n]\n+\nx[n]\nF even(z)\nF odd(z)\naaaa2\naaaa2\ny[n]\n+\nx[n]\nyeven[n]\nyodd[n]\nz -1\nPolyphase\nForm\nz -1\n\nPolyphase Matrix\nConsider the matrix corresponding to the analysis\nfilter bank in interleaved form. This is a block\nToeplitz matrix:\nHb =\nh0[3] h0[2]\nh1[3] h1[2]\nh0[1] h0[0]\nh1[1] h1[0]\nh0[3] h0[2]\nh0[1] h0[0]\nh1[3] h1[2]\nh1[1] h1[0]\n4-tap Example\nTaking block z-transform we get:\nH p(z) =\nh0[0] h0[1]\nh1[0] h1[1]\n+ z -1 h0[2] h0[3]\nh1[2] h1[3]\n=\nh1[0] + z -1 h1[2]\nh1[1] + z -1 h1[3]\nh0[0] + z -1 h0[2]\nh0[1] + z -1 h0[3]\n=\nH0,even (z)\nH0,odd (z)\nH1,even (z)\nH1,odd (z)\nThis is the polyphase matrix for a 2-channel filter bank.\n\nSimilarly, for the synthesis filter bank:\nFb =\nf0[0] f1[0]\nf0[1] f1[1]\nf0[2] f1[2]\nf0[3] f1[3]\nf0[0] f1[0]\nf0[1] f1[1]\nf0[2] f1[2]\nf0[3] f1[3]\nNote transpose\nconvention for\nsynthesis\npolyphase matrix\nf0[0] f1[0]\nf0[1] f1[1]\nf0[2] f1[2]\nf0[3] f1[3]\n+ z -1\nF p(z) =\n=\nF0,even [z] F1,even [z]\nF0, odd [z] F1, odd [z]\n- Perfect reconstruction condition in polyphase domain:\nF p(z) H p(z) = I (centered form)\nThis means that H p(z) must be invertible for all z on the\nunit circle, i.e.\ndet H p(eiwwww) oooo 0 for all frequencies wwww.\n\n???\n- Given that the analysis filters are FIR, the\nrequirement for the synthesis filters to be also\nFIR is:\ndet Hp(z) = z-? (simple delay)\nbecause Hp\n-1(z) must be a polynomial.\n- Condition for orthogonality: Fp(z) is the transpose\nof Hp(z), i.e.\nHp\nT(z-1) Hp(z) = I\ni.e. Hp(z) should be paraunitary.\nRelationship between Modulation\nand Polyphase Matrices\nh0,even[n] = h0[2n]\nH0(z) = H0,even(z2) + z -1 H0,odd(z2) ;\nh0,odd[n] = h0[2n+1]\nH1(z) = H1,even(z2) + z -1 H1,odd(z2)\nTwo more equations by replacing z with -z.\nSo in matrix form:\nH0(z) H0(-z)\nH0,even(z2) H0,odd(z2)\nH1(z) H1(-z)\nH1,even(z2) H1,odd(z2)\nz -1 -z -1\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\nH m(z)\nModulation matrix\nH p(z2)\nPolyphase matrix\n=\n&)')(\n&)')(\n&)')(\n&)')(\n\nBut\nz -1 -z -1\nz -1\n1 -1\n=\n&'(\n&'(\n&'(\n&'( &'(\n&'(\n&'(\n&'(\nF2\nDelay Matrix 2-point DFT Matrix\nD2(z)\nFN =\n1 ... 1\nw w2 ... w N-1\nw2 w4 ... w 2(N-1\n.\n.\n.\n.\n.\n.\n.\n.\n.\nwN-1 w2(N-1) w(N-1)2\n; w = e\nN-point DFT\nMatrix\nN\nFN =\n1 FN\nComplex conjugate: replace w with w = e -\nN\n-1\n2pppp\nN\n2pppp\nSo, in general\nH m(z) F-1\n=\nH p(zN) DN(z)\nN\nN = # of channels in filterbank\n(N = 2 in our example)\n\nPolyphase Matrix\nExample: Daubechies 4-tap filter\n1+μμμμ3\n3 + μμμμ3\n3 -μμμμ3\n1- μμμμ3\n4 μμμμ2\n4μμμμ2\n4μμμμ2\n4μμμμ2\n{(1 + μμμμ3 ) + (3 + μμμμ3 ) z -1 + (3 - μμμμ 3) z -2 + (1 - μμμμ3) z -3}\nh0[0] =\nH0(z) =\nH1(z) =\n4μμμμ2\n{(1 - μμμμ3) œ (3 - μμμμ3) z -1 + (3 + μμμμ3)z -2 œ (1 + μμμμ3)z -3}\n4μμμμ2\nh0[1] =\nh0[2] =\nh0[3] =\nTime domain:\nh0[0]2 + h0[1]2 + h0[2]2 + h0[3]2 = 1 {(4 + 2μμμμ3) + (12 + 6 μμμμ3) +\n(12 œ 6 μμμμ3) + (4 œ 2 μμμμ3)}\n= 1\nh0[0] h0[2] + h0[1] h0[3] =\n1 {(2μμμμ3) + (-2μμμμ3)}\n= 0\ni.e. filter is orthogonal to its double shifts\n\nPolyphase Domain:\n{(1 + μμμμ3) + (3 - μ\nμ μμ3) z -1}\n{(3 + μμμμ3) + (1 - μμμμ3) z -1}\n{(1 - μμμμ3) + (3 + μμμμ3) z -1}\n{ - (3 - μμμμ3) œ (1 + μμμμ3) z -1}\n4 μ\nμ μ\nμ2\n4 μ\nμ μ\nμ2\n4 μ\nμ μ\nμ2\n4 μ\nμ μ\nμ2\n=\n=\n=\n=\nH0,even(z)\nH0,odd(z)\nH1,even(z)\nH1,odd(z)\n1 + μμμμ3\n3 + μμμμ3\n3 - μμμμ3\n1 - μμμμ3\n1 - μμμμ3\n-(3 - μμμμ3)\n3 + μμμμ3\n-(1 + μμμμ3\nH p(z) = 1\n4μμμμ2\n4μμμμ2\n+\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\n&'(\nB\nA\nz -1\nH p(z) = A + B z -1\nH p\nT(z -1) H p(z) = (AT + BT z)(A + Bz -1)\n= (ATA + BTB) + ATBz -1 + BTAz\nATA =\n4μμμμ2\n1 + μμμμ3\n3 + μμμμ3\n1 - μμμμ3\n- (3 - μμμμ3)\n4μμμμ2\n1 + μμμμ3\n3 + μμμμ3\n1 - μμμμ3\n-(3-μμμμ3)\n(4 + 2μμμμ3) + (4 - 2μμμμ3) (6 + 4μμμμ3) - (6 - 4μμμμ3)\n(6 + 4μμμμ3) - (6 - 4μμμμ3) (12 + 6μμμμ3) + (12 - 6μμμμ3)\n= 1\n3 μμμμ3/4\nμμμμ3/4 1⁄2\n=\n\nBTB = 1\n4 μμμμ2\n3 - μμμμ3\n3 + μμμμ3\n1 - μμμμ3 -(1 + μμμμ3)\n4 μμμμ2\n3 - μμμμ3\n1 - μμμμ3\n3 + μμμμ3 - (1 + μμμμ3)\n= 1\n(12 œ 6μμμμ3) + (12 + 6μμμμ3) (6 - 4μμμμ3) - (6 + 4μμμμ3)\n(6 - 4μμμμ3) œ (6 + 4μμμμ3)\n(4 - 2μμμμ3) + (4 + 2μμμμ3)\n=\n1⁄2\n- μμμμ3/4\n- μμμμ3/4 3\nΩ\nΩ\nΩ\nΩ ATA + BTB = I\nATB =\n4 μμμμ2\n1 + μμμμ3\n1 -μμμμ3\n3 + μμμμ3 -(3-μμμμ3)\n3 - μμμμ3\n1 -μμμμ3\n3 + μμμμ3 -(1+μμμμ3)\n4 μμμμ2\n=\n(2 μμμμ3) + (-2μμμμ3)\n(-2) œ (-2)\n(6) œ (6)\n(-2 μμμμ3) + (2 μμμμ3)\n=\nBTA =\n(ATB)T = 0\nSo\nH p\nT(z -1) H p(z) = I\ni.e. H p(z) is a Paraunitary Matrix\n\nwww\nw + p\nw + p\nw + p\nModulation domain:\nH0(z) H0(z-1) = P(z) =\n16 (-z3 + 9z + 16 + 9z-1 œ z-3)\n(z3 œ 9z + 16 œ 9z-1 + z-3)\nH0(-z) H0(-z-1) = P(-z) =\nSo\nH0(z) H0(z-1) + H0(-z) H0(-z-1) = 2\ni.e.\n|H0(w)|^2 + |H0(w + p)|^2 = 2\n-1\n-0. 8\n-0. 6\n-0.4\n-0.2\n0.2\n0.4\n0 .6\n0 .8\n0. 5\n1. 5\n2. 5\nMa g nitud e re s po ns e o f Da u be c h ie s 4 -ta p filte r.\nFre que nc y re s pons e pha s e\nAng ula r fre que nc y (no rm a liz e d b y p)\nMagnitude Response of Daubechies 4-tap filter.\n\n-1\n-0. 8\n-0. 6\n-0. 4\n-0. 2\n0. 2\n0.4\n0.6\n0.8\n-4\n-3\n-2\n-1\nP ha s e re s pons e of Da ube c hie s 4-ta p filte r.\nFre que ncy re s pons e phas e\nAngula r fre qu e nc y (norm a liz e d by p)\nPhase response of Daubechies 4-tap filter."
    },
    {
      "category": "Resource",
      "title": "Slides5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/18-327-wavelets-filter-banks-and-applications-spring-2003/78a5cba6ed01f45bdca93d41f5885af2_Slides5.pdf",
      "content": "Course 18.327 and 1.130\nCourse 18.327 and 1.130\nWavelets and Filter Banks\nWavelets and Filter Banks\nModulation and Polyphase\nModulation and Polyphase\nRepresentations:\nRepresentations:\nNoble Identities;\nNoble Identities;\nBlock\nBlock Toeplitz\nToeplitz Matrices\nMatrices\nand Block z\nand Block z--transforms;\ntransforms;\nPolyphase Examples\nPolyphase Examples\n\nModulation Matrix\nModulation Matrix\nMatrix form of PR conditions:\nMatrix form of PR conditions:\n[F\n[F00 (z) F\n(z) F1\n1 (z)] H\n(z)] H00(z) H\n(z) H00((--z) = [ 2z\nz) = [ 2z --ll 0 ]\n0 ]\nHH11(z) H\n(z) H11((--z)\nz)\nSo\nSo\n[ F\n[ F00(z) F\n(z) F11(z)] = [2z\n(z)] = [2z --ll 0]\n0] HHm\nm --11(z)\n(z)\nHHm\nm--11(z) =\n(z) =\nModulation matrix,\nModulation matrix, HHm\nm(z)\n(z)\n?? =\n= HH00(z) H\n(z) H11((--z)\nz) -- HH00 ((--z) H\nz) H11 (z) (must be non\n(z) (must be non--zero)\nzero)\nHH11((--z)\nz) --HH00((--z)\nz)\n--HH11(z) H\n(z) H00(z)\n(z)\n??\n\n⇒\n⇒FF00(z) =\n(z) = 11\n??\n2z\n2z--ll HH11((--z)\nz)\nFF11(z) =\n(z) = -- 11\n??\n2z\n2z--ll HH00((--z)\nz)\nRequire these\nRequire these\nto be FIR\nto be FIR\nSuppose we choose\nSuppose we choose ?? = 2z\n= 2z -- ll\nThen\nThen\nFF00(z) = H\n(z) = H11((--z)\nz)\nFF11(z) =\n(z) = --HH00((--z)\nz)\n\nSynthesis modulation matrix:\nSynthesis modulation matrix:\nComplete the second row of matrix PR conditions\nComplete the second row of matrix PR conditions\nby replacing z with\nby replacing z with --z:\nz:\nFF00(z) F\n(z) F11(z) H\n(z) H00(z) H\n(z) H00((--z) z\nz) z--ll\nFF00((--z) F\nz) F11((--z) H\nz) H11(z) H\n(z) H11((--z) 0\nz) 0\n((--z)\nz) -- ll\nSynthesis\nSynthesis\nmodulation\nmodulation\nmatrix, F\nmatrix, Fm\nm(z)\n(z)\nNote the transpose convention in F\nNote the transpose convention in Fm\nm(z).\n(z).\n= 2\n= 2\n\nNoble Identities\nNoble Identities\n1.\n1. Consider\nConsider\nU(z) = H(z\nU(z) = H(z22)X(z)\n)X(z)\nY(z) = 1⁄2 {U(z\nY(z) = 1⁄2 {U(z 1⁄2\n1⁄2 ) + U(\n) + U(--z\nz 1⁄2\n1⁄2 )} (\n)} (downsampling\ndownsampling))\n= 1⁄2 { H (z) X (z\n= 1⁄2 { H (z) X (z 1⁄2\n1⁄2 ) + H(z) X\n) + H(z) X ((--zz1⁄2\n1⁄2 )})}\n= H(z)\n= H(z) -- 1⁄2 {\n1⁄2 {XX (z\n(z 1⁄2\n1⁄2) + X (\n) + X (--z\nz 1⁄2\n1⁄2 )}\n)} ⇒\n⇒can\ncan downsample\ndownsample\nfirst\nfirst\nFirst Noble identity:\nFirst Noble identity:\nx [n]\nx [n]\nx [n]\nx [n]\nH(z\nH(z22))\n↓↓22\ny[n]\ny[n]\nu[n]\nu[n]\n↓↓22\nH(z)\nH(z)\ny[n]\ny[n]\n≡≡\ny[n]\ny[n]\nxx[n]\n[n] H(z\nH(z22))\n↓↓22\n\n2.\n2. Consider\nConsider\nxx[n] u[n] y[n]\n[n] u[n] y[n]\nU(z) = H(z) X(z)\nU(z) = H(z) X(z)\nY(z) = U(z\nY(z) = U(z22) (\n) (upsampling\nupsampling))\n= H(z\n= H(z22) X(z\n) X(z22)\n) ⇒\n⇒can\ncan upsample\nupsample first\nfirst\nSecond Noble Identity:\nSecond Noble Identity:\nxx[n] y[n]\n[n] y[n] xx[n] y[n]\n[n] y[n]\nH(z)\nH(z)\n↑↑22\n≡≡\n↑↑22\nH(z)\nH(z)\n↑↑22\nH(z\nH(z22))\n\nDerivation of Polyphase Form\nDerivation of Polyphase Form\n1.\n1. Filtering and\nFiltering and downsampling\ndownsampling::\nxx[n] y[n]\n[n] y[n]\n↓↓22\nH(z)\nH(z)\nH(z) =\nH(z) = HHeven\neven(z\n(z22) + z\n) + z--11 HHodd\nodd(z\n(z22);\n); hheven\neven[n] = h[2n]\n[n] = h[2n]\nhhodd\nodd[n] = h[2n+1]\n[n] = h[2n+1]\nxx[n]\n[n]\n++\nHHeven\neven(z\n(z22))\nHHodd\nodd(z\n(z22))\n↓↓22\ny[n]\ny[n]\nzz--11\n\nxx[n]\n[n]\nzz--11\nHHeven\neven(z\n(z22))\nHHodd\nodd(z\n(z22))\n↓↓22\n↓↓22\ny[n]\ny[n]\n++\nzz--11\nHHeven\neven(z)\n(z)\nHHodd\nodd(z)\n(z)\n↓↓22\n↓↓22\ny[n]\ny[n]\n++\nxx[n]\n[n]\nPolyphase\nPolyphase\nForm\nForm\nxxeven\neven[n]\n[n]\nxxodd\nodd[n\n[n--1]\n1]\n\n2.\n2. Upsampling\nUpsampling and filtering\nand filtering\nxx[n] y[n]\n[n] y[n]\nF(z) =\nF(z) = FFeven\neven(z\n(z22) + z\n) + z--11 FFodd\nodd (z\n(z22))\nF(z)\nF(z)\n↑↑22\nxx[n]\n[n]\n++\nFFeven\neven(z\n(z22))\nFFodd\nodd(z\n(z22))\n↑↑22\ny[n]\ny[n]\nzz--11\n\nFFeven\neven(z\n(z22))\nFFodd\nodd(z\n(z22))\n↑↑22\n↑↑22\ny[n]\ny[n]\n++\nxx[n]\n[n]\nFFeven\neven(z)\n(z)\nFFodd\nodd(z)\n(z)\n↑↑22\n↑↑22\ny[n]\ny[n]\n++\nxx[n]\n[n]\nyyeven\neven[n]\n[n]\nyyodd\nodd[n]\n[n]\nzz--11\nPolyphase\nPolyphase\nForm\nForm\nzz--11\n\nPolyphase Matrix\nPolyphase Matrix\nConsider the matrix corresponding to the analysis\nConsider the matrix corresponding to the analysis\nfilter bank in\nfilter bank in interleaved\ninterleaved form. This is a block\nform. This is a block\nToeplitz\nToeplitz matrix:\nmatrix:\nHHbb==\nL\nL\nL\nL\nhh00[3] h\n[3] h00[2]\n[2]\nhh11[3] h\n[3] h11[2]\n[2]\nhh00[1] h\n[1] h00[0] 0 0\n[0] 0 0\nhh11[1] h\n[1] h11[0] 0 0\n[0] 0 0\nL\nL\nL\nL\nL\nL\n0 0 h\n0 0 h00[3] h\n[3] h00[2] h\n[2] h00[1] h\n[1] h00[0]\n[0]\nL\nL\n0 0 h\n0 0 h11[3] h\n[3] h11[2] h\n[2] h11[1] h\n[1] h11[0]\n[0]\nL\nL\nL\nL\nL\nL\n44--tap Example\ntap Example\nMM\n\nTaking block z\nTaking block z--transform we get:\ntransform we get:\nHHpp(z) = h\n(z) = h00[0] h\n[0] h00[1]\n[1]\nhh11[0] h\n[0] h11[1]\n[1] + z\n+ z--11\nhh00[2] h\n[2] h00[3]\n[3]\nhh11[2] h\n[2] h11[3]\n[3]\n==\nhh11[0] + z\n[0] + z--11 hh11[2] h\n[2] h11[1] + z\n[1] + z--11 hh11[3]\n[3]\nhh00[0] + z\n[0] + z--11 hh00[2]\n[2] hh00[1] + z\n[1] + z--11 hh00[3]\n[3]\n==\nHH0,even\n0,even (z) H\n(z) H0,odd\n0,odd (z)\n(z)\nHH1,even\n1,even (z) H\n(z) H1,odd\n1,odd (z)\n(z)\nThis is the polyphase matrix for a 2\nThis is the polyphase matrix for a 2--channel filter bank.\nchannel filter bank.\n\nSimilarly, for the synthesis filter bank:\nSimilarly, for the synthesis filter bank:\nFFbb =\n=\nff00[0] f\n[0] f11[0]\n[0]\nff00[1] f\n[1] f11[1]\n[1]\nff00[2] f\n[2] f11[2]\n[2]\nff00[3] f\n[3] f11[3]\n[3]\nff00[0] f\n[0] f11[0]\n[0]\nff00[1] f\n[1] f11[1]\n[1]\nff00[2] f\n[2] f11[2]\n[2]\nff00[3] f\n[3] f11[3]\n[3]\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\nMM\nMM\nMM\nMM\nL\nL\nMM\nMM\nMM\nMM\nL\nL\n\nNote transpose\nNote transpose\nconvention for\nconvention for\nsynthesis\nsynthesis\npolyphase matrix\npolyphase matrix\nff00[0] f\n[0] f11[0]\n[0]\nff00[1] f\n[1] f11[1]\n[1]\nff00[2] f\n[2] f11[2]\n[2]\nff00[3] f\n[3] f11[3]\n[3]\n+ z\n+ z--11\nFFpp(z) =\n(z) =\n==\nFF0,even\n0,even [z] F\n[z] F1,even\n1,even [z]\n[z]\nFF0, odd\n0, odd [z] F\n[z] F1, odd\n1, odd [z]\n[z]\n- Perfect reconstruction condition in polyphase domain:\nPerfect reconstruction condition in polyphase domain:\nFFpp(z) H\n(z) Hpp(z) = I (centered form\n(z) = I (centered form))\nThis means that H\nThis means that Hpp(z) must be invertible for all z on the\n(z) must be invertible for all z on the\nunit circle, i.e.\nunit circle, i.e.\ndet\ndet HHpp((eeiiωω)\n) ==0 for all frequencies\n0 for all frequencies ωω..\n\n--\nGiven that the analysis filters are FIR, the\nGiven that the analysis filters are FIR, the\nrequirement for the synthesis filters to be also\nrequirement for the synthesis filters to be also\nFIR is:\nFIR is:\ndet\ndet HHpp(z) = z\n(z) = z--ll\n(simple delay)\n(simple delay)\nbecause H\nbecause Hpp--11(z) must be a polynomial.\n(z) must be a polynomial.\n--\nCondition for orthogonality:\nCondition for orthogonality: FFpp(z) is the transpose\n(z) is the transpose\nof H\nof Hpp(z), i.e.\n(z), i.e.\nHHppTT(z\n(z--11) H\n) Hpp(z) = I\n(z) = I\ni.e. H\ni.e. Hpp(z) should be\n(z) should be paraunitary\nparaunitary. .\n\nRelationship between Modulation\nRelationship between Modulation\nand Polyphase Matrices\nand Polyphase Matrices\nhh0,even\n0,even[n] = h\n[n] = h00[2n]\n[2n]\nHH00(z) = H\n(z) = H0,even\n0,even(z\n(z22) + z\n) + z--11 HH0,odd\n0,odd(z\n(z22) ;\n) ;\nhh0,odd\n0,odd[n] = h\n[n] = h00[2n+1]\n[2n+1]\nHH11(z) = H\n(z) = H1,even\n1,even(z\n(z22) + z\n) + z--11 HH1,odd\n1,odd(z\n(z22))\nTwo more equations by replacing z with\nTwo more equations by replacing z with --z.\nz.\nSo in matrix form:\nSo in matrix form:\nHH00(z) H\n(z) H00((--z) H\nz) H0,even\n0,even(z\n(z22) H\n) H0,odd\n0,odd(z\n(z22) 1 1\n) 1 1\nHH11(z) H\n(z) H11((--z) H\nz) H1,even\n1,even(z\n(z22) H\n) H1,odd\n1,odd(z\n(z22) z\n) z--11 --zz--11\nHHm\nm(z)\n(z)\nModulation matrix\nModulation matrix\nHHpp(z\n(z22))\nPolyphase matrix\nPolyphase matrix\n==\n\nBut\nBut\n1 1 1 1 1\n1 1 1 1 1\nzz--11\n--zz--11\nzz--11\n1 --11\n==\nFF22\nDelay Matrix 2\nDelay Matrix 2--point DFT Matrix\npoint DFT Matrix\nDD22(z)\n(z)\nFFNN =\n=\n1 1 1 ... 1\n1 1 1 ... 1\n1 w\nw\nw\nw22 ...\n... w\nw NN--11\n1 w\nw2\n2 w\nw44 ...\n... w\nw 2(N\n2(N--1)\n1)\n. . .\n. . .\n. . .\n. . .\n. . .\n. . .\n1 w\nwNN--11 w\nw2(N\n2(N--1)\n1) w\nw(N\n(N--1)\n1)22\n; w =\n; w = eei\ni NN--point DFT\npoint DFT\nMatrix\nMatrix\nNN\nFFN\nN =\n= 1\n1 FFNN\nComplex conjugate: replace\nComplex conjugate: replace w\nw with\nwith w\nw = e\n= e--ii\nNN\n--11\n22ππ\nNN\n22ππ\n\nSo, in general\nSo, in general\nHHm\nm(z) F\n(z) F--11\n= H\n= Hpp((zzNN) D\n) DNN(z)\n(z)\nN = # of channels in\nN = # of channels in filterbank\nfilterbank\n(N = 2 in our example)\n(N = 2 in our example)\nNN\n\nPolyphase Matrix\nPolyphase Matrix\nExample: Daubechies 4\nExample: Daubechies 4--tap filter\ntap filter\n1+\n1+√√3 3 +\n3 3 + √√3 3\n3 3 --√√3 1\n3 1-- √√33\n4 √√2 4\n2 4√√2 4\n2 4 √√2 4\n2 4√√22\n{(1 +\n{(1 + √√3 ) + (3 +\n3 ) + (3 + √√3 ) z\n3 ) z--1\n1 + (3\n+ (3 -- √√3) z\n3) z--2\n2 + (1\n+ (1 -- √√3) z\n3) z--33}}\nhh00[0] =\n[0] =\nHH00(z) =\n(z) =\nHH11(z) =\n(z) =\n44√√22\n{(1\n{(1 -- √√3)\n3) -- (3\n(3 -- √√3) z\n3) z--11 + (3 +\n+ (3 + √√3)z\n3)z--22 -- (1 +\n(1 + √√3)z\n3)z--33}}\n44√√22\nhh00[1] =\n[1] =\nhh00[2] =\n[2] =\nhh00[3] =\n[3] =\n\nTime domain:\nTime domain:\nhh00[0]\n[0]22 + h\n+ h00[1]\n[1]22 + h\n+ h00[2]\n[2]22 + h\n+ h00[3]\n[3]22 =\n= 1\n1 {(4 + 2\n{(4 + 2√√3) + (12 + 6\n3) + (12 + 6 √√3) +\n3) +\n(12\n(12 -- 6\n6 √√3) + (4\n3) + (4 -- 2\n2 √√3)}\n3)}\n= 1\n= 1\nhh00[0] h\n[0] h00[2] + h\n[2] + h00[1] h\n[1] h00[3] =\n[3] = 11\n{(2\n{(2√√3) + (\n3) + (--22√√3)}\n3)}\n= 0\n= 0\ni.e. filter is orthogonal to its double shifts\ni.e. filter is orthogonal to its double shifts\n\nPolyphase Domain:\nPolyphase Domain:\n{(1 +\n{(1 + √√3) + (3\n3) + (3 -- √\n√3) z\n3) z--11}}\n{(3 +\n{(3 + √√3) + (1\n3) + (1 -- √√3) z\n3) z--11}}\n{(1\n{(1 -- √√3) + (3 +\n3) + (3 + √√3) z\n3) z--11}}\n{ { -- (3\n(3 -- √√3)\n3) -- (1 +\n(1 + √√3) z\n3) z--11}}\n44 √\n√22\n44 √\n√22\n44 √\n√22\n44 √\n√22\n==\n==\n==\n==\nHH0,even\n0,even(z)\n(z)\nHH0,odd\n0,odd(z)\n(z)\nHH1,even\n1,even(z)\n(z)\nHH1,odd\n1,odd(z)\n(z)\n1 +\n1 + √√3 3 +\n3 3 + √√3 3\n3 3 -- √√3 1\n3 1 -- √√33\n1 -- √√3\n3 --(3\n(3 -- √√3) 3 +\n3) 3 + √√3\n3 --(1 +\n(1 + √√3)\n3)\nHHpp(z) =\n(z) =\n44√√22\n44√√22\n++\nBB\nAA\nzz--11\n\nHHpp(z) = A + B z\n(z) = A + B z--11\nHHppTT(z\n(z--11) H\n) Hpp(z) = (A\n(z) = (ATT + B\n+ BTT z)(A +\nz)(A + Bz\nBz--11))\n= (A\n= (ATTA + B\nA + BTTB) +\nB) + AATTBz\nBz--11 +\n+ BBTTAz\nAz\nAATTA =\nA =\n44√√22\n1 +\n1 + √√33\n3 +\n3 + √√33\n1 -- √√33\n-- (3\n(3 -- √√3)\n3)\n44√√22\n1 +\n1 + √√3 3 +\n3 3 + √√33\n1 -- √√3\n3 --(3\n(3--√√3)\n3)\n(4 + 2\n(4 + 2√√3) + (4\n3) + (4 -- 22√√3) (6 + 4\n3) (6 + 4√√3)\n3) -- (6\n(6 -- 44√√3)\n3)\n(6 + 4\n(6 + 4√√3)\n3) -- (6\n(6 -- 44√√3) (12 + 6\n3) (12 + 6√√3) + (12\n3) + (12 -- 66√√3)\n3)\n==\n1⁄4\n1⁄4\n√√3/4\n3/4\n√√3/4\n3/4 3⁄4\n3⁄4\n==\n\nBBTTB =\nB =\n4 √√22\n3 -- √√3 3 +\n3 3 + √√33\n1 -- √√3\n3 --(1 +\n(1 + √√3)\n3)\n4 √√22\n3 -- √√3 1\n3 1 -- √√33\n3 +\n3 + √√3\n3 -- (1 +\n(1 + √√3)\n3)\n==\n(12\n(12 -- 66√√3) + (12 + 6\n3) + (12 + 6√√3) (6\n3) (6 -- 44√√3)\n3) -- (6 + 4\n(6 + 4√√3)\n3)\n(6\n(6 -- 44√√3)\n3) -- (6 + 4\n(6 + 4√√3) (4\n3) (4 -- 22√√3) + (4 + 2\n3) + (4 + 2√√3)\n3)\n==\n3⁄4\n3⁄4\n-- √√3/4\n3/4\n-- √√3/4\n3/4 1⁄4\n1⁄4\n⇒\n⇒AATTA + B\nA + BTTB = I\nB = I\n\nAATTB =\nB =\n4 √√22\n1 +\n1 + √√3 1\n3 1 --√√33\n3 +\n3 + √√3\n3 --(3\n(3--√√3)\n3)\n3 -- √√3 1\n3 1 --√√33\n3 +\n3 + √√3\n3 --(1+\n(1+√√3)\n3)\n4 √√22\n==\n(2\n(2 √√3) + (\n3) + (--22√√3) (\n3) (--2)\n2) -- ((--2)\n2)\n(6)\n(6) -- (6) (\n(6) (--2\n2 √√3) + (2\n3) + (2 √√3)\n3)\n= 0\n= 0\nBBTTA = (A\nA = (ATTB)\nB)TT\n= 0\n= 0\nSo\nSo\nHHppTT(z\n(z--11) H\n) Hpp(z) = I\n(z) = I\ni.e. H\ni.e. Hpp(z) is a\n(z) is a Paraunitary\nParaunitary Matrix\nMatrix\n\nModulation domain:\nModulation domain:\nHH00(z) H\n(z) H00(z\n(z--11) = P(z) =\n) = P(z) =\n((--zz33 + 9z + 16 + 9z\n+ 9z + 16 + 9z--11 -- zz--33))\nHH00((--z) H\nz) H00((--zz--11) = P(\n) = P(--z) =\nz) =\n(z\n(z33 -- 9z + 16\n9z + 16 -- 9z\n9z--11 + z\n+ z--33))\nSo\nSo\nHH00(z) H\n(z) H00(z\n(z--11) + H\n) + H00((--z) H\nz) H00((--zz--11) = 2\n) = 2\ni.e.\ni.e.\n|H\n|H00((ωω)|)|^2\n^2 + |H\n+ |H00((ω + π\nω + π)|)|^2\n^2 = 2\n= 2\n\n-1\n-0.8\n-0.6\n-0.4\n-0.2\n0.2\n0.4\n0.6\n0.8\n0.5\n1.5\n2.5\nMagnitude response of Daubechies 4-tap filter.\nFrequency response phase\nAngular frequency (normalized by π)\nMagnitude Response of Daubechies 4\nMagnitude Response of Daubechies 4--tap filter.\ntap filter.\n\n-1\n-0.8\n-0.6\n-0.4\n-0.2\n0.2\n0.4\n0.6\n0.8\n-4\n-3\n-2\n-1\nPhase response of Daubechies 4-tap filter.\nFrequency response phase\nAngular frequency (normalized by π)\nPhase response of Daubechies 4\nPhase response of Daubechies 4--tap filter.\ntap filter."
    }
  ]
}