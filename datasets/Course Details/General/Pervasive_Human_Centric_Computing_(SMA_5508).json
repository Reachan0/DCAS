{
  "course_name": "Pervasive Human Centric Computing (SMA 5508)",
  "course_description": "This course is broad, covering a wide range of topics that have to do with the post-pc era of computing. It is a hands-on project course that also includes some foundational subjects. Students will program iPAQ handheld computers, cell phones (series 60 phones), speech processing, vision, Cricket location systems, GPS, and more. Most of the programming will be using Python®, but Python® can be learned and mastered during the course.\nThis course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5508 (Pervasive Computing).",
  "topics": [
    "Engineering",
    "Computer Science",
    "Human-Computer Interfaces",
    "Programming Languages",
    "Theory of Computation",
    "Engineering",
    "Computer Science",
    "Human-Computer Interfaces",
    "Programming Languages",
    "Theory of Computation"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nRecitations: 1 session / week, 1 hour / session\n\nCourse Description\n\nThis course is broad, covering a wide range of topics that have to do with the post-pc era of computing. It is a hands-on project course that also includes some foundational subjects. Students will program iPAQ handheld computers, cell phones (series 60 phones), speech processing, vision, Cricket location systems, GPS, and more. Most of the programming will be using Python(r), but Python(r) can be learned and mastered during the course. There will be reading assignments, small programming exercises, a quiz, and a final project.\n\nPrerequisites\n\nMIT course 6.033 (or equivalent).\n\nTextbooks\n\nThere is no required textbook. However, readings will be assigned for every lecture, generally from research papers accessible on the Web.\n\nGrading\n\nThe largest contribution to your grade will be the course project, in which you will work in small groups to design, implement, and evaluate a user interface.\n\nProblem sets and homeworks will be assigned periodically.\n\nThere will be one quiz, given during class time. See the course\ncalendar\nfor the sessions. There will be no final exam.\n\nThis is a graduate class, and we will be reading and discussing research papers. Preparation, attendance, and participation in class will also be a factor in your grade!\n\nGrades will be determined based on the following percentages:\n\nACTIVITIES\n\nPERCENTAGES\n\nCourse Project\n\n40%\n\nProblem Sets and Homework\n\n25%\n\nQuiz\n\n30%\n\nClass Participation\n\n5%\n\nCollaboration Policy\n\nYou may freely discuss assignments with other people, but you are expected to be intellectually honest and give credit where credit is due.",
  "files": [
    {
      "category": "Resource",
      "title": "ps1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/e2de8d79fab281f601306a460904fc9e_ps1.pdf",
      "content": "6.883 - 5508\nProblem Set 1\nDue Feb 21, 2006\nThis exercise is aimed at making sure we know how to find, connect, and\ntransfer transfer information between handheld devices. Some of these devices\nare located halfway around the world.\nThe very first thing you will need to do is to make sure your ipaq is alive\nand well. This means installing the right version of Linux and figuring out how\nto connect to it and run a python program. We do not know the status of each\nipaq. You need not reinstall linux on an ipaq that you are sharing, but you\nshould know how to do it.\nThe main part of the problem set should be done individually.\n1. geneerate pieces of information (s,a,n) as follows:\n- Select a subway station either in Boston (Tstation) or Singapore\n(MRTstation).\n- Select an animal. This is for identification purposes, so try to pick\nsomething unique.\n- Pick (generate) a 32 bit random number.\n2. write a program (in python) on your ipaq that will\n(a) communicate over a tcp socket with another ipaq in the class\n(b) exchange the three pieces of information\n3. Communicate with at least two ipaqs: one on the same and one on the\nother side of the world.\n4. Post on the class wiki the times you expect to be available and your ip\naddress when you are available. You may also want to note if you are\nbeing a client or a server.\nFor extra credit, write a server that will allow everyone to publish their\nconnect information in realtime and to read this information. This can replace\nthe manual method of using the wiki.\nYou might find it easieer to first do this assignment on a laptop or pc before\ntrying it on an ipaq.\nHand in your code and a list of the (s,a,n) triples you collected."
    },
    {
      "category": "Resource",
      "title": "ps2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/64f23ede1c7483caaa1077b39b83baec_ps2.pdf",
      "content": "6.883 - 5508\nProblem Set 2\nDue Wednesday March 1, 2006\nAlways at the right place at the right time\nPlease check the wiki for updated information (and also for how to read the\nGPS information).\nbackground\nSpacial services, such as GPS, and constant communication have made it possi\nble to know where ones family and friends are located. For this assignment, you\nare to use a portable bluetooth GPS receiver, and connect it to your ipaq via\nbluetooth. About every five minutes you should take a reading from the GPS\ndevice. It will not work indoors, although one can often place the receiver near\na window or even just outside the window.\nPeriodically, you should upload (send) your position to our central server,\nor some other server. The server simply keeps track of all the records.\nYou may download (request) all the tracking information contained on the server,\nor just some part of it.\nYour ipaq should act as a server as well, allowing anyone to query its current\nposition.\nmain thrust: location larconey\nThe truth is that no one likes to be tracked. Some of us like to sneak off every\nnow and then, perhaps to visit a museum to see the new art exhibit. Since you\nwill be writing the code for the location gathering service, it is very likely that\nyour code will contain bugs. Many people do not like bugs, but they can be our\nfriends. Some bugs, for example, do not have very good vision and have a poor\nsense of direction. Bugs could cause our ipaqs to make inaccurate reports as to\nour whereabouts.\nThe goal of this exercise is to write \"buggy\" code that will report your\nlocation according to where you should be rather than where you actually are.\nThis is for responces to location queries.\n\nhints\nThe server is used mostly as a way of helping your bugs. You can use the\ninformation on the server in several different ways. For example, if two people\nare near each other, it is possible to get their location information confused in\nthe future. That is, Alice and Bob keep honest updates of their location, but\nwhen they come near each other, they decide to reverse roles and Alice reports\nBob's position and vicaversa.\nAnother possibility is that over time, one learns how much varience to their\nlocation is typical, and then in the future, know how to fake their position so\nthat it resembles past paths.\nThere are many other possibilities.\nsome details\nLocation path information is uploaded to the server using an xmllike format:\n<Position_Record>\n<ID> (s,a,n) this is your info from PS1 <\\ID>\n<TIME> time in python time.time() format\n<\\TIME>\n<PLACE> gps coordinate <\\PLACE>\n<\\Position_Record>\nLocation path information can be downloaded from the server using a request\nrecord that asks for the records of (s,a,n) identifier, or specifies (*,*,*) for all\nrecords.\nIf anyone wants to write a more sophistocated server, please feel free to do\nso and post the information on the wiki.\nwhat to hand in\nPlease give a short writeup of your strategy to fake your location. Your code\nshould also be handed in. Finally, a list of times when we can probe your ipaq\nfor locaton information."
    },
    {
      "category": "Resource",
      "title": "ps3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/fa72a118e3733a6b4324aac5a77546ad_ps3.pdf",
      "content": "6.883 - 5508\nProblem Set 3\nDue Wednesday March 8, 2006\nIt Boggles the Mind\nbackground\nBoggle is a game that consists of a 4x4 grid of letter cubes. The cubes are shaken and then the fall into the\ngrid with each cube having one of its letters facing up. The goal of the game is to form as words as possible,\nwhere the letters of a word must be connected in the grid, where connected means directly to the left, right,\nup or down. It usually is play with two people and a 3 minute timer. (You are free to vary the rules.)\nThere are several online and computer versions of the game that one can easily find.\nBoggle: the contact sport\nCrickets and ipaqs will be used for the problem set. Two, three or even four beacons can be used to help\nlocate the position of an ipaq.\nThe game is played in an open space that is virtually divided into a 4 by 4 grid. To select a letter, one\nmust physically move to the location of the letter and then grab that letter.\nThe grid can be displayed on the iPaq (GTK is probably the easiest way to draw on the iPaq screen in\nPython). One's position should also be displayed.\nGrabbing a letter can be done in several ways. One of the buttons can be pressed, a button on the screen,\nor a \"backpack\" can be used and one can shake the backpack to affect the accelerometers.\nSome other mechanism is needed to indicate that a new word is starting. Once again, there are several\nways to do this. One interesting way is to force a player to go outside the grid (and then click) in order to\nend a word. This adds to the physical challenge of the game.\nTeam work is allowed\nYes, two people can work together and even larger groups are allowed, but you should do more work.\nwhat to hand in\nThe code obviously, and a writeup as to how the system works as well as what it takes to setup the game -\nand any assumptions about the environment.\nIt would be great if you could show the game in action, either via video or some other clever mechanism."
    },
    {
      "category": "Resource",
      "title": "ps4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/e17cd76330456779eefb1aff5b2ffabf_ps4.pdf",
      "content": "Cell Tower Tracking\n6.883 - 5508\nProblem Set 4\nBackground\nThere are 27 satellites (24 plus 3 spares) all orbiting in their own patterns, but making two complete rotations\neach day, so that everyone can always see at least 4 of them from anywhere on earth (that seems like a fun\npuzzle). So, perhaps, 24 hours later we will see the same set (maybe).\nCell Tower Tracking\nThis assignment is to see if we can collectively map out where there is cell coverage and how good it is. Many\noperators publish their own maps as to the quality of cell coverage. No one knows if these are accurate.\nThere are commercial services that will sell the location of cell towers.\nWe have gps and telephones and servers. We can build up our own maps and make them public. If done\nwell, others around the world can contribute as well.\nIn S60 python, there is a location package that returns cell tower information and there is a call that\nreturns the signal strength in the sysinfo package:\na,b,c,d = location.gsm_location()\nss = sysinfo.signal()\n2.1\nThe Main Idea\nThe idea is to take readings, say every 5 min when you are roaming around, and keep a record. Then,\nperiodically upload it to our server. Soon we will then have a reliable database.\n<raw_tower_info>\n<id> larry </id>\n<gsm_location> a, b, c, d </gsm_location>\n<time> time of reading -- in gps universal time format </time>\n<signal_strength> number in range 0 to 7 </signal_strength>\n<gps_location> lat, lon, altitude </gps_location>\n</raw_tower_info>\nThese records are then uploaded to the database, where they can be combined with the cell tower info.\nUploading does not have to be done immediately, but at least once a day. (you can move information from\nphone to pc and then to server if your phone does not have data conneectivity).\nThe server accepts two commands. The first is \"store\" and the parameter is a record as above. The\nsecond is \"load\" and the parameter is a set of cell towers. The set is just a string in python style of \"[ (a,\nb, c, d) , (a1,b1,c1,d1), .. ]\" The server will return a set of gps locations and signal strengths that satsify all\nthe cell towers.\n\n2.2\nServer Details\nThe server script for this part of the assignment is at http://ozone.csail.mit.edu/upload cell tower.php\n(source code at http://ozone.csail.mit.edu/upload cell tower.phps). As described above, there are two com\nmands the server accepts - \"store\" and \"load\". These are read as form parameter names and associated\nvalues by the script, as if an html form post was made. Note that you can specify both fields in one request,\nin which case a store and load are performed, and the response will be whatever the output of the load\nrequest was. When sending request, you'll need to use http post with multipart form data (see the code\nsnippets above for how to do this).\nFor the \"store\" request, the server expects the parameter's value to be an XML string of the form:\n<?xml version=\"1.0\"?>\n<records>\n<raw_tower_info>\n<id> unique id </id>\n<gsm_location> a,b,c,d </gsm_location> <!-- Be wary of whitespace -->\n<time> time of reading -- in gps universal time format </time>\n<signal_strength> number in range 0 to 7 </signal_strength>\n<gps_location> lat,lon,altitude </gps_location> <!-- e.g., 3432.343N,0384.333W,23.43M -->\n</raw_tower_info>\n<raw_tower_info>\n...\n</raw_tower_info>\n...\n</records>\nFor the \"load\" request, the server expects the parameter's value to be the python-style string above\n(\"[(a,b,c,d),...]\"). The output of the request is a gzipped XML string of the same form as the store request.\nThat is,\n<?xml version=\"1.0\">\n<records>\n<raw_tower_info>\n<id>...<id>\n<gsm_location>...<gsm_location>\n<time>...</time>\n<signal_strength>...</signal_strength>\n<gps_location>...</gps_location>\n</raw_tower_info>\n<raw_tower_info>\n...\n</raw_tower_info>\n...\n</records>\nExtensions\nThe following are things that are \"extra credit\" - stuff that I would like to see but not part of the basic\nassignment.\n- Feel free to develope your own server that might provide additional services, such as a map of the\ncurrent location.\n- algorithm that tries to approximate the data with hexagonal shapes that outline the actual cells.\n\nWhat to hand in\nThe servers will have your data, but hand in\n- your code\n- you id specifier\n- a write-up as to how this application might be power efficient. In otherwords,\n- what can be done to minimize the power requirements. This is a big deal if one wants it to be runing\nall the time.\nMore details\nWe will all be taking several readings, hopefully during at least 3 of the four time periods: Monday night\nat 11:00 pm, Tuesdday morning at 11:00 am, Tuesday night at 11:00 pm, and Wednesday morning at 11:00\nam. (All times are Boston based)\nThere has been a change in the directions (hopefully, you will see this in time). Original directions:\n\"Each period will last 10 min, and you should collect a reading each second. All 600 readings should be\nuploaded to our server.\"\nIt is better if you record all the information that the gps provides and forget about parsing it on the\nhandset. Collect every byte that is sent by the gps receiver and dump it into a file. The file can be parsed\nlocally and the normal record sent to the server.\nThen at the end of the period, we will upload the whole file (or up to 4 files).\nOf course not everyone can do all readings since you are sharing devices. Just work it out who is doing\nwhich period. [edit] Server Details\nThe best way to do the uploads is to save your readings to a file, and then upload the file at a convenient\ntime. Our server script at ozone.csail.mit.edu/upload global gps.php (source code at http://ozone.csail.mit.edu/upload glo\nexpects a pipe-delimited file to be uploaded, with one reading per line. Each line should look like the fol\nlowing:\n<ID>|<location>|<time>|<latitude>|<latitude_direction>|<longitude>|<longitude_direction>|\n<num_satellites>|<hdop>|<altitude>|<height above WGS84>\nAs you can see, almost every element of a gps reading is to be recorded. The ID should be something\nunique that you can identify (e.g., username). The location should either be \"Cambridge\" or \"Singapore\".\nNote that for latitude and longitude, specify the value and the direction separately. The last two entries,\naltitude, and height above WGS84 ellipsoid, are expected to be in meters. Here's an example entry (values\ntaken from lecture slide on gps):\nnsong|Cambridge|170834|4124.8963|N|08151.6838|W|05|1.5|280.2|-34.0\n...\nThe table in the database looks like this:\n+---------------------+------------------+------+-----+---------+-------+\n| Field\n| Type\n| Null | Key | Default | Extra |\n+---------------------+------------------+------+-----+---------+-------+\n| id\n| varchar(25)\n| NO\n|\n|\n|\n|\n| location\n| varchar(25)\n| YES |\n| NULL\n|\n|\n| time\n| int(10) unsigned | YES |\n| NULL\n|\n|\n| latitude\n| double unsigned | YES |\n| NULL\n|\n|\n\n| latitude_direction | varchar(5)\n| YES |\n| NULL\n|\n|\n| longitude\n| double unsigned | YES |\n| NULL\n|\n|\n| longitude_direction | varchar(5)\n| YES |\n| NULL\n|\n|\n| satellites\n| int(10) unsigned | YES |\n| NULL\n|\n|\n| hdop\n| double\n| YES |\n| NULL\n|\n|\n| altitude\n| double\n| YES |\n| NULL\n|\n|\n| height_WGS84\n| double\n| YES |\n| NULL\n|\n|\n+---------------------+------------------+------+-----+---------+-------+\nThere are two ways to upload to the server: the cheap way, and the python way. The script itself contains\na simple form which you can use to manually upload your files to the server. To do it within python, you\nmay find the following helpful (the name for the file is \"gpsreadings\"):\nimport httplib\nimport mimetypes\ndef post_multipart(host, selector, fields, files):\n\"\"\"\nPost fields and files to an http host as multipart/form-data.\nfields is a sequence of (name, value) elements for regular form fields.\nfiles is a sequence of (name, filename, value) elements for data to be uploaded as files\nReturn the server's response page.\n\"\"\"\ncontent_type, body = encode_multipart_formdata(fields, files)\nh = httplib.HTTPConnection(host)\nh.putrequest('POST', selector)\nh.putheader('content-type', content_type)\nh.putheader('content-length', str(len(body)))\nh.endheaders()\nh.send(body)\nresponse = h.getresponse()\nreturn response.read()\ndef encode_multipart_formdata(fields, files):\n\"\"\"\nfields is a sequence of (name, value) elements for regular form fields.\nfiles is a sequence of (name, filename, value) elements for data to be uploaded as files\nReturn (content_type, body) ready for httplib.HTTP instance\n\"\"\"\nBOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$'\nCRLF = '\\r\\n'\nL = []\nfor (key, value) in fields:\nL.append('--' + BOUNDARY)\nL.append('Content-Disposition: form-data; name=\"%s\"' % key)\nL.append('')\nL.append(value)\nfor (key, filename, value) in files:\nL.append('--' + BOUNDARY)\nL.append('Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"' % (key, filename))\nL.append('Content-Type: %s' % get_content_type(filename))\nL.append('')\n\nL.append(value)\nL.append('--' + BOUNDARY + '--')\nL.append('')\nbody = CRLF.join(L)\ncontent_type = 'multipart/form-data; boundary=%s' % BOUNDARY\nreturn content_type, body\ndef get_content_type(filename):\nreturn mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n4.1\nComments:\nThis problem set has a bunch of parts. Each is small, but putting them together can be complicated. Please\nspend some time planning overall flow of the application. It can be extended in many ways, and I encourage\nyou to think about extensions.\nThe pieces, are fairly independent. So they can be worked on as separate modules. Try to generate and\ndisplay content, without the triggers first."
    },
    {
      "category": "Resource",
      "title": "ps5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/e2bc4481b0ea8a2b06c4a21d0cfbea6d_ps5.pdf",
      "content": "Remembering things forgotten\n6.883 - 5508\nProblem Set 5\nDue Wednesday April 10, 2006\nBackground\nYour phone may always be with you and can easily be a memory assistant reminding you of things to do.\nTimebased reminders are fairly common, but locationbased ones are more unique. In this assignment, you\nuse the phone to generate content, associate it with a location, and when you arrive at that location, the\nphone issues a popup that either displays the content or indicates that there is content.\nAs usual, there is lots of freedom to be creative and to extend the assignment in interesting ways. Please\nplan things out before diving in to write code. A lot of time is being allocated for this problem set, but it is\ntoo much to do the weekend before the submission date.\nPart I: Where am I\nSimple version: Continuously loop and check where you are by listening for bluetooth devices. There should\nbe at least two BT dongles or devices that indicate a location of interest, and they should be located at two\ndifferent places. Ideally, one at home and one in the office, but for the problem set, two different offices are\nfine.\nThe tricky part is how to both poll for location information and be responsive to keypress.\nAdvanced version: use cell towers, gps receiver, and bt dongle information; whatever is available.\nPart II: A Picture May Be Worth a Thousand Words (1k bytes)\nBut How Many Sound Bites?\nThere are three types of \"content\" that you can easily generate on the phone using your sophisticated python\nprogramming skills. The easiest is text. The body of the screen can be a text box into which the user can\nenter and edit text. When done, indicated by selecting a menu item, the text can be written to a file.\nTaking a picture in python is easy. Must take care to attach correct menu buttons to first say that one\nwants to take the picture and then to have the picture being taken. The real issue is getting the screen to\ndisplay what the camera is seeing before the picture is taken. I do not know how to do this in python. I\nguess one can take and display a picture every second until the user pushes the \"take photo\" button or menu\nitem.\nMaking an audio note is also not difficult. There is a record and stop operations and puts the recording\nin a wav file.\nAlthough any of the tree are possible, please do at least one for the problem set.\nWhatever the content, it should be associated with a location.\nPart III: In your face\nWhen the phone detects that it is in a new location - one of the known locations, say by noticing a special\nbluetooth dongle, then the phone checks to see if there is any content (files) associated with this location. If\n\nso, it displays the content, in the case of text or picture. In the case of an audio note, it is your choice as to\nwhat to do: either display a message and have the user ask to play the recording or simply be annoying and\nplay it automatically. The reminder should be deleted or something like letting the user keep the reminder\nfor next time you come back.\nComments:\nThis problem set has a bunch of parts. Each is small, but putting them together can be complicated. Please\nspend some time planning overall flow of the application. It can be extended in many ways, and I encourage\nyou to think about extensions.\nThe pieces, are fairly independent. So they can be worked on as separate modules. Try to generate and\ndisplay content, without the triggers first."
    },
    {
      "category": "Resource",
      "title": "ps6.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/eb477a39b4eeb5f82393c15129f0ef53_ps6.pdf",
      "content": "It's hard to recognize speech\n6.883 - 5508\nProblem Set 6\nDue Wednesday May XX , 2006\nBackground\nThe goad of this 'simplier' problem set. is to just get the experience of using a simple speech recognition\nsystem.\nDynamically generate a grammar\nRather than writting the grammar by hand (although you should do that for the initial test case), this\nassignment is to generate part of the grammar dynamically. You may think of your own examples, but here\nis a default one:\nAs discussed in the speech controlled flash animation, assume there is a directory with a set of files in a\npredetermined name format. That is, the file names are of the form: object-action.type\nThe simpliest version, let us use the type of txt. Files could be jpg or animated gif's, but let's keep\nit simple. File names could be the following: \"dog-barks.txt\",\"dog-barking.txt\", \"dog-walks.txt\", \"cat\npurrs.txt\"\nIn this case, there are two objects and four actions. The object and action nonterminals in the grammar\nare generated from the file names.\nThe user should be able to say things like:\n- Please show me how the dog barks.\n- The dog then barks.\n- I can see that the dog is barking.\nThere is a static part of the grammar that has the form of the sentences. The object and actions are\ndynamically generated.\n2.1\npart one\ncreate the files in the directory, write the grammar, write a python program, that sends the audio wave and\ngrammar to the server, gets back the object and action, and then displays the contents of the file.\n2.2\npart two - advanced\nAdd some error control to part one. For example, if one says at the cat is walking, have your program\nattempt to do something useful."
    },
    {
      "category": "Exam",
      "title": "quiz_questions.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/43502e24ecef3728f6cd87320c62ad27_quiz_questions.pdf",
      "content": "(There will be some questions with code fragments that may involve the use of bluetooth,\npython programming on the phone, or crickets. There will be about 20 questions.)\n\nQuestions for last year's quiz:\nNote that the material was in a different order last year, so many of the questions are\nirrelevant, but this will give a flavor of how I write questions. They are all short answer.\nHow does the iPkg system know where to find its feeds?\nDescribe how the correct code gets executed when\ntapping a button on the iPaq's screen.\nWhat are the basic components of speech processing?\nExplain how to use Baye's theorem to identify people in a picture?\nGive a Speechbuilder grammar that lets one control a logo turtle.\n* There is a pen that can go up and down.\n* The turtle can face either north, south, east, or west.\n* The turtle can go forward a distance of 1, 2, or 3 squares.\n* The turtle can repeat an action 3, 4, or 5 times.\n* The turtle can roll over, stand on its hind legs, or hide it's head.\nDescribe how to perform the same turtle control put using the sketching\nsystem rather than speech.\nGive the rules necessary to recognize a triangle in the ladder sketch system?\nDescribe how a vision system might be able to recognize a\nbicycle within a picture.\n\nPeople have an iPaq with cricket listener and there are three beacons in\nthe ceiling. How can their iPaq detect if they are walking in a circle?\nWhat is the major difference between BATs and Crickets (the devices,\nnot the animals)?\nEach of the systems we learned about, has a mechanism to handle\nambiguous input. Describe that mechanism for\ni) GUI\nii) Speech\niii) Location\n\niv) Sketching\nv) Vision\nHere is some python client socket code: What parameters are needed to invoke it?\nimport sys\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect( (sys.argv[1], int(sys.argv[2]) ) )\nwhile True:\n......data = sys.stdin.readline()\n......if len(data) == 0:\n...............print \"closing connection with server\"\n......break\ns.send(data)\n\nBriefly describe the Wizard of Oz prototyping framework. List some\nadvantages and disadvantages compared to other prototyping methods.\nWhat is \"Calm Computing\"?"
    },
    {
      "category": "Resource",
      "title": "l2_gui_pyt_int.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/9e346e313f38647f74d026d4dc6fcd71_l2_gui_pyt_int.pdf",
      "content": "Introduction to Python\nLinuxWorld - New York City - January 2002\nGuido van Rossum\nDirector of PythonLabs at Zope Corporation\n\nSlide 2\n(c)2001, 2002 Guido van Rossum\nWhy Python?\n- Have your cake and eat it, too:\nProductivity and readable code\n- VHLLs will gain on system languages\n(John Ousterhout)\n- \"Life's better without braces\"\n(Bruce Eckel)\n\nSlide 3\n(c)2001, 2002 Guido van Rossum\nTutorial Outline\n-\ninteractive \"shell\"\n-\nbasic types: numbers, strings\n-\ncontainer types: lists, dictionaries, tuples\n-\nvariables\n-\ncontrol structures\n-\nfunctions & procedures\n-\nclasses & instances\n-\nmodules & packages\n-\nexceptions\n-\nfiles & standard library\n-\nwhat's new in Python 2.0 and beyond\n\nSlide 4\n(c)2001, 2002 Guido van Rossum\nTry It Out!\n- If you brought a laptop into the classroom,\nfeel free to play along\n- Download Python from www.python.org\n- Any version will do for this class\n- By and large they are all mutually compatible\n- Recommended version: 2.1.1 or 2.2\n- Oldest version still in widespread use: 1.5.2\n- Avoid 1.6/1.6.1 if you can\n- When using 2.0 or 2.1, upgrade to 2.0.1 / 2.1.1\n- 2.1.2 is coming soon!\n- Use IDLE if you can\n\nSlide 5\n(c)2001, 2002 Guido van Rossum\nInteractive \"Shell\"\n-\nGreat for learning the language\n-\nGreat for experimenting with the library\n-\nGreat for testing your own modules\n-\nTwo variations: IDLE (GUI),\npython (command line)\n-\nType statements or expressions at prompt:\n>>> print \"Hello, world\"\nHello, world\n>>> x = 12**2\n>>> x/2\n>>> # this is a comment\n\nSlide 6\n(c)2001, 2002 Guido van Rossum\nNumbers\n-\nThe usual suspects\n- 12, 3.14, 0xFF, 0377, (-1+2)*3/4**5, abs(x), 0<x<=5\n-\nC-style shifting & masking\n- 1<<16, x&0xff, x|1, ~x, x^y\n-\nInteger division truncates :-(\n- 1/2 -> 0\n# 1./2. -> 0.5, float(1)/2 -> 0.5\n- Will be fixed in the future\n-\nLong (arbitrary precision), complex\n- 2L**100 -> 1267650600228229401496703205376L\n- In Python 2.2 and beyond, 2**100 does the same thing\n- 1j**2 -> (-1+0j)\n\nSlide 7\n(c)2001, 2002 Guido van Rossum\nStrings\n- \"hello\"+\"world\"\n\"helloworld\"\n# concatenation\n- \"hello\"*3\n\"hellohellohello\" # repetition\n- \"hello\"[0]\n\"h\"\n# indexing\n- \"hello\"[-1]\n\"o\"\n# (from end)\n- \"hello\"[1:4]\n\"ell\"\n# slicing\n- len(\"hello\")\n# size\n- \"hello\" < \"jello\"\n# comparison\n- \"e\" in \"hello\"\n# search\n- \"escapes: \\n etc, \\033 etc, \\if etc\"\n- 'single quotes' \"\"\"triple quotes\"\"\" r\"raw strings\"\n\nSlide 8\n(c)2001, 2002 Guido van Rossum\nLists\n- Flexible arrays, not Lisp-like linked lists\n- a = [99, \"bottles of beer\", [\"on\", \"the\", \"wall\"]]\n- Same operators as for strings\n- a+b, a*3, a[0], a[-1], a[1:], len(a)\n- Item and slice assignment\n- a[0] = 98\n- a[1:2] = [\"bottles\", \"of\", \"beer\"]\n-> [98, \"bottles\", \"of\", \"beer\", [\"on\", \"the\", \"wall\"]]\n- del a[-1]\n# -> [98, \"bottles\", \"of\", \"beer\"]\n\nSlide 9\n(c)2001, 2002 Guido van Rossum\nMore List Operations\n>>> a = range(5)\n# [0,1,2,3,4]\n>>> a.append(5)\n# [0,1,2,3,4,5]\n>>> a.pop()\n# [0,1,2,3,4]\n>>> a.insert(0, 42)\n# [42,0,1,2,3,4]\n>>> a.pop(0)\n# [0,1,2,3,4]\n5.5\n>>> a.reverse()\n# [4,3,2,1,0]\n>>> a.sort()\n# [0,1,2,3,4]\n\nSlide 10\n(c)2001, 2002 Guido van Rossum\nDictionaries\n- Hash tables, \"associative arrays\"\n- d = {\"duck\": \"eend\", \"water\": \"water\"}\n- Lookup:\n- d[\"duck\"] -> \"eend\"\n- d[\"back\"] # raises KeyError exception\n- Delete, insert, overwrite:\n- del d[\"water\"] # {\"duck\": \"eend\", \"back\": \"rug\"}\n- d[\"back\"] = \"rug\" # {\"duck\": \"eend\", \"back\": \"rug\"}\n- d[\"duck\"] = \"duik\" # {\"duck\": \"duik\", \"back\": \"rug\"}\n\nSlide 11\n(c)2001, 2002 Guido van Rossum\nMore Dictionary Ops\n- Keys, values, items:\n- d.keys() -> [\"duck\", \"back\"]\n- d.values() -> [\"duik\", \"rug\"]\n- d.items() -> [(\"duck\",\"duik\"), (\"back\",\"rug\")]\n- Presence check:\n- d.has_key(\"duck\") -> 1; d.has_key(\"spam\") -> 0\n- Values of any type; keys almost any\n- {\"name\":\"Guido\", \"age\":43, (\"hello\",\"world\"):1,\n42:\"yes\", \"flag\": [\"red\",\"white\",\"blue\"]}\n\nSlide 12\n(c)2001, 2002 Guido van Rossum\nDictionary Details\n- Keys must be immutable:\n- numbers, strings, tuples of immutables\n- these cannot be changed after creation\n- reason is hashing (fast lookup technique)\n- not lists or other dictionaries\n- these types of objects can be changed \"in place\"\n- no restrictions on values\n- Keys will be listed in arbitrary order\n- again, because of hashing\n\nSlide 13\n(c)2001, 2002 Guido van Rossum\nTuples\n- key = (lastname, firstname)\n- point = x, y, z\n# parentheses optional\n- x, y, z = point # unpack\n- lastname = key[0]\n- singleton = (1,)\n# trailing comma!!!\n- empty = ()\n# parentheses!\n- tuples vs. lists; tuples immutable\n\nSlide 14\n(c)2001, 2002 Guido van Rossum\nVariables\n- No need to declare\n- Need to assign (initialize)\n- use of uninitialized variable raises exception\n- Not typed\nif friendly: greeting = \"hello world\"\nelse: greeting = 12**2\nprint greeting\n- Everything is a \"variable\":\n- Even functions, classes, modules\n\nSlide 15\n(c)2001, 2002 Guido van Rossum\nReference Semantics\n- Assignment manipulates references\n- x = y does not make a copy of y\n- x = y makes x reference the object y references\n- Very useful; but beware!\n- Example:\n>>> a = [1, 2, 3]\n>>> b = a\n>>> a.append(4)\n>>> print b\n[1, 2, 3, 4]\n\nSlide 16\n(c)2001, 2002 Guido van Rossum\nChanging a Shared List\na\na = [1, 2, 3]\na\nb\nb = a\na\na.append(4)\nb\n\nSlide 17\n(c)2001, 2002 Guido van Rossum\nChanging an Integer\na\na = 1\na\nb = a\nb\nnew int object created\nby add operator (1+1)\na\na = a+1\nold reference deleted\nby assignment (a=...)\nb\n\nSlide 18\n(c)2001, 2002 Guido van Rossum\nControl Structures\nif condition:\nstatements\n[elif condition:\nstatements] ...\nelse:\nstatements\nwhile condition:\nstatements\nfor var in sequence:\nstatements\nbreak\ncontinue\n\nSlide 19\n(c)2001, 2002 Guido van Rossum\nGrouping Indentation\nBingo!\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\nBingo!\n---\n---\n---\n---\n---\nIn C:\nfor (i = 0; i < 20; i++)\n{\nif (i%3 == 0) {\nprintf(\"%d\\n\", i);\nif (i%5 == 0) {\nprintf(\"Bingo!\\n\"); }\n}\nprintf(\"---\\n\");\n}\nIn Python:\nfor i in range(20):\nif i%3 == 0:\nprint i\nif i%5 == 0:\nprint \"Bingo!\"\nprint \"---\"\n\nSlide 20\n(c)2001, 2002 Guido van Rossum\nFunctions, Procedures\ndef name(arg1, arg2, ...):\n\"\"\"documentation\"\"\" # optional doc string\nstatements\nreturn\n# from procedure\nreturn expression\n# from function\n\nSlide 21\n(c)2001, 2002 Guido van Rossum\nExample Function\ndef gcd(a, b):\n\"greatest common divisor\"\nwhile a != 0:\na, b = b%a, a # parallel assignment\nreturn b\n>>> gcd.__doc__\n'greatest common divisor'\n>>> gcd(12, 20)\n\nSlide 22\n(c)2001, 2002 Guido van Rossum\nClasses\nclass name:\n\"documentation\"\nstatements\n-or-\nclass name(base1, base2, ...):\n...\nMost, statements are method definitions:\ndef name(self, arg1, arg2, ...):\n...\nMay also be class variable assignments\n\nSlide 23\n(c)2001, 2002 Guido van Rossum\nExample Class\nclass Stack:\n\"A well-known data structure...\"\ndef __init__(self):\n# constructor\nself.items = []\ndef push(self, x):\nself.items.append(x)\n# the sky is the limit\ndef pop(self):\nx = self.items[-1]\n# what happens if it's\nempty?\ndel self.items[-1]\nreturn x\ndef empty(self):\nreturn len(self.items) == 0\n# Boolean result\n\nSlide 24\n(c)2001, 2002 Guido van Rossum\nUsing Classes\n-\nTo create an instance, simply call the class object:\nx = Stack()\n# no 'new' operator!\n-\nTo use methods of the instance, call using dot\nnotation:\nx.empty()\n# -> 1\nx.push(1)\n# [1]\nx.empty()\n# -> 0\nx.push(\"hello\")\n# [1, \"hello\"]\nx.pop()\n# -> \"hello\"\n# [1]\n-\nTo inspect instance variables, use dot notation:\nx.items\n# -> [1]\n\nSlide 25\n(c)2001, 2002 Guido van Rossum\nSubclassing\nclass FancyStack(Stack):\n\"stack with added ability to inspect inferior stack items\"\ndef peek(self, n):\n\"peek(0) returns top; peek(-1) returns item below that; etc.\"\nsize = len(self.items)\nassert 0 <= n < size\n# test precondition\nreturn self.items[size-1-n]\n\nSlide 26\n(c)2001, 2002 Guido van Rossum\nSubclassing (2)\nclass LimitedStack(FancyStack):\n\"fancy stack with limit on stack size\"\ndef __init__(self, limit):\nself.limit = limit\nFancyStack.__init__(self)\n# base class\nconstructor\ndef push(self, x):\nassert len(self.items) < self.limit\nFancyStack.push(self, x)\n# \"super\" method call\n\nSlide 27\n(c)2001, 2002 Guido van Rossum\nClass / Instance Variables\nclass Connection:\nverbose = 0\n# class variable\ndef __init__(self, host):\nself.host = host\n# instance variable\ndef debug(self, v):\nself.verbose = v\n# make instance variable!\ndef connect(self):\nif self.verbose:\n# class or instance variable?\nprint \"connecting to\", self.host\n\nSlide 28\n(c)2001, 2002 Guido van Rossum\nInstance Variable Rules\n- On use via instance (self.x), search order:\n- (1) instance, (2) class, (3) base classes\n- this also works for method lookup\n- On assignment via instance (self.x = ...):\n- always makes an instance variable\n- Class variables \"default\" for instance\nvariables\n- But...!\n- mutable class variable: one copy shared by all\n- mutable instance variable: each instance its own\n\nSlide 29\n(c)2001, 2002 Guido van Rossum\nModules\n- Collection of stuff in foo.py file\n- functions, classes, variables\n- Importing modules:\n- import re; print re.match(\"[a-z]+\", s)\n- from re import match; print match(\"[a-z]+\", s)\n- Import with rename:\n- import re as regex\n- from re import match as m\n- Before Python 2.0:\n- import re; regex = re; del re\n\nSlide 30\n(c)2001, 2002 Guido van Rossum\nPackages\n- Collection of modules in directory\n- Must have __init__.py file\n- May contain subpackages\n- Import syntax:\n- from P.Q.M import foo; print foo()\n- from P.Q import M; print M.foo()\n- import P.Q.M; print P.Q.M.foo()\n- import P.Q.M as M; print M.foo()\n# new\n\nSlide 31\n(c)2001, 2002 Guido van Rossum\nCatching Exceptions\ndef foo(x):\nreturn 1/x\ndef bar(x):\ntry:\nprint foo(x)\nexcept ZeroDivisionError, message:\nprint \"Can't divide by zero:\", message\nbar(0)\n\nSlide 32\n(c)2001, 2002 Guido van Rossum\nTry-finally: Cleanup\nf = open(file)\ntry:\nprocess_file(f)\nfinally:\nf.close()\n# always executed\nprint \"OK\" # executed on success only\n\nSlide 33\n(c)2001, 2002 Guido van Rossum\nRaising Exceptions\n- raise IndexError\n- raise IndexError(\"k out of range\")\n- raise IndexError, \"k out of range\"\n- try:\nsomething\nexcept:\n# catch everything\nprint \"Oops\"\nraise\n# reraise\n\nSlide 34\n(c)2001, 2002 Guido van Rossum\nMore on Exceptions\n-\nUser-defined exceptions\n- subclass Exception or any other standard exception\n-\nOld Python: exceptions can be strings\n- WATCH OUT: compared by object identity, not ==\n-\nLast caught exception info:\n- sys.exc_info() == (exc_type, exc_value, exc_traceback)\n-\nLast uncaught exception (traceback printed):\n- sys.last_type, sys.last_value, sys.last_traceback\n-\nPrinting exceptions: traceback module\n\nSlide 35\n(c)2001, 2002 Guido van Rossum\nFile Objects\n-\nf = open(filename[, mode[, buffersize])\n- mode can be \"r\", \"w\", \"a\" (like C stdio); default \"r\"\n- append \"b\" for text translation mode\n- append \"+\" for read/write open\n- buffersize: 0=unbuffered; 1=line-buffered; buffered\n-\nmethods:\n- read([nbytes]), readline(), readlines()\n- write(string), writelines(list)\n- seek(pos[, how]), tell()\n- flush(), close()\n- fileno()\n\nSlide 36\n(c)2001, 2002 Guido van Rossum\nStandard Library\n- Core:\n- os, sys, string, getopt, StringIO, struct, pickle,\n...\n- Regular expressions:\n- re module; Perl-5 style patterns and matching\nrules\n- Internet:\n- socket, rfc822, httplib, htmllib, ftplib, smtplib, ...\n- Miscellaneous:\n- pdb (debugger), profile+pstats\n- Tkinter (Tcl/Tk interface), audio, *dbm, ...\n\nSlide 37\n(c)2001, 2002 Guido van Rossum\nPython 2.0: What's New\n- Augmented assignment: x += y\n- List comprehensions:\n[s.strip() for s in f.readlines()]\n- Extended print: print >>sys.stderr,\n\"Hello!\"\n- Extended import: import foo as bar\n- Unicode strings: u\"\\u1234\"\n- New re implementation (faster, Unicode)\n- Collection of cyclic garbage\n- XML, distutils\n\nSlide 38\n(c)2001, 2002 Guido van Rossum\nPython 2.1: What's New\n- From __future__ import nested_scopes\n- def make_adder(n):\ndef adder(x): return x+n\nreturn adder\n- add2 = make_adder(2)\n- add2(10) == 12\n- Rich comparisons\n- Overload <, <=, ==, !=, >=, > separately\n- Warnings framework\n- Prepare for the future\n\nSlide 39\n(c)2001, 2002 Guido van Rossum\nPython 2.2: What's New\n- Iterators and Generators\n- from __future__ import generators\ndef inorder(tree):\nif tree:\nfor x in inorder(tree.left): yield x\nyield tree.label\nfor x in inorder(tree.right): yield x\n- Type/class unification\n- class mydict(dict): ...\n- Fix division operator so 1/2 == 0.5; 1//2\n== 0\n- Requires __future__ statement in Python 2.x\n- Change will be permanent in Python 3.0\n\nSlide 40\n(c)2001, 2002 Guido van Rossum\nURLs\n- http://www.python.org\n- official site\n- http://starship.python.net\n- Community\n- http://www.python.org/psa/bookstore/\n- (alias for http://www.amk.ca/bookstore/)\n- Python Bookstore\n\nSlide 41\n(c)2001, 2002 Guido van Rossum\nFurther Reading\n-\nLearning Python: Lutz, Ascher (O'Reilly '98)\n-\nPython Essential Reference: Beazley (New Riders '99)\n-\nProgramming Python, 2nd Ed.: Lutz (O'Reilly '01)\n-\nCore Python Programming: Chun (Prentice-Hall '00)\n-\nThe Quick Python Book: Harms, McDonald (Manning '99)\n-\nThe Standard Python Library: Lundh (O'Reilly '01)\n-\nPython and Tkinter Programming: Grayson (Manning '00)\n-\nPython Programming on Win32:\nHammond, Robinson (O'Reilly '00)\n-\nLearn to Program Using Python: Gauld (Addison-W. '00)\n-\nAnd many more titles...\n\nTIME FOR QUESTIONS"
    },
    {
      "category": "Resource",
      "title": "l2_ipaqlinux_hic.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/7eb8f232593448d4e95938c2cf930333_l2_ipaqlinux_hic.pdf",
      "content": "hp\nLinux on iPAQ\nJamey Hicks\nCambridge Research Laboratory, HP Labs\nFebruary 9, 2004\n\nFebruary 2004\nIPAQ Linux\nslide 2\nOutline\n- Why Linux?\n- iPAQ Linux\n- Handheld Linux Products\n- Developing for ARM Linux\n- CRL Mercury BackPAQ\n\nFebruary 2004\nIPAQ Linux\nslide 3\nWhy Linux?\n- Full source/binary availability\n- Freedom to change any part of the\nsystem\n- Advanced networking\n- IPv6, MIPv6, IPSEC\n- Advanced security\n- ssh, sshd\n- Complete GUI flexibility\n- GTK and Qt\n- Microwindows, picogui, ...\n- Java 2 SE and ME\nit's a full-fledged computer\n\nFebruary 2004\nIPAQ Linux\nslide 4\nWhy Linux?\n- More stable operating system\n- Protected process environment\n- User/kernel separation\n- Yields uptimes of 6-9 months when we last surveyed\n- Same software as laptop or server\n- Same kernel\n- Supports all protocols, filesystems\n- Subset of IO devices, though\n- Same API's\n- Not subset/superset\n- Same tools and utilities, python, perl, ruby, ...\n\nFebruary 2004\nIPAQ Linux\nslide 5\niPAQ Linux Constraints\n- Adjust for storage space (32MB)\n- This can be a problem\n- Can be helped by CF storage cards\n- Adjust for screen size (320x240 12 to 16 bit color)\n- GUI's need to be refactored\n- Adjust for lack of keyboard\n- Input methods: stylus, xkbd, xstroke, serial cable, remote\ninput via X, ssh\n\nFebruary 2004\nIPAQ Linux\nslide 6\nLinux on Linux on iPAQ\n- Bochs x86 emulator running on iPAQ\n-\n\nFebruary 2004\nIPAQ Linux\nslide 7\nLinux Capabilities\n- Linux 2.4.19 and 2.6.1\n- Networking\n- WLAN, WWAN\n- IPSEC and other VPN\n- IPv6, Mobile IP\n- Filesystems\n- JFFS2: compressed journaling flash filesystem\n- EXT3 on conventional drives\nNot just a zippy PDA, but a pocket workstation\n\nFebruary 2004\nIPAQ Linux\nslide 8\nHardware Support (February, 2004)\n- iPAQ H31xx, H36xx, H37xx, H38xx, H39xx, H5xxx\n- H22xx, H19[34]x in progress\n- Dell Axim\n- Toshiba e74x\n- Siemens Simpad\n- Jornada 560/720\n- Keyboards: Stowaway, MicroKeyboard, etc.\n- CF, single/dual PCMCIA sleeves\n- Various ethernet CF/PCMCIA cards\n- 802.11b interfaces, BlueTooth\n- CF, Microdrive, IDE interface to larger drives\n- Barcode scanner, various serial GPS's, etc.\n\nFebruary 2004\nIPAQ Linux\nslide 9\niPAQ Linux Distributions\n\nFebruary 2004\nIPAQ Linux\nslide 10\nHandhelds.org Linux Distributions\n- Handhelds.org project started March 2000\n- Familiar Linux (familiar.handhelds.org)\n- jffs2 root, python scripting, ipkg, X & window manager\n- Opie distribution\n- Open source version of Qtopia (www.trolltech.com)\n- Intimate Linux (intimate.handhelds.org)\n- ARM Debian with disk or net, boot via WinCE or Familiar\n\nFebruary 2004\nIPAQ Linux\nslide 11\nLinux on the iPAQ: Familiar distribution\n- JFFS2 root\n- X Window System\n- Anti-aliased fonts\n- Landscape or Portrait mode\n- Full networking\n- sshd\n- Distributed as ipkgs\nGPE\nOPIE\n\nFebruary 2004\nIPAQ Linux\nslide 12\nGPE\n- X window system\n- with render extension\n- with rotate and resize\n- choose landscape/portrait on\nthe fly\n- GTK 2.2 toolkit\n- Full screen handwriting input\n- sqlite for pim data\n- Available in Familiar\ndistribution\n- http://gpe.handhelds.org\n\nFebruary 2004\nIPAQ Linux\nslide 13\nOPIE\n- QT/Embedded\n- full open source PIM suite\n- derived from Qtopia\n- without X\n- (soon with X too...)\n- distributed as ipkg's\n- PDA-oriented\n- compatible with Sharp Zaurus\n- http://opie.handhelds.org/cgi-bin/moin.cgi/\n\nFebruary 2004\nIPAQ Linux\nslide 14\nDebian (Intimate) Linux\n- Full blown linux on the Compaq iPAQ!\n- Installed on CF, PCMCIA, IDE or NFS root\n- Supports native development\n\nFebruary 2004\nIPAQ Linux\nslide 15\nIPAQ Linux Community\n- 2700 mailing list members\n- 1300 guest developers\n- 209 registered developers\n- 76 projects hosted on\nhandhelds.org\n- 1900 software packages listed\non ipkgfind.handhelds.org\n- native development cluster\n- multiple distributions\n\nFebruary 2004\nIPAQ Linux\nslide 16\niPAQ Linux in Products\n- Fluke Networks WaveRunner\n- Enterprise network tester\n- Commercial product\n- H3800 iPAQ\n- Linux-based\n- Single PCMCIA sleeve\n- Fluke 802.11b card\n-http://www.flukenetworks.com/us/\n- $4000\n/default.htm\n\nFebruary 2004\nIPAQ Linux\nslide 17\nHandheld Linux Products\n- Qtopia from trolltech.com\n- commercial Qt based PDA software\n- Hancom Mobile Office\n- Lycoris Pocket PC Edition\n- Based on Opie\n- Demonstrated January 2004, available soon for iPAQ and\nZaurus\n- Many software packages available for Zaurus\n\nFebruary 2004\nIPAQ Linux\nslide 18\nLinux cellphones\n- Motorola A760 cellphone (Asia)\n- E28's E2800 (China)\n- Samsung linux-based cellphone (China)\n\nFebruary 2004\nIPAQ Linux\nslide 19\nCRL Mercury Project\n\nFebruary 2004\nIPAQ Linux\nslide 20\nMercury BackPAQ\n- BackPAQ: prototyping platform\n- IPAQ extension pack\n- VGA CMOS camera\n- 32MB Flash\n- Xilinx Virtex 200E FPGA\n- external expansion connector\n- 2 PC Card slots\n- 2 axis and 3 axis accelerometers\n- audio codec and headset connector\n- WLAN and WWAN via PC Cards\n- Developed by Compaq Research / HP Labs for MIT Oxygen\nproject\n\nFebruary 2004\nIPAQ Linux\nslide 21\niPAQ H3600/BackPAQ\n\nFebruary 2004\nIPAQ Linux\nslide 22\niPAQ H3600/BackPAQ\n\nFebruary 2004\nIPAQ Linux\nslide 23\nDeveloping for iPAQ Linux\n\nFebruary 2004\nIPAQ Linux\nslide 24\nCompiling for ARM Linux\n- Cross compilation\n- E.g., x86 linux host -> ARM linux target\n- Faster than native compilation\n- Often requires Makefile modification\n- Cross-toolchain\n- http://www.handhelds.org/geeklog/index.php\n- Unpack in root directory\n- Add /usr/local/arm/3.2.3/bin to PATH\n- Prepend \"arm-linux-\" to gcc, g++, ld, strip, nm, ranlib, ar\n- Generally: make CC=arm-linux-gcc all\n- To watch out for:\n- Segv from ld usually indicates attempt to link x86 object file into arm\nbinary\n- \"Capture\" of headers from /usr/include and libs from /usr/lib\n\nFebruary 2004\nIPAQ Linux\nslide 25\nFull Native Development and Compilation\n- No Makefile issues, but slower\n- Use Debian on iPAQ, netwinder, skiff, shark\n- iPAQ/skiff Cluster\n- 8 iPAQ's (40Gig local disks), 2 iPAQs (9 Gig local disks), 6 skiffs, 2\nsharks\n- iPAQ 1-10, skiff[1-6].handhelds.org, reefshark, tigershark\n- rlogin, telnet, ssh -l guest, no password\n- Use ftp, scp, etc. from the machines to transfer files to them\n- Create a directory in /home2/guest/<emailaddress>\n- Or get your own accounts\n- Maintained by Nick Duffek, George France\n\nFebruary 2004\nIPAQ Linux\nslide 26\niPKG Software Packages\n- iPKG (Carl Worth)\n- Structure derived from Debian packages\n- Provides apt-get style network installation\n- Small ipkg implementation\n- http://www.handhelds.org/z/wiki/iPKG\n- Usage\n- ipkg update\ndownloads list of avail packages\n- ipkg install foo\n(re)installs package foo, its deps\n- ipkg upgrade foo upgrades to latest version of foo\n- ipkg remove foo\nremoves foo\n- Ipkg info foo\ndescribes foo package\n\nFebruary 2004\nIPAQ Linux\nslide 27\niPKG Metadata (in control.tar.gz)\n- control file (required)\n- Package: dtmfdial\n- Version: 0.2-rjr2\n- Depends: libc6, python\n- Architecture: arm\n- Maintainer: Ross Reedstrom\n- MD5Sum: 3636114a4e31c690933a99ebc3422525\n- Size: 6303\n- Filename: dtmfdial_0.2-rjr2_arm.ipk\n- Description: A command line DTMF tone dialer, with defaults tweaked for use on the\nIpaq, and a python-gtk graphical interface\n- preinst, postinst, prerm, postrm\n- Scripts to run before/after install/removal\n\nFebruary 2004\nIPAQ Linux\nslide 28\niPKG Feeds\n- A feed is a collection of ipkgs\n- Packages file\n- summarizes control files for latest version of each ipkg\n- Created by \"ipkg-make-index . > Packages\"\n- Feeds accessible via\n- Local filesystem\n- HTTP\n- FTP\n- NFS\n\nFebruary 2004\nIPAQ Linux\nslide 29\nReferences\n- Handhelds.org\n- http://www.handhelds.org/geeklog/index.php\n- http://www.handhelds.org/handhelds-faq/handhelds-faq.html\n- Familiar Linux Distribution\n- http://familiar.handhelds.org/\n\nFebruary 2004\nIPAQ Linux\nslide 30\niPAQ Linux Resources\n- Handhelds.org website (www.handhelds.org)\n- Handhelds wiki (www.handhelds.org/z/wiki)\n- Includes search interface\n- World writable - please use and contribute\n- Chat (IRC on irc.openprojects.net)\n- #handhelds.org\nmostly ipaq linux discussion\n- #familiar\nFamiliar distribution discussion\n- #ipaq\nlightly populated, installation support\n- #opie\nOpie developers\n- Email: (www.handhelds.org/email_lists.html)\n- ipaq@handhelds.org, linux@handhelds.org,\nfamiliar@handhelds.org, bootldr@handhelds.org\n\nFebruary 2004\nIPAQ Linux\nslide 31"
    },
    {
      "category": "Resource",
      "title": "l2_python_intro.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/16af5502ace4e084c0e06f2757875eb5_l2_python_intro.pdf",
      "content": "Pervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\niPaq Intro, Python,\nand Connectivity\nFeb 13, 2006\nLarry Rudolph\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nAdministration\n- iPaq's and Mobile Phones very similar\n- both use python, bluetooth, internet\n- This week:\n- Ipaq comments, Python, Network\n- Problem set, due in one week\n- On your own, watch:\n- Jamey Hicks on \"Linux on iPaq\"\n(video)\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nSetting up iPaq\n- Why Linux?\n- Why not Linux on newer models?\n- Things particular to these iPaqs\n- batteries\n- no solid connections (check cables\noften)\n- when in doubt, reinstall\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nConnecting to iPaq\n- Serial cable (not usb)\n- after boot, can just login via some\nterminal program (minicom/hyperterm)\n- ssh over the network\n- setup wireless connection to network\n- 'ssh -l root xxx.xxx.xx.xxx'\n- need ip address (do not need dns\nname)\n- make sure you are connecting to\nYOUR ipaq. Easy to mistype ip\naddress.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nInstalling software\n- /etc/ipkg.conf points to \"feeds\"\n- we will maintain our own feed\n- ipkg picks first matching file, not last while\nsearching list of feeds\n- Copy files to ipaq via\n- secure copy\n- \"scp localFile.py root@ipaqip:/usr/bin/\"\n- serial cable\n- xmodem/ymodem, sx on linux\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nIs your ipaq, your\nipaq?\n- Anonymous vs Personal handheld\n- Telephone example\n- Landline telephones are anonymous\n- Cell/Mobile phones are personal\n- Tradeoffs\n- private state\n- can be lost or stolen; should be protected\n- setup overhead on user\n- daily underhead on user: setup once &\nforget\n- less dependent on connectivity\n- public/private keys easy to use once setup\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nConnectivity\n- Ipaq: 802.11 (WiFi) or Bluetooth\n- Mobile: GPRS (edge) or Bluetooth\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nGo to Python\nTutorial Slides\nLet's go through the slides from the Zope\ncorporation on an introduction to Python by\nthe inventor of python, Guido van Rossum\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nServer Code\nimport sys, socket\nif len(sys.argv) < 2:\nprint \"usage: socketserver <port>\"\nsys.exit(2)\n# create the server socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nport = int(sys.argv[1])\n# allow the socket to be re-used immediately after a close\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\ns.bind( (\"0.0.0.0\", port) )\ns.listen(5) # start the server socket\n(client, address) = s.accept()\nprint \"accepted connection from %s:%d\" % (address[0], address[1])\nwhile True:\ndata = client.recv(1024)\nif len(data) == 0:\nprint \"connection with %s closed.\" % address[0]\nbreak\nsys.stdout.write(data)\nclient.close()\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nClient Code\nimport sys\nimport socket\nif len(sys.argv) < 3:\nprint \"usage: socketclient <address> <port>\"\nsys.exit(2)\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect( (sys.argv[1], int(sys.argv[2]) ) )\nprint \"connected. type stuff.\"\nwhile True:\ndata = sys.stdin.readline()\nif len(data) == 0:\nprint \"closing connection with server\"\nbreak\ns.send(data)\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nOnline Tutorials\n- Tutorials\n-\nhttp://www.python.org/doc/tut/tut.html\n-\nhttp://diveintopython.org/\n-\nhttp://www.intelinfo.com/newly_researched_free_tra\nining/Python.html\n-\nuse google or go to python.org\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nDiscussion about\nnetwork infrastructure\n- Initialization\n- Network\n- Static IP, DNS server -- why IPv6 and\nwhy not\n- DHCP: get ip and dns server -- vast\nimprovement\n- Servers\n- Feed, chat, device, anything new\n- too many servers & must always be up\n- What will naive user do?\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLet's design it right\n- What do we want?\n- Everything should just work without\nsetup\n- Observation\n- most interaction is local\n- remote interaction is rare\n- overhead for rare cases is ok\n- How to setup/find a server without a fixed\nname or ip address?\n- Interactive class discussion"
    },
    {
      "category": "Resource",
      "title": "r2_bluetooth_tut.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/174043c6531c12d2db27fb724842c42f_r2_bluetooth_tut.pdf",
      "content": "Pervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nBluetooth Tutorial\nLarry Rudolph\n\nfrom bluetooth import *target_name = \"My\nPhone\"target_address = Nonenearby_devices =\ndiscover_devices()for address in nearby_devices:\nif target_name == lookup_name( address ):\ntarget_address = address breakif\ntarget_address is not None: print \"found target\nbluetooth device with address \",\ntarget_addresselse: print \"could not find target\nbluetooth device nearby\"\n\nServer (rfcomm/L2CAP)\nport = 1 #or\n0x1001server_sock=BluetoothSocket( RFCOMM)\n# or\nL2CAPserver_sock.bind((\"\",port))server_sock.liste\nn(1)client_sock, client_info =\nserver_sock.accept()print \"Accepted connection\nfrom \", client_infodata =\nclient_sock.recv(1024)print \"received [%s]\" %\ndataclient_sock.close()server_sock.close()\n\nService Discovery\nport = get_available_port( RFCOMM\n)server_sock=BluetoothSocket( RFCOMM\n)server_sock.bind((\"\",port))server_sock.listen(1)ad\nvertise_service( server_sock, \"Bluetooth Serial\nPort\", service_classes = [\nSERIAL_PORT_CLASS ], profiles = [\nSERIAL_PORT_PROFILE ] )client_sock,\nclient_info = server_sock.accept()print \"Accepted\nconnection from \", client_infodata =\nclient_sock.recv(1024)\n\nimport sysfrom bluetooth import\n*service_matches = find_service( name =\n\"Bluetooth Serial Port\", uuid =\nSERIAL_PORT_CLASS )if len(service_matches)\n== 0: print \"couldn't find the service!\":\nsys.exit(0)first_match = service_matches[0]port =\nfirst_match[\"port\"]name = first_match[\"name\"]host\n= first_match[\"host\"]print \"connecting to \",\nhostsock=BluetoothSocket( RFCOMM\n)sock.connect((host, port))sock.send(\"hello!!\")\n\nDynamically allocate\nport\nfrom bluetooth import *socket =\nBluetoothSocket( RFCOMM )while True:\nfree_port = get_available_port( RFCOMM )\ntry: socket.bind( ( \"\", free_port ) ) break\nexcept BluetoothError: print \"couldn't bind\nto \", free_port# listen, accept, and the rest of\nthe program...\n\nAsynchronous\nfrom bluetooth import *from select import *class\nMyDiscoverer(DeviceDiscoverer): def\npre_inquiry(self): self.done = False def\ndevice_discovered(self, address, device_class,\nname): print \"%s - %s\" % (address, name)\ndef inquiry_complete(self): self.done = Trued =\nMyDiscoverer()d.find_devices(lookup_names =\nTrue)while True: can_read, can_write, has_exc =\nselect( [d], [ ], [ ] ) if d in can_read:\nd.process_event() if d.done: break\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nIf confused ...\n- Can always go look at source ...\n- on my linux machine,\n- /usr/lib/python2.3/site-\npackages/bluetooth.py\n- look at class DeviceDiscoverer for the\nskeleton code."
    },
    {
      "category": "Resource",
      "title": "l3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/f7328bce992bdc11b38e0dc0000093b0_l3.pdf",
      "content": "Sockets, TCP/IP and\nBluetooth\nLecture 3\nFeb 15, 2006\nLarry Rudolph\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nA little history\n- Simple case: two devices, one cable (2\nwires)\n- e.g. first telephone\n- one device puts pulses on wire, the\nother senses them. Went from analog\n=> digital\n- Generalize: multiple devices, one wire\n- why do we want this?\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nBus\n- signal broadcast (all devices \"sense\" it)\n- first broadcast an address\n- device with that address receives data\n- and ack's it\n- Who knows the device's address?\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nEthernet\n- Ethernet is a type of bus -- easy to add\ndevices\n- Every ethernet device has a unique device\naddress\n- how do you know it is unique?\n- a company sells you a unique address\n- this is known as a MAC\n- all devices listen for their mac on bus\n- What if devices is not on the bus?\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nGateway or Bridge\n- Special device that transfers packets\nfrom ethernet to the rest of the world\n- How does it know where to send it?\n- Another address\n- IP address aaa.bbb.ccc.ddd\n- 4 fields of 8 bits (256 values) per field\n- last field is local network\n- Where is that address specified?\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nLayers\n- Need different layers\n- lowest (bottom) for physical transport\n- higher layers as get more removed\n- Which picture makes sense? (first bits on\nleft)\n- (top Header (bot H B T) top Trailer )\n- (bot Header (top H B T) bot Trailer )\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nLots of Layers\n- seven official layers to ISO, but mostly three:\n- DNS name (domain name system)\n- blah.com blah.edu blah.sg\nstuff at the\nend\n- IP address\n- MAC address\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nWhat happens at\nend?\n- message arrives at destination machine\n- Operating system deals with it -- why?\n- places msg buffer in system memory\n- How does OS know the associated app?\n- what are the choices?\n- must specify some type of name\n- done via agreement\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nPorts\n- First allocate socket\n- Message contains a port number\n- Sending message:\n- must specify port in destination\naddress\n- Receiving message\n- application tells OS its associated\nport\n- the Bind command\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nImage removed due to copyright restrictions.\n\nProtocols\n- Lots of different protocols -- common two:\n- UDP (unreliable) & TCP (reliable)\n- Why different protocols?\n- End-to-end argument\n- Don't put stuff in lower layers that may not\nbe needed by the end-points.\n- What is an end-point?\n- Specify in socket allocation, AF_INET,\nSOCK_STREAM\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nSetting things up\n- Client & Server agree on Port number\n- Server starts up first\n- specifies protocol, IP, port\n- activates the socket\n- waits for a client to connect\n- Client starts up second\n- specifies protocol,\n- Connects to IP, Port\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nServer Code\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind( (\"0.0.0.0\", port) )\ns.listen(5)\n(client, address) = s.accept()\nwhile True:\ndata = client.recv(1024)\nif len(data) == 0: break\nclient.close()\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nClient Code\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect( (sys.argv[1], int(sys.argv[2]) ) )\nwhile True:\ns.send(question)\nans = s.recv(max_size)\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nBluetooth\n- Nearly the same\nfrom bluetooth import *\nport = 1\nserver_sock = BluetoothSocket( RFCOMM )\nserver_sock.bind( \"\", port)\nserver_sock.listen(1)\nclient_sock, client_info = server_sock.accept()\ndata = client_sock.recv(1024)\nclient_sock.close(): server_sock.close()\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph"
    },
    {
      "category": "Resource",
      "title": "l4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/ec6e5b08b76c88c9d91d25673dde0433_l4.pdf",
      "content": "Bluetooth\nLarry Rudolph\nFeb 16, 2006\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nWhat is bluetooth?\n- Wireless, short-range communication\n- about 10 meters\n- Replacement for USB cables\n- Low power, low cost\n- Automatically hook together mobile devices\n- The term covers lots of things from HW to SW\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nBarbie Bluetooth\nFound this on the gizmodo site:\n\"Some die-hard Trekkie would probably love\nto get his hands on this. A guy from New\nZealand modeled this Barbie doll to a) look\nlike a Star Trek crew member, and b) act as\na Bluetooth handsfree headset. Yes, that's\nright, it's embedded with a Bluetooth\nheadset. According to Ms. Barbie herself:\"\nHeadset\nYou can use me to make and receive calls with Bluetooth\n1.1 compatible mobile phones. I have no wires. I work\nwithin a 10 meter radius of your phone so you can leave\nyour mobile in your pocket or a bag. You turn me on/off,\nreceive calls, make calls and pair me with other devices by\npressing in the small of my back.\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nImage removed due to copyright restrictions\n\nOur focus\n- What we don't care about\n- bluetooth headsets, keyboards, ovens\n- how to blast advertisements at users\n- What we do care about\n- how to send data between bluetooth\ndevices using python code\n- Give a foundation to let you discover\nmore\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nProgramming\nConcepts\n- Choose a communication partner\n- Desired type of communication\n- Connection\n- initiate outgoing or accept incoming\n- Send & Receive data\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nChoosing Partner\n- Every device has a bluetooth address\n- unlike TCP, same address at all layers\n- 48-bit mac address (unique)\n- could be changed by software\n- Devices have bluetooth name\n- User supplied, not unique\n- \"My Phone\" is a common name\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nCommon protocols\n- RFCOMM\n- com port (rs232) replacement, streaming\n- only 30 ports available\n- reliable\n- L2CAP\n- connection oriented, customizable\nreliability\n- reserved ports: 1 -- 4095 (odd numbered)\n- unreserved: 4097 -- 32765 (odd\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nnumbered)\n\nService ID\n- Every service has a 128 bit (supposedly)\nunique identifier -- UUID\n- some reserved, developers registered\n- Service class ID\n- Service Description -- human readable\n- Protocol Descriptor -- which prot. used\n- Profile Descriptor -- which ones, e.g.\nmouse\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nBluetooth Freq\nHopping\n- Designed for BT device rich\nenvironments\n- Lots of radio interference\n- Divide spectrum into 72 slices\n- Frequency hop between slice\n- pseudo-random hopping\n- hard to track without knowing seed\n- Why pairing / discovery takes so long\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nHCI Tools\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph"
    },
    {
      "category": "Resource",
      "title": "l5a.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/9b89ed7b98bc66fe0ab52e681e933094_l5a.pdf",
      "content": "Location, Location,\nLocation\nLarry Rudolph\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nOutline\n- Positioning Technology\n- GPS and others\n- Location Specifiers\n- Privacy Issues\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nUniversal Location\n- On earth, we need three piece of\ninformation:\n- latitude, longitude, & altitude\n- there are other possibilities\n- Global Positioning Systems can give us that\ninformation\n- Can then use mapping to do something\nuseful with that information\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nGlobal Positioning\nSystems\n- 1978 US Department of Defense begins project\n- 1984 Crash of Korean Flight due to poor\nnavigational equipment ==> gps for civilian use\n- 1985 Complete system fully operational\n- 24 satellites (11,000 mile orbit) & $12 billion\n- 2000, selective availability turned off\n- 3 to 15 meter accuracy for everyone\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nHow it works\n- Receiver measures travel time of random code\nsent from satellite (about 0.1 sec)\n- compute distance, call it X\n- Receiver's position can be anywhere on a\nsphere of radius X with satellite at center\n- Given four satellite readings, can figure out\nposition in 3 dimensions\n- Let's look at some government slides\n- mms.nps.gov/gis/gps/How_GPS_Works.ppt\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nGPS\n- Python interface to a bluetooth gps\n- Connect to the GPS normally:\n- from socket import *\n- sock = socket(AF_BT, SOCK_STREAM)\n- Read input from '$' up to a '\\r' character\nusing the sock.recv(1) command\n(reading one byte at a time).\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nGPS (cont)\n-buf =sock.recv(1)\n-while buf!= '$'\n:buf = sock.recv(1)\n-while buf[-1]!='\\r':buf+= sock.recv(1)\n-if buf[0:6] == \"$GPGGA\":\n-(GPGGA,utcTime,lat,ns,lon,ew,postfix,sats,hdop,alt,altu\nnits,sep,sepunits,age,sid)= buf.split(\",\")\n-latitude =float(lat)\n-longitude = float(lon)\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nImage removed due to copyright restrictions.\nPlease see:\nhttp://home.pacific.net.au/~gnb/gps/mnea.html\n_____________________________________\n\nImage removed due to copyright restrictions.\nPlease see:\nhttp://home.pacific.net.au/~gnb/gps/mnea.html\n_____________________________________\n\nGSM Cellular location\n- GSM mobile telephone network: cells\n- towers fixed, signal available indoors\n- unaffected by \"urban canyon effect\"\n- CellID: detect base transceiver stations\n(BTS)\n- phone is registered with a BTS\n- usually, but not always, the closest one\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nGSM Cellular\nLocation\n- Cell size depends on\nterrain & number of\nusers\n- Error: about 500 m\n(urban) to 15km (rural)\n- Base stations have 3\nsectors\nantennas, 120 degree\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nEnhanced Method\n- E-OTD: Enhanced observed time difference\n- Time from base station to phone\n- Time from base station to fixed location\n- Ratio gives better estimation of position\n- Also use triangulation (from several bases)\n- Both yield order of magnitude improvement\n- and lots of research for even better results\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\n- It is universal\n- But is it what we want?\n- Human-centric versions of location:\n- name of place\n- map of place\nWhat good is GPS?\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nOther Data Formats\n- Geographic Information System (GIS)\n- developed set of XML descriptions\n- static (river): Geo Markup Language\n- dynamic (cars, events): Point-of-\ninterest\n- NVML: Navigation mark-up language\n- SKiCAL: iCalendar VEVENT used to\ndescribe event information\n- event meta-info: location\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nSpatial Databases\n- Set of functions to\n- quickly search, query, analyze spacial\ninfo\n- how objects spatially relate to each\nother\n- many geometry types and typical queries\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nPeople\ndon't\nspeak GPS\n- Different people\nhave different\nviews of the world.\n\nPlaces -- big and\nsmall\n- People refer to location as places\n- countries, cities, towns, streets, buildings\n- rooms, spaces within buildings\n- relation to other places,\n- e.g. across from Starbucks\n- GPS is too precise and may require\naccurate map or building plan\n- Jim might be at 42.3325N, -71.11861E but\nis he in the shower at the moment?\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nLocation Tracking:\nGood, Bad, or Ugly?\n- Not too many people seem to be\nconcerned about location-based services\ntracking them.\n- \"You have no privacy, get over it\"\n--- Scott McNealy, CEO Sun\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nCan we study this?\n- Before investing heavily in location-\nbased services, we should find out if\npeople will use them.\n- The evidence is still mixed\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nService\nDescription\nService A: Ringing profiles\nin private settings\nService B: Ringing profiles\nin public settings\nService C: Lunch service\nService D: Localization of\npredefined friends\nThe mobile phone 'knows' when the user\nis in a meeting or in class\nThe mobile phone 'knows' when the user\nenters a movie theater or a restaurant\nA suggestion for lunch is pushed by the\nretailer to the mobile phone when the\nuser is around a restaurant or fast food place\nThe mobile phone can locate predefined\nfriends and alert the user when they are\nwithin a certain distance\nLocation-Based Services.\nFigure by MIT OCW.\n\nService\nRated\nusefulness\nRated\nIntrusiveness\nAverage# of\ndaily use\nService A: Private\nringing profiles\nService B: Public\nringing profiles\nService C: Lunch\nservice\nService D:\nLocalization of\npredefined friends\n3.75\n2.6\n2.2\n3.75\n2.1\n2.2\n3.7\n3.25\n1.5\n0.4\n0.3\n1.3\n1 = not useful at all, 5 = very useful\n1 = not intrusive, 5 = very intrusive\nAVERAGE RATING OF THE SERVICES\nFigure by MIT OCW.\n\nFigure by MIT OCW.\nA: Private ringing\nprofiles\nB: Public ringing\nprofiles\nC: Lunch service\nD: Class slides\nE: Location tracking\nF: Activity tracking\nServices\nPassive Context-\nAwareness\nActive Context-\nAwareness\nPersonalization\nDifferent ringing profiles\nthat are set manually\nDifferent ringing profiles\nthat are set manually\nManual search for\nappropriate lunch place\nManual search to see\nif class slides are\navailable online\nManual location\ntracking of predefined\nfriends\nDisplay of potential call-\nreceiver's social situation\n(e.g. meeting, home, out)\nThe phone prompts the\nuser to adjust the profile\nwhen sensing it is in\na movie theater or at a\nrestaurant\nThe phone prompts the\nuser to adjust the profile\nwhen sensing it is in\na meeting or class\nSingle alert around noon\nfor lunch place according\nto user's preferences\nIf signed up, the phone\nalerts user of available\nslides for class\nLocations tracking of\nfriends and setting to\nalert when they are within\na certain range\nIn a new context, the\nphone prompts the user\nto display the user's\nsituation to possible\ncallers\nThe phone automatically\nchanges profile when sen-\nsing the user is at a meeting\nor in class\nThe phone automatically\nchanges profile when sen-\nsing the user is at a movie\ntheater or at a restaurant\nAlerts the user when\npassing by a lunch place\nor relevance and suggests\nplaces at noon.\nAutomatic alert every\ntime the teacher updates\nclass slide website\nLocation detection of\nfriends that alerts when\nthey are within 300 feet\nof user\nAutomatic switch to\ndisplay of social\nsituation when entering\na new context\nThe three levels of services presented to participants.\n\nDoes Age Matter?\n- Not much in this sample of 23\nparticipants.\n- surprising result\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nN = 23\nN\nAverage Age\nAverage Mobile Phone\nOwnership\nAverage User Level\n( a scale from 1-6)\nPersonalization\n23.7\n22.9\n2.2 Years\n2.6 Years\n2.7 Years\n3.1\n3.8\n3.4\nPassive Context-\nAwareness\nActive Context-\nAwareness\nGeneral participant demographics.\nFigure by MIT OCW.\n\nTheir Conclusions\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nImage removed due to copyright restrictions. Please see: http://home.pacific.net.au/~gnb/gps/."
    },
    {
      "category": "Resource",
      "title": "l5b.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/bc951518b56c054b5aeec3ff650ec92b_l5b.pdf",
      "content": "Introduction\nto\nNAVSTAR GPS\nIntroduction\nto\nNAVSTAR GPS\nCharlie Leonard, 1999\n(revised 2001, 2002)\n\nThe History of GPS\n3⁄4 Feasibility studies begun in 1960's.\n3⁄4 Pentagon appropriates funding in 1973.\n3⁄4 First satellite launched in 1978.\n3⁄4 System declared fully operational in April, 1995.\n\nHow GPS Works\n\nControl Segment\nSpace Segment\nUser Segment\nThree Segments of the GPS\nThree Segments of the GPS\nMonitor Stations\nMaster Station\nGround\nAntennas\n\nKwajalein Atoll\nUS Space Command\nControl Segment\nControl Segment\nHawaii\nAscension\nIs.\nDiego Garcia\nCape Canaveral\nMaster Control Station\nGround Antenna\nMonitor Station\n\nSpace Segment\n\nUser Segment\n3⁄4 Military.\n3⁄4 Search and rescue.\n3⁄4 Disaster relief.\n3⁄4 Surveying.\n3⁄4 Marine, aeronautical and terrestrial navigation.\n3⁄4 Remote controlled vehicle and robot guidance.\n3⁄4 Satellite positioning and tracking.\n3⁄4 Shipping.\n3⁄4 Geographic Information Systems (GIS).\n3⁄4 Recreation.\n\nFour Basic Functions of GPS\n3⁄4 Position and coordinates.\n3⁄4 The distance and direction between any two waypoints, or a\nposition and a waypoint.\n3⁄4 Travel progress reports.\n3⁄4 Accurate time measurement.\n\nPosition is Based on Time\nPosition is Based on Time\nT + 3\nDistance between satellite\nand receiver = \"3 times the\nspeed of light\"\nT\nSignal leaves satellite\nat time \"T\"\nSignal is picked up by the\nreceiver at time \"T + 3\"\n\nPseudo Random Noise Code\nPseudo Random Noise Code\nReceiver PRN\nSatellite PRN\nTime\nDifference\n\nWhat Time is It?\nWhat Time is It?\nUniversal Coordinated Time\nZulu Time\nGPS Time + 13*\nGreenwich Mean Time\nLocal Time: AM and PM (adjusted for local\ntime zone)\nMilitary Time\n(local time on a 24 hour clock)\n* GPS Time is ahead of UTC by approximately 13 seconds\n\nSignal From One Satellite\nSignal From One Satellite\nThe receiver is\nsomewhere on\nthis sphere.\n\nSignals From Two Satellites\nSignals From Two Satellites\n\nThree Satellites (2D Positioning)\nThree Satellites (2D Positioning)\n\nTriangulating Correct Position\nTriangulating Correct Position\n\nThree Dimensional (3D) Positioning\nThree Dimensional (3D) Positioning\n\nSelective Availability (S/A)\n3⁄4 The Defense Department dithered the satellite time\nmessage, reducing position accuracy to some GPS users.\n3⁄4 S/A was designed to prevent America's enemies from using\nGPS against us and our allies.\n3⁄4 In May 2000 the Pentagon reduced S/A to zero meters error.\n3⁄4 S/A could be reactivated at any time by the Pentagon.\n\nSources of GPS Error\nStandard Positioning Service (SPS ): Civilian Users\nSource\nAmount of Error\n3⁄4 Satellite clocks:\n1.5 to 3.6 meters\n3⁄4 Orbital errors:\n< 1 meter\n3⁄4 Ionosphere:\n5.0 to 7.0 meters\n3⁄4 Troposphere:\n0.5 to 0.7 meters\n3⁄4 Receiver noise:\n0.3 to 1.5 meters\n3⁄4 Multipath:\n0.6 to 1.2 meters\n3⁄4 Selective Availability\n(see notes)\n3⁄4 User error:\nUp to a kilometer or more\nErrors are cumulative and increased by PDOP.\n\nReceiver Errors are Cumulative!\nReceiver Errors are Cumulative!\nUser error = +- 1 km\nSystem and other flaws = < 9 meters\n\nSources of Signal Interference\nSources of Signal Interference\nEarth's Atmosphere\nSolid Structures\nMetal\nElectro-magnetic Fields\n\nUsing GPS Receivers for\nPositioning and Navigation\n\nGPS Navigation Terminology\nGPS Navigation Terminology\nXTE (CDI)\nN (0000)\n(00)\nN\nDesired Track\n(DTK) (xo)\nActive Leg\nDistance to Waypoint\nBearing (X0)\nPresent\nLocation\nSpeed Over\nGround (SOG)\nTracking (TRK) (xo)\nActive GOTO\nWaypoint\nCourse Made Good (CMG)\n(CMG) (xo)\nActive\nFrom\nWaypoint\n\nActive GOTO\nWaypoint\nBearing =\nCourse Over Ground (COG) =\nCross Track Error (XTE) =\nLocation Where GOTO\nWas Executed\nBearing = 650\nCOG = 50\nXTE = 1/2 mi.\nBearing = 780\nCOG = 3500\nXTE = 1/3 mi.\nBearing = 400\nCOG = 1040\nXTE = 1/4 mi.\nActive Leg\nN\nGPS Navigation: On the Ground\nGPS Navigation: On the Ground\n\nPosition Fix\n3⁄4 A position is based on real-time satellite tracking.\n3⁄4 It's defined by a set of coordinates.\n3⁄4 It has no name.\n3⁄4 A position represents only an approximation of the\nreceiver's true location.\n3⁄4 A position is not static. It changes constantly as the GPS\nreceiver moves (or wanders due to random errors).\n3⁄4 A receiver must be in 2D or 3D mode (at least 3 or 4\nsatellites acquired) in order to provide a position fix.\n3⁄4 3D mode dramatically improves position accuracy.\n\nWaypoint\n3⁄4 A waypoint is based on coordinates entered into a GPS\nreceiver's memory.\n3⁄4 It can be either a saved position fix, or user entered\ncoordinates.\n3⁄4 It can be created for any remote point on earth.\n3⁄4 It must have a receiver designated code or number, or a user\nsupplied name.\n3⁄4 Once entered and saved, a waypoint remains unchanged in\nthe receiver's memory until edited or deleted.\n\nPlanning a Navigation Route\nPlanning a Navigation Route\nStart\n= Waypoint\n\nHow A Receiver Sees Your Route\nHow A Receiver Sees Your Route\n\nGPS Waypoint Circle of Error\nGPS Waypoint Circle of Error\nX\n\nGPS Dilution of Precision and Its\nAffects On GPS Accuracy\n\nGPS Satellite Geometry\n3⁄4 Satellite geometry can affect the quality of GPS signals and accuracy\nof receiver trilateration.\n3⁄4 Dilution of Precision (DOP) reflects each satellite's position relative\nto the other satellites being accessed by a receiver.\n3⁄4 There are five distinct kinds of DOP.\n3⁄4 Position Dilution of Precision (PDOP) is the DOP value used most\ncommonly in GPS to determine the quality of a receiver's position.\n3⁄4 It's usually up to the GPS receiver to pick satellites which provide the\nbest position triangulation.\n3⁄4 Some GPS receivers allow DOP to be manipulated by the user.\n\nIdeal Satellite Geometry\nIdeal Satellite Geometry\nN\nS\nW\nE\n\nGood Satellite Geometry\nGood Satellite Geometry\n\nGood Satellite Geometry\nGood Satellite Geometry\n\nPoor Satellite Geometry\nPoor Satellite Geometry\nN\nS\nW\nE\n\nPoor Satellite Geometry\nPoor Satellite Geometry\n\nPoor Satellite Geometry\nPoor Satellite Geometry\n\nDifferential GPS\n\nDGPS Site\nx+30, y+60\nx+5, y-3\nTrue coordinates =\nx+0, y+0\nCorrection = x-5, y+3\nx-5, y+3\nReal Time Differential GPS\nReal Time Differential GPS\nDGPS Receiver\nReceiver\nDGPS correction = x+(30-5) and\ny+(60+3)\nTrue coordinates = x+25, y+63\n\nNDGPS Ground Stations\nNDGPS Ground Stations\nNational Differential Global Positioning System\nYellow areas show overlap between NDGPS stations. Green areas are little to no coverage.\nTopography may also limit some areas of coverage depicted here.\n\nNDGPS Ground Stations\nNDGPS Ground Stations\nNational Differential Global Positioning System\nYellow areas show overlap between NDGPS stations. Green areas are little to no coverage.\nTopography may also limit some areas of coverage depicted here.\n\nWide Area Augmentation System\nWide Area Augmentation System\nGeostationary\nWAAS satellites\nGPS Constellation\nWAAS Control\nStation (West Coast)\nLocal Area System (LAAS)\nWAAS Control\nStation (East\nCoast)\n\nHow good is WAAS?\nHow good is WAAS?\n+ -\n3 meters\n+-15 meters\nWith Selective Availability set\nto zero, and under ideal\nconditions, a GPS receiver\nwithout WAAS can achieve\nfifteen meter accuracy most\nof the time.*\nUnder ideal conditions a\nWAAS equipped GPS\nreceiver can achieve three\nmeter accuracy 95% of the\ntime.*\n* Precision depends on good satellite geometry, open sky view, and no user\ninduced errors."
    },
    {
      "category": "Resource",
      "title": "l6_proximity.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/8e4da2c6fdb4ab12e5f14bbec7de18e5_l6_proximity.pdf",
      "content": "Pervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLocation Again\nLocation API's and Room-Size Location\nFeb 28, 2006\nLarry Rudolph\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nGPS & Cell Location\nFigure by MIT OCW.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLocation Server's\nLocation\n- Where should the server be located?\n- On handset\n- Respond to inquires about location\nwith option to deny\n- When handset lost or disconnected,\ncannot find it.\n- In network\n- Privacy concerns\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nClient's Role\n- Ask server for location of handset\n- Must know how to contact handset\n- Long round-trip, so done\nasynchronously\n- How to ensure privacy?\n- emergency call --> always allow\n- ask server's owner\n- when and how often?\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nWhat information?\n- Current position (Cell or GPS or Other)\n- How current? How precise?\n- Request periodic updates\n- what happens when client disconnects\n- Heading and orientation information\n- Waypoints (and associated notes)\n- Lots of competing systems\n- J2ME, Symbian, and each operator\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLots more details\n- Time, angle of arrival, speed,\nacceleration\n- Type of location technology specs\n- number of satellites, cell towers,\nweather\n- pitch, roll, magnetic compass quality\n- My strategy:\n- first list all information you think is\nimportant and then check with standard\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\n-http://www.jcp.org/en/jsr/all (J2ME\nPackages)\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nHow to spoof\n- Borrow friends phone\n- register it with tracking service (TS)\n- TS sends msg to phone for confirmation\n- Answer msg, delete it, return phone\n- No need to borrow phone if know phone ID\n- when phone is turned off, put its ID into\na different phone, do the above steps,\nand then turn off.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLarry's Location Larceny\n- How to foil tracking -- even when cell\ntowers know your phone's location\n- Switch ID's when near each other when\n- Alice and Bob realize they're in same\ncell\nFigure by MIT OCW.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nAssumptions\n- Phone can forward calls to another\nphone\n- Phones can change their ID (also #, IP)\n- Can detect ID & # of incoming call\n- Can detect cell tower connection\n- Can connect to any of a set of servers\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLLL (cont)\n- Alice & Bob switch\n- When looking for Bob, you find Alice,\nand she forwards call to Bob.\n- Bob accepts calls forwarded from Alice\n(the calls look like they came from Bob)\n- Bob forwards all other call to Alice\n- Bob and Charlie switch\n- Look for Bob, find Alice who forwards\nto Charlie who forwards to Bob\n\nGraph View of LLL\n- Nodes always in\nsome cycle\n- Forward thru\nwhole cycle\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nImage removed due to copyright restrictions.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nBookkeeping View\n- When switching,\njust exchange\ncurrent id info\n- How to know when\nto stop forwarding?\nImage removed due to copyright restrictions.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nInverse links\n- If a node is shut off rest will be\nunreachable\n- Use servers to deal with reverse links\n- Node chooses server at random, if two\nnodes contact same server and are both\nin same cell, then\n- switch info, and tell server about\nswitch. nodes periodically make sure\npartner alive\n- with unsynchronized clocks and freq\nswitching, cannot easily reconstruct\ncycle\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nLandmark Databases\n- Convert from location to known object\n- how close is \"nearby\"\n- Which databases of landmarks should be\nused\n- Local override to database?\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nIndoor Tracking\nProximity Events\nRoom Level Tracking\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nBeacons & Listeners\n- Room-level tracking requires beacons &\nlisteners\n- Two choices:\n- Scatter listeners throughout\nenvironment that detect your position &\nupdate server\n- Server provides location info & alerts\n- Scatter beacons throughout\nenvironment and your handheld is\nlistener\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nTradeoffs\n- Handheld is beacon\n- better power usage\n- better precision (precise\nlistener location)\n- less interference\n- Handheld is listener\n- Control over privacy\n- (Can you suggest\nothers)\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nBluetooth Beacons\n- Bluetooth devices respond to inquires\n- with BT-ID and Name\n- range: 10 meters (room level)\n- leakage through walls & floors\n- hear floor 7, 8, and 9 --> you are on 8\n- Inexpensive ($20 / beacon)\n- Handhelds have BT\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nBluetooth Beacons\n- First decision -- Where to put beacons\n- Put them in PC's -- they are everywhere\n- Unfortunately, they disappear :(\n- Put them in powered usb hub, near AC outlet\n- Initialize via laptop, then remove laptop\n- BT Dongle will continue to respond to\ninquiry\n\nImage removed due to copyright considerations.\n\nWhen detect BT dongle\nupdate map location\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nWhat doesn't work\n- Signal strength does not work well\n- need radio map\n- Track while walking\n- 10 sec to detect, walking rate ~ 1 m/s,\neasy to miss dongle altogether\n- Embed location info in dongle name\n- takes even longer to detect\n- Cached BT names, must not use\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nSeveral Hacks\nneeded\n- Takes too long to\nrecognize dongles\n- Faster if use two\ndongles\n- Signal come and\ngoes\n- Incorporate model\nof human motion\n- Probabilistic\nfiltering\nImage removed due to copyright considerations.\n\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry Rudolph\nMore hacks\n- If you know where you are,\n- then know where you might go next\n- can do inquiry of specific dongles"
    },
    {
      "category": "Resource",
      "title": "l7_batscrickets.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/3ef14f365936b016b8aedc689b1e8843_l7_batscrickets.pdf",
      "content": "Tracking Indoors\nRudolph\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\n\nLocation of what?\n- Objects\n- Static, Moveable, or Mobile\n- Frequency of movement: door, desk,\nlaptop\n- Dumb or Networked\n- People\n- Waldo asks \"Where am i?\"\n- System asks \"where's Waldo?\"\n- Services\n- applications, resources, sensors, actuators\n- where is a device, web site, app\n\nTracking technology\n- Some examples:\n- 802.11; Bluetooth (Intel, HP, ..),\nRFID\n- ParcTab (Xerox)\n- Active Badge (Cambridge ATT)\n- BATs (Cambridge ATT)\n- Crickets (MIT)\n- Cameras\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph\n\nTangential Note:\nLarry's conjecture\n- Any sensing service in pervasive computing only\nneeds:\n- some cameras\n- lots of computing power\n- some clever algorithms\n- Any sensing service in pervasive computing\n- can be done cheaper with application-specific\nhardware!\n- E.g: Location tracking & recognition\n\nImage removed due to copyright restrictions.\n\nCambridge ATT's BAT\n\nCambridge ATT's BAT\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph\nImage removed due to copyright restrictions.\n\nCambridge ATT's BAT\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph\nImage removed due to copyright restrictions.\n\nBAT Details\n- Ultrasound transmitters\n- 5 cm x 3 cm x 3 cm; 35 grams\n- unique id (48 bit)\n- temp id (10 bit) -- reduces power\n- button (just one)\n- rf transceiver\n- Receivers in ceiling\n- Base station\n- periodically queries, then bats respond\n- query time, recv time, room temp\n- 330 m/s + .6*temp;\n>2 receivers ==>\nlocation\n\nMore on BATs\n- Deployment\n- 50 staff members, 200 BATS, 750\nReceivers, 3 Radio cells, 10,000 sq ft\noffice space\n- 20 ms per bat enables 50 BATs / sec\n- Smart scheduling reduces BAT's power\n- while at rest, reduce frequency of query\n- detect activity at PC to deduce \"rest\"\n- Convert BAT location to object location\n- Centralized Datebase\n- less latency than distributed query\n- better filtering and error detection\n\nFeedback of Location-\nservice\nHuman-centric view of location\ninformation\nCuteness reduces concern over privacy\nImage removed due to copyright restrictions.\n\nPervasive Com\nProgramming\nModel?\n- Analogous to window-system. BAT\nenters workstation space, causes an\nevent call-back\nputing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph\nImage removed due to copyright restrictions.\n\nApplication: Follow-\nme Desktop\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph\nFigure by MIT OCW.\npjs\npjs\npjs\nSpatial monitoring application that moves users' desktops around with them. The application registers with the Spatial Monitor:\n(A) As the user (pjs) approaches the display\n(B) Or moves away from it\n(C) The spatial monitor sends a positive or negative containment event to the application that transfers or removes the desktop\nto or from the screen.\n(A)\n(B)\n(C)\n\nImage removed due to copyright restrictions.\n\nImage removed due to copyright restrictions.\n\nImage removed due to copyright restrictions.\n\nImage removed due to copyright restrictions.\n\nHow well does it\nwork?\nImage removed due to copyright restrictions.\n\nImage removed due to copyright restrictions.\n\nFigure by MIT OCW.\nORACLE 7\nRelational Database\nMobile\nApplication\nBat\nSensor\nResource\nMonitors\nOuija\nProxy\nServer\nOuija\nProxy\nServer\nFast Path\nCORBA\nOracle C Interface (OCI)\nSpatial\nIndexing\nProxy\nTHREE-TIER ARCHITECTURE\n\nBetter Trackers\nBayesian filtering on sensory data\nPredict where person will be in future.\nposition and speed over near past\nbehavior (avg speed) over long\nterm\nUses\nFilter bad sensory data\nLikely place to find someone\nPredict which sensors to monitor\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph\n\nA few details of\nBayesian Filtering\nBayes filters estimate posterior distribution over the state xt of\na dynamical system conditioned on all sensor information\ncollected so far:\nTo compute the likelihood of an observation z given a position x on\nthe graph, we have to integrate over all 3d positions projected onto\nx:\nSee \"Voronoi tracking ...\" Liao, et al.\n\nImage removed due to copyright restrictions.\n\nUniversal\nLocation\nFramework\nStack: Sensor, Measure, Fusion,\nApplication\nLocation API (preliminary)\nWhat: timestamp, position,\nuncertainty\nWhen: Automatic (push), Manual\n(pulll), Periodic\n802.11 base station location\nCalibrated database of signal\ncharacteristics\n3 to 30 meter accuracy\n\nDivision of Labor\n- Determining the location of object\n- Associating name with location\n- Object (or person) has name\n- Object has a location\n- physical or virtual (instantiation of\nprogram on some machine)\n- Need scalable solution to connect\nthem\n- RFIDs demand scalability\nPervasive Computing MIT 6.883 SMA 5508 Spring 2006 Larry\nRudolph"
    }
  ]
}