{
  "course_name": "Logic I",
  "course_description": "In this course we will cover central aspects of modern formal logic, beginning with an explanation of what constitutes good reasoning. Topics will include validity and soundness of arguments, formal derivations, truth-functions, translations to and from a formal language, and truth-tables. We will thoroughly cover sentential calculus and predicate logic, including soundness and completeness results.",
  "topics": [
    "Humanities",
    "Philosophy",
    "Logic",
    "Humanities",
    "Philosophy",
    "Logic"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nOverview\n\nIn this course we will cover central aspects of modern formal logic, beginning with an explanation of what constitutes good reasoning. Topics will include validity and soundness of arguments, formal derivations, truth-functions, translations to and from a formal language, and truth-tables. We will thoroughly cover sentential calculus and predicate logic, including soundness and completeness results.\n\nTexts\n\nThe required text is: Bergmann, Merrie, James Moor, and Jack Nelson.\nThe Logic Book\n. 5th ed. New York, NY: McGraw-Hill, 2008. ISBN: 9780073535630.\n\nThere are some errors in the text; a list of corrections is provided.\n\nThe Logic Book errata (\nPDF - 1.1MB\n)\n\nAssignments\n\nIn addition to regular reading assignments, there will be problem sets, short quizzes, and a final exam. Problem sets will be assigned weekly on Tuesday, due the following Tuesday. Quizzes will be closed-book, closed-notes, to be completed in class. There will be 8-10 quizzes over the course of the semester, and they will not be announced in advance. Make-up quizzes will not be allowed, but your lowest two quiz scores (i.e. a zero if you miss one) will not be factored into your final grade.\n\nGrading\n\nACTIVITIES\n\nPERCENTAGES\n\nProblem sets\n\n40%\n\nQuizzes\n\n30%\n\nFinal exam\n\n20%\n\nAttendance and class participation\n\n10%",
  "files": [
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw01_sol.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/e816431d34e678b9a4a1297f7633fc04_MIT24_241F09_hw01_sol.pdf",
      "content": "Problem Set 1: Answers\nDamien Rochford\nQuestion 1\nThe first sentence is true. An argument with logically false premises and a\nlogically false conclusion is such an argument.\nThe second sentence is true. It's impossible that the conclusion of such an\nargument be false, so it's impossible that the premises of such an argument be\ntrue and the conclusion be false, so every such argument is valid.\nThe third sentence is false. Every argument with logically inconsistent\npremises is valid.\nThe fourth sentence is true. Here's an example:\nEphraim is better than Damien at Halo.\nKevin Rudd is the Prime Minister of Australia.\nThere are no active volcanoes in Massachusetts.\nQuestion 2\nHere are some random examples:\nPart (a)\n{\"Ephraim is better than Damien at Halo.\" \"Kevin Rudd is not the Prime\nMinister of Australia.\"}\nPart (b)\nEither penguins can fly or they can sing.\nPenguins can't fly.\nPenguins can sing.\nPart (c)\nIt's not the case that either Aarti or Bram are hungry. Aarti isn't hungry and\nBram isn't hungry.\nQuestion 3\nPart (b)\nA: Bill will win the race. B: Gladys breaks a leg. C: Gladys has a hangover.\nA ≡ (B ∨ C)\n\nPart (c)\nA: Bill won the race because Gladys broke her leg.\nA\nPart (d)\nOne acceptable translation:\nA: Mary has a dog. B: Mary has a cat. C: Frank has a dog. D: Frank has\na cat.\n∼ ((A&B) ∨ (C&D))\nAnother one:\n(∼ (A&B)& ∼ (C&D))\nPart (e)\nA: Methuselah is the oldest man. B: No man is older than Methuselah.\nA ⊃ B\nPart (f)\nA: Some lawyers are dishonest. B: Some lawyers are not dishonest. C: I will\nnot tell lawyer-jokes. D: People laugh at lawyer jokes.\n((A&B) ⊃ C)&D\nQuestion 4\nI have indicated the main connective by double-lining it's column. I've also\nindicated the order in which the column's are calculated by numbering them.\nA\nT\nB\nT\n∼\nF\nT\nF\nT\nF\nT\nF\nF\nF\nF\n(A\nT\nT\nF\nF\n⊃\nT\nF\nT\nT\nB)\nT\nT\nF\nF\n\nA\nB\n(A\n∨\nB)\n⊃\n(∼\nB\n⊃\nA)\nT\nT\nF\nF\nT\nF\nT\nF\nT\nT\nF\nF\nT\nT\nT\nF\nT\nT\nF\nF\nT\nT\nT\nT\nF\nT\nF\nT\nT\nF\nT\nF\nT\nT\nT\nT\nT\nF\nF\nF\nQuestion 5\nI've indicated the main connective and the order of calculation for the large\nformula at the end.\nA\nB\nA\n↓\nB\nA\n↓\nA\n(A\n↓\nA)\n↓\n(B\n↓\nB)\nT\nT\nF\nF\nT\nF\nT\nF\nT\nT\nF\nF\nF\nF\nF\nT\nT\nF\nT\nF\nT\nT\nF\nF\nF\nF\nT\nT\nT\nT\nF\nF\nT\nT\nF\nF\nF\nF\nT\nT\nT\nT\nF\nF\nT\nF\nF\nF\nT\nF\nT\nF\nF\nT\nF\nT\nT\nF\nT\nF\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw01.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/7e9456b0c8188c5c7c419249b9cd2d6d_MIT24_241F09_hw01.pdf",
      "content": "Logic I\nFall 2009\nProblem Set 1\nDue 9/22/09\n1. (5 pts. each) True or false:\nT F\nSome argument whose conclusion is logically false is valid.\nT F\nEvery argument whose conclusion is logically true is valid.\nT F\nNo argument whose premises are logically inconsistent is valid.\nT F\nSome invalid argument has true premises and a true conclusion.\n2. Give an example of each of the following:\n(a) (5 pts.) A consistent set of English sentences with a true member and a false\nmember.\n(b) (10 pts.) A valid but unsound argument (in English, in standard form).\n(c) (5 pts.) Two (distinct) English sentences that are logically equivalent.\n3. (5 pts. each) Translate each of the following sentences into SL. Indicate which English\nsentences you are representing with which SL sentence letters. An example is provided\nin (a).\n(a) John lives in Boston and Mary lives in Medford.\nJ: John lives in Boston.\nJ & M\nM: Mary lives in Medford.\n(b) Bill will win the race if and only if Gladys either breaks a leg or has a hangover.\n\n(c) Bill won the race because Gladys broke her leg.\n(d) Neither Mary nor Frank has both a dog and a cat.\n(e) Methuselah is the oldest man only if no man is older than he is.\n(f) If some lawyers are dishonest but some are not, I will not tell lawyer-jokes even\nthough people laugh at them.\n4. (20 pts.) Complete the truth-tables below. Indicate the main connective.\nA\nB\n∼ ( A ⊃ B )\nA\nB\n( A ∨ B ) ⊃ ( ∼ B ⊃ A )\nT\nT\nT\nT\nT\nF\nT\nF\nF\nT\nF\nT\nF\nF\nF\nF\n5. (15 pts.) Let\nrepresent the English 'neither . . . nor . . . '. Fill in the truth-table for\n↓\nA\nB. Then use only sentence letters and\nto provide a formula (with corresponding\n↓\n↓\ntable entries) logically equivalent to ∼A. Do the same for A & B.\nA\nB\nA ↓ B\n. . . . . . . . .\n. . . . . . . . .\nT\nT\nT\nF\nF\nT\nF\nF\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw02_sol.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/59db69b3c934ed7b913975f9e37fb6cd_MIT24_241F09_hw02_sol.pdf",
      "content": "Problem Set 2: Answers\nDamien Rochford\n3.4E\n4c\nNo, it does not follow. Sometimes it is the case that there is truth-value as\nsignment that makes P true and one that makes P false, and a truth-value\nassignment that makes Q true and one that make Q false, but there is no one\ntruth-value assignment such that both P and Q are true on that assignment.\nAn example: 'A' and '∼ A' are both truth-functionally indeterminate, but\n{ 'A',' ∼ A' } is not truth-functionally consistent.\n3.5E\nWith many of these questions, you can see what the answer is without con\nstructing the truth-table. You need to construct the truth-table, nevertheless.\nIt's good for you.\nI've used the same conventions as the last answers: main connectives singled\nout by vertical lines around their columns, numbers at the bottom to indicate\nthe order of calculation.\n1d\nThis argument is truth-functionally valid. Here's the truth-table:\nA\nW\nY\n∼\n(Y\n≡\nA)\n∼\nY\n∼\nA\nW\n&\n∼\nW\nT\nT\nT\nF\nT\nT\nT\nF\nT\nF\nT\nT\nF\nF\nT\nT\nT\nF\nT\nF\nF\nT\nT\nF\nF\nT\nT\nF\nF\nT\nT\nF\nT\nF\nT\nT\nT\nF\nT\nF\nT\nF\nF\nT\nF\nT\nF\nF\nT\nF\nF\nT\nT\nF\nF\nT\nF\nF\nT\nF\nF\nT\nT\nT\nT\nF\nF\nF\nT\nT\nF\nT\nF\nF\nT\nF\nT\nF\nF\nF\nT\nF\nT\nF\nT\nF\nT\nF\nF\nT\nF\nF\nT\nT\nT\nF\nF\nF\nT\nT\nF\nF\nF\nT\nF\nF\nF\nF\nF\nF\nT\nF\nT\nF\nT\nF\nF\nF\nT\nF\nYou may have the rows in a different order -- that's fine.\nAs you can see, there are no rows such that all of the premises get assigned\nT and the conclusion gets assigned F (as there are no rows such that all of the\npremises get assigned T at all). So the argument is truth-functionally valid.\n2c\nThis argument is truth-functionally valid. Observe:\n\nA\nB\nA\n⊃\n∼\nA\n(B\n⊃\nA)\n⊃\nB\nA\n≡\n∼\nB\nT\nT\nT\nF\nF\nT\nT\nT\nT\nT\nT\nT\nF\nF\nT\nT\nF\nT\nF\nF\nT\nF\nT\nT\nF\nF\nT\nT\nT\nF\nF\nT\nF\nT\nT\nF\nT\nF\nF\nT\nT\nF\nT\nF\nT\nF\nF\nF\nT\nT\nF\nF\nT\nF\nF\nF\nF\nF\nT\nF\nThere is one row that assigns both premises true: the hF, T i row (marked out\nby horizontal lines). As you can see, that row assigns T to the conclusion. So\nthere are no rows such that all of the premises get assigned T and the conclusion\ngets assigned F . So the argument is truth-functionally valid.\n2d\nErgh -- one of the sentence letters is a 'T'. Don't confuse the sentence letter\n'T' with the truth-value 'T' below.\nThis argument is truth-functionally invalid. Here is a shortened truth-table\nthat shows that.\nJ\nM\nT\nJ\n∨\n[M\n⊃\n(T\n≡\nJ)]\n(M\n⊃\nJ)\n&\n(T\n⊃\nM)\nT\n&\n∼\nM\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nT\nF\nF\nT\n4f\nLet A = 'The butler murdered Devon'; B = 'The maid is lying'; C = 'The\ngardener murdered Devon'; D = 'The weapon was a slingshot'.\nThe argument:\n(A ⊃ B)&(C ⊃ D)\n(B ≡∼ D)&(∼ D ⊃ A)\nA\nThis argument is not truth-functionally valid. Check it out:\nA\nB\nC\nD\n(A\n⊃\nB)\n&\n(C\n⊃\nD)\n(B\n≡\n∼\nD)\n&\n(∼\nD\n⊃\nA)\nA\nF\nF\nT\nT\nF\nT\nF\nT\nT\nT\nT\nF\nT\nF\nT\nT\nF\nT\nT\nF\nF\n5c\nNo, it does not follow. Here is a counterexample. Let P=A ∨ B, Q=A, R=B.\n{ 'A ∨ B0} truth-funcitonally entails A ∨ B, obviously. { 'A ∨ B0} does not\ntruth-functionally entail A (consider A false, B true), and it does not truth-\nfunctionally entail B (consider A true, B false).\n\n3.6E\nThroughout this section, when I say something like 'there is no truth-value\nassignment such that' blah, what I mean is 'there is no truth-value assignment\nsuch that, on that assignment' blah.\n2b\nΓ |= pP ⊃ Qq iff there is no truth-value assignment such that every member of Γ\nis true and pP ⊃ Qq is false. There is no truth-value assignment such that every\nmember of Γ is true and pP ⊃ Qq is false iff there is no truth-value assignment\nsuch that every member of Γ is true, P is true and Q is false (by the definition\nof '⊃'). There is no truth-value assignment such that every member of Γ is true,\nP is true and Q is false iff there is no truth-value assignment such that every\nmember of Γ ∪{P} is true and Q is false. There is no truth-value assignment\nsuch that every member of Γ ∪{P} is true and Q is false iff Γ ∪{P} = Q.\nTherefore, Γ |= pP ⊃ Qq iff Γ ∪{P} |= Q.\n|\nQ.E.D.\n3b\nSuppose Γ |= P and Γ |= p∼ Pq. Then\n(1) there is no truth-value assignment such that every member of Γ is true and\nP is false, and\n(2) there is no truth-value assignment such that every member of Γ is true and\n∼ P is false.\nBy (2) (and the definition of '∼'), there is no truth-value assignment such that\nevery member of Γ is true and P is true. From this and (1) it follows that there\nis no truth-value assignment such that every member of Γ is true and P is true\nand there is no truth-value assignment such that every member of Γ is true and\nP is false. But if there is any truth-value assignment such that every member\nof Γ is true, it is either such that every member of Γ is true and P is true or it\nis such that every member of Γ is true and P is false. So there is no truth-value\nassignment such that every member of Γ is true. So Γ is truth-functionally\ninconsistent.\nSo if Γ |= P and Γ |= p∼ Pq, then Γ is truth-functionally inconsistent.\nQ.E.D.\n4a\nSuppose {P} |= Q, and {p∼ Pq} |= R. Then\n(1) there is no truth-value assignment such that P is true and Q is false, and\n(2) there is no truth-value assignment such that ∼ P is true and R is false.\n\nBy (2) (and the definition of '∼'),\n(3) there is no truth value assignment such that P is false and R is false.\nNow, every truth-value assignment is either such that Q is true or such that\nQ is false. So, by (1),\n(4) if a truth-value assignment is such that P is true, it is such that Q is true.\nAnd every truth-value assignment is either such that R is true or is such that\nR is false. So, by (3)\n(5) if a truth-value assignment is such that P is false, then it is such that R is\ntrue.\nBut every truth-value assignment is either such that P is true or such that\nP is false. So, by (4) and (5), every truth-value assignment is either such that\nQ is true or such that R is true. So (by the definition of '∨'), every truth-value\nassignment is such that pQ ∨ Rq is true. So pQ ∨ Rq is truth-functionally true.\nSo if {P} |= Q, and {p∼ Pq} |= R, then pQ ∨ Rq is truth-functionally true.\nQ.E.D.\n4c\nSuppose Γ |= P and Γ0 |= Q. Then\n(1) there is no truth-value assignment such that every member of Γ is true and\nP is false, and\n(2) there is no truth value assignment such that every member of Γ0 is true and\nQ is false.\nBy (1), there is no truth-value assignment such that every member of Γ ∪ Γ0 is\ntrue and P is false. And by (2), there is no truth-value assignment such that\nevery member of Γ ∪ Γ0 is true and Q is false. So (by the definition of '&') there\nis no truth-value assignment such that Γ ∪ Γ0 is true and pP&Qq is false. So\nΓ ∪ Γ0 |= pP&Qq.\nSo, if Γ |= P and Γ0 |= Q, then Γ ∪ Γ0 |= pP&Qq.\nQ.E.D.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/7df1f07febbf0fbd560ef4c6cc99e906_MIT24_241F09_hw02.pdf",
      "content": "Logic I\nFall 2009\nProblem Set 2\nFor Tuesday, 9/29, please complete the following exercises from The Logic Book:\n1. 3.4E: 4c\n2. 3.5E: 1d, 2c, 2d, 4f, 5c\n3. 3.6E: 2b, 3b, 4a, 4c\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw03_sol.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/d3d7273c6397bf890983bac268bf1ca0_MIT24_241F09_hw03_sol.pdf",
      "content": "Problem Set 3: Answers\nDamien Rochford\nQuestion 1\nHere is the truth-table. Same conventions as usual.\nA\nC\n∼\n(C\n∨\nA)\n∼\n(C\n≡\n∼\nA)\nT\nT\nF\nF\nT\nF\nT\nF\nF\nF\nF\nT\nT\nF\nT\nF\nT\nT\nT\nT\nT\nF\nF\nF\nT\nF\nF\nT\nT\nF\nT\nF\nF\nT\nT\nF\nF\nF\nT\nT\nT\nT\nF\nF\nAs you can see, there are no lines in which the premise is true and the\nconclusion false -- the only line in which the premise is true is the last one, and\non that line the conclusion is true too. So this argument is truth-functionally\nvalid.\nQuestion 2\nAll of these are proved by providing derivations in SD. I do so below.\nPart (a)\nA ⊃ B\nA\n∼ B\nA/⊃I\nA&D\nA/∼I\nA\n3, &E\nB\n1,4 ⊃ E\n∼ B\n2 R\n∼ (A&D)\n3-6 ∼I\n∼ B ⊃ ∼ (A&D)\n2-7 ⊃I\n\nPart (b)\nPart (c)\n(A ⊃ B) ⊃∼ B\nB\nA\nB\nA ⊃ B\n∼ B\nB\n∼ B\nF ⊃ (G ∨ H)\n∼ (∼ F ∨ H)\n∼ G\nH\n∼ F ∨ H\n∼ (∼ F ∨ H)\n∼ H\nA\nA/∼I\nA/⊃I\n2 R\n3-4, ⊃I\n1,5 ⊃E\n2 R\n2-8 ∼I\nA\nA\nA\nA/∼I\n4 ∨I\n2 R\n4-6 ∼I\nQuestion 3 (5.3E 12(b))\nLet 'A' = 'The recipe calls for flavouring'; 'B' = 'The recipe calls for eggs'; 'C'\n= 'The recipe is a recipe for tapioca.'\nThe relevant set of sentences is {'(∼ A∨∼ B) ⊃∼ C', 'B ⊃ (C&∼ A)', 'B' }.\nThe below derivation shows that this set is inconsistent in SD.\n\n(∼ A ∨ ∼ B) ⊃ ∼ C\nA\nB ⊃ (C& ∼ A)\nA\nB\nA\nC&∼ A\n2,3 ⊃E\n∼ A\n4 &E\n∼ A ∨ ∼ B\n5 ∨I\n∼ C\n1,6 ⊃E\nC\n4 &E\nQuestion 4 (5.3E 13(a))\nThis derivation rule allows one to derive something false from something true.\nTo see this: let P = A, Q = B, and consider the truth-value assignment that\nassigns false to A and true to B. Under that assignment, 'A ∨ B' is true, but\n'B' is false.\nThat's bad -- the only derivation rules we want are ones that guarantee that\nthe sentence you derive is true, given that the sentences you started with are\ntrue.\nQuestion 5 (5.3E 13(e))\nBecause, in SD, you can derive any conclusion from the negation of theorem.\nWhy is that? Suppose we have a derivation in SD with the negation of some\ntheorem P as an assumption on line i. As P is a theorem, we can derive it in\nthis derivation; say we do so on line j. Then, starting at line k > max(i, j), we\ncan construct a sub-derivation of the following form:\nk\n∼ Q\nA/∼E\nk + 1\nP\nj R\nk + 2\n∼ P\ni R\nk + 3\nQ\nk-k + 1 ∼E\nOne can do this for any value of Q. So, one can derive any sentence from\nthe negation of a theorem, in SD.\nQuestion 6\nI like this one.\n\nQuestion 7\n∼ ((A ⊃ B) ∨ (B ⊃ A))\nA\nB\nA\nB ⊃ A\n(A ⊃ B) ∨ (B ⊃ A)\n∼ ((A ⊃ B) ∨ (B ⊃ A))\n∼ A\nA\n∼ B\nA\n∼ A\nB\nA ⊃ B\n(A ⊃ B) ∨ (B ⊃ A)\n∼ ((A ⊃ B) ∨ (B ⊃ A))\n(A ⊃ B) ∨ (B ⊃ A)\nA/∼E\nA/∼I\nA/⊃I\n2 R\n3-4 ⊃I\n5 ∨I\n1 R\n2-7 ∼I\nA/⊃I\nA/∼E\n9 R\n8 R\n10-12 ∼E\n9-13 ⊃I\n14 ∨I\n1 R\n1-16 ∼E\nConsider an SD derivation and sentences P, Q of SL such that pP ∨ Qq appears\non line i of the derivation, to the right of m scope-lines, and p∼ Pq appears\non line j of the derivation, to the right of n scope lines. Starting at row k >\nmax(i, j), and to the right of max(m, n) - 1 scope lines, one can construct a\nsub-derivation of the following form:\n\nk\nk + 1\nk + 2\nk + 3\nk + 4\nk + 5\nk + 6\nk + 7\nP\n∼ Q\nP\nA/∨E\nA∼E\nk R\n∼ P\nQ\nQ\nQ\nj R\nk + 1-k + 3 ∼E\nA/∨E\nk+5 R\nQ\ni, k - k + 4, k + 5 - k + 6 ∨E\nUsing this construction, one can always derive Q, from pP ∨ Qq and p∼ Pq,\nin SD. So anything we can derive in SD? we can derive in SD.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw03.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/fede2692d1733e675d381dd350263d59_MIT24_241F09_hw03.pdf",
      "content": "Logic I\nFall 2009\nProblem Set 3\nDue 10/6/2009\n1. (12 pts.) Use a truth-table to prove that the following argument is truth-functionally\nvalid. Be sure to explain how the truth-table proves that.\n∼ (C ∨ A)\n∼ (C ≡∼ A)\n2. Prove that the following derivability claims hold in SD.\n(a) (10 pts.) {(A ⊃ B)} ⊢ [∼ B ⊃∼ (A&D)]\n(b) (12 pts.) {(A ⊃ B) ⊃∼ B}⊢∼ B\n(c) (10 pts.) {F ⊃ (G ∨ H), ∼ (∼ F ∨ H), ∼ G}⊢∼ H\n3. (10 pts.) Use an SD derivation to complete problem 5.3E 12(b) from TLB.\n4. (10pts.) Answer problem 5.3E 13(a) from TLB.\n5. (10 pts.) Answer problem 5.3E 13(e) from TLB. Note that the problem concerns\nvalidity in SD, not, e.g., truth-functional validity, so be sure to appeal to the proper\ndefinition.\n6. (14 pts.) Derive the following theorem in SD: (A ⊃ B) ∨ (B ⊃ A).\n7. (12 pts.) Let SD* be the derivation system resulting from adding the rule Disjunctive\nSyllogism to the rule set of SD. Prove that in SD, we can derive anything that we can\nderive in SD*.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw04_sol.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/e5eecf64dbd55760f3e3e20526c9c3aa_MIT24_241F09_hw04_sol.pdf",
      "content": "Problem Set 4: Answers\nDamien Rochford\nIn most of these proofs, when things have got a little complicated, I have\nnumbered the steps I'm taking in the hope that this makes things clearer. You\naren't required to do this when you answer, but I think it's probably a good\nidea -- it helps you get clear on what, exactly, you are doing, and it helps me\nunderstand what you are doing (if I can't follow your proof, that's bad).\nSection 5.3E, Question 14\nIn what follows, I will refer to the following sentence:\n- Γ ` P in SD if and only if Γ |= P.\nas 'S&C' (short for 'Soundness and Completeness' -- you'll see why I use this\nname in the near future).\nPart (a)\nLet α be an argument of SL such that the set of assumptions that begin α is\nΓ and the conclusion of α is P (I'm using 'α' so you don't confuse it with a\nsentence letter of SL, but you can use whatever you like).\n1. α is valid in SD iff there is an SD derivation that has the members of Γ\nas primary assumptions and P in the scope of those assumptions only (by\ndefinition of 'valid in SD').\n2. There is an SD derivation that has the members of Γ as primary assump\ntions and P in the scope of those assumptions only iff Γ ` P in SD (by\ndefinition of '`').\n3. Γ ` P in SD iff Γ |= P (S&C).\n4. Γ |= P iff there is no truth-value assignment such that every member of Γ\nis true and P is false (by definition of '|=').\n5. There is no truth-value assignment such that every member of Γ is true\nand P is false iff α is truth-functionally valid (by definition of 'truth\nfunctionally valid').\nSo, assuming S&C, an argument of SL is valid in SD if and only if the\nargument is truth-functionally valid.\nQ.E.D.\nPart (b)\n1. A sentence P of SL is a theorem in SD iff ∅` P in SD (by definition of\ntheoremhood).\n2. ∅` P in SD iff ∅|= P (by S&C).\n\n3. ∅|= P iff there is no truth-value-assignment that makes every member of\n∅ true and P false (by definition of '|=').\n4. There is no truth-value-assignment that makes every member of ∅ true\nand P false iff there is no truth-value assignment that makes P false (as\nevery truth-value assignment makes every member of ∅ true).\n5. There is no truth-value assignment that makes P false iff P is truth-\nfunctionally true (definition of 'truth-functionally true').\nSo, assuming S&C, a sentence P of SL is a theorem in SD if and only if P\nis truth-functionally true.\nQ.E.D.\nPart (c)\n1. Sentences P and Q of SL are equivalent in SD iff {P} ` Q in SD and\n{Q} ` P in SD (definition of 'equivalent in SD').\n2. P ` Q in SD and Q ` P in SD iff P |= Q and Q |= P (by S&C).\n3. P |= Q and Q |= P iff there is no truth-value assignment such that P is\ntrue and Q is false, and vice-versa. (by definition of '|=').\n4. There is no truth-value assignment such that P is true and Q is false, and\nvice-versa, iff P and Q are truth-functionally equivalent (by definition of\n'truth-functionally equivalent').\nSo, assuming S&C, sentences P and Q of SL are equivalent in SD if and\nonly if P and Q are truth-functionally equivalent.\nQ.E.D.\nSection 6.1E, Question 1\nPart (b)\nTo show:\nClaim: Every sentence of SL that contains no binary connectives is truth-functionally\nindeterminate.\nClaim follows from the following. . .\nBasis Clause: Every atomic sentence of SL is truth-functionally indeterminate.\nInductive Step: If every sentence of SL containing (a) no binary connectives and (b) n\nor fewer negations is truth-functionally indeterminate, then so is every\nsentence of SL containing no binary connectives and n + 1 negations.\n\n. . . as every sentence of SL that contains no binary connectives is a sentence\nof SL that contains no binary connectives and n negations, for some natural\nnumber n.\nThe proof of Basis Clause is immediate -- every atomic sentence of SL\nis such that there is a truth-value assignment that makes it true and a truth-\nvalue assignment that makes it false, so every atomic sentence of SL is truth-\nfunctionally indeterminate. It remains to prove Inductive Step.\nProof of Inductive Step:\n1. Suppose every sentence P of SL containing (a) no binary connectives and\n(b) n or fewer negations is truth-functionally indeterminate (i.e., suppose\nthe antecedent of Inductive Step).\n2. Then for all such P, there exists a truth-value assignment that make P\ntrue and a truth-value assignments that makes P false.\n3. So, by the definition of ' ∼', there is truth-value assignment that makes\np∼ Pq false and a truth-value assignment that make p∼ Pq true, for all\nsuch P.\n4. But every sentence of SL containing no binary connectives and n + 1\nnegations is of the form p∼ Pq, for some such P.\n5. So for every sentence of SL containing no binary connectives and n + 1\nnegations, there is truth-value assignment that makes it true and a truth-\nvalue assignment that makes it false.\n6. So every sentence of SL containing no binary connectives and n + 1 nega\ntions is truth-functionally indeterminate.\nSo, if every sentence of SL containing (a) no binary connectives and (b) n\nor fewer negations is truth-functionally indeterminate, then so is every sentence\nof SL containing no binary connectives and n + 1 negations.\nQ.E.D.\nPart (e)\nWhere P is a sentence of SL and Q is a sentential component of P, let [P](Q1//Q)\nbe a sentence that is the result of replacing at least one occurrence of Q in P\nwith the sentence Q1.\nTo show:\nClaim: If Q and Q1 are truth-functionally equivalent, then P and [P](Q1//Q)\nare truth-functionally equivalent.\nClearly, Claim follows from the following. . .\nBasis Clause: Claim is true when P is atomic.\n\nInductive Step: If Claim is true for all P containing n or fewer connectives, it is true for\nall P containing n + 1 connectives.\n. . . as every sentence of SL contains n connectives, for some natural number n.\nProof of Basis Clause:\n1. [P](Q1//P) is just Q1.\n2. So if Q1 is truth-functionally equivalent to P, then obviously [P](Q1//P)\nis truth-funcitonally equivalent to P.\n3. But when P is atomic, it's only sentential component is P.\n4. So, for all sentential components Q of P, if Q and Q1 are truth-functionally\nequivalent, then P and [P](Q1//Q) are truth-functionally equivalent,\nwhen P is atomic.\nSo Claim is true when P is atomic.\nQ.E.D.\nProof of Inductive Step: Every sentence of SL containing n + 1 connec\ntives is either of the form p∼ Pq, for some P containing n connectives, or is of\nthe form P R, where P, R contain n or fewer connectives (and ' ' is a variable\n·\n·\nthat ranges over binary connectives of SL). I prove Inductive Step for each\ncase in turn.\nCase 1: Consider a sentence of SL of the form p∼ Pq, where P is a sentence\ncontaining n connectives. Every sentential component Q of p∼ Pq is either\n(a) p∼ Pq itself, or\n(b) is a sentential component of P.\nI prove each sub-case in turn.\nSub-case (a): When Q is p∼ Pq itself, [p∼ Pq](Q1//Q) is truth-funcitonally\nequivalent to p∼ Pq, for Q1 truth-functionally equivalent to Q, by the same\nargument as in the proof of Basis Clause.\nSub-case (b):\n1. Suppose Q is a sentential component of P.\n2. Suppose, also, that P and [P](Q1//Q) are truth-functionally equivalent\nwhen Q1 truth-functionally equivalent to Q (i.e., suppose the antecedent\nof Inductive Step for the case of P).\n3. Then p∼ Pq and p∼ ([P](Q1//Q))q are truth-functionally equivalent (by\nthe definition of '∼').\n4. And p∼ ([P](Q1//Q))q is identical to [p∼ Pq](Q1//Q), when Q is a\nsentential component of P.\n\n5. So, if P and [P](Q1//Q) are truth-functionally equivalent, then p∼ Pq is\ntruth-functionally equivalent to [p∼ Pq](Q1//Q), for Q1 truth-functionally\nequivalent to Q, when Q is a sentential component of P.\nSo, if Claim is true for a sentence P containing n connectives, it is true for\np∼ Pq. That concludes the proof for Case 1.\nCase 2: Consider a sentence of SL of the form P R, where P, R are sen\n·\ntences containing n or fewer connectives. Every sentential component of P R\n·\nis either\n(a) P R itself,\n·\n(b) a sentential component of P or a sentential component of R (or both).\nI prove each sub-case in turn.\nSub-case (a): The proof here is the same as the proof of Basis Clause\nand sub-case (a) of Case 1, mutatis-mutandis.\nSub-case (b):\n1. Suppose Q a sentential component of P or R or both.\n2. Suppose, also, that P and [P](Q1//Q) are truth-functionally equivalent,\nand R and [R](Q1//Q) are truth-functionally equivalent, when Q1 is\ntruth-functionally equivalent to Q (i.e., suppose the antecedent of Induc\ntive Step for the cases of P and R).\n3. Then P R is truth-functionally equivalent to [P](Q1//Q) [R](Q1//Q)\n·\n·\n(by the relevant binary-connective's defintion).\n4. And [P](Q1//Q) [R](Q1//Q) is identical to [P R](Q1//Q), when Q is\n·\n·\na sentential component of P or R.\n5. So, if P and [P](Q1//Q) are truth-functionally equivalent, and R and\n[R](Q1//Q) are truth-funcitonally equivalent, then P R is truth-functionally\n·\nequivalent to [P R](Q1//Q), for Q1 truth-functionally equivalent to Q,\n·\nwhen Q is a sentential component of P or R.\nSo, if Claim is true for sentences P, R containing n or fewer connectives, it\nis true for P R.\n·\nThat concludes the proof for Case 2.\nSo that concludes the proof for Inductive Step.\nQ.E.D.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw04.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/d8d9fc45e5ba63bd35890ef5bda97d8a_MIT24_241F09_hw04.pdf",
      "content": "Logic I\nFall 2009\nProblem Set 4\nComplete the following exercises from The Logic Book, 5th ed:\n1. 5.3E\n2. 14a, 14b, 14c (metatheory proofs)\n3. 6.1E 1b, 1e (mathematical induction problems)\nNote: There is no class next Tuesday, so the pset is due next Thursday!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw05_sol.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/64fedeb1da3f700f206e12e56b539b7f_MIT24_241F09_hw05_sol.pdf",
      "content": "Problem Set 5: Answers\nDamien Rochford\nQuestion 1\nThe trickiest things about this question is just stating what you want to prove\nin the right way.\nLet Q1, Q2, . . . , Qn be atomic sentences. Let v(R) be the truth value as\nsigned to R by truth-value assignment v. Let p(. . . (P1&P2)& . . . &Pn)q be the\nsentence such that Pi = Qi iff v(Qi) = T , Pi = p∼ Qiq iff v(Qi) = F .\nShowing that a sentence constructed in accordance with the characteristic\nsentence algorithm in TLB is, indeed, a characteristic sentence for the row of the\ntruth-function schema in question is equivalent to showing that a truth-value\nassignment makes p(. . . (P1&P2)& . . . &Pn)q true if and only if that truth-value\nassignment assigns truth-values to the relevant atomic sentences in the way\nthat v does. (You should think of v as the truth-value assignment that assigns\ntruth-values in the way indicated by the row of the truth-function schema in\nquestion.) Another way of saying this: u(p(. . . (P1&P2)& . . . &Pn)q) = T iff\nu(Qi) = v(Qi), for all i.\nSo what we want to show is that u(p(. . . (P1&P2)& . . . &Pn)q) = T iff\nu(Qi) = v(Qi), for all i.\nHere's a proof:\n1. By the fact in 6.1E (1d), u(p(. . . (P1&P2)& . . . &Pn)q) = T iff u(P1) =\nu(P2) = . . . = u(Pn) = T .\n2. u(P1) = u(P2) = . . . = u(Pn) = T iff both\n(a) for all i such that Pi = Qi, u(Pi) = T , and\n(b) for all i such that Pi = p∼ Qiq, u(Pi) = T\n(as all i are either such that Pi = Qi, or such that Pi = p∼ Qiq).\n3. Now, 2(a) is true iff for all Pi = Qi, u(Qi) = T , obviously, and 2(b) is\ntrue iff for all i such that Pi = p∼ Qiq, u(Qi) = F (by the definition of\n' ∼').\n4. So u(P1) = u(P2) = . . . = u(Pn) = T iff both\n(a) for all Pi = Qi, u(Qi) = T\n(b) for all i such that Pi = p∼ Qiq, u(Qi) = F .\n(by 2, 3).\n5. But for all i such that Pi = Qi, v(Q1) = T , and for all i such that\nPi = p∼ Qiq, v(Qi) = F (by the definition of v above).\n6. So u(P1) = u(P2) = . . . = u(Pn) = T iff, u(Qi) = v(Qi), for all i (from\n4, 5).\n7. So u(p(. . . (P1&P2)& . . . &Pn)q) = T iff u(Qi) = v(Qi) (from 1, 6).\nQ.E.D.\n\nQuestion 2\nLet Γ be the set of atomic sentences.\nLet L1 be the set of all sentences P such that P ∈ L1 iff\n(a) P ∈ Γ, or\n(b) P is of one of the following forms:\n(i) p∼ Qq;\n(ii) pQ&Rq;\n(iii) pQ ∨ Rq;\nwhere Q, R ∈ L1.\nLet L2 be the set of all sentences P such that\n(a) P ∈ Γ, or\n(b) P is of the form pQ ↓ Rq, where Q, R ∈ L2.\nWe know that { ' ∼','&','∨ ' } is TF-complete, so we know that for every truth-\nfunction, there is a sentence in L1 that expresses that truth-function. If, for\nevery sentence P ∈ L1, there is a sentence in L2 that expresses the same truth\nfunction as P, then it follows that for every truth-function, there is a sentence\nin L2 that expresses that truth-function, from which it follows that { ' ' } is\nTF-complete.\n↓\nSo, all that remains to be done to prove that { ' ' } is TF-complete is to prove\n↓\nthat for every sentence P ∈ L1, there is a sentence in L2 that expresses the same\ntruth function as P.\nI prove this by mathematical induction.\nBasis Clause: For every atomic sentence P ∈ L1 there is a sentence in L2 that expresses\nthe same truth function as P.\nInductive Step: If, for every sentence P ∈ L1 containing n or fewer connectives there is a\nsentence in L2 that expresses the same truth-function as P, then for every\nsentence Q ∈ L1 containing n + 1 connectives there is a sentence in L2\nthat expresses the same truth-function as L2.\nClearly, it follows from Basis Clause and Inductive Step that for every\nsentence P ∈ L1, there is a sentence in L2 that expresses the same truth function\nas P.\nThe proof of Basis Clause is immediate; for every atomic sentence P ∈ L1\nthere is a sentence in L2 that expresses the same truth function as P -- namely,\nP. (Besides, every atomic sentence expresses the same truth-function: the one\nthat maps true to true and false to false.)\nNow for Inductive Step. Consider an arbitrary sentence Q ∈ L1 contain\ning n + 1 connectives. Q is either of the form\n\n(a) p∼ Rq, or\n(b) pR&Sq, or\n(c) pR ∨ Sq.\nI prove Inductive Step for each case in turn.\nCase (a):\n1. Suppose that, for every sentence P ∈ L1 containing n or fewer connectives\nthere is a sentence in L2 that expresses the same truth-function as P (i.e.,\nsuppose the antecedent of Inductive Step).\n2. Then there is a sentence in L2 that expresses the same truth-function as\nR (as R contains n connectives). Call that sentence in L2 T.\n3. I claim that pT ↓ Tq expresses the same truth-funciton as p∼ Rq. Here's\na sub-proof of my claim:\n(i) A truth-value assignment makes p∼ Rq true iff it makes R false (by\ndefintion of '∼').\n(ii) A truth-value assignment makes R false iff it makes T false (by 2).\n(iii) A truth-value assignment makes T false iff it makes pT\nTq true\n↓\n(by the definition of ' '. I leave the verification of this as an exercise\nfor the reader).\n↓\n(iv) So a truth-value assignment makes p∼ Rq true iff it makes pT ↓ Tq\ntrue.\n(v) So p∼ Rq expresses the same truth-function as pT ↓ Tq.\n4. pT ↓ Tq ∈ L2 (by the definition of L2).\n5. So there exists a sentence of L2 that expresses the same truth-function as\np∼ Rq.\n6. So, assuming the antecedent of Inductive Step, for every sentence of\nthe form p∼ Rq, where R has n connectives, there is a sentence in L2\nthat expresses the same truth-function as p∼ Rq.\nThat proves Inductive Step for case (a).\nCase (b):\n1. Suppose that, for every sentence P ∈ L1 containing n or fewer connectives\nthere is a sentence in L2 that expresses the same truth-function as P (i.e.,\nsuppose the antecedent of Inductive Step).\n2. Then there is a sentence in L2 that expresses the same truth-function as\nR and a sentence of L2 that expresses the same truth-function as S (as\nboth R and S contain n or fewer connectives). Call those sentence in L2\nT and U, respectively.\n\n3. I claim that p(T\nT)\n(U\nU)q expresses the same truth-function as\n↓\n↓\n↓\npR&Sq. Here's a sub-proof of my claim:\n(i) A truth-value assignment makes pR&Sq true iff it makes both R\nand S true (by defintion of '&').\n(ii) A truth-value assignment makes both R and S true iff it makes both\nT and U true and it (by 2).\n(iii) A truth-value assignment makes both T and U true iff it makes\np(T\nT)\n(U\nU)q true (by the definition of ' '. I leave the\n↓\n↓\n↓\n↓\nverification of this as an exercise for the reader).\n(iv) So a truth-value assignment makes pR&Sq true iff it makes p(T\nT)\n(U\nU)q true.\n↓\n↓\n↓\n(v) So pR&Sq expresses the same truth-function as p(T\nT)\n(U\nU)q.\n↓\n↓\n↓\n4. p(T ↓ T) ↓ (U ↓ U)q ∈ L2 (by the definition of L2).\n5. So there exists a sentence in L2 that expresses the same truth-function as\npR&Sq.\n6. So, assuming the antecedent of Inductive Step, for every sentence of the\nform pR&Sq, where R, S have n or fewer connectives, there is a sentence\nin L2 that expresses the same truth-function as pR&Sq.\nThat proves Inductive Step for case (b).\nCase (c):\n1. Suppose that, for every sentence P ∈ L1 containing n or fewer connectives\nthere is a sentence in L2 that expresses the same truth-function as P (i.e.,\nsuppose the antecedent of Inductive Step).\n2. Then there is a sentence in L2 that expresses the same truth-function as\nR and a sentence of L2 that expresses the same truth-function as S (as\nboth R and S contain n or fewer connectives). Call those sentence in L2\nT and U, respectively.\n3. I claim that p(T\nU)\n(T\nU)q expresses the same truth-function as\n↓\n↓\n↓\npR ∨ Sq. Here's a sub-proof of my claim:\n(i) A truth-value assignment makes pR ∨ Sq true iff it does not make\nboth R and S false (by defintion of '∨').\n(ii) A truth-value assignment does not make both R and S false iff it\ndoes not make both T and U false and it (by 2).\n(iii) A truth-value assignment does not makes both T and U false iff it\nmakes p(T\nU)\n(T\nU)q true (by the definition of ' '. I leave the\n↓\n↓\n↓\n↓\nverification of this as an exercise for the reader).\n\n(iv) So a truth-value assignment makes pR ∨ Sq true iff it makes p(T ↓\nU)\n(T\nU)q true.\n↓\n↓\n(v) So pR ∨ Sq expresses the same truth-function as p(T\nU)\n(T\nU)q.\n↓\n↓\n↓\n4. p(T ↓ U) ↓ (T ↓ U)q ∈ L2 (by the definition of L2).\n5. So there exists a sentence in L2 that expresses the same truth-function as\npR&Sq.\n6. So, assuming the antecedent of Inductive Step, for every sentence of the\nform pR ∨ Sq, where R, S have n or fewer connectives, there is a sentence\nin L2 that expresses the same truth-function as pR ∨ Sq.\nThat proves Inductive Step for case (c).\nAnd that finishes the proof of Inductive Step\nAnd that finishes the proof that for every sentence P ∈ L1, there is a sentence\nin L2 that expresses the same truth function as P.\nAnd that finishes the proof that { ' ' } is TF-complete.\nQ.E.D.\n↓\nQuestion 3\nThere are, in fact, two ways to use the proof that SD is sound to prove that\nSD? is sound. One way is to show that if Γ ` P in SD?, then Γ ` P in SD, so,\nby the soundness of SD, if Γ ` P in SD?, then Γ |= P -- i.e., SD? is sound.\nI'm going to do it the other way, which is the way I think the question\nprompt is nudging you. The other way goes as follows.\nThe goal is to prove that SD? is sound; i.e., that. . .\nSD? Soundness: If Γ ` P in SD?, then Γ |= P\n. . . is true. We are going to prove it by mathematical induction. Let Pk be the\nkth sentence in an SD? derivation, and let Γk be the set of assumptions open\non the kth line of that SD? derivation. Clearly, SD? Soundness follows from\nthe following:\nBasis Clause: Γ1 |= P1.\nInductive Step: If Γk+1 ` Pk+1 in SD?, then Γk+1 |= Pk+1.\nThe proof of Base Case is exactly the same as the proof for the analogous\nbase case in TLB on page 260, which is part of the proof of the soundness\nof SD. The proof of Inductive Step is exactly the same as the proof of the\nanalogous inductive step on pages 260-264 of TLB, which is also part of the proof\nof soundness of SD, except you need to add a case for Backwards Conditional\nIntroduction.\nOne way for that case to go is as follows:\n\nCase 13: Pk+1 is justified by Backwards Conditional Introduction:\nh\n∼ R\nj\n∼ Q\nk + 1\nR ⊃ Q (= Pk+1)\nh-j, B⊃I\n1. By exactly the same proof as in case 8, we know that Γk+1 |=\np∼ R ⊃∼ Qq.\n2. So there is no truth-value assignment such that every member\nof Γk+1 is true and p∼ R ⊃∼ Qq is false (by the definition of\n' |=').\n3. So there is no truth-value assignment such that every member\nof Γk+1 is true and p∼ Rq is true and p∼ Qq is false (by the\ndefinition of '⊃').\n4. So there is no truth-value assignment such that every member\nof Γk+1 is true and R is false and Q is true (by the definition\nof '∼').\n5. So there is no truth-value assignment such that every member\nof Γk+1 is true and Q ⊃ R is false (again by the definition of\n' ⊃').\n6. So Γk+1 |= Q ⊃ R.\nSo Inductive Step is true in the case when Pk+1 is justified by Backwards\nConditional Introduction. So, by that and the stuff in the proof of the soudness\nof SD, Inductive Step is true. So, by that and Base Case, SD? is sound.\nQ.E.D.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_hw05.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/9b59a14e9c3cedb6df8872005db1fceb_MIT24_241F09_hw05.pdf",
      "content": "Logic I\nFall 2009\nProblem Set 5\nIn class I talked about SL being truth-functionally complete (TF-complete). For the\nproblems below, use TLB's definition of TF-completeness, according to which it is sets of\nconnectives that are (or aren't) TF-complete:\nDefinition: A set of connectives is TF-complete iff a language with only connectives in that\nset can express every truth-function.\n1. Assume the fact in 6.1E (1d). Use this to complete problem 6.2E (1).\nThis result shows that the algorithm on pages 252-255 generates, for any truth-\nfunction, a sentence of SL that expresses that truth-function. So it completes the\nproof that the set of connectives of SL is TF-complete. In fact, it proves that the\nsmaller set {' ','&','∨'} is TF-complete, because those are the only connectives in SL\n¬\nwe used in the algorithm.\n2. Use the fact that {' ','&','∨'} is TF-complete to do problem 6.2E (5).\n¬\n3. Complete problem 6.3E (4b). To do this, explain how to modify the proof by mathe\nmatical induction on pages 260-264 of TLB, and explain why your modification yields\nthe desired proof.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_final_study_guide.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/56f43731bfb2513d7b46afa10236e072_MIT24_241F09_final_study_guide.pdf",
      "content": "Logic I\nFall 2009\nFinal exam study guide\n- The exam is Tuesday, December 15 9:00AM - 12:00 in 56-154.\n- It will be a mixture of true/false questions, short answers questions, truth-table ques-\ntions, and derivations.\n- Questions may be on material from any segment of the course.\n- Suggested study strategy:\n- Review the glossaries at the ends of the chapters of TLB that were assigned. Make\nsure you can provide all the definitions offthe top of your head.\n- Review all psets and pset answer sheets, making sure you understand how to\nanswer questions of each type.\n- Review all quizzes and make sure you understand what your mistakes were.\n- Read through all the slides that have been posted, and be sure you understand\nthem.\n- Reread all the handouts that I distributed over the course of the semester.\n- The exam will include questions on topics such as the following:\n- The difference between deductive and inductive arguments.\n- Putting English arguments in standard form (TLB pg. 7).\n- Evaluating arguments in English for deductive validity and soundness.\n- The notions of logical truth, falsity, indeterminacy, and set of sentences for logical\nconsistency, inconsistency, equivalence, inequivalence.\n- Truth-functionality.\n- Simple sentences vs. compound sentences vs. truth-functionally compound sen-\ntences.\n- Truth-functional vs. non-truth-functional connectives.\n- Truth-tables for connectives.\n\n- Symbolizing English sentences in SL.\n- English compound sentences that can only be translated as atomic sentences of\nSL.\n- Worries about how well the connectives of SL can capture ordinary language.\n- The syntax of SL.\n- Determining the main connective of a sentence of SL.\n- The semantics of SL, what a truth-value assignment is.\n- Creating truth-tables for sentences of SL.\n- The notions of truth-functional truth, falsity, indeterminacy, equivalence, inequiv-\nalence, entailment, validity.\n- How to use truth-tables to test sentences or sets of sentences for those properties.\n- The notion of a derivation system.\n- Scope and scope lines.\n- Primary vs. auxiliary assumptions.\n- Open vs. closed / discharged assumptions.\n- Accessibility.\n- The rules of SD.\n- Definition of an SD derivation, derivability in SD.\n- The notions of validity in SD, equivalence in SD, inequivalence in SD, consistency\nin SD, inconsistency in SD, theorem in SD.\n- How to use derivations in SD to establish derivability, validity, inconsistency,\ntheoremhood, equivalence.\n- The relationship between SD and SD+.\n- The strategy of mathematical induction. Basis clauses, inductive steps, inductive\nhypotheses.\n- The notion of a sentence expressing a truth-function.\n- The notion of truth-functional completeness for sets of connectives.\n- Characteristic sentences for rows of truth-tables.\n- The algorithm for finding sentences that express certain truth-functions.\n- The notions of soundness and completeness for derivation systems.\n- Set-theoretic notions and notations: subset / superset, empty set, set membership.\n- '⊢' vs. '⊨'.\n- The strategy for proving soundness of SD. Use of mathematical induction and\nproof by cases for the rules of SD.\n\n- The strategy for proving completeness of SD.\n∗The use of consistency / inconsistency in SD, truth-functional consistency /\ninconsistency.\n∗Enumerating sentences of SL.\n∗Constructing maximal consistent sets.\n∗Establishing properties of maximal consistent sets.\n∗Showing that maximal consistent sets are truth-functionally consistent.\n- Compactness.\n- Singular terms, individual constants, predicates.\n- Variables and quantifiers.\n- Symbolization keys.\n- Universe of discourse.\n- The syntax of PL.\n- Formulas vs. sentences.\n- Atomic formulas of PL, logical operators, main logical operators, scopes of quan-\ntifiers.\n- Open sentences, free vs. bound variables.\n- Definition of a substitution instance and notation for it.\n- Quantifier scope ambiguities.\n- Translating English sentences into PL.\n- '=', functors, and functions. Complex terms. Open vs. closed terms.\n- How to translate definite descriptions like 'the dog'.\n- Semantics for PL: interpretations (informal, as in ch. 8.1, formal as in 8.7), partial\ninterpretations.\n- Notions of quantificational truth, falsity, determinacy, indeterminacy, equivalence,\ninequivalence, consistency, inconsistency, entailment, validity.\n- Truth / falsity on an interpretation.\n- Satisfaction of formulas.\n- Variable assignments and variants thereof.\n- Denotations of terms, extensions.\n- Determining truth-values of sentences on formal interpretations.\n- The rules of PD, restrictions on ∀I, ∃E.\n- Sub-derivations and instantiating constants.\n- The notions of derivability in PD, validity, theorem, equivalence, inconsistency.\n\n- Using derivations to establish those properties.\n- The rules of PDE. Instantiating terms.\n- Strategy for proving soundness of PD.\n- Basic strategy for proving completeness of PD, main steps and notions involved.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_final.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/f3e50d3b110f1e40f64bed5f19c3955f_MIT24_241F09_final.pdf",
      "content": "24.241 -- Logic I, Fall 2009\nFinal Exam\nYou may not use any notes, handouts, or other material during the exam. All cell phones\nmust be turned off. Please read all instructions carefully. Good luck with the exam and with\nthe rest of your time at MIT!\nPart One: English (1 pt. each)\n1. Fill in the blank: An argument (in English) is deductively valid iff . . . .\n2. Fill in the blank: English sentences P and Q are logically equivalent iff . . . .\n3. True / False: For any argument A (in English), if the premises and conclusion of A\nare all true, then A is deductively sound.\n4. True / False: For any set Γ of English sentences, if no member of Γ is logically true,\nthen some argument whose premises and conclusion are members of Γ is deductively\ninvalid.\n5. True / False: For any argument A (in English), if A's conclusion is logically equivalent\nto one of A's premises, then A is deductively valid.\nSpecify whether each of the following arguments is deductively valid or invalid.\nFlounders don't snore.\n6. If flounders snore, then they annoy sharks.\nFlounders don't annoy sharks.\nLight travels faster than any spaceship can travel.\n7. Every spaceship can travel faster than any cheetah can run.\nNo cheetah can run faster than some spaceship can travel.\nEveryone loves anyone who loves someone.\n8. John loves Mary.\nEveryone loves everyone.\n6+3=63.\n9. Some dogs bark.\n\nPart Two: Sentential Logic\n10. Symbolize each of the following English sentences in SL, revealing as much of their\nlogical form as possible. Be sure to indicate which sentences your sentence letters\nabbreviate. If you think the English sentence is ambiguous among multiple symboliza\ntions, provide them all. (1 pt. each)\n(a) Flounders snore if all fish snore.\n(b) Flounders don't snore or sleep.\n(c) Only if it rains will the concert be cancelled.\n(d) John will turn into a frog if and only if either he doesn't receive an antidote or\nthe antidote doesn't work.\n(e) Neither rain nor snow will stop the postal service.\n(f) Mary and Bill are tall, but their children aren't.\n(g) Mary and Bill are a married couple.\n(h) At least one of John, Mary, and Bill is a lobbyist, but if Mary is, then John and\nBill are too.\n\n11. Complete the following truth-table. (3 pts.)\nA B\nC\n∼((A ⊃B)∨∼(A& ∼B)) ⊃(C& ∼C)\n12. Construct truth-tables to establish each of the following claims. Be sure to indicate\nwhich parts of the truth-table demonstrate the point. (3pts. each)\n(a) ∼A ⊃(A ⊃B) is truth-functionally true.\n(b) {A ≡(B ∨C), ∼A& ∼C} is truth-functionally consistent.\n\n13. Which of the following sorts of claims, if true, can be proved in SD? (3 pts. total)\n(a) That a certain set of sentences is truth-functionally consistent.\n(b) That a certain set of sentences is truth-functionally inconsistent.\n(c) That a certain set of sentences truth-functionally entails a certain other sentence.\n(d) That a certain set of sentences does not truth-functionally entail a certain other\nsentence.\n(e) That a certain sentence is truth-functionally true.\n(f) That a certain sentence is not truth-functionally true.\n(g) That a certain sentence is truth-functionally false.\n(h) That a certain sentence is not truth-functionally false.\n(i) That a certain sentence is truth-functionally indeterminate.\n(j) That two particular sentences are truth-functionally equivalent.\n(k) That two particular sentences are not truth-functionally equivalent.\n(l) That a certain argument is truth-functionally valid.\n(m) That a certain argument is not truth-functionally valid.\n14. Construct derivations in SD to prove each of the following:\n(a) {D&E, D ≡ C} ⊢ (A& ∼ A) ∨ C\n(3 pts.)\n\n(b) {P ∨ Q, ∼ Q, P ⊃ Q} ⊢ R& ∼ R\n(3 pts.)\n(c) {A ⊃ B, C ⊃ D, A ∨ C} ⊢ B ∨ D\n(3 pts.)\n\n(d) {A ⊃ B}⊢∼ A ∨ B\n(4 pts.)\n15. Fill in the blank: A set of connectives is truth-functionally complete iff . . .\n(2pts.)\n16. What is the minimum number of connectives (not necessarily the familiar connectives\nof SL) required to form a truth-functionally complete set? (1 pt.)\n17. Provide examples of (a) a truth-functionally complete set of connectives from SL and\n(b) a set of two or more connectives from SL that is not truth-functionally complete.\n(2 pts.)\n\n18. LetΓ n be the set of assumptions open at line n of a derivation in SD, and Pn be the\nsentence occurring on line n. Prove that if, for all lines up to and including k,Γ k ⊨ Pk,\nthen if line k+1 is justified by ∨I, thenΓ k+1 ⊨ Pk+1.\n(4 pts.)\n19. Prove that for every set Γ* of SL sentences that is maximally consistent in SD,\nΓ*⊢ P iff P ∈ Γ*.\n(3 pts.)\n20. Prove that for every set Γ* of SL sentences that is maximally consistent in SD,\nif P ∈ Γ* then ∼ P ∈ Γ*. You may appeal to the result above.\n(3 pts.)\n\n21. Prove that for every set Γ* of SL sentences that is maximally consistent in SD,\nQ ∨ R ∈ Γ* iff Q ∈ Γ* or R ∈ Γ*. You may appeal to any result above.\n(3 pts.)\nPart Three: Predicate Logic\n22. Provide an argument in English whose symbolization in SL in invalid in SD but whose\nsymbolization in PL in valid in PD. Provide both symbolizations.\n(1 pt.)\n23. Fill in the blank: A sentence of PL is true on interpretation I iff . . .\n(1 pt.)\n24. Fill in the blank: A sentence (∃x)P of PL is satisfied by variable assignment d on\ninterpretation I iff . . .\n(1 pt.)\n\n25. Symbolize the following English sentences in PL, revealing as much of their logical form\nas possible. If you think the English sentence is ambiguous among multiple symbol\nizations, provide them all. In the space below, you may provide a single symbolization\nkey to cover all the sentences.\n(1 pt. each)\n(a) Some students understand TLB.\n(b) Professors who bore someone are common.\n(c) All professors like some of their students.\n(d) Every student is passed by some professor who understand him or her.\n(e) Any professor who is bored by everything bores all his or her students.\n(f) Professors pass all and only those of their students they are understood by.\n(g) No professor who understands TLB bores any of his or her students.\n(h) If a student understand TLB, some professor passes him or her.\n\n26. Whenever any truth-functional property listed in question (13) holds of certain sen\ntences or among certain sentences and sets of sentences of SL, truth-tables provide a\nmethod for proving that that property holds. When we turn to PL, do we have an\nequally powerful method? Which quantificational properties, when they obtain, can\nbe proved in PD to obtain?\n(3 pts.)\n27. One of the restrictions on the use of ∃E is that the instantiating constant must not\noccur in an undischarged assumption. Explain, using an example, why this restriction\nis necessary.\n(3 pts.)\n28. Provide derivations to prove each of the following claims. You may use any rules of\nPD as well as the rules =I and =E.\n(a) {(∀x)Fx} ⊢ (∃x)Fx\n(3 pts.)\n\n(b) {(∃x)(Fx ⊃ Ga)} ⊢ (∀x)Fx ⊃ Ga\n(3 pts.)\n(c) {(∀x)(Fx ∨ (∃y)Gxy)} ⊢ (∀x)(∃y)(Fx ∨ Gxy)\n(3 pts.)\n\n(d) {Hb ∨ (∀z) ∼ Hz, (∃y)Hy} ⊢ Hb\n(4 pts.)\n(e) ∅ ⊢∼ a = b ⊃∼ b = a\n(3 pts.)\n\n29. Provide a sentence of PL or PLE that is true on some interpretation, and that is true\nonly on interpretations whose UD contains infinitely many things.\n(2 pts.)\n30. Provide a sentence of PLE that is true on some interpretation, and is not true on any\ninterpretation whose UD contains infinitely many things.\n(2 pts.)\n31. The L owenheim-Skolem Theorem tells us:\nIf a set Γ of sentences of PL is quantificationally consistent, then there is\nan interpretation with the set of positive integers as the UD on which every\nmember of Γ is true.\nProve this result. You may appeal to any of our meta-logical results from class, in\ncluding our proofs of the soundness and completeness of PD.\n(3 pts.)\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "MIT24_241F09_quiz1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/436692f93104842e2907b4c5c53d97c3_MIT24_241F09_quiz1.pdf",
      "content": "Logic I\nFall 2009\nQuiz 1\n9/17/2009\nTranslate the English sentences below into SL. Use the atomic sentences provided whenever\npossible (if the English sentence's translation is atomic, say so and explain why). If you\nthink the English sentence is ambiguous between multiple SL translations, provide them all.\nT: Tim swam in the Charles\nM: Mary swam in the Charles\nB: Tim's leg was eaten by a barracuda\nU: Mary escaped unscathed\nE: Someone swam in the Charles\nF: Someone escaped unscathed.\nP: The Charles is pristine\nC: The MIT pool is closed\nS: Mayor Menino should clean up the Charles\n1. Mary didn't swim in the Charles, and neither did Tim.\n2. Mary and Tim swam in the Charles, and though Mary escaped unscathed, Tim's leg\nwas eaten by a barracuda.\n3. If the MIT pool isn't closed, then Mary didn't swim in the Charles.\n4. Tim swam in the Charles only if the MIT pool is closed.\n5. Tim swam in the Charles because the MIT pool is closed.\n6. Neither Tim nor Mary swam in the Charles if the Charles isn't pristine.\n7. Either Tim or Mary swam in the Charles if and only if the Charles is pristine.\n8. At least one of Mary and Tim swam in the Charles.\n9. Someone swam in the Charles yet didn't escape unscathed.\n10. Mary swam in the Charles and escaped unscathed, but Mayor Menino should clean it\nup if the MIT pool is closed.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "MIT24_241F09_quiz2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/c9d8b0689c4fc596a48f4dfa0242537e_MIT24_241F09_quiz2.pdf",
      "content": "Logic I\nFall 2009\nQuiz 2\n10/1/2009\n- For questions 2 and 3, Let Γ be a set of SL sentences and P an SL sentence.\n- If you cannot complete the derivations in 4 and 5, you may earn partial credit if your\npartial proof demonstrates that you have an adequate strategy.\n1. (a) (5 pts.) Is the argument below truth-functionally valid?\n∼ (A ⊃ (B ∨ A))\n∼ B\n(b) (20 pts.) Prove your answer is correct with a truth-table. Indicate the lines of\nthe truth-table that prove your claim.\n2. (a) (5 pts.) If Γ is truth-functionally consistent and Γ truth-functionally entails P,\ncouldΓ ∪{P} be truth-functionally inconsistent?\n(b) (10 pts.) Why?\n3. (15 pts.) Prove the following: IfΓ ∪ P is truth-functionally inconsistent, then the\nargument whose premises are the members of Γ and whose conclusion is ∼P is truth-\nfunctionally valid.\n\n4. (20 pts.) Prove the following in SD: {(A&B) ∨ (B&C)} ⊢ A ∨ (B&C)\n5. (a) (5 pts.) Is the argument below valid in SD?\nA\n∼ A\n∼ (A& ∼ A)\n(b) (20 pts.) Prove your answer is correct.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "MIT24_241F09_quiz3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/197e016d86ba7b12f03029026e8ba9b0_MIT24_241F09_quiz3.pdf",
      "content": "Logic I\nFall 2009\nQuiz 3\n10/15/2009\nTrue or false:\n1. SD+ is stronger than SD.\n2. If {P } ⊢ Q in SD, then ∅⊢ P ⊃ Q in SD.\n3. If P is true and Q is true, then {P } ⊢ Q in SD\n4. If {P } ⊢ Q in SD, then {P }⊢∼ Q in SD.\n5. If P is true and Q is true, then {P ⊨ Q}\n6. If P is true and Q is false, then {P ⊨ Q}\n7. IfΓ ∪{P } is inconsistent, then for some Q ∈ Γ, {P, Q} is inconsistent.\n8. Use appropriate definitions in terms of TVAs to prove the following:\nIfΓ 1 ⊨ P andΓ 2 ⊨ Q, thenΓ 1 ∪ Γ2 ⊨ P &Q.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "MIT24_241F09_quiz4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/2cb2b33b7bc87e65158be5041bae082d_MIT24_241F09_quiz4.pdf",
      "content": "Logic I\nFall 2009\nQuiz 4\nComplete the definitions below.\n1. P is derivable from Γ (Γ ⊢ P) iff. . .\n2. P is truth-functionally entailed by Γ (Γ ⊨ P) iff. . .\n3. Γ is truth-functionally consistent iff. . .\n4. Γ is maximally consistent in SD iff. . .\nWe can prove by mathematical induction that for any sentence P of SL, on any TVA P has\nthe same truth-value as P prefixed by any even number of negations. Complete the follow\ning proof, letting S be the ordered sequence of all non-negative even integers (this includes 0).\nBasis Clause: . . .\nInductive Step: If, for the ith member of S, on any TVA P has the same truth-value as P\nprefixed by n negation symbols, where n is the ith member of S, then . . .\nProof of inductive step: . . .\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "MIT24_241F09_quiz5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/6f05ffa49f3cc91009dc6bb3a67bc151_MIT24_241F09_quiz5.pdf",
      "content": "Logic I\nFall 2009\nQuiz 5\n1. (8 pts. each) For each of the strings of symbols below, identify whether it counts as a\nsentence of PL, a formula of PL, both, or neither. (Let 'F' and 'G' be 1-place predicate\nletters, 'R' a two-place predicate letter, 'A' a sentence letter.)\n(a) Fx\n(b) Rb\n(c) (Ga & Ga)\n(d) ∀yRxy\n(e) (∃z)Fz\n(f) (A ⊃ (∃x)Gx)\n(g) (∀x)(∃y)(Gx & Fy)\n(h) (∀x)(∃z)(Gx & Fy)\n(i) ((∀x)Fx & (∀x)Gx)\n(j) (∀x)(Fx & (∀x)Gx)\n2. (20 pts.) In a few sentences, briefly explain why we want to move from SL to the more\ncomplicated language PL.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Exam",
      "title": "MIT24_241F09_quiz6.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/42d83248db6e07828980e12d30e1f51f_MIT24_241F09_quiz6.pdf",
      "content": "Logic I\nFall 2009\nQuiz 6\nDetermine the truth value of each of the sentences below on the following interpretation:\nUD: {McCain, Obama, Damien}\nD: {⟨Obama⟩}\nR: {⟨McCain⟩}\nP : {⟨Damien⟩}\nO: {⟨McCain, Obama⟩, ⟨McCain, Damien⟩, ⟨Obama, Damien⟩}\nm: McCain\no: Obama\nd: Damien\n1. Oom ∨ Do\n2. (∃x)Oox\n3. (∀z)( m = z ⊃ Omz)\n¬\n4. (∃x)( x = m & Oxd)\n¬\n¬\n5. (∃y)(∃x)(Dy & Oxy)\n6. (∀x)((Dx ∨ Rx) ⊃¬Odx)\n7. (∀x)( (∃z)Oxz ⊃ Px)\n¬\n8. (∀y)(∃z)Ozy\n9. (∃z)(∀y)( y = z ⊃ Oyz)\n¬\n10. (∀y)(∀x)((Ry ⊃ Oyx) ≡¬Rx)\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_handout02.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/3d5ea8f88f0991a0dd377171ae72d4e1_MIT24_241F09_handout02.pdf",
      "content": "Logic I\nFall 2009\nSession 2 Handout\nThings to know from last time:\n- Validity. A(n) . . . . . . . . . . . . is valid iff . . .\n- Soundness. A(n) . . . . . . . . . . . . is sound iff . . .\n- Connectives. Molecular / compound sentences. Atomic / simple sentences.\n- Truth-functionality. A connective is truth-functional iff . . .\nAlso: a couple things we didn't get to last time:\n- Logical truth / falsehood\n- Logical indeterminacy\n- Logical consistency\n- Logical equivalence\nThe plan for today: Syntax of SL, connectives, truth-tables, translation issues.\n- The symbols of SL: A, B, C, . . . , H7, J3, . . . , ∼, &, ∨, ⊃, ≡, (, ).\n- A, . . . , G34 are atomic sentences or sentence letters\n- ∼ (or ¬) forms a . . .\nIt corresponds roughly to the English phrase . . .\n- & (or ∧) forms a . . .\nThe two sentences it connects are . . .\nIt corresponds roughly to the English term . . .\n- ∨ forms a . . .\nThe two sentences it connects are . . .\nIt corresponds roughly to the English term . . .\n- ⊃ (or →) forms a . . .\nThe left-hand side is the . . .\nThe right-hand side is the . . .\nIt corresponds roughly to the English terms . . .\n\n- ≡(or ↔) forms a . . .\nIt corresponds roughly to the English terms . . .\nThe set of sentences of SL is the smallest set F such that:\n-\n- Every atomic sentence is in F .\n- If φ and ψ are in F , so are ∼φ, (φ & ψ), (φ ∨ ψ), (φ ⊃ ψ), and (φ ≡ ψ).\n- Truth-functional connectives correspond to functions from truth-values to truth-values.\n- For a one-place connective, f : {T, F } →{ T, F }.\n- For a two-place connective, f : {T, F } ×{ T, F } →{ T, F }.\n- Truth-tables illustrate these functions. Fill in the simple truth-table for ∼:\nA\n∼A\n- A two-place connective will have a larger truth-table.\nA\nB\nA . . . B\nEnglish and SL: Translations and problems\n- Not all uses of English connectives are (or at least appear) truth-functional.\n'And'\n-\n'Or'\n-\n'If . . . then'. In SL:\n-\n- Contraposition: (A ⊃B) implies (∼B ⊃∼A).\n- Strengthening: (A ⊃B) implies ((A & B) ⊃B).\n- (A ⊃B) or (B ⊃A).\n- ∼(A ⊃B) iff A and ∼B.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_handout04.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/f2206834f988f9022149ee4f75f24062_MIT24_241F09_handout04.pdf",
      "content": "Logic I\nFall 2009\nSession 4 Handout\n- Using shortened truth-tables (STTs) to determine the TV of a compound given TVs\nfor the atomic components.\nA B C\n∼(A ∨B) ≡(C ⊃A)\nF\nT T\n- Building STTs in reverse to determine whether a compound sentence can possibly have\na certain TV.\nJ K\nJ & ( ∼K ∨∼J)\n- P is truth-functionally true iff . . .\nCan be proven by. . .\nCan be refuted by. . .\n- P is truth-functionally false iff . . .\nCan by proven by. . .\nCan be refuted by. . .\nNotions and notation to know\n-\n- Curly braces for sets: {A, B, {C}, {C, D}, . . . }\n- Set union. {A, B, C} ∪{ B, C, D} =\n- Variables for sets of sentences:Γ n\n- The empty set: ∅or { }.\n- Unit / singleton set\n- Γ is truth-functionally consistent iff . . .\nCan be established by. . .\nInconsistency of Γ can be established by. . .\n- A set Γ of SL sentences truth-functionally entails a sentence P iff no TVA makes every\nmember of Γ true but P is false. In other words, P is true on every TVA that makes\nall members of Γtrue.\nNotation:Γ 1 ⊨ P.\nAlso, note: ⊨ Γabbreviates ∅⊨ Γ.\n\n- An argument in SL is a set of SL sentences with one designated as the conclusion and\nthe rest designated as premises. E.g.:\nA ⊃ ( B ∨ C )\nArgument (⋆):\nB ≡ C\n∼ B\n∼ A\nP1\n. . .\n- Pn\nis truth-functionally valid iff no TVA makes P1, . . . Pn true and C false.\nC\n- We can connect truth-functional entailment with truth-functional validity:\nIn the definition of truth-functional entailment, let Γ be {P1, . . . Pn}, and let P be C.\nP1\n. .\n- Thus, P\n.\nn\nis valid iff {P1, . . . Pn} truth-functionally entails C.\nC\n- Prove that Argument (⋆) is valid and that its premises truth-functionally entail its\nconclusion by means of a truth-table.\nA B C\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_handout14.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/6d4a7b47d3211faac92d2fe3c243a379_MIT24_241F09_handout14.pdf",
      "content": "Logic I\nFall 2009\nSession 14 Handout\nThe vocabulary of PL\n- The symbols in the language PL, the basic building blocks, are:\n- Sentence letters of PL: A, B, C3, . . .\n- Predicates of PL: A′, B′, C′′\n2, . . .\n- Individual terms of PL: Individual constants of PL and variables of PL\n∗ Individual constants of PL: a, b4, c2, . . . , v\n∗ Variables of PL: w, x, y3, z1, . . .\n- Quantifiers of PL: (∀x), (∀z2), (∃x), . . .\n- And, of course, parentheses and the truth-functional connectives from SL.\nEssentials of PL syntax\n- Sentence: An expression P is a sentence of PL iff P is a formula of PL and no variable\noccurs free in P.\n- Formula: An expression is a formula of PL iff it can be formed by (possibly repeated)\napplications of the following rules:\n1. Every atomic formula of PL is a formula of PL.\n2. If P is a formula of PL, so is ¬P.\n3. If P and Q are formulas of PL, so are (P&Q), (P∨Q), (P⊃Q), and (P≡Q).\n4. If P is a formula of PL that contains at least one occurrence of x and no x-\nquantifier, then (∀x)P and (∃x)P are both formulas of PL.\n- Atomic formula: An expression is an atomic formula of PL iff it is either a sentence\nletter of PL or an n-place predicate of PL followed by n individual terms (i.e. variables\nor individual constants) of PL.\nOther important definitions\n- Scope: The scope of a quantifier is the (sub)formula of which the quantifier is the main\nlogical operator.\n- Bound variable: An occurrence of a variable x is bound iff x is within the scope of an\nx-quantifier.\n\nFree variable: An occurrence of a variable is free iff it is not bound.\n-\n- Substitution instance of P: If P is a sentence of PL of the form (∀x)Q or (∃x)Q, and\na is an individual constant, then Q(a/x) is a substitution instance of P. The constant\na is the instantiating constant.\n- P(a/x) is the expression just like P except that it contains the individual constant a\nwherever P contains the individual variable x.\nEssentials of PL semantics\n- The main semantic notion is that of an interpretation of PL.\n- An interpretation includes:\n- A specification of a UD (universe of discourse)\n- An assignment of TVs to the sentence letters of PL\n- An assignment of a member of the UD to each individual constant of PL\n- An interpretation of each predicate of PL (formally, for all n, an assignment of a\nset of n-tuples of members of the UD to each n-place predicate of PL)\n- Interpretations, like TVAs, officially cover every individual constant, predicate, etc.,\nbut we need not represent all that detail.\n- By \"interpretation\", we will unofficially mean a partial interpretation that specifies a\nUD and makes assignments to all elements of the set of sentences we are considering.\n- E.g., if we are dealing with sentences about dogs, and specifically about Fido, Sparky,\nDavy, and about which dogs growl or chase each other:\n- UD: The set of all dogs\n- Gx: x growls (formally, {x ∈UD | x growls})\n- Cxy: x chases y (formally, {⟨x, y⟩∈UD2 | x chases y})\n- f: Fido\n- s: Sparky\n- d: Davy\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "MIT24_241F09_handout18.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/1fe0cc1e57b7d4238fd9bbf254467c7c_MIT24_241F09_handout18.pdf",
      "content": "Logic I\nFall 2009\nSession 18 Handout\nFormal semantics for PL\n- An interpretation for PL is a specification of each of the following:\n- A universe of discourse UD, where ∅⊂UD.\n- For each sentence letter S of SL, a truth-value assigned to S.\n- For each n-place predicate letter F of PL, a set of n-tuples of members of UD\nassigned to F.\nE.g., if we are interpreting 'Lxy' to mean x lives in y, then to 'L' we would assign\n{ ⟨Ephraim, Somerville ⟩, ⟨Damien, Somerville ⟩, ⟨Vann McGee, Boston ⟩, . . . }.\n- For each individual constant c of PL, an individual u assigned to c, where u is a\nmember of UD.\nDenotations of individual terms on I and d:\n-\n- If t is a variable, then denI,d(t) = d(t).\n- If t is an individual constant, then denI,d(t) = I(t).\n- Variants of variable assignments:\n- d[u/x] is the variable assignment that assigns u to x and is otherwise just like d.\nE.g., if d1 = {⟨Alice, x ⟩, ⟨Bill, y ⟩, ⟨Carol, z ⟩, . . . }, then we have:\nd1[John/y] = {⟨Alice, x ⟩, ⟨John, y ⟩, ⟨Carol, z ⟩, . . . }\nSatisfaction for formulas of PL:\n-\n1. If P is a sentence letter, d satisfies P on I iff I(P)=T.\n2. If P is an atomic formula of the form At1. . . tn, where A is an n-place predicate\nof PL and t1. . . tn are individual terms of PL, d satisfies P on I iff\n⟨denI,d(t1), . . . , denI,d(tn) ⟩∈I(A).\n3. If P is of the form Q, then d satisfies P on I iff d does not satisfy Q on I.\n¬\n4. If P is of the form Q&R, then d satisfies P on I iff d satisfies Q on I or d satisfies\nR on I.\n5. If P is of the form Q ∨R, then d satisfies P on I iffeither d satisfies Q on I or\nd satisfies R on I.\n\n6. If P is of the form Q ⊃R, then d satisfies P on I iffeither d doesn't satisfy Q\non I or d satisfies R on I.\n7. If P is of the form Q ≡R, then d satisfies P on I iffeither P and Q are both\nsatisfied by d on I or neither P nor Q is satisfied by d on I.\n8. If P is of the form (∀x)Q, then d satisfies P on I iff for any u ∈ UD, d[u/x]\nsatisfies Q on I.\n9. If P is of the form (∃x)Q, then d satisfies P on I iff for some u ∈UD, d[u/x]\nsatisfies Q on I.\nTruth for PL sentences:\n-\n- A sentence P is true on interpretation I iff every variable assignment d for I1\nsatisfies P on I.\nFormal semantics for PLE\nThe definition of truth is the same.\n-\n- We extend the definitions of satisfaction, denotation, and interpretation.\n- An interpretation for PLE includes all elements of an interpretation for PL plus:\n- An assignment of a set of n+1-tuples to each n-place functor of PLE.\nE.g., if we want to interpret 'g(x,y)' to mean the sum of x and y, then to 'g' we would\nassign { ⟨1,1,2 ⟩, ⟨1,2,3 ⟩, ⟨1,3,4 ⟩. . . }.\nDenotations in PLE are the same with the addition of a clause for functor-terms:\n-\n- If t is a term f(t1, . . . , tn), where f is an n-place functor, t1, . . . , tn are terms, and\n⟨denI,d(t1), . . . , denI,d(tn), u ⟩∈I(f), then denI,d(t)= u.\nE.g., in the above example, if we let our term t be 'g(1,3)', then since 'g' is a two-place\nfunctor and ⟨1,3,4 ⟩∈g, denI,d(t)= 4.\n- Clause (2) of the definition of satisfaction already covers functor-expressions, since\nthese count as individual terms. But we need to add a clause for '=':\n10. If P is an atomic formula of the form t1 = t2, then d satisfies P on interpretation\nI iffden I,d(t1) = denI,d(t2)\n1Variable assignment d is for I iff d assigns only objects in I's UD.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "MIT24_241F09_lec09.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/90f2f08b40b1eb4d90cab1c07914edd0_MIT24_241F09_lec09.pdf",
      "content": "Logic I - Session 9\n\nPlan\nOne more example to practice meta-language proofs\nExplain mathematical induction\nExamples\n\nMore practice\n3.6E (2b) If Γ ∪ {P} ⊨ Q, then Γ ⊨ P⊃Q\n1. Γ ∪ {P} ⊨ Q\n2. Every TVA that makes every member of Γ ∪ {P} true also\nmakes Q true\n3. Every TVA that makes every member of Γ true and P true\nalso makes Q true.\n4. No TVA makes every member of Γ true and P true but\nmakes Q false.\n5. So no TVA that makes every member of Γ true makes P⊃Q\nfalse.\n6. So every TVA that makes every member of Γ true also\nmakes P⊃Q true.\n7. So Γ ⊨ P⊃Q\n\nRemember:\nTruth-functional notions are all defined in terms of TVAs (not\nderivability or possibility)\nE.g.: Γ is truth-functionally inconsistent iff there's no TVA that\nmakes every member of Γ true.\n⊨ vs. ⊢ (The symbol for derivability looks like a piece of a\nderivation.)\n\nMathematical induction\nIf we have an ordered sequence of infinitely many things,\nwe can prove that all of them have a property F by proving\ntwo simpler claims:\nBasis clause: Prove that the first thing in the sequence\nis F\nInductive step: Prove that if the nth thing is F, then so\nis the n+1st.\nConclude that everything in the sequence is F\nThe things in the sequence can b\nf SL or sets of sentences SL\ne anything, e.g. sentences\no\n\nFirst Example of MI\n6.1E (1a) Prove: No sentence of SL that contains only binary\nconnectives, if any, is truth-functionally false.\nFirst step: insert relevant definitions in the thesis to be proven\nProve: No sentence of SL that contains only binary connectives\nis false on every truth-value assignment\nEquivalently:\nProve: Every sentence of SL that contains only binary\nconnectives is true on some TVA\n\nSecond step: Arrange our sentences into a sequence. We can do\nthat by using the number of connectives in the sentences. (This\nwill be a common strategy)\nThird step: Find our basis clause and inductive clause. We\nsometimes get them by directly applying our thesis to the\nmembers of our sequence.\nSo we might start with:\nBasis clause: Every sentence with zero occurrences of a\nbinary connective (and no occurrence of `∼') is true on some\nTVA.\nInductive step: if (A) every sentence with n occurrences of\nbinary connectives or fewer (and no occurrence of `∼') is\ntrue on some TVA, then (C) every sentence with n+1\noccurrences of binary connectives (and no occurrence of `∼')\nis true on some TVA.\n\nBut sometimes we need to look ahead and think about why,\nintuitively, the thesis we're proving is true. Doing that might\nhelp us see that it's easier to prove something stronger!\nIn this case we can see that if we have a TVA that makes\natomic sentences P and Q true, it will also make these true:\n(P&Q), (PvQ), (P⊃Q), (P≣Q).\nThat is, if we have a TVA that makes all atomic sentences true,\nwe can never get a false compound with negation!\nSo we should be able to use this TVA to prove the thesis that\nevery sentence with only binary connectives is true on some\nTVA.\n\nSo instead of having as our basis clause: Every sentence with\nzero occurrences of a binary connective (and no occurrence of\n`∼') is true on some TVA...\n...we might want to work with the particular TVA that looks\nlike it will work and then infer the more general claim later.\nSo:\nBasis clause: Every sentence with zero occurrences of a binary\nconnective (and no occurrence of `∼') is true on the TVA that\nmakes every atomic sentence true.\n\nFourth step: Prove the basis clause.\nThis is trivial. Every sentence with zero occurrences of a\nbinary connective (and no occurrence of negation) is atomic.\nEvery atomic sentence is true on the TVA on which every\natomic sentence is true.\nSo every sentence with zero occurrences of a binary\nconnective (and no occurrence of negation) is true on the TVA\non which every atomic sentence is true.\n\nFifth step: Prove the inductive step.\nThat is, prove that if (A), then (C).\n(A) Every sentence with n or fewer occurrences of binary\nconnectives (and no occurrence of `∼') is true on the TVA on\nwhich every atomic sentence is true, then\n(C) Every sentence with n+1 occurrences of binary\nconnectives (and no occurrence of `∼') is true on the TVA on\nwhich every atomic sentence is true.\nSo assume (A).\n\n(A) Every sentence with n occurrences or fewer of binary\nconnectives (and no occurrence of `∼') is true on the TVA on\nwhich every atomic sentence is true.\nNow, if a sentence R has n+1 binary connectives, then it is of\none of the forms (P&Q), (PvQ), (P⊃Q), (P≣Q).\nFurthermore, P and Q must have fewer binary connectives than\nR does, that is, fewer than n+1.\nThat means, by assumption (A), that P and Q are both true on\nthe TVA that makes every atomic sentence true.\n\nSo we've gotten that P and Q are both true on the TVA that\nmakes every atomic sentence true.\nNow, whatever the main connective of R is, R is true whenever\nits immediate components are true. That is, whenever P and Q\nare true.\nSo R is true on the TVA that makes every atomic sentence\ntrue.\nSo we've shown that if (A) is true, then any sentence R with n\n+1 occurrences of binary connective is true on the TVA that\nmakes every atomic sentence true.\nThat is, we've shown that if (A), then (C).\nSo we've proven the inductive step, and the proof is complete!\n\nSecond Example of MI\nLet SL- be a language just like SL except that it contains only\nbinary connectives\nProve: For every sentence P of SL-, P does not contain two\nconnectives without at least one parenthesis in between\nTo prove this by MI, we need to arrange the sentences of SL-\ninto some kind of order\nWe can use the # of binary connectives in a sentence to do it\n\nBasis clause: For every sentence P of SL- with zero\nconnectives, P does not contain two connectives without at\nleast one parenthesis in between\nProof: This is easy. An SL- sentence with zero connectives\ncertainly doesn't contain two connectives. So it does not contain\ntwo connectives without at least one parenthesis in between.\n\nNext we have to prove the inductive step:\nProve that if (A) then (C)\n(A) For every SL- sentence P with n connectives or fewer, P\ndoes not contain two connectives without at least one\nparenthesis in between\n(C) For every SL- sentence Q with n+1 connectives, Q does not\ncontain two connectives without at least one parenthesis in\nbetween\n\n(A) For every SL- sentence P with n connectives or fewer, P\ndoes not contain two connectives without at least one\nparenthesis in between\nNow suppose Q has n+1 connectives\nThere are four cases for the form Q could have: (R&S), (RvS),\n(R⊃S), (R≣S). It cannot be atomic, since n+1>0.\nOur argument will not depend on what the main connective is,\nso let us represent it as `?'. Then Q is of the form (R ? S).\n\nNow, since Q has n+1 connectives, R and S must each have n or\nfewer connectives. So, (A) applies to R and S: neither contains\ntwo connectives without a parenthesis in between.\nNow, the only other connective in Q is the main connective we\nare representing with `?'. So the only way Q could contain two\nconnectives without a parenthesis in between, is if there were\nno parenthesis between ? and some connective in R or S.\nBut since R and S are sentences of SL-, they are either atomic\nor have parentheses around the outside.\nIf R and S are both atomic, then Q contains only 1 connective,\nand hence does not contain two connectives without at least\none parenthesis in between.\n\nIf on the contrary at least one of R and S, say R, is molecular,\nthen it has parentheses around the outside.\nBut since R is adjacent to ?, an outer parenthesis of R is\nbetween ? and any other symbol in R. The same goes for S\nif it is molecular.\nSo either way, there is no connective anywhere in R or S\nwithout a parenthesis between it and ?.\nSince the only way there could have been two connectives in\nQ without at least one parenthesis in between was if ? was\none of them, there are no two connectives anywhere in Q\nwithout at least one parenthesis in between.\nSo since Q has n+1 connectives, (C) is true. So if (A) then (C).\nSo the inductive step is proved, and the argument complete.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "MIT24_241F09_lec10.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/8e147b13535467b01013c38c621959ed_MIT24_241F09_lec10.pdf",
      "content": "Logic I - Session 10\nThursday, October 15, 2009\n\nPlan\nRe: course feedback\nReview of course structure\nRecap of truth-functional completeness?\nSoundness of SD\nThursday, October 15, 2009\n\nThe course structure\nBasics of arguments and logical notions (deductive validity and\nsoundness, logical truth, falsity, consistency, indeterminacy,\nequivalence\nSL: syntax and semantics\nDerivation system SD (and SD+)\nMeta-logic: proofs about SL and SD / SD+\nPL: syntax and semantics\nDerivation system PD (and PD+, PDE)\nMeta-logic: proofs about PL and PD / PD+ / PDE\nThursday, October 15, 2009\n\nLast time\nMathematical induction\nStrategy: (1) Insert relevant definitions in the claim you want\nto prove. (2) Arrange a sequence for the induction. (3)\nFormulate basis clause and inductive hypothesis. (4) Prove basis\nclause. (5) Prove inductive hypothesis by assuming its\nantecedent (n case) and deducing its consequent (n+1 case).\nTruth-functional completeness\nThursday, October 15, 2009\n\nTruth-functional\ncompleteness\nTruth-function: a mapping, for some positive integer n, from\neach combination of TVs n sentences can have to a TV.\nE.g. for two sentences: {T,F}X{T,F} → {T,F}.\nMore generally: {T,F}n → {T,F}\nSL is truth-functionally complete iff for every truth-function f,\nthere is an SL sentence P that expresses f.\nP expresses f iff P's truth-table is the characteristic truth-\ntable for for f\nThursday, October 15, 2009\n\nTruth-functional\ncompleteness\nWe can state this more formally than in TLB:\nAn truth-function f is a set of ordered pairs like this:\n{<<T,T>, T>, <<T,F>, F>, <<F,T>, F>, <<F,F>, F>}\nP expresses f iff for any i that is a member of f, when the\natomic components of P are assigned the TVs in the 1st\nmember of i, P receives the TV that's the 2nd member of i.\nThursday, October 15, 2009\n\nTruth-functional\ncompleteness\nWhy care? We want to use SL and truth-tables to test for TF-\ntruth, validity, consistency, etc.\nSuppose we couldn't express some TF in SL, e.g. neither/nor.\nThen we would have no sentence of SL that expressed the\nsame truth-function as 'Neither Alice nor Bill can swim.'\nBut then SL wouldn't let us use a TT to show that the sentence\nis TF-entailed by {`Alice can swim if and only if Bill can swim',\n`If Alice can swim, then Carol can't swim', `Carol can swim'}.\nSimilar points apply to other truth-functions and tests for\ntruth-functional properties and relations\nThursday, October 15, 2009\n\nTruth-functional\ncompleteness\nSo we want to know that we can express every truth-function\nWe know this because we can set out an algorithm that, for\nany truth-function f, generates a sentence that expresses f.\nWe can do this by focusing on each row of the TT that\nrepresents f, finding characteristic sentences for each\nThursday, October 15, 2009\n\nTruth-functional\ncompleteness\nLook at each value left of the vertical line in row i. (We're\ngoing to pick a sentence for each value.)\nIf the first value is T, we pick A. If it's F, we pick ∼A.\nIf the second value is T, we pick B. If it's F, we pick ∼B, etc.\nForm the iterated conjunction of all these sentences.\nThis is the CS for row i.\nThursday, October 15, 2009\n\nTruth-functional\ncompleteness\nRepeat the procedure for other rows until you have a CS for\neach row\nNow find a sentence P that expresses the TF represented by\nthe whole TT. Look at the values right of the vert line.\nIf there are no Ts, P is any contradiction, e.g. A&∼A.\nIf there is just one T, on row i, P is the CS for row i.\nIf there are Ts on multiple rows, P is the iterated\ndisjunction of the CSs for those rows.\nThursday, October 15, 2009\n\nEx: Find a sentence that expresses the TF for\nthis TT schema:\nT\nT\nT\nF\nT\nT\nF\nF\nT\nF\nT\nT\nT\nF\nF\nF\nF\nT\nT\nT\nF\nT\nF\nF\nF\nF\nT\nT\nF\nF\nF\nF\n(A&B)&C\n(A&B)&∼C\n(A&∼B)&C\n(A&∼B)&∼C\n(∼A&B)&C\n(∼A&B)&∼C\n(∼A&∼B)&C\n(∼A&∼B)&∼C\nThere are Ts right of the vertical line on rows 3, 5, and 7.\nSo we want an interated disjunction of the CSs for those rows.\n(((A&∼B)&C) v ((∼A&B)&C)) v ((∼A&∼B)&C)\nThursday, October 15, 2009\n\nSoundness\nSD is sound iff if Γ ⊢ P in SD, then Γ ⊨ P.\nWhy do we care about soundness of SD?\nIn doing logic, we care about truth. E.g.: If the sentences in Γ\nare true, must P be true? That is, are derivations always\ntruth-preserving?\nIf we want to use a derivation in SD of P from Γ to help us\ntell whether the truth of a given sentence follows from the\ntruth of some other sentences, then derivations in SD better\nbe a guide to truth-functional entailment!\nI.e. it better be that if Γ ⊢ P in SD, then Γ ⊨ P.\nThursday, October 15, 2009\n\nSoundness\nSo how do we prove that if Γ ⊢ P in SD, then Γ ⊨ P?\nMathematical induction of course!\nLet's start with a reminder of the definitions for '⊢' and `⊨'.\nΓ ⊨ P iff every TVA that makes all members of Γ true also\nmakes P true.\nΓ ⊢ P (in SD) iff there is a derivation (in SD) in which all\nthe primary assumptions are members of Γ and P occurs in\nthe scope of only those assumptions.\nThursday, October 15, 2009\n\nSoundness\nLet's think now about the sequence on which we'll use MI.\nA natural sequence to use is derivation length. We could try:\nBasis clause: For any 1-line derivation (in SD) in which all the\nprimary assumptions are members of Γ and P occurs in the\nscope of only those assumption, Γ ⊨ P.\nThursday, October 15, 2009\n\nSoundness\nThen our inductive hypothesis would be:\nIH: If (A) For any n-line derivation in which all the primary\nassumptions are members of Γ* and Q occurs in the scope of\nonly those assumption, Γ* ⊨ Q, then (B) for any n+1-line\nderivation in which all the primary assumptions are members of\nΓ^ and R occurs in the scope of only those assumption, Γ^ ⊨ R.\nThursday, October 15, 2009\n\nSoundness\nBut this won't work! Exploring why will help us understand why\nthe proof in the book goes the way it does.\nSuppose we've assumed (A), the n-line case.\nNow we're working on (B), the n+1-line case.\nIn this situation, we'd like to be able to know that the nth\nline of the n+1-line derivation is OK\nThen we'd just have to show that adding the n+1st line\ndoesn't get us into trouble.\nSo we'd like to use our assumption (A)...\nBut this is where the proof hits trouble...\nThursday, October 15, 2009\n\nSoundness\n(A) doesn't guarantee anything about the nth line in an n+1 line\nderivation! (Why?)\n(A) For any n-line derivation in which all the primary\nassumptions are members of Γ* and Q occurs in the scope of\nonly those assumption, Γ* ⊨ Q.\n(A) only applies if the sentence on the nth line is only in the\nscope of primary assumptions!\nAnd in an n+1 line derivation, the nth line might not be only in\nthe scope of primary assumptions.\nSo (A) doesn't guarantee that in our n+1-line derivation we\ndidn't already go wrong in getting to line n.\nThursday, October 15, 2009\n\nSoundness\nSo what do we do? We need (A) to be stronger, so that it\napplies to the nth line of an n+1-line derivation. (Compare our\nproof last time of 6.1E (1a).)\nSo we make the inductive hypothesis stronger, and make the\nbasis clause stronger accordingly. That's why the proof in the\nbook is as complex as it is!\nNew basis clause: In any derivation, if Γ1 is the set of open\nassumptions with scope over sentence P1 on line 1, then\nΓ1 ⊨ P1.\nImportantly, we're NOT requiring that the assumptions in Γ1 be\nprimary assumptions.\nThursday, October 15, 2009\n\nSoundness\nNew inductive hypothesis: If (A) then (B).\n(A) In any derivation, for every line i ≤ n, if Γi is the set of\nopen assumptions with scope over sentence Pi on line i, then\nΓi ⊨ Pi.\n(B) In any derivation, if Γn+1 is the set of open assumptions\nwith scope over sentence Pn+1 on line n+1, then\nΓn+1 ⊨ Pn+1.\nThursday, October 15, 2009\n\nSoundness\nNow, prove the basis clause:\nIn any derivation, if Γ1 is the set of open assumptions with\nscope over sentence P1 on line 1, then\nΓ1 ⊨ P1.\nSince P1 is on line 1, P1 must be an assumption.\nAnd since every assumption is in its own scope, and there\naren't any other sentences before P1, the set of open\nassumptions with scope over P1 is just {P1}. So Γ1 = {P1}.\nTrivially, {P1} ⊨ P1, so since Γ1 = {P1}, Γ1 ⊨ P1.\nThursday, October 15, 2009\n\nSoundness\nNow let's prove the inductive hypothesis by assuming (A).\n(A) In any derivation, for every line i ≤ n, if Γi is the set of\nopen assumptions with scope over sentence Pi on line i, then\nΓi ⊨ Pi.\nNow suppose Γn+1 is the set of open assumptions with scope\nover sentence Pn+1 on line n+1.\nWe need to show that Γn+1 ⊨ Pn+1.\n(A) entails that Γn ⊨ Pn, and similarly for every earlier line.\nSo we only need to show that we didn't go wrong in the step to\nline n+1.\nThursday, October 15, 2009\n\nSoundness\nPn+1 on line n+1 had to be justified by one SD's rules.\nSo we can proceed by showing that whichever rule justified\nPn+1, the result is that Γn+1 ⊨ Pn+1.\nI'll just go a couple of the rules. (The other cases are in TLB.)\nSuppose Pn+1 is justified by conjunction elimination applied to\na conjunction Pn+1&R (or R&Pn+1) on line j.\nWe know that since j < n+1, Γj ⊨ Pn+1&R\n(or R&Pn+1)\nSo Γj ⊨ Pn+1.\nThursday, October 15, 2009\n\nSoundness\nNow, if Pn+1 is justified by the sentence on line j, then all the\nassumptions open at j must still be open at n+1.\nThat means that Γj ⊆ Γn+1. So we can show that Γn+1 ⊨ Pn+1\nif we can prove the following:\n(*) If Γj ⊨ Pn+1 and Γj ⊆ Γn+1, then Γn+1 ⊨ Pn+1.\nWe can prove that easily: if a TVA me.m. Γn+1 true and Γj ⊆\nΓn+1, then it me.m. Γj is true. So if every TVA that me.m. Γj\ntrue also makes Pn+1 true, then every TVA that me.m. Γn+1\ntrue me.m. Γj true, and hence makes Pn+1 true.\nSo (*) is true. And we know its antecedent is true: Γj ⊨ Pn+1\nand Γj ⊆ Γn+1. So it follows that Γn+1 ⊨ Pn+1.\nThursday, October 15, 2009\n\nSoundness\nNow we've made some progress on establishing (B) given (A).\n(B) In any derivation, if Γn+1 is the set of open assumptions\nin whose scope is a sentence Pn+1 on line n+1, then\nΓn+1 ⊨ Pn+1.\nFor we've shown that given (A), (B) holds whenever Pn+1 is\njustified by conjunction elimination.\nIf we check all the other rules, then we'll have proven given\n(A) that however we got Pn+1 from earlier lines, Γn+1 ⊨ Pn+1.\nSo we'll have proven (B) given (A). So we'll have proven the\ninductive hypothesis and finished our MI proof.\nThursday, October 15, 2009\n\nSoundness\nSuppose Pn+1 is justified by applying ∼I to lines h-k ≤ n+1.\nThen Pn+1 is of the form ∼Q, line h is Q, and lines j ≤ k and k\ncontain some contradictory R and ∼R.\nSince j and k ≤ n+1, we know that (A) applies to lines j and k,\nso Γj ⊨ R and Γk ⊨∼R.\nFor ∼I to apply, we can't have closed any assumptions between\nh and n+1 except Q. So we know that Γj-Q and Γk-Q are\nsubsets of Γn+1. So Γj ⊆ Γn+1 ∪ {Q} and Γk ⊆ Γn+1 ∪ {Q}.\nBut that means Γn+1 ∪ {Q} ⊨ R and Γn+1 ∪ {Q} ⊨∼R.\nSo Γn+1 ⊨∼Q.\nThursday, October 15, 2009\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "MIT24_241F09_lec11.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/aa942c5ce90004316e60c4a11839b34a_MIT24_241F09_lec11.pdf",
      "content": "Logic I - Session 11\n\nPlan for today\nDamien's comments on quiz\nMy comments on teaching feedback\nA bit more on the TF-completeness of SL\nRecap of proof of soundness of SD:\nIf Γ ⊢ P in SD, then Γ ⊨ P\nBegin to prove completeness of SD:\nIf Γ ⊨ P, then Γ ⊢ P in SD\n\nTF-completeness\nWe can express any truth-function in SL.\nFind a sentence that expresses the TF for this TT schema:\nT\nT\nT\nT\nF\nF\nF\nT\nT\nF\nF\nF\nA&B\nA&∼B\n∼A&B\n∼A&∼B\nWe want an iterated disjunction of CSs for the T rows: 1 and 3.\n(A&B) v (∼A&B).\n\nTF-completeness\nStrictly, we haven't yet proven that SL is TF-complete. We'd need to show\nthat our algorithm always yields a sentence that expresses the truth-\nfunction we want. See 6.1E (1d) and 6.2E (1).\nNot only is SL truth-functionally complete, but so is any language that\ncontains formulae TF-equivalent to every sentence of SL.\nE.g. {&,v,∼}. (After all, that's all we use in our algorithm!)\nIn fact, we can achieve TF-completeness with a single binary connective, '|'.\nP\nQ\nP | Q\nT\nT\nF\nT\nF\nT\nF\nT\nT\nF\nF\nT\n\nTF-completeness with '|'\nTo see this, just add a step to our algorithm: translate the old\nsentence into one that only contains '|'.\nThe new one will be equivalent, so it will have the same TT, so it\nwill expresses the same truth-function.\nIn our example, our algorithm generated (A&B) v (∼A&B).\nTo find an equivalent sentence, make replacements in stages.\n\nTF-completeness with '|'\nWe start with (A&B)v(∼A&B), which is of the form PvQ.\nNow,\nPvQ iff\n(P|P) | (Q|Q).\nSubstitute (A&B) and (∼A&B) for P and Q\n(A&B)v(∼A&B)\n((A&B)|(A&B)) | ((∼A&B)|(∼A&B))\nNow replace the remaining sub-sentences.\n(A&B) iff (A|B)|(A|B). And (∼A&B) iff ((A|A)|B)|((A|A)|B).\nSo we get:\n((A|B)|(A|B) | (A|B)|(A|B)) | (((A|A)|B)|((A|A)|B) | ((A|A)|B)|((A|A)|B))\n\nTF-completeness with '|'\nWe've just looked at one sentence. We haven't yet proven that a language L\nwith just '|' is TF-complete.\nTo do that, we need to prove that for any sentence of SL, there is an\nequivalent sentence in L.\nProvide an algorithm Z that makes step-by-step replacements like we did.\nThen prove that:\nEach step of Z preserves TV, and\nFor any PSL of SL, Z turns PSL into a sentence PL of L.\n\nSoundness of SD\nBasic strategy to show soundness of SD: Use MI to prove that\n(*) holds for any line n of any SD derivation:\n(*) If Pn is the sentence on line n and Pn is in the scope of\nonly the assumptions in Γn, then Γn ⊨ Pn.\nSo for our induction sequence, we use lines of SD derivations.\nFor basis clause: (*) holds for n=1.\nFor inductive clause: if (*) holds up to line n, it holds for n+1.\nPn+1 had to be justified by applying some SD rule to earlier\nlines. So, prove for each SD rule X: If Pn+1 is justified by X\nand (*) holds up to the nth line, then (*) holds for the n+1st.\n\nSoundness of SD\n(*) If Pn is the sentence on line n and Pn is in the scope of\nonly the assumptions in Γn, then Γn ⊨ Pn.\nMost of the proof involves the last step, going through each rule\nto prove this:\nFor each SD rule X: If Pn+1 is justified by X and (*) holds up\nto the nth line, then (*) holds for the n+1st.\nLast time, we went through &E and ∼I. Let's do one more: ⊃I.\nSo suppose Pn+1 is justified by applying ⊃I, and that (*) holds\nthrough line n. Then Pn+1 is of the form Qi⊃Rk.\nSo, to prove: If Qi⊃Rk on line n+1 is justified by ⊃I and is in the\nscope only of assumptions in Γn+1, then Γn+1 ⊨ Qi⊃Rk.\n\nSoundness of SD\nSince Qi⊃Rk is justified by ⊃I, we have a subderivation from an\nauxiliary assumption Qi on line i to Rk on line k, where i<k<n+1.\nAnd since (*) applies for all n < n+1, it applies to i and k.\nSo Γk ⊨ Rk.\nNow note that since Qi⊃Rk on line n+1 is justified by applying ⊃I\nto the subderivation on i-k, no assumptions in Γk can have been\nclosed before n+1 except Qi.\nIn other words, every assumption open at k, apart from Qi, must\nstill be open at n+1.\nSo Γk ⊆ Γn+1 ∪ {Qi}.\n\nSoundness of SD\nSo far we have:\n(a) Γk ⊆ Γn+1 ∪ {Qi}, and\n(b) Γk ⊨ Rk.\nNow remember from last time that for any sets Γ1 and Γ2:\nIf Γ1 ⊆ Γ2, then if Γ1 ⊨ S, then Γ2 ⊨ S.\nSo in particular, from (a), we know that since Γk ⊆ Γn+1 ∪ {Qi}:\n(c) If Γk ⊨ Rk then Γn+1 ∪ {Qi} ⊨ Rk.\nSo putting together (b) and (c): Γn+1 ∪ {Qi} ⊨ Rk.\nSo Γn+1 ⊨ Qi⊃Rk. I.e. Γn+1 ⊨ Pn+1.\n\nCompleteness of SD\nTo prove: If Γ ⊨ P, then Γ ⊢ P (in SD).\nBy contraposition, this is equivalent to:\nΓ ⊢ P then Γ ⊨ P.\nSo we can assume Γ ⊢ P and try to prove Γ ⊨ P.\nWe need lots of intermediate steps to do it...\n...and an important new notion: maximal consistency\nΓ is maximally consistent in SD (MC-SD) iff Γ is\nconsistent in SD and Γ would become inconsistent if any\nadditional sentence were added to it.\n\nΓ ⊢ P\nPlan for proving\n(1) ↓\ncompleteness\nΓ ∪ {∼P} is C-SD\n(4) ↓\nΓ ∪ {∼P} ⊆ Γ* (for some Γ* that's MC-SD) (6.4.5)\n+\nFor any Γ* that's MC-SD, Γ* is TF-C\n(6.4.8)\n(5) →\n(3) ↓\nΓ ∪ {∼P} is TF-C\n(2) ↓\nΓ ⊨ P\nΓ ⊢ P then Γ ⊨ P.\nIf Γ ⊨ P, then Γ ⊢ P.\n\nCompleteness of SD\nTo prove: If Γ ⊢ P, then Γ ∪ {∼P} is C-SD\nSuppose Γ ∪ {∼P} is NOT C-SD. Then it's inconsistent in SD.\nThen, by def., some Q and ∼Q are derivable from it.\nBut that means we can derive Q and ∼Q in a sub-derivation\nfrom Γ together with the assumption ∼P.\nWe could then perform ∼E on the subderivation, yielding P.\nSo we could get P in the scope of only the assumptions in Γ.\nSo if Γ ∪ {∼P} is NOT C-SD, then Γ ⊢ P.\nSo if Γ ⊢ P, then Γ ∪ {∼P} is C-SD\n\nΓ ⊢ P\nPlan for proving\n↓ ☑\ncompleteness\nΓ ∪ {∼P} is C-SD\n↓\nΓ ∪ {∼P} ⊆ Γ* (for some Γ* that's MC-SD)\n(6.4.5)\n+\nFor any Γ* that's MC-SD, Γ* is TF-C\n(6.4.8)\n→\n↓\nΓ ∪ {∼P} is TF-C\n↓\nΓ ⊨ P\nΓ ⊢ P then Γ ⊨ P.\nIf Γ ⊨ P, then Γ ⊢ P.\n\nCompleteness of SD\nNext, let's prove:\nIf Γ ∪ {∼P} is TF-consistent (TF-C), then Γ ⊨ P.\nSo assume Γ ∪ {∼P} is TF-consistent (TF-C).\nBy def., there's a TVA that m.e.m. Γ ∪ {∼P} true.\nA TVA m.e.m. true Γ ∪ {∼P} iff it m.e.m. Γ true and P\nfalse.\nSo there's a TVA that m.e.m. Γ true and P false.\nSo by def., Γ ⊨ P iff there's NO TVA that does that.\nSo Γ ⊨ P.\n\nΓ ⊢ P\nPlan for proving\n↓ ☑\ncompleteness\nΓ ∪ {∼P} is C-SD\n↓\nΓ ∪ {∼P} ⊆ Γ* (for some Γ* that's MC-SD)\n(6.4.5)\n+\nFor any Γ* that's MC-SD, Γ* is TF-C\n(6.4.8)\n→\n↓\nΓ ∪ {∼P} is TF-C\n↓☑\nΓ ⊨ P\nΓ ⊢ P then Γ ⊨ P.\nIf Γ ⊨ P, then Γ ⊢ P.\n\nCompleteness of SD\nNext, let's prove:\nIf Γ ∪ {∼P} ⊆ Γ* for some Γ* that's MC-SD and\nfor any Γ* that's MC-SD, Γ* is TF-C, then Γ ∪ {∼P} is TF-C\nSo assume Γ ∪ {∼P} ⊆ Γ* for some Γ* that's MC-SD and\nfor any Γ* that's MC-SD, Γ* is TF-C.\nSuppose Γ ∪ {∼P} is NOT TF-C.\nThen there's no TVA that m.e.m. Γ ∪ {∼P} true.\nBut since Γ ∪ {∼P} ⊆ Γ*, any TVA that m.e.m. Γ* true would also m.e.m. Γ ∪\n{∼P} true.\nSo there's no TVA that m.e.m. Γ* true. I.e.: Γ* is NOT TF-C.\nBut since Γ* is MC-SD, and for any Γ* that's MC-SD, Γ* is TF-C, Γ* is TF-C.\nOur assumption led to a contradiction. So Γ ∪ {∼P} is TF-C\n\nΓ ⊢ P\nPlan for proving\n↓ ☑\ncompleteness\nΓ ∪ {∼P} is C-SD\n↓\nΓ ∪ {∼P} ⊆ Γ* (for some Γ* that's MC-SD)\n(6.4.5)\n+\nFor any Γ* that's MC-SD, Γ* is TF-C\n(6.4.8)\n→\n↓☑\nΓ ∪ {∼P} is TF-C\n↓☑\nΓ ⊨ P\nΓ ⊢ P then Γ ⊨ P.\nIf Γ ⊨ P, then Γ ⊢ P.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "MIT24_241F09_lec13.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/c4741fb3cfe2e08963b30cdc50289d45_MIT24_241F09_lec13.pdf",
      "content": "Logic I - Session 13\n\nPlan\nDamien on psets\nQuick summary of completeness\nCompactness\nLimitations of SL\nIntro to PL\n\nCompleteness\nΓ ⊢ P\n↓\nΓ ∪ {∼P} is C-SD\n↓\nΓ ∪ {∼P} ⊆ a MC-SD set Γ*\n↓\nIf\nΓ* is MC-SD\nthen\nΓ* is TF-C\n↓\nΓ ∪ {∼P} ⊆ a TF-C set Γ*\n↓\nΓ ∪ {∼P} is TF-C\n↓\nΓ ⊨ P\n\nCompactness\nA cool result of completeness:\nCompactness: Γ is TF-C iff every finite subset of Γ is TF-C.\nSo: a set Γ is TF-IC only if a finite subset of Γ is TF-IC.\nSo, intuitively, there's no TF inconsistency that you need an infinite\nnumber of SL sentences to get!\nLet's prove compactness by proving each direction.\n\nCompactness\nFirst, left-to-right:\nIf Γ is TF-C, then every finite subset of Γ is TF-C.\nIf there were a subset Γ- such that no TVA m.e.m. Γ- true,\nthen there would be no TVA m.e.m. Γ true.\nNow, right-to-left:\nIf every finite subset of Γ is TF-C, then Γ is TF-C.\nEquiv: If Γ is TF-IC, then some finite subset Γ- of Γ is TF-IC.\n\nCompactness\nAssume Γ is TF-IC. Then there's no TVA that m.e.m. Γ true.\nSo every TVA that m.e.m. Γ true makes some R&∼R true.\nThat is: Γ ⊨ R&∼R.\nSo by completeness, Γ ⊢ R&∼R.\nBut since every derivation is finite,\nthere's a finite Γ' ⊆ Γ such that Γ' ⊢ R&∼R.\nSo by soundness, Γ' ⊨ R&∼R.\nBut no TVA makes R&∼R true.\nSo no TVA makes Γ' true. I.e. Γ' is TF-IC.\nSo if Γ is TF-IC, then a finite subset of Γ is TF-IC.\n\nLimitations of SL\nWe want our formal language and derivation system to help us\nprove that certain arguments are valid, that certain sets of\nsentences are inconsistent, etc...\nSL can't do that for some arguments and sentences.\nEverything in the house smells bad.\nFido is in the house.\nSo, Fido smells bad.\nNothing has horns and also wings.\nSome animals at Neverland Ranch have horns.\nAll chickens have wings.\nSo not all animals at Neverland Ranch are\nchickens.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "MIT24_241F09_lec18.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/80da40747a0f70503bedc165e767860b_MIT24_241F09_lec18.pdf",
      "content": "Logic - Session 18\n\nApplying our formal semantics\nLet I be the following interpretation:\nUD={a,b} F:{<a>} G:{<b>}\nShow that (∀x)Fx is false on I.\n<b> ∈ I(F)\nSo for arbitrary d, <denI,d[b/x](x)> ∈ I(F).\nSo by (2.), d[b/x] doesn't satisfy Fx on I.\nSo not: for every u∈UD, d[u/x] satisfies Fx on I.\nSo by (8.), not: d satisfies (∀x)Fx.\nSo not every variable assignment satisfies (∀x)Fx.\nSo by def. of truth, (∀x)Fx is false on I.\n\nShow: (∃x)(Fx⊃(∀y)Gy) is true on I\n(∃x)(Fx⊃(∀y)Gy) is true on I iff every d for I satisfies\n(∃x)(Fx⊃(∀y)Gy) on I.\nBy (9.), d satisfies (∃x)(Fx⊃(∀y)Gy) on I iff for some\nu∈UD, d[u/x] satisfies (Fx⊃(∀y)Gy) on I.\nBy (6.), for some u∈UD, d[u/x] satisfies (Fx⊃(∀y)Gy) on\nI iff for some u∈UD, either d[u/x] doesn't satisfy Fx on\nI or d[u/x] satisfies (∀y)Gy on I.\nProve the RHS.\n\n<b> ∈ I(F)\nSo for arbitrary d, <denI,d[b/x](x)> ∈ I(F).\nSo by (2.), d[b/x] doesn't satisfy Fx on I.\nSo for some u∈UD, d[u/x] doesn't satisfy Fx on I.\nSo for some u∈UD, either d[u/x] doesn't satisfy Fx on I\nor d[u/x] satisfies (∀y)Gy on I.\nSo for some u∈UD, d[u/x] satisfies (Fx⊃(∀y)Gy) on I.\nSo d satisfies (∃x)(Fx⊃(∀y)Gy) on I.\nWe picked an arbitrary d, so every d for I satisfies\n(∃x)(Fx⊃(∀y)Gy) on I.\nSo (∃x)(Fx⊃(∀y)Gy) is true on I.\n\nShow quantificationally true:\n(∀x)(Rxx⊃(∃y)Rxy)\n(∀x)(Rxx⊃(∃y)Rxy) is q-true iff it's true on any I.\n(∀x)(Rxx⊃(∃y)Rxy) is true on any I iff for any I, every\nd for I satisfies (∀x)(Rxx⊃(∃y)Rxy) on I.\nPick an arbitrary I and an arbitrary d.\nd satisfies (∀x)(Rxx⊃(∃y)Rxy) on I iff for any u∈UD,\nd[u/x] satisfies (Rxx⊃(∃y)Rxy) on I.\n(For any u∈UD d[u/x] satisfies (Rxx⊃(∃y)Rxy) on I) iff\n(for any u∈UD, either d[u/x] doesn't satisfy Rxx or d[u/\nx] satisfies (∃y)Rxy on I.\nProve that the right-hand side is true by reductio.\n\nSuppose RHS is false. Then for some u∈UD, d[u/x]\nsatisfies Rxx on I and doesn't satisfy (∃y)Rxy on I.\nPick an arbitrary u such that d[u/x] satisfies Rxx on I.\nSo by (2.), <denI,d[u/x][u/y](y), denI,d[u/x][u/y](x)> ∈ I(R).\nSo <u,u> ∈ I(R)\nSo for some v∈UD, <denI,d[u/x][v/y](y), denI,d[u/x][v/y](x)>∈I(R).\nBy (2.), for some v∈UD, d[u/x][v/y] satisfies Rxy on I.\nBy (9.), d[u/x] satisfies (∃y)Rxy on I.\nu was arbitrary, for it's not the case that for some\nu∈UD, d[u/x] satisfies Rxx on I and doesn't satisfy\n(∃y)Rxy on I.\n\nSince it's not the case that for some u∈UD, d[u/x]\nsatisfies Rxx on I and doesn't satisfy (∃y)Rxy on I:\nFor any u∈UD, either d[u/x] doesn't satisfy Rxx or\nd[u/x] satisfies (∃y)Rxy on I.\nWe had:\n(For any u∈UD, d[u/x] satisfies (Rxx⊃(∃y)Rxy) on I)\niff (for any u∈UD, either d[u/x] doesn't satisfy Rxx\nor d[u/x] satisfies (∃y)Rxy on I.\nThe RHS is true, so the LHS is too.\nSo for any u∈UD, d[u/x] satisfies (Rxx⊃(∃y)Rxy) on I.\nSo by (8.), d satisfies (∀x)(Rxx⊃(∃y)Rxy) on I.\nd and I were arbitrary, so for any I, for any d,\nd satisfies (∀x)(Rxx⊃(∃y)Rxy).\nSo for any I, (∀x)(Rxx⊃(∃y)Rxy) is true on I.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "MIT24_241F09_lec22.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/24-241-logic-i-fall-2009/238c7ccc7c1b9c78f4ccae1f7bbbd458_MIT24_241F09_lec22.pdf",
      "content": "Logic I - Session 22\nMeta-theory for predicate logic\n\nThe course so far\nSyntax and semantics of SL\nEnglish / SL translations\nTT tests for semantic properties of SL sentences\nDerivations in SD\nMeta-theory: SD is adequate for SL (sound, complete)\nSyntax and semantics of PL\nEnglish / PL translations\nDerivations in PD\nNext: PD is adequate for PL (sound, complete)\n\nSoundness, Completeness\nThere are meta-theoretical results for PD as well as\nPDE. In particular:\nIf Γ is a set of PL sentences and P is a PL sentence,\nthen Γ ⊨ P iff Γ ⊢ P in PD.\nIf Γ is a set of PLE sentences and P is a PLE\nsentence, then Γ ⊨ P iff Γ ⊢ P in PDE.\nWe'll focus on PL and PD, coming back to PLE and PDE\nlater if we have time.\n\nSoundness\nWe'll focus on soundness today.\nIf Γ ⊢ P in PD, then Γ ⊨ P.\nTo prove: If there's a PD derivation all of whose\nprimary assumptions are members of Γ and in which\nP occurs only in the scope of those assumptions,\nthen P is quantificationally entailed by Γ.\n\nSoundness\nAs with soundness for SD, we prove our result by\nproving something stronger:\nEvery sentence in a PD derivation is q-entailed by\nthe set of assumptions with scope over it.\nOur proof of this will appeal to a mathematical\ninduction analogous to the one we used to prove the\nsoundness of SD.\n\nSoundness\nLet Γi be the set of assumptions open at line i in a\nderivation, and let Pi be the sentence on line i.\nBasis clause: Γ1 ⊨ P1.\nInductive step: If Γi ⊨ Pi for all i≤k, then Γk+1 ⊨ Pk+1.\nWe'll prove this by cases, one case for each rule\nthat could have justified line k+1.\nConclusion: For every line k in a derivation, Γk ⊨ Pk.\nI.e.: Every sentence in a PD derivation is q-entailed\nby the set of assumptions with scope over it.\n\nSoundness: Basis clause\nTo prove: Γ1 ⊨ P1.\n= No interpretation mem Γ1 true but makes P1 false.\nThe first line of any derivation is an assumption.\nEvery assumption counts as being in its own scope, so\nP1 is in the scope of P1 and only P1.\nI.e. Γ1 = {P1}.\nTrivially, any interpretation that makes P1 true makes\nP1 true. So {P1} ⊨ P1. So Γ1 ⊨ P1.\n\nSoundness: Inductive step\nSuppose Γi ⊨ Pi for all lines i≤k in a derivation.\nTo prove: Γk+1 ⊨ Pk+1.\nStrategy: Line k+1 must be justified by some rule,\nand no matter what rule it is, we have Γk+1 ⊨ Pk+1.\nWe have all 12 rules from SD, so we need the result to\nhold for those cases.\nOur proofs don't need much adjustment...\n\nInductive step: &I\nSuppose line k+1 is justified by &I.\nThen Pk+1 is justified by two earlier lines i and j, and\nPk+1 is of the form Qi & Rj.\nSo we should prove: Γk+1 ⊨ Qi & Rj\nIt suffices to prove that Γk+1 ⊨ Qi and Γk+1 ⊨ Rj.\nWhy? Fill in defs of '⊨' and '&'.\n\nInductive step: &I\nIf any I that mem Γk+1 true makes Qi true, and\nany I that mem Γk+1 true makes Rj true, then:\nany I that mem Γk+1 true makes Qi true and Rj true.\nIf I makes Qi is true and Rj true, then I makes Qi &\nRj true. [By our semantics for '&']\nIf any I that mem Γk+1 true makes Qi true, and\nany I that mem Γk+1 true makes Rj true, then:\nany I that mem Γk+1 true makes Qi & Rj true.\nI.e.: if Γk+1 ⊨ Qi and Γk+1 ⊨ Rj, then Γk+1 ⊨ Qi & Rj.\n\nInductive step: &I\nOK, so prove: Γk+1 ⊨ Qi and Γk+1 ⊨ Rj.\nΓi ⊨ Qi and Γj ⊨ Rj [by the inductive hypothesis, since\ni and j are earlier than k+1]\nΓi ⊆ Γk+1 and Γj ⊆ Γk+1\nSo we want:\nIf Γi ⊨ Qi and Γi ⊆ Γk+1, then Γk+1 ⊨ Qi, and\nif Γj ⊨ Rj, and Γj ⊆ Γk+1 then Γk+1 ⊨ Rj.\nSo we just need 11.3.2, which is easy:\nIf Γ ⊨ P and Γ ⊆ Γ*, then Γ* ⊨ P.\n\nInductive step: &I\nSo now we know: Γk+1 ⊨ Qi and Γk+1 ⊨ Rj.\nSo from this, we know that if line k+1 is justified by\n&I, then Γk+1 ⊨ Qi & Rj.\nSo the first case of our proof of the inductive step is\ncomplete. We need to prove analogous results for all\nother rules of PD.\nThe interesting ones are the new ones, the rules for\nquantifiers.\n\nInductive step: ∀E\nSuppose Pk+1 is justified by ∀E.\nThen Pk+1 is of the form Q(a/x) and is justified by\napplying ∀E to some earlier line i containing (∀x)Q.\nΓi ⊨ (∀x)Q [by inductive hypothesis]\nΓi ⊆ Γk+1\nSo Γk+1 ⊨ (∀x)Q [again, by 11.3.2]\nSo we just need to show that:\nif Γk+1 ⊨ (∀x)Q, then Γk+1 ⊨ Q(a/x).\nThis will follow if {(∀x)Q} ⊨ Q(a/x).\n\nInductive step: ∀E\nWe'll sketch a proof of the general claim 11.1.4:\nFor any a, x, Q, {(∀x)Q} ⊨ Q(a/x).\nSuppose I makes (∀x)Q true. Then for every d for I:\nd satisfies (∀x)Q.\nSo for every u∈UD, d[u/x] satisfies Q. [By df. sat.]\nSo for any a, d[I(a)/x] satisfies Q.\nd[I(a)/x] satisfies Q iff d satisfies Q(a/x) [11.1.1]\nSo d satisfies Q(a/x).\nSo any I that makes (∀x)Q true makes Q(a/x) true.\n\nInductive step: ∀E\nIf any I that makes (∀x)Q true makes Q(a/x) true,\nthat just means that {(∀x)Q} ⊨ Q(a/x).\nSo now we know that:\nif Γk+1 ⊨ (∀x)Q, then Γk+1 ⊨ Q(a/x).\nAnd we knew that Γk+1 ⊨ (∀x)Q.\nSo Γk+1 ⊨ Q(a/x).\nQ(a/x) was just Pk+1, so we've shown that if Pk+1 is\njustified by ∀E, then Γk+1 ⊨ Pk+1.\n\nProgress report\nRecall, we're trying to prove PD's soundness by proving\nthat no matter what rule you use to get Pk+1, it's q-\nentailed by Γk+1.\nWe've talked about the SD rules and ∀E. To complete\nour proof of PD's soundness, we need to check the\nremaining quantifier rules.\nLet's do one more. The most complicated is ∃E.\n\nInductive step: ∃E\nSuppose Pk+1 is justified by ∃E.\nThen we have lines: h (∃x)Q\nj\nQ(a/x)\nm\nPk+1\nk+1 Pk+1\n∃E h, j-m\nAnd a can't be in Pk+1, (∃x)Q, or in any open\nassumptions\nNote: Γm = Γh ⋃ {Q(a/x)}.\n\nInductive step: ∃E\nΓm ⊨ Pk+1\n[by inductive hypothesis]\nSo Γh ⋃ {Q(a/x)} ⊨ Pk+1\n[since Γm = Γh ⋃ {Q(a/x)}]\nAnd Γh ⋃ {Q(a/x)} ⊆ Γk+1 ⋃ {Q(a/x)} [since Γh ⊆ Γk+1]\nSo Γk+1 ⋃ {Q(a/x)} ⊨ Pk+1\n[by 11.3.2]\nAlso, Γk+1 ⊨ (∃x)Q [since Γh ⊆ Γk+1 and Γh ⊨ (∃x)Q]\nSo what we need is this:\nIf Γk+1 ⊨ (∃x)Q and Γk+1 ⋃ {Q(a/x)} ⊨ Pk+1, then\nΓk+1 ⊨ Pk+1 (assuming our restrictions on a)\n\nInductive step: ∃E\nSo, assume (i) a doesn't occur in Pk+1, (∃x)Q, or in any\nmember of Γk+1, (ii) Γk+1 ⊨ (∃x)Q, and\n(iii) Γk+1 ⋃ {Q(a/x)} ⊨ Pk+1.\nProve Γk+1 ⊨ Pk+1 by reductio.\nAssume some I mem Γk+1 true and makes Pk+1 false.\nThen by (ii), I makes (∃x)Q true.\nSo for any d for I, d satisfies (∃x)Q. [by def. truth]\nFor for any d, there's some u∈UD s.t. d[u/x] satisfies Q\non I [by def. satisf.]\n\nInductive step: ∃E\nLet I' be just like I except that I'(a)=u.\nWhat object a denotes is irrelevant to whether an\ninterpretation makes sentences without a true.\nSo I' still mem Γk+1 true and Pk+1 false\nSince I' mem Γk+1 true, by (ii) it makes (∃x)Q true\n\nInductive step: ∃E\nAnd I' makes Q(a/x) true. Because...\nd[u/x] satisfies Q on I' (I' only differs from I on a)\nSince I'(a)=u, d[u/x] satisfies Q(a/x) on I' too\nIn fact, Q(a/x) has no free variables, no x, in it\nSo d itself satisfies Q(a/x) on I'\n(taking an x-variant of d isn't necessary)\nA sentence is satisfied by every assignment on an I\nif it's satisfied by some assignment on I.\nSo every assignment satisfies Q(a/x) on I'\nSo by def., Q(a/x) is true on I'\n\nInductive step: ∃E\nSo we have:\nΓk+1's members are all true on I'\nPk+1 is false on I'\n(∃x)Q is true on I'\nQ(a/x) is true on I'\nRecall assumption (iii): Γk+1 ⋃ {Q(a/x)} ⊨ Pk+1.\nSo Pk+1 is true on I'.\nContradiction.\nSo not: some I mem Γk+1 true and makes Pk+1 false.\n\nInductive step: ∃E\nRecall, we showed earlier that what we need is this:\nIf Γk+1 ⊨ (∃x)Q and Γk+1 ⋃ {Q(a/x)} ⊨ Pk+1, then\nΓk+1 ⊨ Pk+1 (assuming our restrictions on a)\nWe assumed (i) a doesn't occur in Pk+1, (∃x)Q, or in\nany member of Γk+1, (ii) Γk+1 ⊨ (∃x)Q, and\n(iii) Γk+1 ⋃ {Q(a/x)} ⊨ Pk+1.\nAnd we showed this implied Γk+1 ⊨ Pk+1.\nSo we've shown that line k+1 is q-entailed by the open\nassumptions with scope over it when it's justified by ∃E\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n24.241 Logic I\nFall 2009\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    }
  ]
}