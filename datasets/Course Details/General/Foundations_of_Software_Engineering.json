{
  "course_name": "Foundations of Software Engineering",
  "course_description": "This is a foundation subject in modern software development techniques for engineering and information technology. The design and development of component-based software (using C# and .NET) is covered; data structures and algorithms for modeling, analysis, and visualization; basic problem-solving techniques; web services; and the management and maintenance of software. Includes a treatment of topics such as sorting and searching algorithms; and numerical simulation techniques. Foundation for in-depth exploration of image processing, computational geometry, finite element methods, network methods and e-business applications. This course is a core requirement for the Information Technology M. Eng. program.\nThis class was also offered in Course 13 (Department of Ocean Engineering) as 13.470J. In 2005, ocean engineering subjects became part of Course 2 (Department of Mechanical Engineering), and the 13.470J designation was dropped in lieu of 2.159J.",
  "topics": [
    "Engineering",
    "Computer Science",
    "Software Design and Engineering",
    "Engineering",
    "Computer Science",
    "Software Design and Engineering"
  ],
  "syllabus_content": "This class was also offered in Course 13 (Department of Ocean Engineering) as 13.470J. In 2005, ocean engineering subjects became part of Course 2 (Department of Mechanical Engineering), and the 13.470J designation was dropped in lieu of 2.159J.\n\nCourse Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nRecitations: 1 session / week, 1 hour / session\n\nPrerequisites\n\n1.00\nor knowledge of an object-oriented language.\n\nDescription\n\nThe course is broken into four phases, each of which lasts approximately one month. Phase I will give you a grounding in the basics of Object Oriented Programming and the C++ language. Phase II will introduce Java(r) and some of the basic algorithms and data structures, such as arrays, trees, searching, sorting, geometric reasoning etc. Phase III will introduce the Java(r) programming language, which will be used for your term projects. Phase IV will be a final project to give you a chance to put your new knowledge into practice on a challenging project. The project this year will focus on building a simulation to demonstrate a physical principle of your choice.\n\nIn summary:\n\nPhase I: C++ and OOP\n\nCovers classes and objects, inheritance, virtual functions, abstract classes, polymorphism\n\nPhase II: Algorithms\n\nSearching and sorting methods\n\nPhase III: Java(r)\n\nJava applications and applets, Abstract Windowing Toolkit, Graphics, Image Processing, Threads. Integrating Java (r)and C++.\n\nPhase IV: Project\n\nSelected advanced topics in Java(r) and C++. Simulation (term project) using Java(r) and/or C++.\n\nAssignments\n\nThis course has the following assignments:\n\n7 Problem Sets (1-7): 40%\n\n2 Quizzes: 30%\n\n1 Project: 25%\n\n1 Class Presentation: 5%\n\nRequired References\n\nTextbooks\n\nLippman, S. and J. Lajoie.\nC++ Primer\n. 3rd ed. Reading, MA: Addison Wesley Professional. April 1998. ISBN: 9780201824704.\n\nSedgewick, R.\nAlgorithms in C++\n. Reading, MA: Addison-Wesley Longman, Incorporated. June 2001. ISBN: 0201849380.\n\nCampione, M., K. Walrath, and A. Huml.\nThe Java(r) Tutorial\n. 2nd ed. Upper Saddle River, NJ: Prentice Hall PTR, December 1999. ISBN: 9780201485585.\n\nRecommended References\n\nC++\n\nDeitel, H. and P. Deitel.\nC++ How to Program\n. 4th ed. Upper Saddle River, NJ: Prentice Hall PTR. August 2002. ISBN: 9780130384744.\n\nStroustrup, B.\nThe C++ Programming Language.\n3rd ed.\n\nWinston, H.\nOn to C++.\n2nd ed.\n\nJohnsonbaugh & Kalin.\nObject Oriented Programming in C++\n. 2nd ed. Upper Saddle River, NJ: Prentice Hall, August 1999. ISBN: 9780130158857.\n\nCline, M., M. Girou, and G. Lomow.\nC++ FAQs\n. Reading, MA: Addison Wesley Professional, December 1998. ISBN: 9780201309836.\n\nAlgorithms\n\nWeiss, M.\nAlgorithms, Data Structures and Problem Solving with C++\n. Reading, MA: Addison Wesley, November 1999. ISBN: 9780201612509.\n\nCormen, T., C. Leiserson, and R. Rivest.\nIntroduction to Algorithms\n. Cambridge, MA: MIT Press. September 2001. ISBN: 9780262032933.\n\nJava(r)\n\nHorstmann, C. and G. Cornell.\nCore Java(r) 2: Fundamentals.\nUpper Saddle River, NJ: Prentice Hall PTR, August 2002. ISBN: 9780130471772.\n\nArnold, K., J. Gosling, and D. Holmes.\nThe Java(r) Programming Language\n. 3rd ed. Upper Saddle River, NJ: Prentice Hall PTR, June 2000. ISBN: 9780201704334.\n\nDeitel, H. and P. Deitel.\nJava(r)\n\nHow to Program.\n4th ed. Upper Saddle River, NJ: Prentice Hall, August 2001. ISBN: 9780130341518.\n\nJava(r) 2 Platform API Specification\n.\n\nAcademic Honesty Policy\n\nThe computer intensive nature of 1.124 changes some of the traditional ways in which homework sets are turned in and graded. But the fundamental principles of academic honesty remain the same as always. All students are expected to adhere to the highest possible ethical standards in all aspects of their work. In particular, each student should be completely responsible for his or her own work. Wherever there is any doubt students should err on the side of conservatism and keep their thoughts and solutions to themselves. 1.124 problem sets are not intended to be team projects or group endeavors (unless clearly stated on the problem set). You should conceptualize, solve, and write up each problem yourself to gain maximum benefit from the homework assignment. If you have any doubt about what is unacceptable collaboration speak to your TA or to the Instructor.\n\nRemember that your conduct in 1.124 and, more generally, at MIT is establishing habits of professional honesty that are likely to remain with you throughout your career. Keep your long term interests in mind if you are tempted to step beyond the bounds of propriety. Reality cannot be faked. Do not be tempted to claim knowledge that you have not gained.\n\nSpecific rules are as follows:\n\nWhile you may discuss general approaches to solving problems with your fellow students, you may not copy parts of other student's work or do the problem sets jointly. This particularly applies to computer programs.\n\nYou may seek other student's advice in debugging your programs. However, their assistance should be limited to determining what is wrong with your program rather than rewriting large sections of it for you.\n\nYou may copy and modify programs given in the lecture notes or in class by any of the instructors.\n\nTHESE RULES WILL BE STRICTLY ENFORCED.\n\n(Adapted from Course 1.00 Guidelines)",
  "files": [
    {
      "category": "Resource",
      "title": "ps1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/50a0373ac6a2feb92a0339874b2506c3_ps1.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 1\nDue Date: Tuesday 9/19/00\nReference Readings: From C++ Primer:\n● Chapter 1 and Chapter 2 (only skim through)\n● Chapters 3, 4, 5 and 6\nProblem 1:[15%]\nThis is a multiple choice question whose purpose is to expose you to several detail issues of C++\nprogramming that are related to a variable definition, data types, mixed expressions, conversions, etc.\nYou need to select the correct answer(s), or provide the answer, as indicated in the following questions.\nThere may be one or more than one correct answers in the multiple choice questions. Please submit this\npage, stapled together with the hardcopies for the other problems, with the selected answer(s) to each\nquestion circled. Please, write your name and username clearly on this page as well. Each question\ncounts for 1 point.\nQuestions 1-3: Consider the following code:\n#include <iostream.h>\nextern int x;\n// Statement a\nint main()\n{\nint a, b;\n// Statement b\ndouble d = 9;\n// Statement c\na = 1;\n// Statement d\nb = 5;\n// Statement e\ncout << x+ a/b + d/10 << endl;\n}\n1. Which line of the above code is both a definition and an initialization?\n\n2. Which line of the above code declares a variable without allocating memory for it?\n3. Which lines of the above code are assignments?\n4. According to the following statement:\nconst int *p;\na. the value of the pointer p cannot change\nb. the value of the integer that p points to cannot change\nc. both pointer p and the value of the integer that p points tocannot change\nd. both pointer p and the value of the integer that p points to can change\ne. p is a constant pointer to int\n5. When the following logical test is true?\n( x>=y && ! x && x* y < 0 && y==0)\na. if x is greater than y, and y is equal to zero\nb. if both x and y are equal to zero\nc. if x is positive, and y is equal to zero\nd. always\ne. never\n6. Which of the following cases of mixed expressions is/are correct (circle the correct one(s)),\nconsidering the following definition:\ndouble d; float f; int i; char c;\na. 'f' - 'd'\nis a double\nb. f / 3.33\nis a float\nc. 'f' - 'd'\nis an int\nd. 'f' - 'd'\nis a char\ne. none of the above\n7. What is the result of the statement following the definitions given below?\nchar c='b';\nchar *pc=&c;\nchar *&rc=pc ;\n(*rc)++;\n\na. it increases &rc\nb. it stores 'b' in variable c\nc. it increases *rc\nd. it increases pc, by one byte\ne. none of the above\n8. Considering the following definitions, which of the provided statements (if any) are invalid?\ndouble x= 0.5, y=4.9;\ndouble *px, *py, &rx=x;\na. px =&x; double &rx = *px ;\nb. px = py;\nc. double &ry = rx;\nd. px = px = rx;\ne. px = py = *x;\n9. Considering the following definitions, which of the provided statements (if any), would give the value\nof x, assuming that x is a double that has been properly defined and initialized to a value?\nvoid *pp = &x;\ndouble *px=&x;\ndouble **ppx=&px;\na. **ppx\nb. *(static_cast <double*>(pp))\nc. *pp\nd. *(*(&px))\ne. *( (double*)pp)\n10. Which of the following expressions give(s) as result an int equal to 6?\na. 'z' - 't'\nb. 13 % 7\nc. 7 % 2\nd. 29/5\ne. 55 % 7\n11. What will be the value of x after the execution of the following line?\n\nint x = (7>6 ? 1+8 : 8)\na. 6\nb. 7\nc. 1\nd. 8\ne. 9\n12. Which of the following(s) is a (are) valid function declaration (i.e. prototype)?\na. void func(int x);\nb. void func(int ){};\nc. func(9.5);\nd. void func(int x){ // Function body };\ne. void func(int);\n13. Which of the following functions, whose declarations are given below, will be called:\nfloat f;\nprintFun(2.0*f);\na. void printFun(void)\nb. void printFun(double)\nc. void printFun(float)\nd. float printFun(float)\ne. none of the above\n14. How many times is function fib called when num is 3, including the initial fib(3)?\nint fib(int num) // Fibonacci value of a number\n{\nswitch(num)\n{\ncase 0:\nreturn(0);\nbreak;\ncase 1:\nreturn(1);\nbreak;\ndefault:\nreturn(fib(num - 1) + fib(num - 2));\n\nbreak;\n}\n}\na. 1\nb. 4\nc. 3\nd. 5\ne. none\n15. In a function with return type void, what happens at return?\na. 0 is returned\nb. 1 is returned\nc. An arbitrary integer is returned\nd. A void pointer is returned\ne. No value is returned\nProblem 2:[5%]\nGiven the definitions of the variables below, determine the data type of the following expressions:\nbool b;\nchar c;\nint i;\nfloat f;\ndouble d;\n1.\n77 + c + i + 1L\n2.\n6.55f + f / 1.5 - 9 / 8\n3. 'z' - 'z'\n4.\nb + c\n5.\n't' - 'a' + c\n6.\n77.8f + 4 * 0.5f +45L\n7.\n42L + (int) d + 94.3f + int(4.9)\n8.\n0.0 + f +c\n9.\n5.28L * d * 3 + 4.5\n\n10.\n1.5f / d * f + 6.9 * 4L\nProblem 3:[10%]\nThe following program uses a local and a global array of characters with the same name, called name.\nThere is also an object of the class Material that has a member called name. The declarations of the\nfunctions and the Material class are provided in the file ps1_3.h and the definitions and main() are\nprovided in the file ps1_3.C. The only thing that you need to do is to replace the 3 comments with the\nproper expressions, so as to print out the local variable (in main()) called name, the global variable name\nand the member name of the object m. Compile and execute the program and submit both the printout of\nthe modified code and a screendump of the output. Also electronically turn-in the source code file and\nthe makefile you have used for the compiling.\nps1_3.h\n// Problem Set#1 - Problem#3 [ps1_3.h]\n#ifndef PS1_3_H\n#define PS1_3_H\n#include <iostream.h>\n#include <stdlib.h>\n#include <string.h>\nclass Material\n{\npublic:\nchar name[20];\ndouble modulusElasticity;\ndouble ratioPoisson;\nMaterial();\nvoid print(void);\n};\n#endif\nps1_3.C\n// Problem Set#1 - Problem#3 [ps1_3.C]\n\n#include \"ps1_3.h\"\nMaterial::Material()\n{\nstrcpy(name,\"None\");\nmodulusElasticity = 0.0;\nthis -> ratioPoisson = 0.0;\n}\nvoid Material:: print(void)\n{\ncout << \"\\n Material: \" << name\n<< \"\\n Modulus of elasticity = \" << modulusElasticity\n<< \"\\n Poisson ratio = \" << ratioPoisson << endl;\n}\nchar name[40] = \"Foundation of Software Engineering\";\nint main()\n{\nchar name[30] = \"Problem 3\";\nMaterial m;\ncout << \"\\n Local name : \"\n<< \"replace this comment with the expression to print the local name\";\ncout << \"\\n Global name : \"\n<< \"replace this comment with the expression to print the global name\";\ncout << \"\\n Object name : \"\n<< \"replace this comment with the expression to print the name of object m\";\ncout << \"\\n Object: \" ;\n/* replace this comment with a statement that invokes\nthe member function print() using the object m */\ncout << \"\\n Exiting properly\\n\" << endl;\nreturn EXIT_SUCCESS;\n}\n\nProblem 4:[10%]\nWhat the following sets of statements output?\n1.\nint x;\nint *y;\nint **z;\nx = 0;\ny = &x;\nz = &y;\nx++;\n(*y)++;\n(**z) = 10;\ncout << \"x is \" << x <<\n\" *y is \" << *y <<\n\" **z is \" << **z << endl;\n2.\nvoid increment (int &a, int b, int *c)\n{\na++;\nb++;\n(*c)++;\ncout << \"a is \" << a << \" b is \" << b << \" c is \" << *c << endl;\n}\nint main()\n{\nint x=0, y=0, z=0;\nincrement (x,y,&z);\ncout << \"x is \" << x << \" y is \" << y << \" z is \" << z << endl;\n}\n3.\n\nvoid swap(int *a, int *b)\n{\nint *tmp;\ntmp = a;\na = b;\nb = tmp;\n}\nint main (){\nint x[] = {1, 1, 1};\nint y[] = {2, 2, 2};\nswap (x,y);\ncout << \" x[0] = \" << x[0] << \" y[0] = \" << y[0] << endl ;\n}\n4.\ndouble scale(double x, double s=1, double offset=0);\ndouble scale(double x, double s, double offset)\n{\nreturn s*x + offset;\n}\nint main()\n{\ndouble value=20;\ndouble test1 = scale(value);\ndouble test2 = scale(value,2.54);\ndouble test3 = scale(value, 9.0/5.0, 32.0);\ncout << \"test1=\" << test1\n<< \"test2=\" << test2\n<< \"test3=\" << test3 << endl;\nreturn 0;\n}\n5.\n\nvoid func2 (int& a, int& b)\n{\nint tmp = a;\na = b;\nb = tmp;\n}\nvoid func1 (int a, int b)\n{\na /= 2;\nb *= 2;\ncout << \"Before func2\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\nfunc2 (a, b);\ncout << \"After func2\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\n}\nint main()\n{\nint a = 10;\nint b = 20;\ncout << \"At the beginning\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\nfunc1 (a, b);\nfunc2 (a, b);\ncout << \"At the end\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\n}\n\nProblem 5:[40%]\nFor this problem you need to write a program that prompts the user for an odd positive integer, n,\ngreater than 1, and then prints the following hourglass figure which has a height of n text lines:\nIn this example: n = 9\n*********\n*\n*\n*\n*\n* *\n*\n* *\n*\n*\n*\n*\n*********\nYour program should check that the user enters a valid number for n and print an error message if not.\nYour output should look exactly like the figure above: symmetric and left-justified, with all `*'s and\nspaces in the locations as shown. It should be scaled appropriately for the given value of n. Please\nmake sure that your program works for all valid cases (e.g. check for n=3). It is recommended to break\nthe entire job into small tasks to handle each region of the figure.\nPlease, provide your source code in a file named ps1_5.C and any declarations in the corresponding\nheader file ps1_5.h.\nProblem 6:[20%]\nIn this problem you should provide the missing constructor in ps1_6.h which should serve as both the\ndefault (to zero both member variables) and as one with two doubles (named real and imaginary) as\narguments (to set the member variables to the values of the corresponding arguments).\nAlso, you also need to provide in the file ps1_6.C the missing definitions of the member functions\ndouble get_real(void), double get_imaginary(void), void set_real(double) and void set_imaginary\n(double).\nPlease, compile and execute the completed program and submit printouts of both the source code and\nthe output (e.g. screen dump).\n\nps1_6.h\n#include <iostream.h> // Problem Set#1 - Problem#6 [ps1_6.h]\n#include <stdlib.h>\nclass Complex\n{\nprivate:\ndouble real;\ndouble imaginary;\npublic:\n/*\nProvide the body of ONLY one constructor which can serve\nboth as the default constructor, (setting the values of both member\nvariables to 0.0), and as a constructor with arguments two doubles\nnamed real and imaginary, and which should initialize the real and\nimaginary member variables to the provided parameters real and\nimaginary (local variables for the constructor)\n*/\ndouble get_real(void);\ndouble get_imaginary(void);\nvoid set_real(double);\nvoid set_imaginary(double);\n};\nps1_6.C\n#include \"ps1_6.h\" // Problem Set#1 - Problem#6 [ps1_6.C]\n/* Provide the definitions of the member\nfunctions get_real() & get_imaginary() */\n/* Provide the definitions of the member\nfunctions set_real() & set_imaginary() */\n\nint main ( )\n{\nComplex c1;\ncout << \"\\n\\n c1 = \" << c1.get_real()\n<< \" + \" << c1.get_imaginary() << \"i \" << endl ;\nComplex c2(7.25,-8.5);\ncout << \"\\n\\n c2 = \" << c2.get_real()\n<< \" + \" << c2.get_imaginary() << \"i \" << endl ;\nc1.set_real(1.7);\nc1.set_imaginary(-6.7);\ncout << \"\\n\\n c1 = \" << c1.get_real()\n<< \" + \" << c1.get_imaginary() << \"i \" << endl << endl;\nreturn EXIT_SUCCESS ;\n}\nNote:\nPlease submit both printouts of the source code you have written (preferably using % enscript -2Gr -\nPprinter filename) and screen dumps of the execution output (using %xdpr -Pprinter), with your name\nand username clearly written on the first page of the stapled submitted problem set. The submitted code\nmust be identical to that electronically turned in (as described above).\nIf you can submit the problem set one day late 10% of the total grade (i.e. 10 points) will be deducted.\nMore than one day late problem sets will not be accepted.\n(c)1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "sol1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/f776cf027c1ad6f3886b126030a083f1_sol1.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 1- Solution\nDue Date: Tuesday 9/19/00\nProblem 1:[15%]\nQuestions 1-3: Consider the following code:\n#include <iostream.h>\nextern int x;\n// Statement a\nint main()\n{\nint a, b;\n// Statement b\ndouble d = 9;\n// Statement c\na = 1;\n// Statement d\nb = 5;\n// Statement e\ncout << x+ a/b + d/10 << endl;\n}\n1. Which line of the above code is both a definition and an initialization?\n->\nC\n2. Which line of the above code declares a variable without allocating memory for it?\n->\na\n3. Which lines of the above code are assignments?\n->\nd & e\n4. According to the following statement:\nconst *int p;\nb. the value of the integer that p points to cannot change\n\n5. When the following logical test is true?\n( x>=y && ! x && x* y < 0 && y==0)\ne. never\n6. Which of the following cases of mixed expressions is/are correct (circle the correct one(s)),\nconsidering the following definition:\ndouble d; float f; int i; char c;\nc. 'f' - 'd'\nis an int\n7. What is the result of the statement following the definitions given below?\nchar c='b';\nchar *pc=&c;\nchar *&rc=pc ;\n(*rc)++;\nc. it increases *rc\n8. Considering the following definitions, which of the provided statements (if any) are invalid?\ndouble x= 0.5, y=4.9;\ndouble *px, *py, &rx=x;\na. px =&x; double &rx = *px ;\nd. px = px = rx;\ne. px = py = *x;\n9. Considering the following definitions, which of the provided statements (if any), would give the value\nof x, assuming that x is a double that has been properly defined and initialized to a value?\nvoid *pp = &x;\n\ndouble *px=&x;\ndouble **ppx=&px;\na. **ppx\nb. *(static_cast <double*>(pp))\nd. *(*(&px))\ne. *( (double*)pp)\n10. Which of the following expressions give(s) as result an int equal to 6?\na. 'z' - 't'\nb. 13 % 7\ne. 55 % 7\n11. What will be the value of x after the execution of the following line?\nint x = (7>6 ? 1+8 : 8)\ne. 9\n12. Which of the following is a valid function declaration (i.e. prototype)?\na. void func(int x);\ne. void func(int);\n13. Which of the following functions, whose declarations are given below, will be called:\nfloat f;\nprintFun(2.0*f);\nb. void printFun(double)\n14. How many times is function fib called when num is 3, including the initial fib(3)?\nint fib(int num) // Fibonacci value of a number\n{\nswitch(num)\n{\ncase 0:\n\nreturn(0);\nbreak;\ncase 1:\nreturn(1);\nbreak;\ndefault:\nreturn(fib(num - 1) + fib(num - 2));\nbreak;\n}\n}\nd. 5\n15. In a function with return type void, what happens at return?\ne. No value is returned\nProblem 2:[5%]\nGiven the definitions of the variables below, determine the data type of the following expressions:\nbool b;\nchar c;\nint i;\nfloat f;\ndouble d;\n1.\n77 + c + i + 1L\nlong int\n2.\n6.55f + f / 1.5 - 9 / 8\ndouble\n3. 'z' - 'z'\nint\n4.\nb + c\nint\n5.\n't' - 'a' + c\nint\n6.\n77.8f + 4 * 0.5f +45L\nfloat\n7.\n42L + (int) d + 94.3f + int(4.9)\nfloat\n8.\n0.0 + f +c\ndouble\n9.\n5.28L * d * 3 + 4.5\nlong double\n10.\n1.5f / d * f + 6.9 * 4L\ndouble\n\nProblem 3:[10%]\n// Problem Set#1 - Problem#3 [ps1_3.h]\n#ifndef PS1_3_H\n#define PS1_3_H\n#include <iostream.h>\n#include <stdlib.h>\n#include <string.h>\nclass Material\n{\npublic:\nchar name[20];\ndouble modulusElasticity;\ndouble ratioPoisson;\nMaterial();\nvoid print(void);\n};\n#endif\n// Problem Set#1 - Problem#3 [ps1_3.C]\n#include \"sol1_3.h\"\nMaterial::Material()\n{\nstrcpy(name,\"None\");\nmodulusElasticity = 0.0;\nthis -> ratioPoisson = 0.0;\n}\n\nvoid Material:: print(void)\n{\ncout << \"\\n Material: \" << name\n<< \"\\n Modulus of elasticity = \" << modulusElasticity\n<< \"\\n Poisson ratio = \" << ratioPoisson << endl;\n}\nchar name[40] = \"Foundation of Software Engineering\";\nint main()\n{\nchar name[30] = \"Problem 3\";\nMaterial m;\ncout << \"\\n Local name : \"\n<< name ;\ncout << \"\\n Global name : \"\n<< ::name;\ncout << \"\\n Object name : \"\n<< m.name;\ncout << \"\\n\\n Object: \" ;\nm.print();\ncout << \"\\n Exiting properly\\n\" << endl;\nreturn EXIT_SUCCESS;\n}\nProblem 4:[10%]\nWhat the following sets of statements output?\n1.\nint x;\nint *y;\nint **z;\n\nx = 0;\ny = &x;\nz = &y;\nx++;\n(*y)++;\n(**z) = 10;\ncout << \"x is \" << x <<\n\" *y is \" << *y <<\n\" **z is \" << **z << endl;\nx is 10 *y is 10 **z is 10\n2.\nvoid increment (int &a, int b, int *c)\n{\na++;\nb++;\n(*c)++;\ncout << \"a is \" << a << \" b is \" << b << \" c is \" << *c << endl;\n}\nint main()\n{\nint x=0, y=0, z=0;\nincrement (x,y,&z);\ncout << \"x is \" << x << \" y is \" << y << \" z is \" << z << endl;\n}\na is 1 b is 1 c is 1\nx is 1 y is 0 z is 1\n3.\nvoid swap(int *a, int *b)\n{\nint *tmp;\ntmp = a;\n\na = b;\nb = tmp;\n}\nint main (){\nint x[] = {1, 1, 1};\nint y[] = {2, 2, 2};\nswap (x,y);\ncout << \" x[0] = \" << x[0] << \" y[0] = \" << y[0] << endl ;\n}\nx[0] = 1 y[0] = 2\n4.\ndouble scale(double x, double s=1, double offset=0);\ndouble scale(double x, double s, double offset)\n{\nreturn s*x + offset;\n}\nint main()\n{\ndouble value=20;\ndouble test1 = scale(value);\ndouble test2 = scale(value,2.54);\ndouble test3 = scale(value, 9.0/5.0, 32.0);\ncout << \" test1=\" << test1\n<< \" test2=\" << test2\n<< \" test3=\" << test3 << endl;\nreturn 0;\n}\ntest1=20 test2=50.8 test3=68\n5.\n\nvoid func2 (int& a, int& b)\n{\nint tmp = a;\na = b;\nb = tmp;\n}\nvoid func1 (int a, int b)\n{\na /= 2;\nb *= 2;\ncout << \"Before func2\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\nfunc2 (a, b);\ncout << \"After func2\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\n}\nint main()\n{\nint a = 10;\nint b = 20;\ncout << \"At the beginning\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\nfunc1 (a, b);\nfunc2 (a, b);\ncout << \"At the end\" << endl;\ncout << \" a = \" << a << \" b = \" << b << endl;\n}\nAt the beginning\na = 10 b = 20\nBefore func2\na = 5 b = 40\n\nAfter func2\na = 40 b = 5\nAt the end\na = 20 b = 10\nProblem 5:[40%]\nsol1_5.h\n// Problem Set#1 - Problem#5 [sol1_5.h]\n#ifndef SOL1_5_H\n#define SOL1_5_H\n#include <iostream.h>\n#include <stdlib.h>\n#include <string.h>\nint main();\nint getHeight();\nvoid checkHeight(int n);\nvoid drawHourglass(int n);\n#endif\nsol1_5.C\n// Problem Set#1 - Problem#5 [ps1_5.C]\n#include \"sol1_5.h\"\nint main()\n{\n\nint n;\n// Height of figure\nn = getHeight();\ncheckHeight(n);\ndrawHourglass(n);\n}\nint getHeight()\n{\nint n;\ncout << \"Enter height of figure, n : \";\ncin >> n;\ncout << endl;\nreturn n;\n}\nvoid checkHeight(int n)\n{\nif (n % 2 == 0 || n < 3)\n{\ncout << \"Bad value for n!! exiting...\" << endl << endl;\nexit(-1);\n}\n}\nvoid drawHourglass(int n)\n{\nint i, j;\nfor (i=0; i<n; i++) // Print top row of '*'s\ncout << '*';\ncout << endl;\nfor ( j = n/2 - 2; j >= 0; j-- ) // Print upper rows\n{\nfor ( i = 0; i < n/2-j-1; i++ ) // Move to position of first '*'\ncout << ' ';\ncout << '*'; // Print first '\\'\n\nfor ( i = 0; i < 2*j+1; i++) // Print spaces\ncout << ' ';\ncout << '*' << endl; // Print second '*' and end line\n}\nfor ( i = 0; i < n/2; i++ ) // Print center row\ncout << ' ';\ncout << '*' << endl;\nfor ( j = 1; j < n/2; j++ ) // Print lower rows\n{\nfor ( i = 0; i < n/2-j ; i++ ) // Move to position of first '*'\ncout << ' ';\ncout << '*'; // Print first '|'\nfor ( i = 0; i < 2*j -1; i++) // Print spaces\ncout << ' ';\ncout << '*' << endl; // Print second '*' and end line\n}\nfor (i=1; i<=n; i++) // Print bottom row of '*'s\ncout << '*';\ncout << endl << endl;\n}\nProblem 6:[20%]\nsol1_6.h\n#include <iostream.h> // Problem Set#1 - Problem#6 solution [sol1_6.h]\n#include <stdlib.h>\nclass Complex\n\n{\nprivate:\ndouble real;\ndouble imaginary;\npublic:\nComplex(double real=0, double imaginary=0)\n{\ncout << \"\\n In Complex(\" << real\n<< \",\" << imaginary << \") constructor\" << endl;\nthis -> real = real ;\nthis -> imaginary = imaginary ;\n}\ndouble get_real(void);\ndouble get_imaginary(void);\nvoid set_real(double);\nvoid set_imaginary(double);\n};\nsol1_6.C\n#include \"sol1_6.h\" // Problem Set#1 - Problem#6 solution [sol1_6.C]\ndouble Complex::get_real(void)\n{\nreturn real;\n}\ndouble Complex::get_imaginary(void)\n{\nreturn imaginary;\n}\nvoid Complex::set_real(double real)\n{\nthis -> real = real ;\n}\nvoid Complex::set_imaginary(double im)\n\n{\nimaginary = im;\n}\nint main ( )\n{\nComplex c1;\ncout << \"\\n\\n c1 = \" << c1.get_real()\n<< \" + \" << c1.get_imaginary() << \"i \" << endl ;\nComplex c2(7.25,-8.5);\ncout << \"\\n\\n c2 = \" << c2.get_real()\n<< \" + \" << c2.get_imaginary() << \"i \" << endl ;\nc1.set_real(1.7);\nc1.set_imaginary(-6.7);\ncout << \"\\n\\n c1 = \" << c1.get_real()\n<< \" + \" << c1.get_imaginary() << \"i \" << endl << endl;\nreturn EXIT_SUCCESS ;\n}\n/********************** Solution output *******************\nIn Complex(0,0) constructor\nc1 = 0 + 0i\nIn Complex(7.25,-8.5) constructor\nc2 = 7.25 + -8.5i\nc1 = 1.7 + -6.7i\n\n********************************************************/\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "ps2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/fb93320338f550dd093cee391fefe5c6_ps2.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 2\nDue Date: Tuesday 9/26/00\nReference Readings: From C++ Primer (in addition to the reference reading from PS1):\n● Chapters 6, 7, 8\nProblem 1:[10%]\nThis is a multiple choice question. You need to select the correct answer(s), or provide the answer, as\nindicated in the following questions. There may be one or more than one correct answers in the multiple\nchoice questions. Please submit this page, stapled together with the hardcopies for the other problems,\nwith the selected answer(s) to each question circled. Please, write your name and username clearly on\nthis page as well. Each question counts for 2 point.\n1. Which of the following functions, whose declarations are given below, will be called:\nfloat myF;\nprintMyF(2.0*myF);\na. void printMyF(void)\nb. void printMyF(double)\nc. void printMyF(float)\nd. float printMyF(float)\ne. none of the above\n2. If you declare members inside a class without labeling them public, private, or protected\na. they are assumed to be private.\nb. they are assumed to be protected\nc. they are assumed to be public\nd. it is illegal not to explicitly specify the access level\n\ne. none of the above\n3. Which of the following is/are True?\na. The definition, and not only the declaration, of an inline function\nneeds to be available in each source code file that uses that function.\nb. Only a member function or a friend function can access\na private member of the class.\nc. The memory location where the object which invoked a\nmember function is given by &this inside the member function.\nd. Pointers of different types may not be assigned to one another without a cast\noperation.\ne. All of the above\n4. Which of the following is/are True?\na. Since in a member function \"this\" is a pointer to an object of\nthat class it can be used to store a dynamically allocated object\nin the body of the member function definition.\nb. It is not allowable to define (i.e. allocate memory) a static\ndata member within the declaration of the class.\nc. The copy constructor takes an object of the same class as\nargument passed by value.\nd. All of the above\ne. None of the above\n5. Which of the following is/are True?\na.\nThe division operator(/) can be overloaded as a member function with\nno parameters.\nb.\nThe return data type of a type conversion operator may optionally be\nspecified.\nc. The statement: delete px; deletes the pointer px\n(i.e. release the memory allocated to store px).\nd.\nMember data and functions defined in the private part of a class are\naccessible by member functions of a class derived from the former class.\ne. None of the above\n6. Which of the following give(s) the element A[3][4] of an array A of size 10x10?\n\na. *(&A[0][0]+3*4)\nb.\n*(A[3]+4)\nc. (*(A+3))[4]\nd. *((*(A+3))+4)\ne. All of the above.\n7. 8,9,10. Indicate which of the following statements are True and which are False:\n7. It is not allowable to define a constructor to have void return type since it returns\nnothing: T / F\n8. It is allowable to specify a destructor to have void as parameters, since it does not take\nany arguments: T / F\n9. It is not possible to initialize a constant member data in the body of a constructor of the\nclass: T / F\n10. The definition double *a[100] causes C++ to allocate storage for 100 doubles: T / F\nProblem 2:[30%]\nIn this problem you will implement two member functions of a class, named ElevatorStack, which\ncan be used to create a stack.\nThe declaration of the class is given in the file ps2_2.h. It consists of an array of structures, named\nGuard, an integer which indicates the current position in the stack, named position, and a double, named\nweight, to store the current total weight of the \"guards\" currently in the elevator. The declaration of the\nstructure Guard is also given in the file ps2_2.h. The prototypes of the functions push() and pop(), which\nare used for the stack operations, are also given in the file ps2_2.h.\nThe main() program in the file ps2_2.C is supposed to simulate a stack to represent the entrance\n(push) and the exit (pop) of guards in an elevator. You should also provide in the file ps2_2.C the\ndefinitions of the functions push() and pop(), whose declarations are given in the file ps2_2.h, and the\nmissing code from the externally defined constructor and destructor of the class ElevatorStack.\nFor the push(char *name, double weight) make sure that you check whether the maximum\nallowable weight or/and the maximum allowable number of persons in the elevator have been exceeded.\nIn that case the function should provide the user with an informative message for not allowing a push(), i.\ne. another person to enter the elevator. When it is allowed the data provided by the user should be stored\n\nin the members of the structure in the current position. The memory for the name is dynamically\nallocated according to its length.\nFor the pop(), which is called whenever the provided name is \"POP\", you should check whether the\nstack is empty and have accordingly a message. The function must release the dynamically allocated\nmemory for the name of the guard who is exiting (according to last-in first-out) and reduce the total\nweight by its individual weight.\nBefore exiting both push() and pop() the function must inform the user with the current status, i.e. the\ntotal weight and number of guards in the elevator.\nPlease, submit both the printout of the modified code and the output when executing the completed\nprogram with the data in the provided file dat2_2.\nYou may use redirection for both the input and output. e.g.\n% ps2_2 < dat2_2 > res2_2 ; ensript -2Gr res2_2\nYou need to submit both ps2_2.h. and ps2_2.C files, although you should make changes only to the\nlatter file.\nps2_2.h\n// Problem Set#2 - Problem#2 [ps2_2.h]\n#ifndef PS_2_2_H\n#define PS_2_2_H\n#define MAX_PERSONS 4\n#define MAX_WEIGHT 900\nint main (void) ;\nstruct Guard\n{\nchar *name;\ndouble weight;\n};\nclass ElevatorStack\n\n{\nprivate:\nGuard guards[MAX_PERSONS];\nint position;\ndouble totalWeight;\npublic:\nElevatorStack();\n// Constructor\n~ElevatorStack();\n// Destructor\nvoid push(char *name, double weight);\nvoid pop(void);\n};\n#endif\nps2_2.C\n// Problem Set#2 - Problem#2 [ps2_2.C]\n#include <iostream.h>\n#include <stdlib.h>\n#include <string.h>\n#include <iomanip.h>\n#include \"ps2_2.h\"\nint main (void)\n{\nElevatorStack elevatorStack;\nchar name[20];\ndouble weight;\ncin.clear();\nwhile(1)\n{\ncout << \"\\n\\n Guard's name : \" ;\ncin >> name ;\nif(cin.eof())\nbreak;\nif(strcmp(name,\"POP\"))\n{\n\n------\ncout << \"\\n Weight : \" ;\ncin >> weight ;\nelevatorStack.push(name,weight);\n}\nelse\nelevatorStack.pop();\n}\ncout << \"\\n\\n Exiting the program normally\" << endl << endl;\nreturn EXIT_SUCCESS ;\n}\nElevatorStack:: ElevatorStack()\n{\n// The constructor should set the position and\n// totalWeight to 0 and 0.0, respectively.\n}\nElevatorStack::~ElevatorStack()\n// Destructor\n{\n// The destructor should releasing the dynamically allocated\n// memory for name of each guard in the array of structures\n}\n/***************************************************\nHere you should provide the externally defined\nmember functions push() and pop().\npush()\n- The push member function should check whether the\nnumber of people or their weight has exceeded the\nallowable limits.\n- In each of the above case it should print an\ninformative message why push is not possible.\n- If it is allowable a new \"Guard\" structure should\n\n-----\nbe added to the stack and the number of people in\nthe elevator and their weight should be updated.\nThis information should be printed to the user.\npop()\n- The pop() member function should check whether\nthe stack is empty and in that case print a message\n- Whenever the message is not empty a \"Guard\" should\nbe popped out of the stack and the updated information\nfor the number of people in the elevator and their\nweight should be printed to the user.\n*****************************************************/\nProblem 3:[60%]\nTo lower heavy testing equipment for deep underground experiments, it is often necessary to connect a\nnumber of cables in series to reach great depths. Supporting the weight of the machinery, the cables will\nundergo axial stress and extend beyond their original length. Your task is to write a program to\ndetermine how much a series of cables will stretch under a given load and to see if the cables will be\nstrong enough to support that load.\nBar and cable elements in series subjected to axial load are governed by the equation of springs in\nseries:\nwhere the stiffness, k, of each element is equal to its area, A, multiplied by its modulus of elasticity,\nE, divided by its length, L,: k = AE/L.\nThe program that you need to develop should be able to compute the axial deformation of the\nelement assemblage. In addition, it should check the strength of each cable to ensure its safety against\nbreaking.\n\nIn order to simplify the problem, you can assume that the weight of the cables is negligible in\ncomparison to the machinery being lowered and that each cable behaves perfectly elastically until\nfailure.\nYou should use a class named Cable with 3 doubles as private member data: the area, the modulus of\nelasticity, the length, and the strength of the cable. The class that you should use for a cable element\nshould look as the one below. The member variables area, elastic_modulus, length, and strength\nMUST be private.\nclass Cable\n{\npublic:\n// your functions here\nprivate:\ndouble area;\n// area of the cable\ndouble elastic_modulus;\n// modulus of elasticity of the cable\ndouble length;\n// length of the cable\ndouble strength;\n// strength of the cable\n};\nA cable will fail if its stress exceeds its strength. Since each cable in a series assemblage must\nsupport the entire weight, the stress in each cable can be determined by dividing the supported weight by\nthe area of the cable:\nStress = weight / area\nIf a cable does not fail, its elongation can be calculated using the following formula derived from\nHooke's Law:\nThe total elongation of the system can be determined by adding the elongation calculated for each\ncable.\n\nAlternatively, the total elongation of the system can be determined using the following formula:\nThe equivalent stiffness keq is given by the formula:\nThe data should be stored in an array of Cables , i.e. objects of the class Cable. The array should be\ndynamically allocated after the user specifies the number of cables. First have the user enter the number\nof cables in the assemblage and then read the data for each cable and the weight of the machinery. After\nreading all the information the data should be printed out using overloaded I/O operators.\nThen, check whether any of the cable will fail under the provided weight. In case of exceeding its\nstrength a warning message should be printed out and the program should exit.\nIf no cable will fail, loop over the array to determine the equivalent stiffness constant for the\nassemblage, which you should print out to the user. You also need to print the individual elongation and\nstress for each cable. You should print out all results with 3 decimal point accuracy.\nYou should provide your source code for the Cable class in the file cable.C and the declarations in\nthe file cable.h, and the general code in the files ps2_3.C and ps2_3.h. You also need to write a proper\nmakefile, named makePS2, that can be used to compile and link your program.\nps2_3.h\nIn this header file you should provide all the declarations of the non-member functions, i.e. all\nfunctions that are provided in the file ps2_3.C.\n\nps2_3.C\nIn this file you should provide the main function, which should be kept very short, e.g. less than 10\nlines of code. In main you should first call a function to read the cables information\nand a function to read the weight of the machinery. The first information that should be provided in the\nformer function should be the number of cables in order to allocate dynamically the array of cables.\nThen, the area, elastic modulus, length and strength of each cable. The input for each cable should be\nread using an overloaded input operator. The latter function should read the weight of the machinery\nsupported by the cables. In both function you should check that the provided data are positive numbers.\nHaving read all input data another function should be invoked to print out the data of each cable. The\noutput operator should be used for this purpose.\nThen, a function should be called to check if any cables will fail. If a cable will fail then this\ninformation should be provided to the user and the program should exit after it releases the dynamically\nallocated memory. If no cable will fail, the elongation and equivalent stiffness constant of the cable\nassemblage should be printed. The stress and elongation in each individual cable should then also be\nprinted. Finally, the dynamically allocated memory should be released.\nA sample main() function is presented below:\nint main()\n{\nCable *cableAssemblage;\nint numberCables;\ndouble weight;\nnumberCables = readCableData(&cableAssemblage);\nweight = readWeight();\nprintCableData(cableAssemblage,numberCables,weight);\nif(checkStrength(cableAssemblage,numberCables,weight))\ndetermineExtensions(cableAssemblage,numberCables,weight);\nreleaseMemory(cableAssemblage);\nreturn EXIT_SUCCESS;\n}\nIn the file ps2_3.C you should also provide the functions to implement the above functionalities, i.e.\ncheck for failure, determine the elongation of the assemblage, and the elongation and stress of each\nindividual cable.\n\ncable.h\nIn this header file you should provide the definition of the class Cable. All externally defined\nmember function should be provided in the file cable.C.\ncable.C\nAll externally defined member functions as well as the overloaded input and output operators should\nbe defined in this file. You may need to provide functions to calculate the stiffness constant (k), stress\nand elongation of a single cable, and a function to check if a cable has failed under a given load.\nTwo sample runs of a program that performs the above functionalities are provided below. In the first\none no cable fails so the elongations and stresses are provided as indicated above.\nEnter the number of cables in the assemblage: 2\nEnter the data for cable 1\nArea: A = 0.0025\nModulus of elasticity: E = 200000000\nLength: L = 5\nStrength: S = 300000\nEnter the data for cable 2\nArea: A = 0.002\nModulus of elasticity: E = 210000000\nLength: L = 6.5\nStrength: S = 325000\nEnter the weight of the machinery:\nCable 1\nArea: A = 0.0025\nModulus of elasticity: E = 2e+08\nLength: L = 5\nStrength: S = 300000\nCable 2\nArea: A = 0.002\nModulus of elasticity: E = 2.1e+08\nLength: L = 6.5\n\nStrength: S = 325000\nEquivalent stiffness constant: Keq = 39252.3\nThe assemblage will extend 0.0127 units beyond its original length.\nCable 1:\nstress=2e+05\nElongation=0.005\nCable 2:\nstress=2.5e+05\nElongation=0.00774\nIn the second case the stress exceeds the strength of the cable, and, therefore, the program exits after\nprinting an appropriate message.\nEnter the number of cables in the assemblage: 1\nEnter the data for cable 1\nArea: A = 0.002\nModulus of elasticity: E = 200000000\nLength: L = 7\nStrength: S = 250000\nEnter the weight of the machinery:\nCable 1\nArea: A = 0.002\nModulus of elasticity: E = 2e+08\nLength: L = 7\nStrength: S = 250000\nThis assemblage cannot support the machinery.\nCable 1 will fail!!!\nSubmission requirements:\nYou should provide your source code in the files cable.C and cable.h (for the Cable class as explained\nabove), and ps2_3.C and ps2_3.h (the general code). In addition you need to submit a proper makefile,\nnamed makePS2, that can be used to compile and link your program with the following command:\ngmake -f makePS2 ps2_3\n\nNote:\nPlease submit both printouts of the source code you have written (preferably using % enscript -2Gr -\nPprinter filename) and screen dumps of the execution output (using %xdpr -Pprinter), with your name\nand username clearly written on the first page of the stapled submitted problem set. The submitted code\nmust be identical to that electronically turned in (as described above).\nIf you can submit the problem set one day late 10% of the total grade (i.e. 10 points) will be deducted.\nMore than one day late problem sets will not be accepted.\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "sol2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/c96a05d9fc20a9154dac6e1250b83204_sol2.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 2 - Solution\nDue Date: Tuesday 9/26/00\nProblem 1:[10%]\n1. Which of the following functions, whose declarations are given below, will be called:\nfloat myF;\nprintMyF(2.0*myF);\nb. void printMyF(double)\n2. If you declare members inside a class without labeling them public, private, or protected\na. they are assumed to be private.\n3. Which of the following is/are True?\na. The definition, and not only the declaration, of an inline function\nneeds to be available in each source code file that uses that function.\nb. Only a member function or a friend function can access\na private member of the class.\nd. Pointers of different types may not be assigned to one another without a cast\noperation.\n4. Which of the following is/are True?\ne. None of the above\n\n5. Which of the following is/are True?\ne. None of the above\n6. Which of the following give(s) the element A[3][4] of an array A of size 10x10?\na. *(&A[0][0]+3*4)\nb.\n*(A[3]+4)\nc. (*(A+3))[4]\nd. *((*(A+3))+4)\ne. All of the above.\n7. 8,9,10. Indicate which of the following statements are True and which are False:\n7. It is not allowable to define a constructor to have void return type since it returns\nnothing: T\n8. It is allowable to specify a destructor to have void as parameters, since it does not take\nany arguments: F\n9. It is not possible to initialize a constant member data in the body of a constructor of the\nclass: T\n10. The definition double *a[100] causes C++ to allocate storage for 100 doubles: F\nProblem 2:[30%]\nsol2_2.h\n// Problem Set#2 - Problem#2 [ps2_2.h]\n#ifndef PS_2_2_H\n#define PS_2_2_H\n#define MAX_PERSONS 4\n#define MAX_WEIGHT 900\n\nint main (void) ;\nstruct Guard\n{\nchar *name;\ndouble weight;\n};\nclass ElevatorStack\n{\nprivate:\nGuard guards[MAX_PERSONS];\nint position;\ndouble totalWeight;\npublic:\nElevatorStack();\n// Constructor\n~ElevatorStack();\n// Destructor\nvoid push(char *name, double weight);\nvoid pop(void);\n};\n#endif\nsol2_2.C\n// Problem Set#2 - Problem#2 solution [sol2_2.C]\n#include \"sol2_2.h\"\nint main (void)\n{\nElevatorStack elevatorStack;\nchar name[20];\ndouble weight;\ncin.clear();\nwhile(1)\n\n{\ncout << \"\\n\\n Guard's name : \" ;\ncin >> name ;\nif(cin.eof())\nbreak;\nif(strcmp(name,\"POP\"))\n{\ncout << \"\\n Weight : \" ;\ncin >> weight ;\nelevatorStack.push(name,weight);\n}\nelse\nelevatorStack.pop();\n}\ncout << \"\\n\\n Exiting the program normally\" << endl << endl;\nreturn EXIT_SUCCESS ;\n}\nElevatorStack:: ElevatorStack()\n{\ncout << \"\\n Using the default constructor \\n\";\nposition = 0 ;\ntotalWeight = 0.0;\n}\nElevatorStack::~ElevatorStack()\n// Destructor\n{\ncout << \"\\nReleasing the memory for the array of structures \\n\";\nfor(int i=0 ; i<position;i++)\ndelete [] guards[i].name;\n}\nvoid ElevatorStack::push(char *name, double weight)\n{\n\nif(position >= MAX_PERSONS && (totalWeight+weight)>MAX_WEIGHT)\ncout << \"\\n Guard \" << name << \" cannot enter the elevator \\n\"\n<< \"to avoid exceeding of both allowable weight and \"\n<< \"number of persons\";\nelse if(position >= MAX_PERSONS)\ncout << \"\\n Guard \" << name << \" cannot enter the elevator \\n\"\n<< \"to avoid exceeding the allowable number of persons\";\nelse if((totalWeight+weight)>MAX_WEIGHT)\ncout << \"\\n Guard \" << name << \" cannot enter the elevator\"\n<< \"to avoid exceeding the maximum weight\";\nelse\n{\ncout << \"\\n - Pushing a guard into the elevator \" << endl;\nguards[position].name = new char[strlen(name)+1] ;\nstrcpy(guards[position].name,name) ;\nguards[position].weight = weight ;\nposition++ ;\ntotalWeight += weight;\ncout << \" There are \" << position\n<< \" guard in the elevator \" ;\ncout << setiosflags(ios::fixed) << setprecision(1)\n<< \" with total weight of \" << totalWeight\n<< \" pounds\"<< endl ;\n}\n}\nvoid ElevatorStack::pop(void)\n{\nif(position==0)\ncout << \"\\n Stack is empty \\n\";\nelse\n{\ncout << \"\\n - Poping a guard from the elevator\" << endl ;\nposition--;\ntotalWeight -= guards[position].weight ;\ndelete [] guards[position].name;\ncout << \" There are \" << position << \" guards in the elevator\" ;\n\n---------------\ncout << setiosflags(ios::fixed) << setprecision(1)\n<< \" with total weight of \" << totalWeight\n<< \" pounds\"<< endl ;\n}\n}\n/********************** Solution output *************************\nsol2_2 < dat2_2\nUsing the default constructor\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 1 guard in the elevator with total weight of 180.5 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 2 guard in the elevator with total weight of 346.1 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 3 guard in the elevator with total weight of 553.1 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 2 guards in the elevator with total weight of 346.1 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 3 guard in the elevator with total weight of 524.1 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 4 guard in the elevator with total weight of 719.6 pounds\n\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 5 guard in the elevator with total weight of 904.6 pounds\nGuard's name :\nWeight :\nGuard Olivia cannot enter the elevator\nto avoid exceeding the allowable number of persons\nGuard's name :\n- Poping a guard from the elevator\nThere are 4 guards in the elevator with total weight of 719.6 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 3 guards in the elevator with total weight of 524.1 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 2 guards in the elevator with total weight of 346.1 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 1 guards in the elevator with total weight of 180.5 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 0 guards in the elevator with total weight of 0.0 pounds\nGuard's name :\nStack is empty\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 1 guard in the elevator with total weight of 246.0 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 2 guard in the elevator with total weight of 481.4 pounds\n\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 3 guard in the elevator with total weight of 715.4 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 4 guard in the elevator with total weight of 960.4 pounds\nGuard's name :\nWeight :\nGuard Paul cannot enter the elevatorto avoid exceeding the maximum weight\nGuard's name :\n- Poping a guard from the elevator\nThere are 3 guards in the elevator with total weight of 715.4 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 2 guards in the elevator with total weight of 481.4 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 1 guards in the elevator with total weight of 246.0 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 2 guard in the elevator with total weight of 413.4 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 3 guard in the elevator with total weight of 586.4 pounds\nGuard's name :\nWeight :\n- Pushing a guard into the elevator\nThere are 4 guard in the elevator with total weight of 761.9 pounds\nGuard's name :\n\nWeight :\n- Pushing a guard into the elevator\nThere are 5 guard in the elevator with total weight of 956.9 pounds\nGuard's name :\nWeight :\nGuard Bob cannot enter the elevator\nto avoid exceeding of both allowable weight and number of persons\nGuard's name :\n- Poping a guard from the elevator\nThere are 4 guards in the elevator with total weight of 761.9 pounds\nGuard's name :\n- Poping a guard from the elevator\nThere are 3 guards in the elevator with total weight of 586.4 pounds\nGuard's name :\nExiting the program normally\nReleasing the memory for the array of structures\n*******************************************************************/\nProblem 3:[70%]\nMakefile\n#!gmake\n#==============================================\n#\n#\nMakefile for Problem Set # 2\n#!gmake\n#\n# To use this makefile: % gmake -f makeSol2 program_name\n#\n#\nFall - 2000\n\n#\n#==============================================\n#\nV a r i a b l e\nD e f i n i t i o n s\n#\n-----------------------------------------\nMACHINE_TYPE = `/bin/athena/machtype`\nCXX = g++\nCXXINCLUDE = -I.\nCXXFLAGS = -g -ansi -pedantic -Wall\nLDLIBS = -lm\nSRC = sol2_2.C sol2_3.C cable.C\nPROG = sol2_2 sol2_3\nOBJ = $(SRC:%.C=%.o)\n#\nE x p l i c i t\nR u l e s\n#\n-------------------------------\n#---------------------------------------------------------------\nall: ${PROG}\n.PHONY: all\n${PROG}: makeSol2\n${OBJ}: makeSol2\n#----------------------------------------------------------------\nsol2_2: sol2_2.o\n@ echo \"\nLinking to create $@\"\n$(CXX) sol2_2.o -o sol2_2 ${LDLIBS}\nsol2_2.o:sol2_2.C sol223.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c sol2_2.C\n#----------------------------------------------------------------\nsol2_3: sol2_3.o cable.o\n@ echo \"\nLinking to create $@\"\n$(CXX) sol2_3.o cable.o -o sol2_3 ${LDLIBS}\nsol2_3.o:sol2_3.C sol2_3.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c sol2_3.C\ncable.o:cable.C cable.h\n@ echo \"\nCompiling $< to create $@ \"\n\n$(CXX) ${CXXFLAGS} -c cable.C\n#----------------------------------------------------------------\n.PHONY: clean clean_o clean_p\nclean:\n@echo \"\nCleaning all ~, executable and object files\"\n-rm -f $(PROG) *.o a.out *.*~ *~\nclean_o:\n@echo \"\nCleaning all object files\"\n-rm -f *.o\nclean_p:\n@echo \"\nCleaning all executables\"\n-rm -f $(PROG)\n#------------------------------------------------------------\n#\nI m p l i c i t\nR u l e s\n#\n-------------------------------\n#---------------------------------------------------------------\n%: %.o\n@ echo \"\nLinking to create $@\"\n$(CXX) $< -o $@ ${LDLIBS}\n%.o:%.C\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c $< -o $@\n#-------------------------------------------------------------\nsol2_3.h\n// Problem Set#2 - Problem#3 [sol2_3.h]\n#ifndef SOL2_3_H\n#define SOL2_3_H\n#include \"cable.h\"\nint main();\nint readCableData( Cable **c);\nvoid printCableData(Cable *cableAssemblage, int numberCables, double weight);\n\ndouble readWeight();\nbool checkStrength(Cable *cableAssemblage, int numberCables, double weight);\nvoid determineExtensions(Cable *cableAssemblage, int numberCables, double weight);\nvoid releaseMemory(Cable *cableAssemblag);\n#endif\nsol2_3.C\n// Problem Set#2 - Problem#3 [sol2_3.C]\n#include \"sol2_3.h\"\n#include <iostream.h>\n#include <stdlib.h>\n#include <iomanip.h>\nint main()\n{\nCable *cableAssemblage;\nint numberCables;\ndouble weight;\nnumberCables = readCableData(&cableAssemblage);\nweight = readWeight();\nprintCableData(cableAssemblage,numberCables,weight);\nif(checkStrength(cableAssemblage,numberCables,weight))\ndetermineExtensions(cableAssemblage,numberCables,weight);\nreleaseMemory(cableAssemblage);\nreturn EXIT_SUCCESS;\n}\nint readCableData( Cable **c)\n\n{\nint n,i ;\ncout << \"Enter the number of cables in the assemblage: \";\ncin >> n;\n*c = new Cable[n];\nfor (i=0; i<n; i++)\n{\ncout<< \"\\nEnter the data for cable \" << i+1;\ncin >> *(*c+i);\n}\nreturn n;\n}\nvoid printCableData(Cable *cableAssemblage, int numberCables, double weight)\n{\nfor (int i=0; i<numberCables; i++)\ncout << \"\\nCable \" << i+1 << cableAssemblage[i];\n}\ndouble readWeight()\n{\ndouble weight;\ndo\n{\ncout << \"\\nEnter the weight of the machinery: \" << endl;\ncin >> weight;\nif (weight < 0)\ncout << \"Weight must be greater than zero. Try again\"<< endl<<endl;\n}while (weight < 0);\nreturn weight;\n}\n\nbool checkStrength(Cable *cableAssemblage, int numberCables, double weight)\n{\nfor (int i=0; i<numberCables; i++)\n{\nif(cableAssemblage[i].fail(weight))\n{\ncout << \"\\n This assemblage cannot support the machinery.\" << endl;\ncout << \"\\n Cable \" << i+1 << \" will fail!!!\" << endl;\nreturn false;\n}\n}\nreturn true;\n}\nvoid determineExtensions(Cable *cableAssemblage, int numberCables, double weight)\n{\ndouble inversesSum=0.0, kEq, dl;\nfor (int i=0; i<numberCables; i++)\ninversesSum += 1/cableAssemblage[i].kConstant();\nkEq = 1/inversesSum;\ncout << \"\\n Equivalent stiffness constant: Keq = \" << kEq << endl;\ndl = weight / kEq;\ncout << \"\\n\\n The assemblage will extend \"\n<< setprecision(3) << dl\n<< \" units beyond its original length.\\n\" << endl;\nfor(int i=0; i<numberCables; i++)\n{\ncout << \"Cable \" << i+1 << \":\nstress=\"\n<< setprecision(3)\n<< cableAssemblage[i].stress(weight)\n<< \"\nElongation=\" << setprecision(3)\n<< cableAssemblage[i].elongation(weight)\n<< endl << endl;\n\n}\n}\nvoid releaseMemory(Cable *cableAssemblage)\n{\ndelete []cableAssemblage;\n}\ncable.h\n// Problem Set#2 - Problem#3 [cable.h]\n#include <iostream>\n#ifndef CABLE_H\n#define CABLE_H\n// Class definition\nclass Cable\n{\npublic:\ndouble getLength() { return length;}\ndouble kConstant();\ndouble stress(double force);\ndouble elongation(double force);\nbool fail(double force);\nfriend istream& operator >> (istream &i, Cable &c);\nfriend ostream& operator << (ostream &o, Cable &c);\nprivate:\ndouble area, elasticModulus, length, strength;\n};\n\n#endif\ncable.C\n// Problem Set#2 - Problem#3 [cable.C]\n/************ Externally defined member functions **************/\n#include \"cable.h\"\n// Formulas for physical quantities\ndouble Cable :: kConstant()\n{\nreturn area*elasticModulus/length;\n}\ndouble Cable :: stress(double force)\n{\nreturn force/area;\n}\ndouble Cable :: elongation(double force)\n{\nreturn force/kConstant();\n}\nbool Cable::fail(double force)\n{\nif ( stress(force) > strength )\nreturn true;\nreturn false;\n}\n/*************** Friend functions ************************/\n\nistream& operator >> (istream &i, Cable &c)\n{\ndo\n{\ncout << \"\\n Area: A = \" ;\ni >> c.area ;\ncout << \" Modulus of elasticity: E = \" ;\ni >> c.elasticModulus ;\ncout << \" Length: L = \" ;\ni >> c.length ;\ncout << \" Strength: S = \" ;\ni >> c.strength ;\n}while(c.area<=0 || c.elasticModulus<=0 || c.length<=0 || c.strength<0);\nreturn i;\n}\nostream& operator << (ostream &o, Cable &c)\n{\ncout << \"\\n Area: A = \" ;\no << c.area ;\ncout << \"\\n Modulus of elasticity: E = \" ;\no << c.elasticModulus ;\ncout << \"\\n Length: L = \" ;\no << c.length ;\ncout << \"\\n Strength: S = \" ;\no << c.strength << endl;\nreturn o;\n}\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "ps3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/43679dd0d25c432b9d2036906ab433be_ps3.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 3\nDue Date: Tuesday 10/3/00\nReference Readings: From C++ Primer\n(in addition to the reference reading from PS1 & PS2):\n● Chapters: 9, 10, 14\nProblem 1:[100%]\nIn this problem set you have to develop a menu driven program. No files are provided for you, but you are asked to follow a certain class hierarchy. You need to use certain\nfiles to implement the latter, acording to the instructions below.\nThe completed program should be a menu-driven application that allows the user, who may be an employee of a vehicle-rental company, to input information about a fleet\nof vehicles. Assume that the company rents motor vehicles, in particular cars and motorcycles, and bikes. The user should be able to add a vehicle, display the data and\nnumber of the already provided vehicles, save the vehicles to files, and quit the program, after making all the proper memory releases.\nThe options of the initial menu should be the following:\n**************************************************\n[A]: Add a vehicle\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\n\nThe user should be prompted to give one of the above characters, upper or lower case, and the program should proceed accordingly. If any other character is given the\nprogram should insist on getting one of the specified characters.\nThe first option, [A]: Add a vehicle, should enable the user to give the information about a vehicle to be added in the database. In order to simplify the problem we ignore\nall other possible options, such as deletion of a vehicle in the database. However, you should set the pointers correclty, so that someone could extend your program. After the\nuser enters 'a' or 'A' the program should give a new menu from where the user should select the kind of vehicle to be added. This is explained in detail below.\nThe second option [S]: Show vehicles, should display to the screen all the information about the vehicles that have been entered by the user. Details on the exact\ninformation to be displayed are provided below.\nThe third option, [N]: Number of vehicles, should display to the screen the numbers of vehicles, motor vehicles, cars, motorcycles, and bikes. An example of the format that\nis expected to be used is the following:\n**************************************************\n[A]: Add a vehicle\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\nYour selection: n\nNumber of vehicles: 4\nNumber of motorvehicles: 3\nNumber of cars: 2\nNumber of motorcycles: 1\nNumber of bikes: 1\nPress any button and the <Enter> to proceed...\n**************************************************\nThe forth option, [F]: Save vehicles to files, should save the information for all cars, motorcycles, and bikes into corresponding to these vehicles files with a certain format\n\ngiven below.\nFinally, the last option, [Q]: Quit, should release all the dynamically allocated memory and exit. You NEED to put printout statements in the destructors of the various\nclasses that you will use in order to show that the destructors are visited prior to exiting the program. Make sure that there are no memory leaks.\nClass hierarchy:\nYou should use the following class hierarchy, which corresponds to the types of vehicles that your program should be able to handle:\nFor each class, which will be described in detail next, you need to provide two (2) files, a header file with all the declarations, including the class definitions, and a source\ncode files with all the definitions, such as the externally defined member functions.\nLinked list description:\nThe vehicles should be stored using a linked lists as it is shown in the following figure:\n\nEach new vehicle added by the user should be added to the linked list, using the class VehicleNode which has a pointer to a vehicle object, and, therefore, can point to any\ninstance of the class Vehicle or any of its subclasses.\nIn particular, you need to provide the following files with the specified contents:\nContents\nsource code file\nheader file\nmain() program and general functions\nps3.C\nps3.h\nVehicle class\nvehicle.C\nvehicle.h\nMotorvehicle class\nmotorvehicle.C\nmotorvehicle.h\nCar class\ncar.C\ncar.h\nMotorcycle class\nmotorcycle.C\nmotorcycle.h\n\nBike class\nbike.C\nbike.h\nProperty class\nproperty.C\nproperty.h\nVehicleNode class\nvehicleNode.C\nvehicleNode.h\nDescription of each class:\nThe definition of each class should be provided in the corresponding header file (*.h) according to the above table. All member variables should be specified as private. The\nsubclasses should be derived from their superclasses using the class hierarchy that was provided above with the specified derivations (e.g. class Car should be publicly derived\nfrom the class Motorvehicle and privately from the class Property). All classes should have destructors which should printout a statement to indicate their use, and release any\ndynamically allocated memory.\nYou can provide any member functions you think are necessary in order to achieve the requested functionality. Pointers to char should point to dynamically allocated\nmemory that should be exactly as much characters as needed to store the corresponding string, e.g. the pointer type, below, should point to a memory of 7 char in order to fit\nthe string \"Enduro\".\nclass Vehicle:\nThis is the base class for all vehicles classes. It should have the following private member variables:\n●\nint idNumber: ID of the vehicle (e.g. 17394)\n●\ndouble weight: weight of the vehicle (e.g. 96kg)\n●\nchar *brand: brand of the vehicle (e.g. Suzuki)\n●\nchar *model: its model (e.g. DR600R)\n●\nchar *type: its type (e.g. Enduro)\n●\nint numberVehicles: current number of vehicles (static variable)\nclass Property:\nThis is a superclass of the classes Car, Motorvehicle, and Bike. It should have the following private member variables:\n●\ndouble estimatedValue: to store the estimated value of the vehicle\n●\nchar *administrator: to store the name of the person responsible for this vehicle.\nclass Motorvehicle:\nThis class should be publicly derived from the class Vehicle. It should have the following private member variables:\n●\nint cc: cubic centimeters of the engine (e.g. 597)\n●\nint hp; horsepower (e.g. 67)\n●\nint numberMotorvehicles: current number of motor vehicles (static variable)\nclass Car :\n\nThis class should be derived publicly from the Motorvehicle class and privately from the Property class. It should have the following private member variables:\n●\nint seats: number of seats\n●\nint airBags: number of airbags\n●\nint numberCars: current number of cars (static variable)\n● ofstream outputFile: ofstream static object associated with the file \"cars.dat\" where cars should be stored when the \"[F]: Save vehicles to files\" option is selected and\nas long as there is at least one car available.\nclass Motorcycle:\nThis class should be derived publicly from the Motorvehicle class and privately from the Property class. It should have the following private member variables:\n●\nint engineStrokes: number of strokes of the engine (e.g. 2)\n●\nstatic int numberMotorcycles: current number of motorcycles (static variable)\n● static ofstream outputFile: ofstream static object associated with the file \"motorcycles.dat\" where cars should be stored when the \"[F]: Save vehicles to files\" option is\nselected and as long as there is at least one motorcycle available.\nclass Bike:\nThis class should be derived publicly from the Vehicle class and privately from the Property class. It should have the following private member variables:\n●\nbool horn: true (false) if it has (not) a horn\n●\nbool lights: true (false) if it has (not) lights\n●\nstatic int numberBikes: current number of bikes (static variable)\n● static ofstream outputFile: ofstream static object associated with the file \"bikes.dat\" where cars should be stored when the \"[F]: Save vehicles to files\" option is\nselected and as long as there is at least one bike available.\nclass VehicleNode:\nThis class is used as a node for the linked list. each instance of the VehicleNode has a pointer pointing to a Vehicle object. You should take advantage of the polymorphic\nfeatures of C++, e.g. virtual functions to achieve the requested functionality in the most efficient way. The class should have the following private member variables:\n●\nstatic VehicleNode *head: a static variable pointing to the head of the linked list\n●\nVehicleNode *previous: a pointer to the previous VehicleNode object in the linked list\n●\nVehicle *vehicle: a pointer to the vehicle object\n●\nVehicleNode *next: a pointer to the next VehicleNode object in the linked list\nExample of program execution:\nInitially the following menu should be provided to the user after cleaning the display from previously presented characters:\n**************************************************\n[A]: Add a vehicle\n\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\nYour selection: a\nIf the user selects to add a vehicle the program should give the following menu in order to allow the user to select what kind of vehicle to enter to the system:\n**************************************************\n[C]: Add a car\n[M]: Add a motorcycle\n[B]: Add a bike\n[Q]: Quit operation\n**************************************************\nYour selection: m\nLet's say that the user enters the character m, as above in order to add a motorcycle. Then, the user should be prompted to provide all the relevant information, e.g.:\n**************************************************\nYour selection: m\nAdding a motorcycle....\nPlease give all the relevant information\nVehicle ID = 17\nWeight = 96\n\nBrand = Suzuki\nModel = Dr600R\nType = Enduro\nCC = 597\nhp = 67\nEstimated value = 2450.50\nAdministrator = Wilson\nNumber of strokes = 4\nPress any button and the <Enter> to proceed...\n**************************************************\nThe initial menu should be provided again. Then, the program should return to the initial menu giving the option to the user to select where to proceed. Let's assume that the\nuser decides to enter a car:\n**************************************************\n[C]: Add a car\n[M]: Add a motorcycle\n[B]: Add a bike\n[Q]: Quit operation\n**************************************************\nYour selection: c\nAdding a car....\nPlease give all the relevant information\nVehicle ID = 33\nWeight = 3675.5\nBrand = Honda\nModel = civic\nType = family\n\nCC = 2350\nhp = 136\nEstimated value = 26550\nAdministrator = Edwards\nNumber of seats = 5\nNumber of airbags = 1\nPress any button and the <Enter> to proceed...\nThen, lets assume that the user decides to enter a bike:\n**************************************************\n[C]: Add a car\n[M]: Add a motorcycle\n[B]: Add a bike\n[Q]: Quit operation\n**************************************************\nYour selection: b\nAdding a bike....\nPlease give all the relevant information\nVehicle ID = 47\nWeight = 24.5\nBrand = BMX\nModel = X12\nType = mountain\nEstimated value = 325.75\nAdministrator = Thomas\nHorn [Y/N] = y\n\nLights [Y/N] = n\nPress any button and the <Enter> to proceed...\n**************************************************\nIf the user at this point decides to select the option \"[N]: Number of vehicles\" to show on the display the number of vehicles, she/he will get the following:\n**************************************************\n[A]: Add a vehicle\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\nYour selection: N\nNumber of vehicles: 3\nNumber of motorvehicles: 2\nNumber of cars: 1\nNumber of motorcycles: 1\nNumber of bikes: 1\nPress any button and the <Enter> to proceed...\n**************************************************\nIf the user decides to select the option, [S]: Show vehicles, in order to display the vehicles the program should display something as the following providing all the relevant\ninformation and printing all vehicles in the linked list with an increasing number, starting from the lastly provided vehicle at 1, as below:\n**************************************************\n\n---------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------\n[A]: Add a vehicle\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\nYour selection: s\nShowing vehicles' data...\nVehicles in the list\n-------------------\nVehicle 1: Bike\nID number= 47 Brand = BMX Model = X12 Type = mountain Weight = 24.5\nHas Horn -\nHas No Lights\nEstimated Value = 325.75 Administrator = Thomas\nVehicle 2: Car\nID number= 33 Brand = Honda Model = civic Type = family Weight = 3675.5\nCC = 2350 Horsepower = 136\nSeat = 5 Airbag = 1\nEstimated Value = 26550 Administrator = Edwards\nVehicle 3: Motorcycle\nID number= 17 Brand = Suzuki Model = Dr600R Type = Enduro Weight = 96\nCC = 597 Horsepower = 67\nEngine strokes = 4 Estimated Value = 2450.50 Administrator = Wilson\n\n------------------------------------------------------------------------------------------------------\nIf the user decides to select the \"[F]: Save vehicles to files\" option, then the program should:\n● save the cars, only if there are any, into the file \"cars.dat\", which is associated with the static outputFile variable of the class Car,\n● save the motorcycles, only if there are any, into the file \"motorcycles.dat\", which is associated with the static outputFile variable of the class Motorcycle,\n● save the bikes, only if there are any, into the file \"bikes.dat\", which is associated with the static outputFile variable of the class Bike,\n**************************************************\n[A]: Add a vehicle\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\nYour selection: f\nVehicles are stored in individual files\nPress any button and the <Enter> to proceed...\nThe files should be created only if there are vehicles, at least one, of the corresponding type.\nThe first line of the files should describe what it will be saved below it for each of vehicle of that kind as follows:\n\"cars.dat\"\nBrand\nModel\nType\nID Weight CC HP Seats Airbags Value Administrator\n1 .......\n........\n........\n2 .......\n........\netc.\n\n-----------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------\n\"motorcycles.dat\"\nBrand\nModel\nType\nID Weight CC HP Strokes Value Administrator\n1 .......\n........\n........\n2 .......\n........\netc.\n\"bikes.dat\"\nBrand\nModel\nType\nID Weight Horn Lights Value Administrator\n1 .......\n........\n........\n2 .......\n........\netc.\nFinally, if the user selects to quit the program should exit after releasing all the dynamically allocated memory. The printout statements in the destructors should display\nsimilar to what follows:\n**************************************************\n[A]: Add a vehicle\n[S]: Show vehicles\n[N]: Number of vehicles\n[F]: Save vehicles to files\n[Q]: Quit\n**************************************************\nYour selection: q\nPress any button and the <Enter> to proceed... d\nreleasing memory\nDestroying a VehicleNode object\n\nDeleting a Bike object\nDeleting a Property object\nDeleting a Vehicle object\nDestroying a VehicleNode object\nDeleting a MotorCycle object\nDeleting a Property object\nDeleting a Motorvehicle object\nDeleting a Vehicle object\nDestroying a VehicleNode object\nDeleting a Car object\nDeleting a Property object\nDeleting a Motorvehicle object\nDeleting a Vehicle object\nMemory has been released\nYou should take advantage of object oriented programming to avoid repeating the same code at different places whenever possible. You should follow the above directions\nabout the class hierarchy, the requirements for each class, the behavior of the menu driven application and not simplify the problem in any way.\nYou also need to provide a makefile named makePS3 that can be used to compile your program. The name of the executable should be ps3. You need to submit both\nhardcopies of your code and electronically turn in all files, including the makefile, which will also be graded to check that it works with the following command:\ngmake -f makePS3 ps3\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "sol3.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/65e37d8398807fca23531667638bf266_sol3.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 3 - Solution\nDue Date: Tuesday 10/3/00\nProblem 1:[100%]\nmakeSol3:\n#!gmake\n#=========================================================\n#\n#\nMakefile for Problem Set # 3\n#!gmake\n#\n# To use this makefile: % gmake -f makeSol3 program_name\n#\n#\nFall - 2000\n#\n#==========================================================\n#\nV a r i a b l e\nD e f i n i t i o n s\n#\n-----------------------------------------\nMACHINE_TYPE = `/bin/athena/machtype`\nCXX = g++\nCXXINCLUDE = -I.\nCXXFLAGS = -g -ansi -pedantic -Wall\nLDLIBS = -lm\nSRC = sol3.C property.C vehicle.C motorvehicle.C car.C motorcycle.C bike.C vehicleNode.C\nPROG = sol3\nOBJ = $(SRC:%.C=%.o)\n#\nE x p l i c i t\nR u l e s\n\n#\n--------------------------------\n#----------------------------------------------------------------\nall: ${PROG}\n.PHONY: all\n${PROG}: makeSol3\n${OBJ}: makeSol3\n#---------------------------------------------------------------------\nsol3: sol3.o property.o vehicle.o motorvehicle.o \\\ncar.o motorcycle.o bike.o vehicleNode.o\n@ echo \"\nLinking to create $@\"\n$(CXX) sol3.o property.o vehicle.o motorvehicle.o car.o \\\nmotorcycle.o bike.o vehicleNode.o -o sol3 ${LDLIBS}\nsol3.o:sol3.C sol3.h property.h vehicle.h motorvehicle.h \\\ncar.h motorcycle.h bike.h vehicleNode.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c sol3.C\nvehicle.o:vehicle.C vehicle.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c vehicle.C\nmotorvehicle.o:motorvehicle.C motorvehicle.h vehicle.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c motorvehicle.C\ncar.o:car.C car.h vehicle.h motorvehicle.h property.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c car.C\nmotorcycle.o:motorcycle.C motorcycle.h vehicle.h motorvehicle.h property.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c motorcycle.C\nbike.o:bike.C bike.h vehicle.h property.h\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c bike.C\nvehicleNode.o:vehicleNode.C vehicleNode.h vehicle.h motorvehicle.h\n\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c vehicleNode.C\n#----------------------------------------------------------------\n.PHONY: clean clean_o clean_p\nclean:\n@echo \"\nCleaning all executable and object files\"\n-rm -f $(PROG) *.o a.out\nclean_o:\n@echo \"\nCleaning all object files\"\n-rm -f *.o\nclean_p:\n@echo \"\nCleaning all executables\"\n-rm -f $(PROG)\n#-------------------------------------------------------------\n#\nI m p l i c i t\nR u l e s\n#\n--------------------------------\n#----------------------------------------------------------------\n%: %.o\n@ echo \"\nLinking to create $@\"\n$(CXX) $< -o $@ ${LDLIBS}\n%.o:%.C\n@ echo \"\nCompiling $< to create $@ \"\n$(CXX) ${CXXFLAGS} -c $< -o $@\n#-------------------------------------------------------------\nsol3.h:\n// Problem Set#3 - solution [sol3.h]\n#ifndef SOL3_H\n#define SOL3_H\n///////////////////////////////////////////\n#include \"vehicle.h\"\n\n#include \"motorvehicle.h\"\n#include \"property.h\"\n#include \"car.h\"\n#include \"motorcycle.h\"\n#include \"bike.h\"\n#include \"car.h\"\n#include \"vehicleNode.h\"\n///////////////////////////////////////////\nint main(void);\nvoid printMenu();\nchar getSelection();\nvoid processSelection(char selection);\n// To process the selected option\nvoid continueStep(void);\n// To delay the clearing of the screen\nvoid showVehicles();\n// shows the current vehicles\nvoid printNumberOfVehicles();\n// prints the number of vehicles\nvoid saveToFiles(void);\n// Saves the data to a file\nvoid printMenu(char *str);\n// prints the menu for\n\n// data addition/removal\nvoid addVehicle(char selection);\n// Add vehicle data\nvoid processAddition(char selection);\n// Process data addition\nvoid addCar();\n// Adds a car\nvoid addMotorcycle();\n// Adds a motorcycle\nvoid addBike();\n// Adds a bike\nvoid getPropertyData(double &value, char *admin);\n// Gets Property-related data from the user\nvoid getMotorvehicleData(int & id, double &weight, char *brand,\nchar *model, char *type, int &cc, int &hp);\n// Gets Motorvehicle-related data from the user\nvoid getVehicleData(int & id, double &weight, char *brand,\nchar *model, char *type);\n// Gets Vehicle-related data from the user\nvoid releaseMemory(void);\n// Frees all dynamically allocated memory\n#endif\nsol3.C:\n// Problem Set#3 - Solution [sol3.C]\n\n#include <stdlib.h>\n#include <iomanip.h>\n#include <string.h>\n#include <iostream.h>\n#include <fstream.h>\n#include \"sol3.h\"\n/********** Static initializations ***********/\nVehicleNode* VehicleNode::head = NULL;\nint Vehicle::numberVehicles = 0;\nint Motorvehicle::numberMotorvehicles = 0;\nint Car::numberCars = 0;\nofstream Car::outputFile;\nint Motorcycle::numberMotorcycles = 0;\nofstream Motorcycle::outputFile;\nint Bike::numberBikes = 0;\nofstream Bike::outputFile;\n/*********************************************/\n/******************************************************************/\nint main()\n{\nchar selection;\ndo\n{\nprintMenu();\nselection = getSelection();\nprocessSelection(selection);\n}while(selection != 'q' && selection != 'Q');\nreleaseMemory();\nreturn EXIT_SUCCESS;\n}\n\n/******************************************************************/\n/**********************************************************************/\nvoid printMenu()\n{\nsystem(\"clear\");\ncout << \"**************************************************\" << endl;\ncout << \"\\n [A]: Add a vehicle\\n\" << endl;\ncout << \"\\n [S]: Show vehicles \\n\" << endl;\ncout << \"\\n [N]: Number of vehicles \\n\" << endl;\ncout << \"\\n [F]: Save vehicles to files\\n\" << endl;\ncout << \"\\n [Q]: Quit\\n\" << endl;\ncout << \"**************************************************\" << endl;\ncout << \"\\t Your selection: \" ;\n}\n/**********************************************************************/\n/**********************************************************************/\nvoid printMenu(char *str)\n{\nsystem(\"clear\");\ncout << \"**************************************************\" << endl;\ncout << \"\\n [C]: \" << str << \" a car\\n\" << endl;\ncout << \"\\n [M]: \" << str << \" a motorcycle\\n\" << endl;\ncout << \"\\n [B]: \" << str << \" a bike\\n\" << endl;\ncout << \"\\n [Q]: Quit operation \\n\" << endl;\ncout << \"**************************************************\" << endl;\ncout << \"\\t Your selection: \" ;\n}\n/**********************************************************************/\n/*****************/\nchar getSelection()\n{\nchar selection;\ncin >> selection;\nreturn selection;\n\n}\n/*****************/\n/************************************************************/\nvoid processSelection(char selection)\n{\nswitch(selection)\n{\ncase 'A': case 'a':\naddVehicle(selection);\nbreak;\ncase 'S': case 's':\nshowVehicles();\nbreak;\ncase 'N': case 'n':\nprintNumberOfVehicles();\nbreak;\ncase 'F': case 'f':\nsaveToFiles();\nbreak;\ncase 'Q': case 'q':\nbreak;\ndefault:\ncout << \"Imporper Selection: Please select again\" << endl;\n}\ncontinueStep();\n}\n/****************************************************************/\n/********************************************************/\nvoid continueStep(void)\n{\n\nchar str[20];\ncout << \"\\n Press any button and the <Enter> to proceed... \";\ncin >> str;\n}\n/********************************************************/\n/******************************************************/\nvoid addVehicle(char selection)\n{\nprintMenu(\"Add\");\nselection = getSelection();\nprocessAddition(selection);\n}\n/*****************************************************/\n/****************************************************************/\nvoid processAddition(char selection)\n{\nswitch(selection)\n{\ncase 'C': case 'c':\naddCar();\nbreak;\ncase 'M': case 'm':\naddMotorcycle();\nbreak;\ncase 'B': case 'b':\naddBike();\nbreak;\ncase 'Q': case 'q':\nbreak;\ndefault:\ncout << \"Imporper Selection: Please select again\" << endl;\n\n}\n}\n/****************************************************************/\n/*********************************************************/\nvoid addCar()\n{\nchar brand[40], model[40], type[40], admin[40];\nint id, cc, hp, seats, airbags;\ndouble weight, value;\ncout << \" Adding a car....\\n \"<< endl;\ncout << \" Please give all the relevant information\" << endl;\ngetMotorvehicleData(id, weight, brand, model, type, cc, hp);\ngetPropertyData(value, admin);\ncout << \"\\n Number of seats = \" ;\ncin >> seats;\ncout << \" Number of airbags = \" ;\ncin >> airbags;\nVehicle *v = new Car( id, weight, brand, model, type, cc,\nhp, seats, airbags, value, admin);\nVehicleNode::getHead() -> add(new VehicleNode(v));\n}\n/************************************************************/\n/****************************************************************/\nvoid getVehicleData(int & id, double &weight, char *brand,\nchar *model, char *type)\n{\ncout << \"\\n Vehicle ID = \" ;\ncin >> id;\ncout << \" Weight = \" ;\ncin >> weight;\ncout << \" Brand = \" ;\n\ncin >> brand;\ncout << \" Model = \" ;\ncin >> model;\ncout << \" Type = \" ;\ncin >> type;\n}\n/****************************************************************/\n/****************************************************************/\nvoid getMotorvehicleData(int & id, double &weight, char *brand,\nchar *model, char *type, int &cc, int &hp)\n{\ngetVehicleData(id, weight, brand, model, type);\ncout << \"\\n CC = \" ;\ncin >> cc;\ncout << \" hp = \" ;\ncin >> hp;\n}\n/****************************************************************/\n/****************************************************************/\nvoid getPropertyData(double &value, char *admin)\n{\ncout << \"\\n Estimated value = \" ;\ncin >> value;\ncout << \" Administrator = \" ;\ncin >> admin;\n}\n/****************************************************************/\n/****************************************************************/\nvoid addMotorcycle()\n{\nchar brand[40], model[40], type[40], admin[40];\nint id, cc, hp, strokes;\ndouble weight, value;\ncout << \" Adding a motorcycle....\\n \"<< endl;\ncout << \" Please give all the relevant information\" << endl;\ngetMotorvehicleData(id, weight, brand, model, type, cc, hp);\n\ngetPropertyData(value, admin);\ncout << \"\\n Number of strokes = \" ;\ncin >> strokes;\nVehicle *v = new Motorcycle(id, weight, brand, model, type,\ncc, hp, strokes, value, admin);\nVehicleNode::getHead() -> add(new VehicleNode(v));\n}\n/*******************************************************************/\n/****************************************************************/\nvoid addBike()\n{\nchar brand[40], model[40], type[40], admin[40], c;\nint id;\ndouble weight, value;\nbool horn=false, lights=false;\ncout << \" Adding a bike....\\n \"<< endl;\ncout << \" Please give all the relevant information\" << endl;\ngetVehicleData(id, weight, brand, model, type);\ngetPropertyData(value, admin);\ndo\n{\ncout << \"\\n Horn [Y/N] = \" ;\ncin >> c;\n}while(c!='Y' && c!='y' && c!='N' && c!='n');\nif( c!='N' && c!='n')\nhorn=true;\ndo\n{\ncout << \"\\n Lights [Y/N] = \" ;\ncin >> c;\n}while(c!='Y' && c!='y' && c!='N' && c!='n');\n\nif( c!='N' && c!='n')\nlights=true;\nVehicle *v = new Bike(id, weight, brand, model, type,\nhorn, lights, value, admin);\nVehicleNode::getHead() -> add(new VehicleNode(v));\n}\n/****************************************************************/\n/***********************************/\nvoid showVehicles()\n{\ncout << \"\\n Showing vehicles' data...\\n \" << endl;\nVehicleNode::show() ;\n}\n/***********************************/\n/\n***********************************************************************************/\nvoid printNumberOfVehicles()\n{\ncout << \"Number of vehicles: \" << Vehicle::getNumberVehicles() << endl;\ncout << \" Number of motorvehicles: \" << Motorvehicle::getNumberMotorvehicles() << endl;\ncout << \"\nNumber of cars: \" << Car::getNumberCars() << endl;\ncout << \"\nNumber of motorcycles: \" << Motorcycle::getNumberMotorcycles() << endl;\ncout << \" Number of bikes: \" << Bike::getNumberBikes() << endl << endl;\n}\n/\n***********************************************************************************/\n/**************************************/\nvoid saveToFiles(void)\n{\nVehicleNode::save() ;\n}\n/**************************************/\n\n/**************************************/\nvoid releaseMemory()\n{\ncout << \"releasing memory \" << endl;\nVehicleNode::freeMemory();\n}\n/***************************************/\nVehicle.h:\n// Problem Set#3 - Solution [vehicle.h]\n#ifndef Vehicle_H\n#define Vehicle_H\nclass Vehicle\n{\nprivate:\nint idNumber;\ndouble weight;\nchar *brand;\nchar *model;\nchar *type;\nstatic int numberVehicles;\npublic:\nVehicle(int id, double w, char *brand, char *model, char *type);\nvirtual ~Vehicle();\nvirtual void show(void);\nvirtual void save()=0;\nvirtual void save(ofstream &o);\nstatic int getNumberVehicles(void)\n{\nreturn numberVehicles;\n}\n\n};\n#endif\nVehicle.C:\n// Problem Set#3 - Solution [vehicle.C]\n#include <iostream.h>\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n#include <string.h>\n#include <stdio.h>\n#include <fstream.h>\n#include \"vehicle.h\"\nVehicle::Vehicle(int id, double w, char *brand, char *model, char *type)\n{\nidNumber = id;\nweight = w;\nthis->brand = new char[strlen(brand)+1];\nstrcpy(this->brand,brand);\nthis->model = new char[strlen(model)+1];\nstrcpy(this->model,model);\nthis->type = new char[strlen(type)+1];\nstrcpy(this->type,type);\nnumberVehicles++;\n}\nVehicle::~Vehicle()\n{\ncout << \"Deleting a Vehicle obejct\" << endl;\nnumberVehicles--;\ndelete [] brand;\ndelete [] model;\ndelete [] type;\n}\n\nvoid Vehicle::show()\n{\ncout << \" ID number= \" << idNumber << \" Brand = \" << brand\n<< \" Model = \" << model << \" Type = \" << type\n<< \" Weight = \" << weight << endl;\n}\nvoid Vehicle::save(ofstream &o)\n{\no << setw(10) << brand << setw(10) << model << setw(10) << type\n<< setw(5) << idNumber << setw(10) << weight ;\n}\nmotorvehicle.h:\n// Problem Set#3 - Solution [motorVehicle.h]\n#ifndef MotorVehicle_H\n#define MotorVehicle_H\n#include \"vehicle.h\"\nclass Motorvehicle : public Vehicle\n{\nprivate:\nint cc;\nint hp;\nstatic int numberMotorvehicles;\npublic:\nMotorvehicle(int id, double weight, char *brand, char *model,\nchar *type, int cc, int hp);\nvirtual ~Motorvehicle();\nvirtual void show(void);\nvirtual void save(ofstream &o);\nstatic int getNumberMotorvehicles(void)\n{\nreturn numberMotorvehicles;\n}\n};\n\n#endif\nmotorvehicle.C:\n// Problem Set#3 - Solution [motorvehicle.C]\n#include <iostream.h>\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n#include <string.h>\n#include <stdio.h>\n#include <fstream.h>\n#include \"motorvehicle.h\"\nMotorvehicle::Motorvehicle\n(int id, double weight, char *brand, char *model, char *type, int cc, int hp)\n:Vehicle(id,weight,brand,model,type)\n{\nthis -> cc = cc ;\nthis -> hp = hp ;\nnumberMotorvehicles++;\n}\nMotorvehicle::~Motorvehicle()\n{\ncout << \"Deleting a Motorvehicle obejct\" << endl;\nnumberMotorvehicles--;\n}\nvoid Motorvehicle::show()\n{\nVehicle::show();\ncout << \" CC = \" << cc << \" Horsepower = \" << hp << endl;\n\n}\nvoid Motorvehicle::save(ofstream &o)\n{\nVehicle::save(o);\no << setw(6) << cc << setw(5) << hp ;\n}\ncar.h:\n// Problem Set#3 - Solution [car.h]\n#ifndef Car_H\n#define Car_H\n#include \"vehicle.h\"\n#include \"motorvehicle.h\"\n#include \"property.h\"\nclass Car : public Motorvehicle, private Property\n{\nprivate:\nint seats;\nint airBags;\nstatic int numberCars;\nstatic ofstream outputFile;\npublic:\nCar(int id, double weight, char *brand, char *model, char *type,\nint cc, int hp, int seats, int airBags, double value, char *admin);\nvirtual ~Car();\nvirtual void show(void);\nvirtual void save(void);\nstatic void commentOutputFile();\nstatic int getNumberCars(void)\n{\nreturn numberCars;\n}\n};\n\n#endif\ncar.C:\n// Problem Set#3 - Solution [car.C]\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n#include <string.h>\n#include <stdio.h>\n#include <fstream.h>\n#include \"car.h\"\nCar::Car(int id, double weight, char *brand, char *model, char *type,\nint cc, int hp, int seats, int airBags, double value, char *admin)\n:Motorvehicle(id,weight,brand,model,type,cc,hp), Property(value,admin)\n{\nCar::seats = seats;\nCar::airBags = airBags;\nnumberCars++;\n}\nCar::~Car()\n{\ncout << \"Deleting a Car obejct\" << endl;\nnumberCars--;\n}\nvoid Car::show(void)\n{\ncout << \" Car\" << endl;\nMotorvehicle::show();\ncout<< \" Seat =\" << seats << \" Airbag = \" << airBags << endl;\nProperty::show();\n}\n\nvoid Car::commentOutputFile()\n{\noutputFile << \" Cars \" << endl;\n}\nvoid Car::save()\n{\nstatic int i=0;\nif(i==0)\n{\noutputFile.open(\"cars.dat\", ios::out);\noutputFile << setw(10) << \"Brand\" << setw(10) << \"Model\"\n<< setw(10) << \"Type\" << setw(8) << \"ID\"\n<< setw(8) << \"Weight\"\n<< setw(6) << \"CC\" << setw(4) << \"HP\"\n<< setw(6) << \"Seats\" << setw(9) << \"Airbags\"\n<< setw(7) << \"Value\" << setw(16) << \"Administrator\"\n<<\"\\n--------------------------------------------\"\n<<\"----------------------------------------------\"\n<< endl;\n}\noutputFile << ++i ;\nMotorvehicle::save(outputFile);\noutputFile << setw(4) << seats << setw(5) << airBags;\nProperty::save(outputFile);\nif(i==numberCars)\n{\ni=0;\noutputFile.close();\n}\n}\nmotorcycle.h:\n// Problem Set#3 - Solution [motorcycle.h]\n\n#ifndef Motorcycle_H\n#define Motorcycle_H\n#include \"vehicle.h\"\n#include \"motorvehicle.h\"\n#include \"property.h\"\nclass Motorcycle : public Motorvehicle, private Property\n{\nprivate:\nint engineStrokes;\nstatic int numberMotorcycles;\nstatic ofstream outputFile;\npublic:\nMotorcycle(int id, double w, char *brand, char *model, char *type,\nint cc, int hp, int strokes, double value, char *admin);\nvirtual ~Motorcycle();\nvirtual void show(void);\nvirtual void save(void);\nstatic void commentOutputFile();\nstatic int getNumberMotorcycles(void)\n{\nreturn numberMotorcycles;\n}\n};\n#endif\nmotorcycle.C:\n// Problem Set#3 - Solution [motorcycle.C]\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n\n#include <string.h>\n#include <stdio.h>\n#include <fstream.h>\n#include \"motorcycle.h\"\nMotorcycle::Motorcycle(int id, double weight, char *brand, char *model, char *type,\nint cc, int hp, int strokes, double value, char *admin)\n:Motorvehicle(id,weight,brand,model,type,cc,hp), Property(value,admin)\n{\nengineStrokes = strokes;\nnumberMotorcycles++;\n}\nMotorcycle::~Motorcycle()\n{\ncout << \"Deleting a MotorCycle obejct\" << endl;\nnumberMotorcycles--;\n}\nvoid Motorcycle::show(void)\n{\ncout << \" Motorcycle\" << endl;\nMotorvehicle::show();\ncout << \"Engine strokes = \" << engineStrokes ;\nProperty::show();\n}\nvoid Motorcycle::commentOutputFile()\n{\noutputFile << \" Motorcycle \" << endl;\n}\nvoid Motorcycle::save(void)\n{\nstatic int i=0;\nif(i==0)\n{\noutputFile.open(\"motorcycles.dat\", ios::out);\noutputFile << setw(10) << \"Brand\" << setw(10) << \"Model\"\n<< setw(10) << \"Type\" << setw(8) << \"ID\"\n\n<< setw(8) << \"Weight\"\n<< setw(6) << \"CC\" << setw(4) << \"HP\"\n<< setw(9) << \"Strokes\"\n<< setw(7) << \"Value\" << setw(15) << \"Administrator\"\n<<\"\\n--------------------------------------------\"\n<<\"----------------------------------------------\"\n<< endl;\n}\noutputFile << ++i ;\nMotorvehicle::save(outputFile);\noutputFile << setw(5) << engineStrokes ;\nProperty::save(outputFile);\nif(i==numberMotorcycles)\n{\ni=0;\noutputFile.close();\n}\n}\nbike.h:\n// Problem Set#3 - Solution [bike.h]\n#ifndef Bike_H\n#define Bike_H\n#include \"vehicle.h\"\n#include \"property.h\"\nclass Bike : public Vehicle, private Property\n{\nprivate:\nbool horn;\nbool lights;\nstatic int numberBikes;\nstatic ofstream outputFile;\n\npublic:\nBike(int id, double weight, char *brand, char *model, char *type,\nbool horn, bool lights, double value, char *admin);\nvirtual ~Bike();\nvirtual void show();\nstatic void commentOutputFile();\nvirtual void save(void);\nstatic int getNumberBikes(void)\n{\nreturn numberBikes;\n}\n};\n#endif\nbike.C:\n// Problem Set#3 - Solution [bike.C]\n#include <stdlib.h>\n#include <iomanip.h>\n#include <string.h>\n#include <iostream.h>\n#include <fstream.h>\n#include \"bike.h\"\nBike::Bike(int id, double weight, char *brand, char *model,\nchar *type, bool horn, bool lights, double value, char *admin)\n:Vehicle(id,weight,brand,model,type), Property(value,admin)\n{\nthis -> horn = horn ;\nthis -> lights = lights ;\nnumberBikes++;\n}\nBike::~Bike()\n\n{\ncout << \"Deleting a Bike obejct\" << endl;\nnumberBikes--;\n}\nvoid Bike::show()\n{\ncout << \" Bike\" << endl;\nVehicle::show();\ncout << \" Has \" <<((horn)?\" Horn\":\" No Horn\")\n<< \" -\nHas \" << ((lights)?\"Lights\":\" No Lights \")\n<< endl ;\nProperty::show();\n}\nvoid Bike::commentOutputFile()\n{\noutputFile << \" Bicycle \" << endl;\n}\nvoid Bike::save(void)\n{\nstatic int i=0;\nif(i==0)\n{\noutputFile.open(\"bikes.dat\", ios::out);\noutputFile << setw(10) << \"Brand\" << setw(10) << \"Model\"\n<< setw(10) << \"Type\" << setw(8) << \"ID\"\n<< setw(8) << \"Weight\"\n<< setw(6) << \"Horn\" << setw(7) << \"Lights\"\n<< setw(7) << \"Value\" << setw(15) << \"Administrator\"\n<<\"\\n--------------------------------------------\"\n<<\"----------------------------------------------\"\n<< endl;\n}\noutputFile << ++i ;\nVehicle::save(outputFile);\noutputFile << setw(6) <<((horn)?\"Yes\":\"No\")\n<< setw(7) << ((lights)?\"Yes\":\"No\") ;\nProperty::save(outputFile);\n\nif(i==numberBikes)\n{\ni=0;\noutputFile.close();\n}\n}\nproperty,h:\n// Problem Set#3 - Solution [property.h]\n#ifndef Property_H\n#define Property_H\nclass Property\n{\nprivate:\ndouble estimatedValue;\nchar *administrator;\npublic:\nProperty(double value, char admin[]);\n~Property();\nvoid show();\nvoid save(ofstream &o);\n};\n#endif\nproperty.C\n\n// Problem Set#3 - Solution [property.C]\n#include <iostream.h>\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n#include <string.h>\n#include <stdio.h>\n#include \"property.h\"\nProperty::Property(double value, char *admin)\n{\nestimatedValue = value;\nadministrator = new char[strlen(admin)+1];\nstrcpy(administrator,admin);\n}\nProperty::~Property()\n{\ncout << \"Deleting a Property obejct\" << endl;\ndelete [] administrator;\n}\nvoid Property::show()\n{\ncout << \" Estimated Value = \" << estimatedValue\n<< \" Administrator = \" << administrator << endl;\n}\nvoid Property::save(ofstream &o)\n{\no << setw(12) << estimatedValue << setw(15) << administrator << endl;\n}\nvehicleNode.h:\n// Problem Set#3 - Solution [vehicleNode.h]\n\n#ifndef VehicleNode_H\n#define VehicleNode_H\n#include \"vehicle.h\"\nclass VehicleNode\n{\nprivate:\nstatic VehicleNode *head;\nVehicleNode *previous;\nVehicle *vehicle;\nVehicleNode *next;\npublic:\nVehicleNode(Vehicle *p);\n~VehicleNode();\nstatic VehicleNode* getHead(void);\nstatic void add(VehicleNode *p);\nstatic void show(void);\nstatic void save();\nstatic void freeMemory();\n};\n#endif\n\nvehicleNode.C:\n// Problem Set#3 - Solution [vehicleNode.C]\n#include <iostream.h>\n#include <stdlib.h>\n#include <string.h>\n#include <iomanip.h>\n#include <fstream.h>\n#include \"vehicleNode.h\"\n/*********************************************************************/\n// Constructor\nVehicleNode::VehicleNode(Vehicle *v)\n{\nprevious = NULL;\nvehicle = v;\nnext = NULL;\n}\n/*********************************************************************/\n/**********************************************************************/\nVehicleNode::~VehicleNode()\n// Destructor\n{\ncout << \"\\nDestroying a VehicleNode object\" << endl;\ndelete vehicle;\n}\n/**********************************************************************/\n/************** Member functions *************************/\n/************************************/\nVehicleNode* VehicleNode::getHead(void)\n{\nreturn head;\n\n}\n/************************************/\n/***********************************/\nvoid VehicleNode::add(VehicleNode *v)\n{\nif(head==NULL)\n{\nhead = v;\n}\nelse\n{\nv->next = head;\nhead->previous = v;\nhead = v;\n}\n}\n/**********************************/\n/***************************************************************/\nvoid VehicleNode::show(void)\n{\nVehicleNode *tmp = head;\nint i =0;\nif(!tmp)\n{\ncout << \"\\n\\t\\t No vehicles are in the list.\\n\" << endl;\n}\nelse\n{\ncout << \"\\t Vehicles in the list\"\n<< \"\\n\\t --------------------\\n\" << endl;\nwhile(tmp)\n{\ncout << \"\\nVehicle \" << ++i << \": \";\ntmp -> vehicle -> show();\ntmp = tmp->next;\ncout << \"\\n-----------------------------------\"\n<< \"-----------------------------------\" << endl;\n}\n\n}\n}\n/**************************************************************/\n/****************************************************************/\nvoid VehicleNode::save()\n{\nVehicleNode *tmp = head;\nif(!tmp)\n{\ncout << \"\\n\\t\\t No vehicles are in the list.\\n\" << endl;\n}\nelse\n{\ncout << \"Vehicles are stored in individual files\"\n<< \"\\n \" << endl;\nwhile(tmp)\n{\ntmp -> vehicle -> save();\ntmp = tmp->next;\n}\n}\n}\n/**************************************************************/\n/***********************************************/\nvoid VehicleNode::freeMemory()\n{\nVehicleNode *tmp = head;\nif(head)\n{\ndo\n{\ntmp = head -> next;\ndelete head;\nhead = tmp;\n}while(head);\n\ncout << \"Memory has been released\" << endl;\n}\n}\n/***********************************************/\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "ps4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/6be5d2a16a86aa6ae3577a052979fb3c_ps4.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 4\nDue Date: Tuesday 10/17/00\nReference Readings:\nFrom C++ Primer\n(in addition to the reference reading from PS1, PS2 & PS3):\n● Chapter 11: I/O\n● Chapter 12: Templates\n● chapter 14: File processing\nFrom algorithms in C++\n● Chapter 9: Quicksort\n● Chapter 14: Binary search\nProblem 1:[40%]\nIn this problem you need to develop a program that can handle user-provided data. You need to write\nthe main() function and two template functions. The program should be able to read using the one\ntemplate function monthly data for a number of years. It should be used twice, once to read the number\nof visitors, let's say to a tourist resort, and the other the income in millions of dollars.\nThe input data are provided in the following files, in tabular form with each row representing the year\nand for each row having 12 columns, one for each months\n● visitorsNumber.data: contains the number of tourist visitors\n● touristIncome.data: contains the revenue in millions of dollars\ne.g. the touristIncome.data file looks as follows:\n474.33 129.72 232.33 239.43 234.56 244.60 286.72 362.46 283.43 245.26 253.40 98.07\n\n240.34 268.36 245.36 165.36 234.45 242.43 344.25 320.20 447.93 375.26 201.30 94.34\nThe first element represents the tourist income for the first month of the corresponding year, which in\nthis case assume that it is 1997. The second row has the 12 values for the income for the 1 months of\nyear 1998, and so on.\nYou are asked to implement the two template functions in the file ps4_1.h, and the main() function in\nthe file ps4_1.C.\nmain(): The main() function should:\n●\nCreate an array of ints, of a 50 rows by 12 columns size, to hold the provided data. This array\nshould be named visitors.\n●\nInvoke the template function readData to read in the data. The readData function should read\nuntil the end of the provided file. Each row has 12 values, which correspond to the values of each\nmonth of a given year. The function readData should get from the user the initial year. It should\nalso count the number of years for which data are provided in the input file.\n●\nInvoke the function writeInvertedData to save in a file, whose name is given by the user, the\nnumbers for visitors, in inverted format. The data should be saved in tabular form with each\ncolumn representing a year and each row a month. A certain formatting should be used as shown\nin a sample execution of the program.\n●\nThen, create an array of double, of size 50 rows by 12 columns, to hold the provided data.\nName the array income.\n●\nInvoke the template function readData to read in the data. The readData function should read\nall rows until the end of the provided file. Each row has 12 values, one for each month of the\ncorresponding year. The function readData should get from the user the initial year. It should\ncount the number of years for which data are provided in the input file while reading the data.\n●\nInvoke the function writeInvertedData to save in a file the income values in tabular form. The\nname of the file should be given by the user, and the data should be saved in an \"inverted\nformat\", with each column representing a year and each row a month. In contrast, the data are\nread in with each row corresponding to a year and each column to a month. The exact reverse of\nthis should be used in this function, i.e. each row should correspond to a month and each column\nto the year. This formatting is illustrated below in a sample execution of an implemented\nprogram.\nreadData() template function: This template function should:\n● prompt the user to give the first year of statistical data, e.g. 1997\n● prompt the user to give the name of the input data, e.g. touristIncome.data\n● open, then, the file with that name\n● read until the end of file in the values into a 2-dimensional array that is passed by reference from\n\nmain() to hold the corresponding data. It should also count the number of years for which data are\nprovided while reading in the data\n● print out the number of years for which data are provided\nwriteInvertedData() template function: This template function should:\n● prompt the user to give the name of the file where the data should be stored\n● then, save in that file the data, which are provided by the array that is passed as argument to the\nfunction, e.g. visitors or income. The data should be printed in an inverted way. A sample\nexecution of the program, below, demonstrates the expected format that should be used while\nsaving the data in a file. Each row should correspond to a month and each column to a year. A\nspecified number of decimals (i.e. precision) should be used to print out the data. Values of\ndouble (such as those of the income array) should be printed with 3 decimal points, while int\nvalues (such as those of the visitors array) should be printed without any decimal point. Any int\nvalue should be printed as an integer and not in a scientific way, e.g. you should print 3453000\nand not as 3.453+06.\n● print out the number of years for which data has been saved\nSample execution of the program:\nThe execution of your program should have an output similar to the following.\nThe bolded and italic identify whatever is entered by the user of your program.\nVisitors Statistics\nFirst year: 1997\nFile with data: visitorsNumber.data\nData for 3 years have been read\nFile to store data: visitors.out\nData for 3 years have been stored to file: visitors.out\nIncome Statistics\nFirst year: 1997\nFile with data: touristIncome.data\nData for 2 years have been read\nFile to store data: touristIncome.out\nData for 2 years have been stored to file: touristIncome.out\n\nThe contents of the input and output files, after the above execution, are presented below:\nInput files:\nvisitorsNumber.data:\n475544 1985572 2076432 2165239 2283546 2344460 2635040 2958672 3047626 2843543 2734526 2523400 2412307 878734\n2343240 2546836 2436456 1943656 2453425 2754240 3256404 3454645 3698200 4138479 3743756 3398320 983474 923498\n2845672 3456566 2341653 2734562 2534400 2346307 943734 2234544 2398636 2345346 1546256 2453435 2345240 3456504\ntouristIncome.data\n474.33 129.72 232.33 239.43 234.56 244.60 286.72 362.46 283.43 245.26 253.40 98.07\n240.34 268.36 245.36 165.36 234.45 242.43 344.25 320.20 447.93 375.26 201.30 94.34\nOutput files:\nvisitors.out:\nMonth\n475544 2412307 3743756\n1985572 878734 3398320\n2076432 2343240 983474\n2165239 2546836 923498\n2283546 2436456 2845672\n2344460 1943656 3456566\n2635040 2453425 2341653\n2958672 2754240 2734562\n3047626 3256404 2534400\n10 2843543 3454645 2346307\n11 2734526 3698200 943734\n12 2523400 4138479 2234544\ntouristIncome.out:\nMonth\n474.330 240.340\n129.720 268.360\n232.330 245.360\n\n239.430 165.360\n234.560 234.450\n244.600 242.430\n286.720 344.250\n362.460 320.200\n283.430 447.930\n10 245.260 375.260\n11 253.400 201.300\n98.070 94.340\nProblem 2:[60%]\nIn this problem you need to write a program that will read a number of points store them using an\narray of pointers to objects of the class Point, and print the points out, as they are. It should then call a\nfunction to sort them using the X-coordinate and print them out sorted. Then, it should invoke the same\nfunction to sort them using the Y-coordinate and print them out sorted.\nTwo files, in which the class Point is defined, are provided for you. The one is a header file named\npoint.h, and the other is named point.C. These files are presented below. You should NOT make any\nchanges to these files. However, when submitting electronically your code you need to submit these files\nas well, as that will be helpful during grading in order to compile and run your code.\n// Problem Set#4: [point.h]\n#ifndef POINT_4_H\n#define POINT_4_H\nclass Point\n{\nprivate:\ndouble x,y;\npublic:\nPoint(double x, double y);\ndouble getX(void);\ndouble getY(void);\n\nfriend ostream& operator << (ostream &i, Point &p);\n};\n#endif\n// Problem Set#4: [point.C]\n#include <iostream.h>\n#include \"point.h\"\nPoint::Point(double x, double y)\n{\nthis -> x = x ;\nthis -> y = y ;\n}\ndouble Point::getX(void)\n{\nreturn x;\n}\ndouble Point::getY(void)\n{\nreturn y;\n}\nostream& operator << (ostream &o, Point &p)\n{\no << \" (x,y) = (\" << p.x << \" , \" << p.y << \")\" ;\nreturn o;\n}\nThe code that you are asked to provide should be written in two files, the ps4_2.h and the ps4_2.C.\nIn the former you need to provide only the declarations and in the latter the actual definitions of your\ncode.\nmain()\nThe main() function, which should be provided in the file ps4_2.C, should do the following with this\n\ncertain order:\n● Define an array of pointers to Point objects with the name points should be defined, as well as\nany other variables that you may need to use.\n● In order to be able to use the sorting method to sort in both X and Y direction you can use a\npointer to a member function of the class Point. Then you will be able to send as an argument the\npointer to the member function to the sorting method and use it to once point to the function getX\n() and sort in the X-direction, and then point to the function getX() and sort in the Y-direction.\nTherefore, you may need to define a pointer to a member function of the class Point.\n● All the function readPoints(), which you also need to provide in this file to read all the points.\nThe user should be prompt how many points are to be given, then the required memory for as\nmany points should be dynamically allocated, and the points should be provided by the user and\ncreated dynamically with their address stored in the array of pointers.\n● Then, the function printPoint() should be invoked to print out the points.\n● After assigning the pointer to the function to the getX member function, in order to be able to\naccess the X coordinate, the quickSortPoints() should be invoked to sort the array of pointers to\nPoint objects using the X-coordinates.\n● The function printPoint() should, then, be invoked again to print out the sorted points.\n● After assigning the pointer to the function to the getY member function, in order to be able to\naccess the Y coordinate, the quickSortPoints() should be invoked to sort the array of pointers to\nPoint objects using the Y-coordinates.\n● The function printPoint() should be invoked again to print out the sorted points\n● Finally, the program should release the dynamically allocated memory calling the function\nreleaseMemory() and exit.\nreadPoints()\nThis function should read in the data. You can use the provided file dat4_2 and redirection to save\nsome time while debugging your program. You need to read in the number of points and dynamically\nallocate the pointers to Point, and then use one by one the x and y values and dynamically allocate\nmemory for a Point object and assign accordingly its address to the corresponding element of the array\nof pointers.\nFile dat4_2 has the following structure:\n65.34 618.34\n-365.1 54.92\n324.2 54.07\n72.5 527.34\n-193.2\n9.37\n\nprintPoints()\nThis function should print out the points in a format similarly as to the following:\nPoints\nPoint 1: (x,y) = (65.34 , 618.34)\nPoint 2: (x,y) = (-365.1 , 54.92)\nPoint 3: (x,y) = (324.2 , 54.07)\nPoint 4: (x,y) = (72.5 , 527.34)\nPoint 5: (x,y) = (-193.2 , 9.37)\nquickSortPoints()\nThis function should sort the points, either in X or Y direction. The latter can be specified using a\npointer to a Point class member function to point to the getX and getY functions, respectively. You will\nneed to call a partition function, which you also need to provide. Please, name that function\npartitionPoints().\npartitionPoints()\nThis function should perform the partition that is necessary for quicksort.\nreleaseMemory()\nFinally, this function should release any dynamically allocated memory.\nSample execution:\nThe output of your program for the following input data set should look as follows:\nNumber of Points: 5\nx = 65.34\ny = 618.34\nx = -365.1\ny = 54.92\n\nx = 324.2\ny = 54.07\nx = 72.5\ny = 527.34\nx = -193.2\ny = 9.37\nPoints\nPoint 1: (x,y) = (65.34 , 618.34)\nPoint 2: (x,y) = (-365.1 , 54.92)\nPoint 3: (x,y) = (324.2 , 54.07)\nPoint 4: (x,y) = (72.5 , 527.34)\nPoint 5: (x,y) = (-193.2 , 9.37)\nPoints sorted in X-direction\nPoint 1: (x,y) = (-365.1 , 54.92)\nPoint 2: (x,y) = (-193.2 , 9.37)\nPoint 3: (x,y) = (65.34 , 618.34)\nPoint 4: (x,y) = (72.5 , 527.34)\nPoint 5: (x,y) = (324.2 , 54.07)\nPoints sorted in Y-direction\nPoint 1: (x,y) = (-193.2 , 9.37)\nPoint 2: (x,y) = (324.2 , 54.07)\nPoint 3: (x,y) = (-365.1 , 54.92)\nPoint 4: (x,y) = (72.5 , 527.34)\nPoint 5: (x,y) = (65.34 , 618.34)\nReleasing all the dynamically allocated memory and exiting....\nNote:\nPlease submit both printouts of the source code you have written (preferably using % enscript -2Gr -\nPprinter filename) and (or screen dumps of) the execution output (using %xdpr -Pprinter), with your\n\nname and username clearly written on the first page of the stapled submitted problem set. The submitted\ncode must be identical to that electronically turned in (as described above).\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "sol4.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/f4d31b7460d4b75c2d3b734f4be0f944_sol4.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 4 - Solution\nDue Date: Tuesday 10/17/00\nProblem 1:[40%]\nsol4_1.h\n// Problem Set#4 - Problem#1 solution [sol4_1.h]\n#define YEARS 50\n#define MONTHS 12\ntemplate<typename DataType>\nint readData( DataType (&data)[YEARS][MONTHS], int &firstYear)\n{\nint nYears=0;\nchar fileName[80];\ncout << \"\\n\\n First year: \" ;\ncin >> firstYear ;\ncout << \" File with data: \" ;\ncin >> fileName ;\nifstream inputStreamName (fileName);\ninputStreamName.clear();\nwhile(1)\n{\n\nfor(int j=0 ; !inputStreamName.eof() && j<MONTHS ; j++)\ninputStreamName >> data[nYears][j];\nif(inputStreamName.eof())\nbreak;\nnYears++;\n}\ncout << \"\\n Data for \" << nYears << \" years have been read\\n\\n\";\nreturn nYears;\n}\ntemplate<typename DataType>\nvoid writeInvertedData( DataType (&data)[YEARS][MONTHS], int firstYear,\nint lastYear, int precision)\n{\nint nYears=lastYear-firstYear+1;\nchar fileName[80];\ncout << \" File to store data: \" ;\ncin >> fileName ;\nofstream outputStreamName(fileName);\noutputStreamName << setw(6) << \"\\nMonth\" ;\nfor(int i=0; i<nYears; i++)\noutputStreamName << setw(9) << firstYear+i ;\noutputStreamName << endl;\nfor(int j=0 ; j<MONTHS ; j++)\n{\noutputStreamName.setf(ios::left);\noutputStreamName << setw(2) << \" \" << setw(4) << j+1 ;\noutputStreamName.unsetf(ios::left);\noutputStreamName.setf(ios::fixed);\nfor(int i=0; i<nYears; i++)\n{\noutputStreamName << setprecision(precision) << setw(9) << data[i][j];\n}\noutputStreamName << endl;\n}\n\ncout << \"\\n Data for \" << nYears << \" years have been stored to file: \"\n<< fileName << endl;\n}\nsol4_1.C\n// Problem Set#4 - Problem#1 solution [sol4_1.C]\n#include <iostream.h>\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n#include <string>\n#include <stdio.h>\n#include \"sol4_1.h\"\nint main(void)\n{\nint firstYear, lastYear, nYears;\n// Use of the template functions for an array of ints\nint visitors[YEARS][MONTHS];\ncout << \"\\n Visitors Statistics\" << endl;\nnYears = readData(visitors, firstYear);\nlastYear = firstYear + nYears -1;\nwriteInvertedData(visitors, firstYear, lastYear,0);\n// Use of the template functions for an array of doubles\ndouble income[YEARS][MONTHS];\ncout << \"\\n Income Statistics\" << endl;\nnYears = readData(income, firstYear);\nlastYear = firstYear + nYears -1;\n\nwriteInvertedData(income, firstYear, lastYear, 3);\nreturn EXIT_SUCCESS;\n}\nProblem 2:[60%]\nsol4_2.h\n// Problem Set#4 - Problem#2 solution [sol4_2.h]\n#ifndef SOL_4__2H\n#define SOL_4_2_H\nint main(void);\nint readPoints(Point ***points);\nvoid printPoint(Point **points,int numberPoints);\nvoid quickSortPoints(Point **p, int l, int r, double(Point::*pFun)());\nint partitionPoints(Point **p, int l, int r, double(Point::*pFun)());\nvoid releaseMemory(Point **points,int numberPoints);\n#endif\nsol4_2.C\n// Problem Set#4 - Problem#2 solution [sol4_2.C]\n#include <iostream.h>\n\n#include <iomanip.h>\n#include <stdlib.h>\n#include <fstream.h>\n#include <string>\n#include <stdio.h>\n#include \"point.h\"\n#include \"sol4_2.h\"\n/********************************************************/\nint main(void)\n{\nPoint **points;\ndouble (Point::*pFun)();\nint numberPoints;\nnumberPoints = readPoints(&points);\ncout << \"\\n\\t\\t Points \" << endl;\nprintPoint(points, numberPoints);\npFun = &Point::getX;\nquickSortPoints(points, 0, numberPoints-1, pFun);\ncout << \"\\n Points sorted in X-direction\" << endl;\nprintPoint(points,numberPoints);\npFun = &Point::getY;\nquickSortPoints(points, 0, numberPoints-1, pFun);\ncout << \"\\n Points sorted in Y-direction\" << endl;\nprintPoint(points,numberPoints);\nreleaseMemory(points,numberPoints);\nreturn EXIT_SUCCESS;\n}\n/********************************************************/\n/********************************************************/\nint readPoints(Point ***points)\n{\nint n;\ndouble x,y;\n\ncout << \"Number of Points: \";\ncin >> n;\n*points = new Point*[n];\nfor(int i=0; i<n; i++)\n{\ncout << \"\\n x = \" ;\ncin >> x;\ncout << \"\\n y = \" ;\ncin >> y;\n(*points)[i] = new Point(x,y);\n}\nreturn n;\n}\n/********************************************************/\n/********************************************************/\nvoid printPoint(Point **points, int numberPoints)\n{\nfor(int i=0; i<numberPoints; i++)\ncout << \" Point \" << i+1 << \": \" << *(points[i]) << endl;\ncout << endl;\n}\n/********************************************************/\n/*********************************************************************/\nvoid quickSortPoints(Point **p, int l, int r, double(Point::*pFun)())\n{\nif(l<r)\n{\nint i = partitionPoints(p, l, r, pFun);\nquickSortPoints(p, l, i, pFun);\nquickSortPoints(p, i+1, r, pFun);\n}\n}\n/*********************************************************************/\n\n/********************************************************************/\nint partitionPoints(Point **p, int l, int r, double(Point::*pFun)())\n{\nPoint *tmp;\nint i = l-1;\nint j = r+1;\ndouble value = (p[l]->*pFun)();\nwhile(1)\n{\ndo\nj--;\nwhile((p[j]->*pFun)()>value);\ndo\ni++;\nwhile((p[i]->*pFun)()<value);\nif(i<j)\n{\ntmp = p[i];\np[i] = p[j];\np[j] = tmp;\n}\nelse\nreturn j;\n}\n}\n/********************************************************************/\n/**************************************************/\nvoid releaseMemory(Point **points,int numberPoints)\n{\ncout << \"\\n Releasing all the dynamically allocated\"\n<< \" memory and exiting.... \" << endl<< endl;\nfor(int i=0; i<numberPoints; i++)\ndelete points[i];\ndelete []points;\n}\n/**************************************************/\n\npoint.h\n// Problem Set#4: [point.h]\n#ifndef POINT_4_H\n#define POINT_4_H\nclass Point\n{\nprivate:\ndouble x,y;\npublic:\nPoint(double x, double y);\ndouble getX(void);\ndouble getY(void);\nfriend ostream& operator << (ostream &i, Point &p);\n};\n#endif\npoint.C\n// Problem Set#4: solution [point.C]\n#include <iostream.h>\n#include \"point.h\"\nPoint::Point(double x, double y)\n{\nthis -> x = x ;\nthis -> y = y ;\n}\ndouble Point::getX(void)\n\n{\nreturn x;\n}\ndouble Point::getY(void)\n{\nreturn y;\n}\nostream& operator << (ostream &o, Point &p)\n{\no << \" (x,y) = (\" << p.x << \" , \" << p.y << \")\" ;\nreturn o;\n}\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Resource",
      "title": "ps5.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/7a1ff3676d88d3be138d5928e0f82a37_ps5.pdf",
      "content": "1.124J Foundations of Software Engineering\nProblem Set 5\nDue Date: Tuesday 10/24/00\nReference Readings: From Java Tutorial\n-\nGetting Started: Lessons 1-3\n-\nLearning the Java Language: Lessons 4-7\no 4. Object-Oriented Programming Concepts\no 5. The Nuts and Bolts of the Java Language\no 6. Objects and Classes in Java\no 7. More Features of the Java Language\n\nProblem 1: [30%]\nThis problem consists of 3 small parts. In the first part, you need to provide a java\napplication, then in the second part you must write a java applet, and, finally, at the third\npart you need to provide, in one file, a class which can be executed both as an applet and\nas an application.\nFor all 3 parts you need to provide a class for Point objects named MyPoint. The data\nmembers of the class should be the following:\n-\ntwo doubles, named x and y, to store the x and y coordinates of the point.\n-\none static int, named numberMyPoints to keep truck of the number of points that\nhave been created\nThe class should be called MyPoint and should be provided in a file MyPoint.java. It\nshould have two constructors:\n-\na non-argument constructor which should install zero values to both x and y\n-\na constructor which has two double as arguments by the names x and y.\nThe constructors should take care of increasing accordingly the number of MyPoint\nobjects that are created using the static member data numberMyPoints.\nThe class should also provide a toString method which should return a string consisting\nof the string \"(x,y) =\" and the values of x and y enclosed in parentheses and separated\nwith a comma e.g.: (x,y) = (-4.6 , 9.5)\n\nFinally, the class MyPoint should have a member function named move which have two\nparameters named dx and dy of type double. The function move() should add the dx and\ndy to the values of the member data x and y, respectively.\n\nPart A:\nIn this part you need to provide an application, i.e. which can be executed from a\nconsole (e.g. an xterm), in a file named ps5_1a.java. The main function should print out\nthe number of the MyPoint objects (which initially should be set to zero, since no objects\nwould have been created).\nThen, it should create (using new) an object named p1 using the non-argument\nconstructor (which gives zero values). Then, the number of MyPoint objects should be\nprinted again out, using the corresponding static variable. The p1 object should also be\nprinted out making use of the toString() function.\nThen, MyPoint object, named p2, should be created and given the values -4.6 and 9.5,\nfor x and the y, respectively, using the other constructor. Then, the number of MyPoint\nobjects should be printed, again, out followed by the printing of the object p2 making use\nof the toString() function.\nFinally, move the point p1 by dx=4.5 and dy=0.7, using the member function move()\nof the class MyPoint.\nThe execution of the program should have an output similar to the following:\n> java ps5_1a\n\nNumber of MyPoint objects = 0\nNumber of MyPoint objects = 1\np1: (x,y) = (0.0 , 0.0)\nNumber of MyPoint objects = 2\np2 = (x,y) = (-4.6 , 9.5)\np1: (x,y) = (4.5 , 0.7)\n\nPart B:\n\nIn this part you need to provide an applet, i.e. which can be executed from a browser\nor using appletviewer, in a file named ps5_1b.java.\nThe applet should use the class MyPoint to define two objects, as above, p1 and p2\nwith the same values as above and using the same constructors. Create a point p1 using\nthe non-argument constructor and then move it as above by 4.5 and 0.7. Instead of\nprinting to a console (xterm) it should paint to the browser, or to the appletviewer, the\nnumber of the MyPoint objects that have been created and the two objects, using the\ntoString() member function.\nThe resulting image of the browser or appletviewer loading the applet ps5_1b should\nlook like below:\n\nNumber of MyPoint objects = 2\n\np1: (x,y) = (4.5 , 0.7)\np2 = (x,y) = (-4.6 , 9.5)\n\nTo be able to load the applet you need to write an html file, named ps5_1b.html,\nwhich should also be submitted for grading.\n\nPart C:\nIn this part you need to provide in a file named ps5_1c.java a class that can be called\nfrom the console (i.e. run as an application), or from a browser (i.e. run as an applet). If it\nis executed as an application should give an output similar to the one provided to part A.\nOtherwise, if it is loaded as an applet it should result to an image similar to the one given\nin part B.\nNote:\nOverall, for all 3 parts, you need to submit the files ps5_1a.java, ps5_1b.java, and\nps5_1c.java for parts A, B and C, respectively. You also need to submit the file\nMyPoint.java in which the class MyPoint should be defined. Finally, you need to submit\nthe html files ps5_1b.html and ps5_1c.html for parts B and C.\nPlease, also, submit screendumps of the execution of each part, the output of parts A\nand C and screendump of the appletviewer (or browser) for parts B and C.\n\nProblem 2: [35%]\nFor this problem you need to provide five classes, Shape, Sphere, Triangle,\nTetrahedron, and Point, in the files Shape.java, Sphere.java, Triangle.java,\nTetrahedron.java, and Point.java, respectively.\nThe provided classes should be able to support the provided in the file ps5_2.java\napplication. This application should be able to read a number of shapes and use an array\nof references to Shape objects. The shapes can be spheres, triangles, tetrahedrons and\ntheir characteristics should be stored in the corresponding (Sphere, Triangle, and\nTetrahedron, respectively) classes which are subclasses of the Shape class. You should\nnot make any changes to the provided ps5_2.java file, which has the main() function and\nthe other provided functions.\nThe shapes are read and then stored in an array of references to Shape objects. Then,\nall shapes are printed out using polymorphism. Finally, the references to shape objects\nare set to null and the System.runFinalization() and the System.gc() are called to force the\nfinalizing of the objects and the garbage collector to run, respectively.\nThe hierarchy to be used is shown on the following figure:\n\nYou need to provide each of the above classes, namely Shape, Sphere, Triangle, and\nTetrahedron, in the files Shape.java, Sphere.java, Triangle.java, and Tetrahedron.java,\nrespectively. You also need to provide the class Point, which is used by the above classes,\nin the file Point.java. You should figure out from the file ps5_2.java what member\nfunctions are required in order to be able to compile and run the completed program.\nSeveral constructors, static and non-static member functions, and finalizers are\nrequired. All member data that are not explicitly specified, e.g. when a non-argument\nconstructor is called, should be set to zero. The constructors should increase the static\nvariable which counts the number of instances of that class. The finalize methods should\ndecrease those numbers whenever an object is finalized. Finally, all classes should have\na toString() method, that can be used to print the object using the print() method of the\nSystem class.\nIn particular you need to provide:\n\n1. The abstract class Shape in the file Shape.java: This class should have the following\nprivate members:\n-\nint shapeId: to store the ID of the shape\n-\nint numberShapes: which should be static and initialized to 0, to store the number\nof Shape objects. The constructor(s) should increase the numberShapes\naccordingly.\n\n2. The class Sphere in the file Sphere.java: This class should have the following private\nmembers:\n-\ndouble radius: to store the radius of the sphere\n-\nPoint center: to store the center of the sphere\n-\nint numberSpheres, : which should be static and initialized to 0, to store the\nnumber of Sphere objects\n\n3. The class Triangle in the file Triangle.java: This class should have the following\nprivate members:\n-\nPoint a: to store vertex a\n-\nPoint b: to store vertex b\n-\nPoint c: to store vertex c\n-\nint numberTriangles, : which should be static and initialized to 0, to store the\nnumber of Triangle objects\n\n4. The class Tetrahedron in the file Tetrahedron.java: This class should have the\nfollowing private members:\n-\nPoint a: to store vertex a\n-\nPoint b: to store vertex b\n-\nPoint c: to store vertex c\n-\nPoint d: to store vertex d\n-\nint numberTetrahedrons, : which should be static and initialized to 0, to store the\nnumber of Tetrahedron objects\n\n4. The class Point in the file Point.java: This class should have the following private\nmembers:\n-\ndouble x: to store the x coordinate of the point\n-\ndouble y: to store the y coordinate of the point\n\nThe main() and some other functions are provided in the file ps5_2.java:\nps5_2.java\nclass ps5_2\n{\nstatic final int SIZE = 100;\nstatic Shape shapes[];\n\npublic static void main(String args[])\n{\nSystem.out.print(\"\\n Reading the shapes...\");\nreadShapes();\nSystem.out.print(\"\\n Printing the shapes...\");\nprintShapes();\nSystem.out.print(\"\\n Cleaning-up the shapes...\");\ncleanUpShapes();\n}\n\nstatic void readShapes()\n{\nshapes = new Shape[SIZE];\nPoint p1,p2,p3,p4,p5,p6,p7, p8;\np1 = new Point(4.1,5.7);\np2 = new Point(-3.6,-1.2);\np3 = new Point(2.3,-8.2);\np4 = new Point(-9.5,3.1);\np5 = new Point(-5.2,4.2);\np6 = new Point(-6.2,9.5);\np7 = new Point(-11.6,8.6);\np8 = new Point(-9.6, -13.6);\n\nshapes[Shape.getNumberShapes()] = new Sphere(11);\n((Sphere)shapes[0]).setRadius(0.25);\n((Sphere)shapes[0]).setCenter(-6.8,5.3);\nshapes[Shape.getNumberShapes()] = new Triangle(33,p1,p2,p3);\n\nshapes[Shape.getNumberShapes()] = new Sphere(101);\nshapes[Shape.getNumberShapes()] = new Triangle();\nshapes[Shape.getNumberShapes()] = new Tetrahedron(44,p4,p5,p6,p7);\nshapes[Shape.getNumberShapes()] = new Sphere();\nshapes[Shape.getNumberShapes()-1].setID(147);\nshapes[Shape.getNumberShapes()] = new Tetrahedron();\nshapes[Shape.getNumberShapes()-1].setID(67);\n((Tetrahedron)shapes[Shape.getNumberShapes()-1]).setVertices(p1,p3,p8,p6);\nshapes[Shape.getNumberShapes()] = new Sphere();\n}\n\nstatic void printShapes()\n{\nSystem.out.println(\"\\n Number of shapes: \" +\nShape.getNumberShapes());\nSystem.out.print(\"\\n Number of Spheres: \" +\nSphere.getNumberSpheres());\nSystem.out.print(\"\\n Number of Triangles: \" +\nTriangle.getNumberTriangles());\nSystem.out.println(\"\\n Number of Tetrahedrons: \" +\nTetrahedron.getNumberTetrahedrons());\nfor(int i=0;i<Shape.getNumberShapes();i++)\n{\nSystem.out.print(\"\\nShapes [ \" + (i+1) + \" ]: \" );\nif(shapes[i] instanceof Sphere)\nSystem.out.println(\" Sphere \" );\nelse if(shapes[i] instanceof Triangle)\nSystem.out.println(\" Triangle \" );\nelse if(shapes[i] instanceof Tetrahedron)\nSystem.out.println(\" Tetrahedron \" );\nSystem.out.println(shapes[i]);\n}\n}\nstatic void cleanUpShapes()\n{\nSystem.out.println(\"\\n\\n References to shape objects are set to null\");\nint n = Shape.getNumberShapes();\n\nfor(int i=0;i<n;i++)\n{\nSystem.out.print(\"\\nSetting shape [ \" + (i+1) + \" ]: to null\" );\nshapes[i] = null;\n}\nSystem.out.println(\"\\n\\n Finalizing objects\");\nSystem.runFinalization();\nSystem.out.println(\"\\n Running the Garbage Collector\\n\");\nSystem.gc();\n}\n}\n\nThe output from your program should look like the following:\nReading the shapes...\nPrinting the shapes...\nNumber of shapes: 8\nNumber of Spheres: 4\nNumber of Triangles: 2\nNumber of Tetrahedrons: 2\nShapes [ 1 ]: Sphere\nShape: ID = 11\nRadius = 0.25\nCenter: (x,y) = (-6.8 , 5.3)\nShapes [ 2 ]: Triangle\nShape: ID = 33\nVertex a: (x,y) = (4.1 , 5.7)\nVertex b: (x,y) = (-3.6 , -1.2)\nVertex c: (x,y) = (2.3 , -8.2)\nShapes [ 3 ]: Sphere\nShape: ID = 101\nRadius = 0.0\nCenter: (x,y) = (0 , 0)\nShapes [ 4 ]: Triangle\nShape: ID = 0\nVertex a: (x,y) = (0 , 0)\nVertex b: (x,y) = (0 , 0)\nVertex c: (x,y) = (0 , 0)\n\nShapes [ 5 ]: Tetrahedron\nShape: ID = 44\nVertex a: (x,y) = (-9.5 , 3.1)\nVertex b: (x,y) = (-5.2 , 4.2)\nVertex c: (x,y) = (-6.2 , 9.5)\nVertex d: (x,y) = (-6.2 , 9.5)\nShapes [ 6 ]: Sphere\nShape: ID = 147\nRadius = 0.0\nCenter: (x,y) = (0 , 0)\nShapes [ 7 ]: Tetrahedron\nShape: ID = 67\nVertex a: (x,y) = (4.1 , 5.7)\nVertex b: (x,y) = (2.3 , -8.2)\nVertex c: (x,y) = (-9.6 , -13.6)\nVertex d: (x,y) = (-6.2 , 9.5)\nShapes [ 8 ]: Sphere\nShape: ID = 0\nRadius = 0.0\nCenter: (x,y) = (0 , 0)\nCleaning-up the shapes...\nReferences to shape objects are set to null\nSetting shape [ 1 ]: to null\nSetting shape [ 2 ]: to null\nSetting shape [ 3 ]: to null\nSetting shape [ 4 ]: to null\nSetting shape [ 5 ]: to null\nSetting shape [ 6 ]: to null\nSetting shape [ 7 ]: to null\nSetting shape [ 8 ]: to null\nFinalizing objects\nRunning the Garbage Collector\nIn Sphere finalize\nIn Shape finalize\nIn Triangle finalize\nIn Shape finalize\n\nIn Sphere finalize\nIn Shape finalize\nIn Triangle finalize\nIn Shape finalize\nIn Tetrahedron finalize\nIn Shape finalize\nIn Sphere finalize\nIn Shape finalize\nIn Tetrahedron finalize\nIn Shape finalize\nIn Sphere finalize\nIn Shape finalize\n\nNote:\nYou must submit, both electronically and in a hardcopy form, the files files Shape.java,\nSphere.java, Triangle.java, Tetrahedron.java, and Point.java, in which you should\nprovide the corresponding classes as explained above. You also need to submit the\nprovided fileps5_2.java to facilitate the compilation and running of your program during\ngrading. Please, submit a printout of the output from the completed program.\n\nProblem 3: [35%]\nIn this problem you must write a Java applet that reads a number of rectangles and\ndetermines their total area and their centroid. The source code for the applet should be\nprovided in the file ps5_3.java as a class ps5_3.\nThe source code for the class Rectangle should be provided in the file Rectangle.java.\nClass Rectangle should have 3 private members:\n-\nthe center of the rectangle, which should be a point. You may use the same class\nthat you have already developed for the class Point for the previous problems.\n-\nthe width and the height of the rectangle, which should be doubles\nThe applet ps5_3 should have an array of Rectangles of size 10. The following 4\nrectangles should be created and referred from the array of rectangles. For simplicity\nassume that all rectangles are parallel to the x and y axes.\n\nRectangle\nXc\nYc\nWidth\nHeight\nThen, the applet should draw each rectangle. The total area of rectangles and their\ncentroid should be computed and printed out using two decimal points only. You also\nneed to write the number of the rectangle, R1 for rectangle, R2 for rectangle 2, and so on.\nAlso a circle of diameter 4 should be drawn at the centroid. The following figure shows\nhow your applet should appear:\n\nThe centroid of a set of shapes is computed as the sum of the products of the area of\neach shape times its centroid coordinate (Xci and Yci) divided by the total area of the\ncross-section. For example, the centroid (Xc,Yc) of the following section is defined by the\nfollowing formulas:\n\nYou need to submit all files necessary to compile and run your applet, i.e. ps5_3.java,\nRectangle.java, and ps5_3.html. You also need to submit a screendump of your applet.\n\nNote:\nPlease submit both printouts of the source code you have written (preferably using %\nenscript -2Gr -Pprinter filename) and (or screen dumps of) the execution output (using\n%xdpr -Pprinter), with your name and username clearly written on the first page of the\nstapled submitted problem set. The submitted code must be identical to that\nelectronically turned in (as described above).\n\n(c) 1.124J Foundations of Software Engineering"
    },
    {
      "category": "Exam",
      "title": "quiz1_solutions.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/c8cbf1f348a1250427dab927d3cdc176_quiz1_solutions.pdf",
      "content": "Name:\n1.124 Quiz 1\nThursday October 5, 2000\nTime: 1 hour 15 minutes\nAnswer all questions. All questions carry equal marks.\n#include <iostream.h>\nclass Ball {\nprivate:\nconst float pi;\nint radius;\npublic:\nBall(int r=1) {\nradius = r;\n}\nvoid set_radius(int radius);\nconst Ball& operator=(const Ball& b);\nstatic int count;\nvirtual void print() {\ncout << radius << endl;\n}\n};\nint Ball::count = 0;\nclass BuckyBall: public Ball {\nprivate:\nint color;\npublic:\nBuckyBall(int radius, int c) {\ncolor = c;\n}\nvoid print() {\ncout << color << endl;\n}\n};\n\nQuestion 1. Show how you would initialize the member pi in class Ball.\n) : pi(3.14159f) {\nradius = r;\n}\nAnswer:\nUse an initialization list in the constructor:\nBall(int r=1\nQuestion 2. Write the copy constructor for class Ball.\nWithin the public part of the Ball\n) : pi(b.pi) {\nradius = b.radius;\n}\nAnswer:\nclass declaration:\nBall(const Ball& b\nQuestion 3. Show how you would overload the += operator, so that the following code\nincrements the radius of b by 2.\nBall b;\nb += 2;\nWithin the public part of the Ball\n) {\nradius += i;\n}\nAnswer:\nclass declaration:\nvoid operator+=(int i\n\nQuestion 4. Complete the definition of the member function set_radius().\nvoid Ball::set_radius(int radius) {\nAnswer:\nthis->radius = radius;\n}\nQuestion 5. What should the = operator return so that the code\nBall a, b(2), c(3);\na = b = c;\nbehaves as expected? Explain your answer.\nconst Ball& Ball::operator=(const Ball& b) {\nradius = b.radius;\nreturn *this;\nAnswer:\n}\nQuestion 6. Draw a clear diagram to illustrate the memory allocated by the following\ncode. Label all variables on your diagram.\nBall b;\nBall *p;\nBall **pp;\npp = new Ball*[2];\npp[0] = new Ball[2];\npp[1] = &b;\nBall& c = pp[0][1];\npp\np\np\nb\nc\np\nAnswer:\np[0]\np[1]\n\nQuestion 7. How you would release the memory allocated in Question 6?\nAnswer:\ndelete[] pp[0];\ndelete[] pp;\nQuestion 8. What will be the output from the following program?\nint count = 5;\nvoid draw(Ball *p, int n) {\nstatic int count = n;\ncout << count << endl;\n}\nvoid main() {\nconst int count = 2;\nBall b[count];\ndraw(b,7);\ndraw(b,8);\ncout << b[1].count << count << ::count << Ball::count << endl;\n}\nAnswer:\n\nQuestion 9. Show how you would modify the BuckyBall constructor so that it correctly\ninitializes the Ball part of a BuckyBall object.\n(\n)\n(\n) {\n}\nAnswer:\nBuckyBall int radius, int c : Ball radius\ncolor = c;\nQuestion 10. What statements would you use to print out\n(i)\nThe color of object a?\n(ii)\nThe color of object b?\n(iii)\nThe radius of object b?\n(iv)\nThe radius of object c?\nBuckyBall a(1,2);\nBall& b = a;\nBuckyBall& c = a;\nb.Ball::print();\nAnswer:\na.print();\nb.print();\nc.Ball::print();\n\nQuestion 11. What is a protected member? Give examples of how such a member can\nand cannot be used.\nint a;\n};\npublic:\na = i;\n}\n};\nvoid main() {\nDerived x;\n}\nAnswer:\nA protected member of a class is a member variable or function, which can only\nbe accessed within the definition of the class and the definitions of derived\nclasses. e.g.\nclass Base {\nprotected:\nclass Derived : public Base {\nvoid set(int i) {\n// Example of valid usage.\nx.a = 7;\n// Illegal.\nQuestion 12. Give the definitions of the destructors for the Ball and BuckyBall classes.\nBall:\n:\nAnswer:\nIn the public part of the declaration for class\nvirtual ~Ball() {}\nIn the public part for the declaration for class BuckyBall\n~BuckyBall() {}"
    },
    {
      "category": "Exam",
      "title": "quiz1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/779df2801837ddb3278f94635aedbea1_quiz1.pdf",
      "content": "Name:\n1.124 Quiz 1\nThursday October 5, 2000\nTime: 1 hour 15 minutes\nAnswer all questions. All questions carry equal marks.\n#include <iostream.h>\nclass Ball {\nprivate:\nconst float pi;\nint radius;\npublic:\nBall(int r=1) {\nradius = r;\n}\nvoid set_radius(int radius);\nconst Ball& operator=(const Ball& b);\nstatic int count;\nvirtual void print() {\ncout << radius << endl;\n}\n};\nint Ball::count = 0;\nclass BuckyBall: public Ball {\nprivate:\nint color;\npublic:\nBuckyBall(int radius, int c) {\ncolor = c;\n}\nvoid print() {\ncout << color << endl;\n}\n};\n\nQuestion 1. Show how you would initialize the member pi in class Ball.\nAnswer:\nQuestion 2. Write the copy constructor for class Ball.\nAnswer:\nQuestion 3. Show how you would overload the += operator, so that the following code\nincrements the radius of b by 2.\nBall b;\nb += 2;\nAnswer:\n\nQuestion 4. Complete the definition of the member function set_radius().\nvoid Ball::set_radius(int radius) {\nAnswer:\n}\nQuestion 5. What should the = operator return so that the code\nBall a, b(2), c(3);\na = b = c;\nbehaves as expected? Explain your answer.\nconst Ball& Ball::operator=(const Ball& b) {\nradius = b.radius;\nAnswer:\n}\nQuestion 6. Draw a clear diagram to illustrate the memory allocated by the following\ncode. Label all variables on your diagram.\nBall b;\nBall *p;\nBall **pp;\npp = new Ball*[2];\npp[0] = new Ball[2];\npp[1] = &b;\nBall& c = pp[0][1];\nAnswer:\n\nQuestion 7. How you would release the memory allocated in Question 6?\nAnswer:\nQuestion 8. What will be the output from the following program?\nint count = 5;\nvoid draw(Ball *p, int n) {\nstatic int count = n;\ncout << count << endl;\n}\nvoid main() {\nconst int count = 2;\nBall b[count];\ndraw(b,7);\ndraw(b,8);\ncout << b[1].count << count << ::count << Ball::count << endl;\n}\nAnswer:\n\nQuestion 9. Show how you would modify the BuckyBall constructor so that it correctly\ninitializes the Ball part of a BuckyBall object.\nAnswer:\nQuestion 10. What statements would you use to print out\n(i)\nThe color of object a?\n(ii)\nThe color of object b?\n(iii)\nThe radius of object b?\n(iv)\nThe radius of object c?\nBuckyBall a(1,2);\nBall& b = a;\nBuckyBall& c = a;\nAnswer:\n\nQuestion 11. What is a protected member? Give examples of how such a member can\nand cannot be used.\nAnswer:\nQuestion 12. Give the definitions of the destructors for the Ball and BuckyBall classes.\nAnswer:"
    },
    {
      "category": "Exam",
      "title": "sample_quiz1_answers.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/532dacb20e9f0097517e9142db5b3cc3_sample_quiz1_answers.pdf",
      "content": "1.124 Quiz 1\nThursday October 8, 1998\nTime: 1 hour 15 minutes\nAnswer all questions. All questions carry equal marks.\nQuestion 1. The following code is to be built and run as follows:\nCompile as\ng++ -c Point.C\ng++ -c myprog.C\nLink as\ng++ -o myprog myprog.o Point.o\nRun as\nmyprog\nWould you expect to see\n(a) a compile-time error?\n(b) a link-time error?\n(c) a run-time error?\n(d) none of the above errors.\nExplain briefly.\nPoint.h\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() {}\nvoid set_coords(int x, int y);\n};\nPoint.C\n#include \"Point.h\"\nvoid Point::set_coords(int x, int y) {\n// Assume that this sets the private data.\n}\nmyprog.C\n#include \"Point.h\"\nextern Point a;\nint main() {\na.set_coords(2,3);\nreturn 0;\n}\na is not defined\nAnswer:\nA link-time error.\nThe global object\nanywhere.\n\nQuestion 2. Fill in the body of the member function, set_coords, so that it properly sets\nthe private member data in class Point.\n}\nAnswer:\nvoid Point::set_coords(int x, int y) {\nthis->x = x; // or Point::x = x;\nthis->y = y; // or Point::y = y;\nQuestion 3. Write a member function, access_x, that can be used either to set or to get\nthe value of the private member, x. Your function should work with the following code:\nclass Point {\nprivate:\nint x, y;\npublic:\nreturn x;\n}\nPoint() {}\nAnswer:\nint& access_x() {\n};\nint main() {\nPoint a;\nint i;\na.access_x() = 5;\ni = a.access_x();\nreturn 0;\n}\n\nQuestion 4. Is the following class declaration valid? Explain briefly.\nclass Point {\nprivate:\nint x, y;\nPoint a;\npublic:\nPoint() {}\n};\nNo.\nPoint\nAnswer:\nA class cannot contain a member of the same data type. In this example, the\ncompiler has no way to determine the size of a\nobject.\nQuestion 5. Examine the following code carefully and explain the exact sequence of\nconstructor calls.\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() { x = y = 0; }\n// Constructor #1\nPoint(int ix, int iy) { x = ix; y = iy; } // Constructor #2\nPoint(const Point& p) { x = p.x; y = p.y; } // Constructor #3\n~Point() {}\n};\nPoint foo(Point p) {\nstatic Point c(p);\nreturn c;\n}\nint main() {\nPoint a(2,3);\nPoint b;\nb = foo(a);\na = foo(b);\nreturn 0;\n}\nConstructor #\nDefinition of object a.\nDefinition of object b.\n.\nDefinition of object c.\n.\n.\n.\nAnswer:\nReason\nPass by value into foo()\nReturn by value from foo()\nPass by value into foo()\nReturn by value from foo()\n\nQuestion 6. Examine the following code carefully and draw a diagram to illustrate the\ndata structures that it creates. Be sure to indicate all data types on your diagram.\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() { x = y = 0; }\nPoint(int ix, int iy) { x = ix; y = iy; }\n};\nint main() {\nPoint **p;\np = new Point *;\n*p = new Point[3];\nfor (int i = 0; i < 3; i++) {\n(*p)[i] = Point(i, 0);\n}\nreturn 0;\n}\nQuestion 7. In the following code, circle the statements that will produce compilation\nerrors. Explain your reasoning.\nclass Point {\np\nPoint **\nPoint *\nPoint\nPoint\nPoint\nAnswer:\nprivate:\npublic:\nx = a; y = b;\n}\n};\ndelete p;\nreturn 0;\n}\nnon-static members. Static member\nthe class definition.\nint x, y;\nstatic int i;\nPoint() {}\nstatic void set_data(int a, int b, int c) {\ni = c;\nint Point::i = 0;\nint main() {\nPoint::i++;\nPoint *p = new Point;\np->set_data(2,3,1);\nAnswer:\nThere are two errors.\n(1) Static member functions cannot access\nfunctions can be invoked even if no\nobjects exist, whereas non-static\nmembers belong to objects.\n(2) Private data is not accessible outside\n\nQuestion 8. Identify and explain the errors, if any, in the following code.\n#include <iostream.h>\nclass Point {\nprivate:\nconst int x, y;\npublic:\nPoint(int ix = 0, int iy = 0) : x(ix), y(iy) { }\nvoid print() const { cout << \"(\" << x << \", \" << y << \")\" << endl; }\n};\nint main() {\nconst int i = 0;\nconst Point a;\nPoint * const p = new Point(2,3);\nconst Point& b = a;\nb.print();\np->print();\ndelete p;\nreturn 0;\n}\nAnswer:\nThere are no errors.\nPart II\nIn the code below answer the following questions:\n#include <iostream.h>\nclass Point {\n// Line 1\nprivate:\nint x, y;\npublic:\nPoint(){x=0;y=0;}\nPoint(int a, int b){x=a;y=b;}\n~Point(){};\n??? operator+(Point&);\n??? operator<<(???);\n??? operator[](???);\n};\n\nQuestion 9. Give the body of the code i.e. the definition, for operator+ including the\nreturn type so that the code adds together two Point objects so that the following code\nwill work.\nmain(){\nPoint a(2,3),b(3,3);\nPoint c = a + b;\n}\n}\nPoint Point::operator +(const Point& p)const{\nreturn Point(x+p.x,y+p.y);\nQuestion 10 What changes would\nyou make to make the following\ncode work. Make any assumptions\nyou need to about how the code\nshould interpret the meaning of\nthe statements below.\nmain(){\nPoint a(2,3),b(3,3);\nPoint c = b + 7;\n}\nPoint(int a, int b=0):x(a),y(b){};\nQuestion 11 Give the body of\nthe code to overload operator[]\nwhich should allow the\nfollowing code to work\nmain(){\nPoint a(2,3);\na[0] = 4;\na[1] = 2*a[0];\n}\n}\n}\nint& Point::operator [](int i){\nif(i == 0) return x;\nelse if(i == 1) return y;\nelse {\ncout << \"error in index for Point object\"<< endl;\n\nQuestion 12 Give the body of\nthe code to overload the\noutput operator<< for the\nPoint object so that the\nfollowing code will work.\n#include <iostream.h>\nmain(){\nPoint a(2,3), b(3,3);\ncout << a << b;\n}\nreturn o;\n}\nAnswer:\nostream& operator<<(ostream& o, Point& p){\no << \"x = \"<< p[0] <<\", y = \"<< p[1] << endl;\nFor the code below answer the following questions:\nclass Shape{\nprivate:\nPoint center;\npublic:\nShape(const Point&);\nvirtual ~Shape();\nvoid set_center(const Point&);\nPoint get_center(){return center;}\nvirtual void print(){cout << \"Center at \"<<center[0]<<\",\"<<center[1]<< endl;};\n};\nclass Circle:public Shape\n{\nprivate:\nint radius;\npublic:\nCircle();\nCircle(int,int, int)?????\nCircle(Point&,int)?????\nCircle(Circle&) ????\n~Circle();\nvoid print(){};\n};\nQuestion 13 How many bytes of data are\nneeded for the variables in a Circle\nobject?\nThere are 3 int objects\nwhich take 12 bytes.\n\nQuestion 14 Are there any inline\nfunctions in class Shape? If so name\nthem.\nQuestion 15 Write down all the\nfunctions in class Circle that can access\ncenter in the\nprivate part of Shape.\nQuestion 16 Write the definition of the\ncopy constructor for class Circle.\nQuestion 17 How would we make the class\nShape an abstract class? What does an\nabstract class mean?\nThere are no functions\nthat can access the\nprivate part of Shape.\nget_center() is an inline function\nprint() is NOT because its virtual.\nCircle(Circle& c){radius =\nc.radius;set_center(c.get_center());}\nSet any function = 0 eg\nfunc() = 0;\n\nQuestion 18 Will the following code compile\nwithout errors?\nmain(){\nint x=5.0,y=6.0;\nint radius = 2;\nShape* a;\na = new Circle(x, y, radius);\nCircle b(*a);\na = &b;\na->print();\ndelete a;\n};\nQuestion 19 What would the code above\nprint out if print() was NOT a virtual\nfunction in class Shape?\nQuestion 20 How many bytes of memory\nwould be released on line 10 if the\ndestructors were NOT virtual.\nmain(){\nint x=5.0,y=6.0;\nint radius = 2;\nShape* a;\na = new Circle(x, y, radius);\nCircle b(*a);\n// a=&b; this line taken out\na->print();\ndelete a;\n};\nIt will compile without errors.\nCenter at 5,6\nCenter at 5,6 with radius 2\nIf it were a virtual function it would print\n8 Bytes since it would just destroy\nthe Shape part of the object\n\nFile point.h\n#include <iostream.h>\nclass Point {\n// Line 1\nprivate:\nint x, y;\npublic:\nPoint(){x=0;y=0;}\nPoint(int a, int b=0):x(a),y(b){};\nPoint(const Point&);\nPoint operator+(const Point&)const;\nint& operator[](int);\n~Point(){};\nfriend ostream& operator<<(ostream&, Point&);\n};\nfile shape.h\n#include \"point.h\"\n#include <iostream.h>\nclass Shape{\nprivate:\nPoint center;\npublic:\nShape(){center[0]=0;center[1]=0;}\nShape(const Point&);\nvirtual ~Shape(){};\nvoid set_center(const Point&);\nPoint get_center(){return center;}\nvirtual void print(){cout <<\"center at \"<<center[0] <<\",\"<< center[1];};\n};\nfile circle.h\n#include \"shape.h\"\nclass Circle:public Shape\n{\nprivate:\nint radius;\npublic:\nCircle():Shape(),radius(0){};\nCircle(int a,int b, int r):radius(r){set_center(Point(a,b));}\nCircle(Point& p,int r):Shape(p),radius(r){}\nCircle(Circle& c){radius = c.radius;set_center(c.get_center());}\nvirtual ~Circle();\nvoid print(){Shape::print(); cout<<\" with radius \"<< radius<<endl;};\n\n};\nfile point.C\nPoint::Point(const Point& p)\n{\nx = p.x;\ny = p.y;\n}\nPoint Point::operator +(const Point& p)const{\nreturn Point(x+p.x,y+p.y);\n}\nint& Point::operator [](int i){\nif(i == 0) return x;\nelse if(i == 1) return y;\nelse {\ncout << \"error in index for Point object\"<< endl;\n}\n}\nostream& operator<<(ostream& o, Point& p){\no << \"x = \"<< p[0] <<\", y = \"<< p[1] << endl;\nreturn o;\n}\nFile shape.C\n#include \"shape.h\"\nvoid Shape::set_center(const Point& p){\ncenter = p;\n}\nFile circle.C\n#include \"circle.h\"\nCircle::~Circle(){}\n\nFile shape_test.C\n#include \"point.h\"\n#include \"shape.h\"\n#include \"circle.h\"\nint main(int argc, char* argv[])\n{\nPoint a(2,3), b(3,3);\nPoint c = b + 7;\nc = a + b;\ncout << a << b;\nCircle d(4,5,6);\nd.print();\nCircle e(d);\ne.print();\nShape* sp;\nsp = &e;\nsp->print();\nreturn 0;\n}"
    },
    {
      "category": "Exam",
      "title": "sample_quiz1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/97cea5df725c43edbef85c8eb6d92f51_sample_quiz1.pdf",
      "content": "1.124 Quiz 1\nThursday October 8, 1998\nTime: 1 hour 15 minutes\nAnswer all questions. All questions carry equal marks.\nQuestion 1. The following code is to be built and run as follows:\nCompile as\ng++ -c Point.C\ng++ -c myprog.C\nLink as\ng++ -o myprog myprog.o Point.o\nRun as\nmyprog\nWould you expect to see\n(a) a compile-time error?\n(b) a link-time error?\n(c) a run-time error?\n(d) none of the above errors.\nExplain briefly.\nPoint.h\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() {}\nvoid set_coords(int x, int y);\nAnswer:\n};\nPoint.C\n#include \"Point.h\"\nvoid Point::set_coords(int x, int y) {\n// Assume that this sets the private data.\n}\nmyprog.C\n#include \"Point.h\"\nextern Point a;\nint main() {\na.set_coords(2,3);\nreturn 0;\n}\n\nQuestion 2. Fill in the body of the member function, set_coords, so that it properly sets\nthe private member data in class Point.\n}\nAnswer:\nvoid Point::set_coords(int x, int y) {\nQuestion 3. Write a member function, access_x, that can be used either to set or to get\nthe value of the private member, x. Your function should work with the following code:\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() {}\nAnswer:\n};\nint main() {\nPoint a;\nint i;\na.access_x() = 5;\ni = a.access_x();\nreturn 0;\n}\n\nQuestion 4. Is the following class declaration valid? Explain briefly.\nclass Point {\nprivate:\nint x, y;\nPoint a;\npublic:\nPoint() {}\n};\nAnswer:\nQuestion 5. Examine the following code carefully and explain the exact sequence of\nconstructor calls.\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() { x = y = 0; }\n// Constructor #1\nPoint(int ix, int iy) { x = ix; y = iy; }\n// Constructor #2\nPoint(const Point& p) { x = p.x; y = p.y; } // Constructor #3\n~Point() {}\n};\nPoint foo(Point p) {\nstatic Point c(p);\nreturn c;\n}\nint main() {\nPoint a(2,3);\nPoint b;\nb = foo(a);\na = foo(b);\nreturn 0;\n}\nAnswer:\nConstructor #\nReason\n\nQuestion 6. Examine the following code carefully and draw a diagram to illustrate the\ndata structures that it creates. Be sure to indicate all data types on your diagram.\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint() { x = y = 0; }\nPoint(int ix, int iy) { x = ix; y = iy; }\n};\nint main() {\nPoint **p;\np = new Point *;\n*p = new Point[3];\nfor (int i = 0; i < 3; i++) {\n(*p)[i] = Point(i, 0);\n}\nreturn 0;\n}\nQuestion 7. In the following code, circle the statements that will produce compilation\nerrors. Explain your reasoning.\nclass Point {\nAnswer:\nprivate:\nint x, y;\nstatic int i;\npublic:\nPoint() {}\nstatic void set_data(int a, int b, int c) {\nx = a; y = b; i = c;\n}\n};\nint Point::i = 0;\nint main() {\nPoint::i++;\nPoint *p = new Point;\np->set_data(2,3,1);\ndelete p;\nreturn 0;\n}\nAnswer:\n\nQuestion 8. Identify and explain the errors, if any, in the following code.\n#include <iostream.h>\nclass Point {\nprivate:\nconst int x, y;\npublic:\nPoint(int ix = 0, int iy = 0) : x(ix), y(iy) { }\nvoid print() const { cout << \"(\" << x << \", \" << y << \")\" << endl; }\n};\nint main() {\nconst int i = 0;\nconst Point a;\nPoint * const p = new Point(2,3);\nconst Point& b = a;\nb.print();\np->print();\ndelete p;\nreturn 0;\n}\nAnswer:\nPart II\nIn the code below answer the following questions:\n#include <iostream.h>\nclass Point {\n// Line 1\nprivate:\nint x, y;\npublic:\nPoint(){x=0;y=0;}\nPoint(int a, int b){x=a;y=b;}\n~Point(){};\n??? operator+(Point&);\n??? operator<<(???);\n??? operator[](???);\n};\n\nQuestion 9. Give the body of the code i.e. the definition, for operator+ including the\nreturn type so that the code adds together two Point objects so that the following code\nwill work.\nmain(){\nPoint a(2,3),b(3,3);\nPoint c = a + b;\n}\nQuestion 10 What changes would\nyou make to make the following\ncode work. Make any assumptions\nyou need to about how the code\nshould interpret the meaning of\nthe statements below.\nmain(){\nPoint a(2,3),b(3,3);\nPoint c = b + 7;\n}\nQuestion 11 Give the body of\nthe code to overload operator[]\nwhich should allow the\nfollowing code to work\nmain(){\nPoint a(2,3);\na[0] = 4;\na[1] = 2*a[0];\n}\n\nQuestion 12 Give the body of\nthe code to overload the\noutput operator<< for the\nPoint object so that the\nfollowing code will work.\n#include <iostream.h>\nmain(){\nPoint a(2,3), b(3,3);\ncout << a << b;\n}\nAnswer:\nFor the code below answer the following questions:\nclass Shape{\nprivate:\nPoint center;\npublic:\nShape(const Point&);\nvirtual ~Shape();\nvoid set_center(const Point&);\nPoint get_center(){return center;}\nvirtual void print(){cout << \"Center at \"<<center[0]<<\",\"<<center[1]<< endl;};\n};\nclass Circle:public Shape\n{\nprivate:\nint radius;\npublic:\nCircle();\nCircle(int,int, int)?????\nCircle(Point&,int)?????\nCircle(Circle&) ????\n~Circle();\nvoid print(){};\n};\nQuestion 13 How many bytes of data are\nneeded for the variables in a Circle\nobject?\n\nQuestion 14 Are there any inline\nfunctions in class Shape? If so name\nthem.\nQuestion 15 Write down all the\nfunctions in class Circle that can access\ncenter in the\nprivate part of Shape.\nQuestion 16 Write the definition of the\ncopy constructor for class Circle.\nQuestion 17 How would we make the class\nShape an abstract class? What does an\nabstract class mean?\n\nQuestion 18 Will the following code compile\nwithout errors?\nmain(){\nint x=5.0,y=6.0;\nint radius = 2;\nShape* a;\na = new Circle(x, y, radius);\nCircle b(*a);\na = &b;\na->print();\ndelete a;\n};\nQuestion 19 What would the code above\nprint out if print() was NOT a virtual\nfunction in class Shape?\nQuestion 20 How many bytes of memory\nwould be released on line 10 if the\ndestructors were NOT virtual.\nmain(){\nint x=5.0,y=6.0;\nint radius = 2;\nShape* a;\na = new Circle(x, y, radius);\nCircle b(*a);\n// a=&b; this line taken out\na->print();\ndelete a;\n};\n\nFile point.h\n#include <iostream.h>\nclass Point {\n// Line 1\nprivate:\nint x, y;\npublic:\nPoint(){x=0;y=0;}\nPoint(int a, int b=0):x(a),y(b){};\nPoint(const Point&);\nPoint operator+(const Point&)const;\nint& operator[](int);\n~Point(){};\nfriend ostream& operator<<(ostream&, Point&);\n};\nfile shape.h\n#include \"point.h\"\n#include <iostream.h>\nclass Shape{\nprivate:\nPoint center;\npublic:\nShape(){center[0]=0;center[1]=0;}\nShape(const Point&);\nvirtual ~Shape(){};\nvoid set_center(const Point&);\nPoint get_center(){return center;}\nvirtual void print(){cout <<\"center at \"<<center[0] <<\",\"<< center[1];};\n};\nfile circle.h\n#include \"shape.h\"\nclass Circle:public Shape\n{\nprivate:\nint radius;\npublic:\nCircle():Shape(),radius(0){};\nCircle(int a,int b, int r):radius(r){set_center(Point(a,b));}\nCircle(Point& p,int r):Shape(p),radius(r){}\nCircle(Circle& c){radius = c.radius;set_center(c.get_center());}\nvirtual ~Circle();\nvoid print(){Shape::print(); cout<<\" with radius \"<< radius<<endl;};\n\n};\nfile point.C\nPoint::Point(const Point& p)\n{\nx = p.x;\ny = p.y;\n}\nPoint Point::operator +(const Point& p)const{\nreturn Point(x+p.x,y+p.y);\n}\nint& Point::operator [](int i){\nif(i == 0) return x;\nelse if(i == 1) return y;\nelse {\ncout << \"error in index for Point object\"<< endl;\n}\n}\nostream& operator<<(ostream& o, Point& p){\no << \"x = \"<< p[0] <<\", y = \"<< p[1] << endl;\nreturn o;\n}\nFile shape.C\n#include \"shape.h\"\nvoid Shape::set_center(const Point& p){\ncenter = p;\n}\nFile circle.C\n#include \"circle.h\"\nCircle::~Circle(){}\n\nFile shape_test.C\n#include \"point.h\"\n#include \"shape.h\"\n#include \"circle.h\"\nint main(int argc, char* argv[])\n{\nPoint a(2,3), b(3,3);\nPoint c = b + 7;\nc = a + b;\ncout << a << b;\nCircle d(4,5,6);\nd.print();\nCircle e(d);\ne.print();\nShape* sp;\nsp = &e;\nsp->print();\nreturn 0;\n}"
    },
    {
      "category": "Exam",
      "title": "quiz2_solutions.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/7b3d8a1639171a8b52b7fba0ef43cb00_quiz2_solutions.pdf",
      "content": "Name:\n1.124 Quiz 2\nThursday November 9, 2000\nTime: 1 hour 20 minutes\nAnswer all questions. All questions carry equal marks.\nQuestion 1.\nShow the steps that are involved in sorting the string SORTME using the quicksort\nalgorithm given below.\n#include <iostream.h>\nvoid quicksort(char *a, int l, int r);\nmain() {\nchar str[8] = \"9SORTME\";\n// 9 is a sentinel.\nquicksort(str, 1, 6);\n}\ninline void swap(char *a, int i, int j) {\nchar tmp = a[i];\na[i] = a[j];\na[j] = tmp;\ncout << a+1 << endl;\n// Print out the array, excluding the sentinel.\n}\nvoid quicksort(char *a, int l, int r) {\nif (r > l) {\nchar v = a[r];\nint i = l - 1;\nint j = r;\nwhile (1) {\nwhile(a[++i] < v);\nwhile(a[--j] > v);\nif (j <= i)\nbreak;\nswap(a, i, j);\n}\nswap(a, r, i);\nquicksort(a, l, i-1);\nquicksort(a, i+1, r);\n}\n}\nS O R T M E\nE\nT M S\nE\nM T S\nE\nM S T\nE M R O S T\nE M O R S T\nAnswer:\nO R\nO R\nO R\n\nQuestion 2.\nShow how you would translate the bold portions of the following C++ code into Java.\n#include <iostream.h>\nclass Shape {\nprivate:\nfloat x, y;\npublic:\nShape(float a, float b) {\nx = a;\ny = b;\n}\nvirtual float compute_area() = 0;\nvirtual void print() {\ncout << x << \" \" << y << endl;\n}\n};\nclass Circle : public Shape {\nprivate:\nfloat radius;\npublic:\nCircle(float a, float b, float r) : Shape(a, b) {\nradius = r;\n}\nAnswer:\nfloat compute_area() {\n(a) public abstract float compute_area();\nreturn 3.14f * radius * radius;\n}\n(b) class Circle extends Shape\nvoid print() {\ncout << radius << endl;\nShape::print();\n}\n};\n(c) public Circle(float a, float b, float r) {\nsuper(a, b);\nradius = r;\n}\n(d) public void print() {\nSystem.out.println(radius);\nvoid main() {\nsuper.print();\nCircle a(3,4,2);\n}\na.print();\n}\n\nQuestion 3.\nIn the following C++ program, the outputData() function can handle callbacks such as\nplot() and print(). How would you complete the given Java code to implement a similar\ncapability?\n#include <iostream.h>\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint(int a = 0, int b = 0) {\nx = a;\ny = b;\n}\nvoid print() {\ncout << x << \" \" << y << endl;\n}\n};\ntypedef void (*OutFunc)(Point& p);\nvoid plot(Point &p) {\n// Assume that this plots the point p on the screen.\ncout << \"In plot:\" << endl;\np.print();\n}\nvoid print(Point &p) {\n// Assume that this prints out the coordinates of p.\ncout << \"In print:\" << endl;\np.print();\n}\nvoid outputData(OutFunc pFunc, Point *a, int n) {\nfor (int i = 0; i < n; i++)\npFunc(a[i]);\n}\nvoid main() {\nPoint a[2];\na[0] = Point(2,3);\na[1] = Point(4,5);\noutputData(plot, a, 2);\noutputData(print, a, 2);\n}\n\nAnswer:\nclass Point {\nprivate int x, y;\npublic Point(int a, int b) {\nx = a;\ny = b;\n}\nvoid print() {\nSystem.out.println(x + \" \" + y);\n}\n}\ninterface Output {\nvoid out(Point p);\n}\nclass Plotter implements Output {\npublic void out(Point p) {\n// Assume that this plots the point p on the screen.\nSystem.out.println(\"In plot:\");\np.print();\n}\n}\nclass Printer implements Output {\npublic void out (Point p) {\n// Assume that this prints out the coordinates of p.\nSystem.out.println(\"In print:\");\np.print();\n}\n}\nclass Main {\nstatic void outputData(Output o, Point[] a, int n) {\nfor (int i = 0; i < n; i++)\no.out(a[i]);\n}\npublic static void main(String args[]) {\nPoint a[] = new Point[2];\na[0] = new Point(2,3);\na[1] = new Point(4,5);\noutputData(new Plotter(), a, 2);\noutputData(new Printer(), a, 2);\n}\n}\n\nQuestion 4.\nShow how you would complete the given Java code, so that it achieves the effect shown\nin the Figure below.\nAnswer:\nimport java.awt.*;\nimport javax.swing.*;\nclass Main {\npublic static void main(String args[]) {\nJFrame f = new JFrame();\nJPanel p = new JPanel() {\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\nDimension d = getSize();\ng.setColor(Color.gray);\ng.fillOval(0,0,d.width,d.height);\n}\n};\np.setLayout(new FlowLayout());\np.add(new JButton(\"Button 1\"));\np.add(new JButton(\"Button 2\"));\nf.getContentPane().setLayout(new BorderLayout());\nf.getContentPane().add(p, BorderLayout.CENTER);\nf.setSize(250,250);\nf.setVisible(true);\n}\n}\n\nQuestion 5.\nHow you would you change the background color of the panel when the mouse moves\nover the application's window?\nMouse out\nMouse over\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nclass Main {\npublic static void main(String args[]) {\nJFrame f = new JFrame();\nfinal JPanel p = new JPanel();\nAnswer:\nfinal Color c = p.getBackground();\np.addMouseListener(new MouseAdapter() {\npublic void mouseEntered(MouseEvent e) {\np.setBackground(Color.gray);\n}\npublic void mouseExited(MouseEvent e) {\np.setBackground(c);\n}\n});\nf.setContentPane(p);\nf.setSize(250,250);\nf.setVisible(true);\n}\n}\n\nQuestion 6.\nThe following applet contains several errors. Explain what changes you would make to\ncorrect the code, so that the applet displays the current frame number.\nAnswer:\n/*\n<APPLET CODE=MyApplet.class WIDTH=250 HEIGHT=100>\n</APPLET>\n*/\nimport java.awt.*;\nimport javax.swing.*;\npublic class MyApplet extends JApplet implements Runnable\n{\nThread t = null;\nint count = 0;\npublic void init() {\ngetContentPane().add(new JPanel() {\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.drawString(\"Count = \" + count, 50, 50);\n}\n});\n}\npublic void start() {\nt = new Thread(this);\nt.start();\n}\npublic void run() {\nfor (int i = 0; i < 200; i++) {\ncount++;\nrepaint();\ntry {\nThread.sleep(100);\n}\ncatch (InterruptedException e) {}\n}\n}\n}\n\nQuestion 7.\nWhat is double buffering and why is it important in animation? How do the Swing\nclasses differ from the AWT classes in this respect?\nAnswer:\nDouble buffering is important because it helps to produce a smooth looking\nanimation that does not flicker. Without double buffering, noticeable\nflicker will usually result due to the clearing of the background before an\nanimation frame is drawn. Double buffering is implemented by performing\nall drawing operations for an animation frame (including clearing the\nbackground) in an off-screen image buffer. Once the complete animation\nframe has been assembled off-screen, the contents of the image buffer are\ncopied on to the screen.\nThe Swing package provides automatic double buffering capabilities by\nway of the JComponent class. With the AWT classes, double buffering is\nthe responsibility of the programmer.\nQuestion 8.\nShow how you would extract the number 1.124 from the string \"Hello 1.124 World!\" and\nthen store it in a float variable.\nAnswer:\nimport java.util.*;\nclass Main {\npublic static void main(String args[]) {\nString str = \"Hello 1.124 World!\";\nStringTokenizer t = new StringTokenizer(str);\nString s = t.nextToken();\ns = t.nextToken();\nfloat f = Float.parseFloat(s);\n}\n}"
    },
    {
      "category": "Exam",
      "title": "quiz2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/1-124j-foundations-of-software-engineering-fall-2000/51622b8ab390711a77f74b4d345e6810_quiz2.pdf",
      "content": "Name:\n1.124 Quiz 2\nThursday November 9, 2000\nTime: 1 hour 20 minutes\nAnswer all questions. All questions carry equal marks.\nQuestion 1.\nShow the steps that are involved in sorting the string SORTME using the quicksort\nalgorithm given below.\n#include <iostream.h>\nvoid quicksort(char *a, int l, int r);\nmain() {\nchar str[8] = \"9SORTME\";\n// 9 is a sentinel.\nquicksort(str, 1, 6);\n}\ninline void swap(char *a, int i, int j) {\nchar tmp = a[i];\na[i] = a[j];\na[j] = tmp;\ncout << a+1 << endl;\n// Print out the array, excluding the sentinel.\n}\nvoid quicksort(char *a, int l, int r) {\nif (r > l) {\nchar v = a[r];\nint i = l - 1;\nint j = r;\nwhile (1) {\nwhile(a[++i] < v);\nwhile(a[--j] > v);\nif (j <= i)\nbreak;\nswap(a, i, j);\n}\nswap(a, r, i);\nquicksort(a, l, i-1);\nquicksort(a, i+1, r);\n}\n}\nS O R T M E\nAnswer:\n\nQuestion 2.\nShow how you would translate the bold portions of the following C++ code into Java.\n#include <iostream.h>\nclass Shape {\nprivate:\nfloat x, y;\npublic:\nShape(float a, float b) {\nx = a;\ny = b;\n}\nvirtual float compute_area() = 0;\nvirtual void print() {\ncout << x << \" \" << y << endl;\n}\n};\nclass Circle : public Shape {\nprivate:\nfloat radius;\npublic:\nCircle(float a, float b, float r) : Shape(a, b) {\nradius = r;\n}\nAnswer:\nfloat compute_area() {\nreturn 3.14f * radius * radius;\n}\nvoid print() {\ncout << radius << endl;\nShape::print();\n}\n};\nvoid main() {\nCircle a(3,4,2);\na.print();\n}\n\nQuestion 3.\nIn the following C++ program, the outputData() function can handle callbacks such as\nplot() and print(). How would you complete the given Java code to implement a similar\ncapability?\n#include <iostream.h>\nclass Point {\nprivate:\nint x, y;\npublic:\nPoint(int a = 0, int b = 0) {\nx = a;\ny = b;\n}\nvoid print() {\ncout << x << \" \" << y << endl;\n}\n};\ntypedef void (*OutFunc)(Point& p);\nvoid plot(Point &p) {\n// Assume that this plots the point p on the screen.\ncout << \"In plot:\" << endl;\np.print();\n}\nvoid print(Point &p) {\n// Assume that this prints out the coordinates of p.\ncout << \"In print:\" << endl;\np.print();\n}\nvoid outputData(OutFunc pFunc, Point *a, int n) {\nfor (int i = 0; i < n; i++)\npFunc(a[i]);\n}\nvoid main() {\nPoint a[2];\na[0] = Point(2,3);\na[1] = Point(4,5);\noutputData(plot, a, 2);\noutputData(print, a, 2);\n}\n\nAnswer:\nclass Point {\nprivate int x, y;\npublic Point(int a, int b) {\nx = a;\ny = b;\n}\nvoid print() {\nSystem.out.println(x + \" \" + y);\n}\n}\nclass Plotter\n{\n}\nclass Printer\n{\n}\nclass Main {\nstatic void outputData(\n) {\n}\npublic static void main(String args[]) {\nPoint a[] = new Point[2];\na[0] = new Point(2,3);\na[1] = new Point(4,5);\noutputData(new Plotter(), a, 2);\noutputData(new Printer(), a, 2);\n}\n}\n\nQuestion 4.\nShow how you would complete the given Java code, so that it achieves the effect shown\nin the Figure below.\nAnswer:\nimport java.awt.*;\nimport javax.swing.*;\nclass Main {\npublic static void main(String args[]) {\nJFrame f = new JFrame();\nf.setSize(250,250);\nf.setVisible(true);\n}\n}\n\nQuestion 5.\nHow you would you change the background color of the panel when the mouse moves\nover the application's window?\nMouse out\nMouse over\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nclass Main {\npublic static void main(String args[]) {\nJFrame f = new JFrame();\nfinal JPanel p = new JPanel();\nAnswer:\nf.setContentPane(p);\nf.setSize(250,250);\nf.setVisible(true);\n}\n}\n\nQuestion 6.\nThe following applet contains several errors. Explain what changes you would make to\ncorrect the code, so that the applet displays the current frame number.\nAnswer:\n/*\n<APPLET CODE=MyApplet.class WIDTH=250 HEIGHT=100>\n</APPLET>\n*/\nimport java.awt.*;\nimport javax.swing.*;\npublic class MyApplet extends JApplet\n{\nThread t = null;\nint count = 0;\npublic void init() {\ngetContentPane().add(new JPanel() {\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.drawString(\"Count = \" + count, 50, 50);\n}\n});\n}\npublic void start() {\nt = new Thread();\nt.start();\n}\npublic void run() {\nfor (int i = 0; i < 200; i++) {\ncount++;\nrepaint();\nThread.sleep(100);\n}\n}\n}\n\nQuestion 7.\nWhat is double buffering and why is it important in animation? How do the Swing\nclasses differ from the AWT classes in this respect?\nAnswer:\nQuestion 8.\nShow how you would extract the number 1.124 from the string \"Hello 1.124 World!\" and\nthen store it in a float variable.\nAnswer:"
    }
  ]
}