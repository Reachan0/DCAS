{
  "course_name": "Cellular and Molecular Computation",
  "course_description": "Life as an emergent property of networks of chemical reactions involving proteins and nucleic acids. Mathematical theories of metabolism, gene regulation, signal transduction, chemotaxis, excitability, motility, mitosis, development, and immunity. Applications to directed molecular evolution, DNA computing, and metabolic and genetic engineering.",
  "topics": [
    "Engineering",
    "Biological Engineering",
    "Computational Biology",
    "Science",
    "Biology",
    "Cell Biology",
    "Molecular Biology",
    "Engineering",
    "Biological Engineering",
    "Computational Biology",
    "Science",
    "Biology",
    "Cell Biology",
    "Molecular Biology"
  ],
  "syllabus_content": "Life as an emergent property of networks of chemical reactions involving proteins and nucleic acids. Mathematical theories of metabolism, gene regulation, signal transduction, chemotaxis, excitability, motility, mitosis, development, and immunity. Applications to directed molecular evolution, DNA computing, and metabolic and genetic engineering.\n\nCourse Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nPhilosophy\n\nWhat is the relationship between genotype and phenotype? Classical geneticists studied genes with easily observable phenotypic effects, but often single genes do not affect phenotype in a simple, obvious fashion. This complexity is not surprising when one considers genes and proteins not as isolated molecules, but rather as nodes of an intricate network of chemical reactions. It is well-known that networks with nonlinearity and feedback loops can possess nonintuitive properties, and metabolic and genetic networks are no exception. This course is devoted to mathematical tools for analyzing and engineering the dynamical behaviors of such biochemical networks. Algorithms for statistical analysis of biological sequences and other data are not covered, as they are taught elsewhere in 10.90 Bioinformatics and 18.417 Introduction to Computational Molecular Biology.\n\nPrerequisites\n\nrudimentary knowledge of biology, chemistry, and physics\n\nfamiliarity with linear algebra, multivariate calculus, and probability theory\n\nknowledge of a programming language (preferably MATLAB\n?\n)\n\nCourse Requirements\n\nproblem sets\n\nclass presentations\n\nfinal project or exam\n\nTopics\n\nDirected molecular evolution\n\nDNA computing and self-assembly\n\nMetabolic networks (enzyme kinetics, flux analysis, engineering)\n\nProcaryotic gene regulation (lac operon, lambda phage, circadian rhythms)\n\nMembrane excitability\n\nSignal transduction\n\nLTP and autophosphorylation\n\nChemotaxis\n\nCell signaling in slime molds\n\nMotility\n\nMitosis\n\nDevelopment (Drosophila)\n\nImmune system",
  "files": [
    {
      "category": "Assignment",
      "title": "assignment1.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/9-530-cellular-and-molecular-computation-spring-2000/a8aaf9fd8653593aab4659e9653e12f3_assignment1.pdf",
      "content": ""
    },
    {
      "category": "Assignment",
      "title": "assignment2.pdf",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/9-530-cellular-and-molecular-computation-spring-2000/fd6b9d0ece4f8b65bfaaedade459b331_assignment2.pdf",
      "content": "The repressilator\n1. Box 1 of the Elowitz and Leibler paper defines a set of differential equations that model the repressilator. A\nnumber of properties of these equations are listed without mathematical derivation. Let's do the math now.\n(a) Find the steady state of the equations satisfying\np\n=\np\n=\np\n=\nm\n=\nm\n=\nm\n=\np. Show that this\nsymmetric steady state is unique, i.e., that no other steady state is possible.\n(b) Linearize the dynamical equations around the steady state solution. This is done by setting\nm\ni\n=\np\n+\nÆ\nm\ni\nand\np\ni\n=\np\n+\nÆ\np\ni where\nÆ\nm\ni and\nÆ\np\ni are very small and\np is the steady state value. Then Taylor expand\nthe right hand side of the dynamical equations to first order in\nÆ\nm\ni and\nÆ\np\ni. Define the vector\nz\nT\n=\n(Æ\nm\n;\nÆ\nm\n;\nÆ\nm\n;\nÆ\np\n;\nÆ\np\n;\nÆ\np\n). Your linearized equations should look like\ndz\ndt\n=\nAz\nwhere\nA\n=\n\nI\nX\nC\n\nI\n\nI\n\nand\nX is as defined in the paper. Here\nI is the\n\n3 identity matrix, and\nC is the cyclic permutation matrix\nC\n=\n@\nA\n(c) Suppose that you are given an eigenvalue\nof\nA and the corresponding eigenvector\nv\nT\n=\n(Æ\nm\nT\n;\nÆ\np\nT\n).\nShow that\n\nX\nC\nÆ\np\n=\n(\n+\n\n)(\n+\n1)Æ\np\nIn other words,\nis related to the eigenvalues of\nC. From this fact, find the six eigenvalues of\nA, and\nderive the stability condition listed in the paper (warning: there may be a typo in the paper).\n(d) With the help of the stability condition, find a set of parameters for which the repressilator oscillates.\nSimulate these oscillations using XPP or some other program. Submit your code along with the output of\nyour program.\n2. Using the methods I demonstrated in class, construct a stochastic simulation of the repressilator using XPP or\nsome other program. You will need to follow the guidelines sketched in Box 1 of the paper under \"Stochastic,\ndiscrete approximation.\" Compare your simulations with Figure 1 of the paper. Submit your code along with\nthe output of the program. Show both oscillatory and nonoscillatory behavior."
    }
  ]
}