{
  "course_name": "Intermediate Heat and Mass Transfer",
  "course_description": "2.51 is a 12-unit subject, serving as the Mechanical Engineering Department’s advanced undergraduate course in heat and mass transfer. The prerequisites for this course are the undergraduate courses in thermodynamics and fluid mechanics, specifically Thermal Fluids Engineering I and Thermal Fluids Engineering II or their equivalents. This course covers problems of heat and mass transfer in greater depth and complexity than is done in those courses and incorporates many subjects that are not included or are treated lightly in those courses; analysis is given greater emphasis than the use of correlations. Course 2.51 is directed at undergraduates having a strong interest in thermal science and graduate students who have not previously studied heat transfer.",
  "topics": [
    "Engineering",
    "Mechanical Engineering",
    "Fluid Mechanics",
    "Science",
    "Physics",
    "Thermodynamics",
    "Engineering",
    "Mechanical Engineering",
    "Fluid Mechanics",
    "Science",
    "Physics",
    "Thermodynamics"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nCredit and Content\n\nCourse 2.51 is a 12-unit subject, serving as the Mechanical Engineering department's advanced undergraduate course in heat and mass transfer. The prerequisites for this course are undergraduate courses in thermodynamics and fluid mechanics, specifically Thermal-Fluids Engineering I (2.005) and Thermal Fluids Engineering II (2.006) or their equivalents. Topics to be covered include: unsteady heat conduction in one or more dimensions, steady conduction in multidimensional configurations, numerical simulation of conduction; forced convection in laminar and turbulent flows; natural convection in internal and external configurations; heat transfer during condensation and boiling; mass transfer at low rates, evaporation; thermal radiation, black bodies, grey radiation networks, spectral and solar radiation. Problems and examples will emphasize modelling of complex systems drawn from manufacturing, electronics, consumer products, and energy systems.\n\nThe goals of this class are that students will:\n\ndevelop a strong physical and conceptual understanding of heat and mass transfer processes; and\n\nlearn about their application to energy systems and other technologies.\n\nWe plan to teach interactively, rather than by a strict lecture format. The class will include coverage of fundamentals (such as thermal radiation, convection, multidimensional conduction, and mass transfer) as well as thermally driven problems of current importance (such as solar energy, evaporation, and desalination).\n\nClasses\n\nLecturer: Prof. Bora Mikic\n\nLectures: 2 sessions / week, 1.5 hours / session\n\nTextbook: Lienhard and Lienhard.\nA Heat Transfer Textbook\n. 3rd ed., 2008.\n\nExams and Grading\n\nThe grade will be based on:\n\nACTIVITIES\n\nPERCENTAGES\n\nTwo midterm quizzes\n\n40%\n\nHomework and class participation\n\n20%\n\nFinal exam\n\n40%\n\nThe exams will be open book unless otherwise announced. They will cover material from the lectures and the homeworks.\n\nHomework Problems\n\nHomework assignments paralleling the lectures will be distributed. These problems will apply the material covered in lectures and are essential to learning that material. They will involve theory, modelling, and design exercises. It is important that work the problems yourself, even if you have access to old solutions. Some of these problems will also be worked in the recitations.\n\nRecommended Readings\n\nLienhard IV, J. H., and J. H. Lienhard V.\nA Heat Transfer Version Textbook\n. 3rd ed. Lexington, MA: Phlogiston Press, 2008. ISBN: 9780971383531.\n\nMills, A. F.\nBasic Heat and Mass Transfer\n. 2nd ed. Upper Saddle River, NJ: Prentice Hall, 1999. ISBN: 9780130962478.\n\nBaehr, H. D., and K. Stephan.\nHeat and Mass Transfer\n. New York, NY: Springer-Verlag, 1998. ISBN: 9783540636953.\n\nMathWorks, Inc.\nPartial Differential Equation Toolbox User's Guide\n, 1995.\n\nCengel, Y. A.\nHeat Transfer: A Practical Approach\n. 2nd ed. Boston, MA: McGraw-Hill, 2002. ISBN: 9780072458930.",
  "files": [
    {
      "category": "Resource",
      "title": "MATLAB®/PDEToolHints",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-51-intermediate-heat-and-mass-transfer-fall-2008/6fcd30c33e98fa4985be8b6680c08bff_matlab.pdf",
      "content": "MIT OpenCourseWare\nhttp://ocw.mit.edu\n2.51 Intermediate Heat and Mass Transfer\nFall 2008\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.\n\nMATLAB(r)/PDEToolHints\nNote - for best results, print this page. It is meant to be used as a handy reference when getting\nstarted on MATLAB(r). Please ignore any sarcastic comments.\nPreface\nIn this document, we (the instructors) are trying to give you (the students) some simple\ninstructions for getting started with the partial differential-equation (PDE) toolbox in MATLAB(r).\nPDEs and their solutions are applicable to many engineering problems, including heat conduction.\nThere are several \"pieces\" to any PDE problem, and there are a few more to solving them\nnumerically. These are:\n-\ndefining the domain of the problem in space (i.e. the geometry)\n-\ndefining the time-dependence of the problem, or lack thereof if steady state\n-\ndefining the initial and/or boundary conditions\n-\nsetting up the proper PDE for solution\n-\nchoosing the \"coefficients\" or physical properties of the system\n-\ndefining the \"mesh\" or set of sub-domains on which to numerically solve the PDE\nLuckily for you, the PDE toolbox in MATLAB(r) has all of these functions laid out nice and neatly for\nyou. Not only that, but you can also save everything you do to a MATLAB(r) script file so that you\nwon't have to repeat all the steps every time.\nThe good stuff\nGetting started\nTo get started solving a problem, start MATLAB(r) (I choose to do this from the menu bar across the\ntop of the screen). Once there, you can type \"pdetool\" at the prompt. In a few seconds, MATLAB(r)\nwill open up a graphical user-interface (GUI) for you to work in.\nYou will notice that there is an empty grid in front of you. If you want to change any characteristics\nof the grid, such as the min. or max. values or increments, or the number of gridlines or the \"snap\"\ncharacteristics of the drawing tools, go to the Options heading on the toolbox menu. From there,\nthings are pretty self-explanatory for anyone born after 1960.\nGeometry\nTo define the geometry on which you want to solve your PDE, you can simply go to the Draw menu.\nAgain, there are some simple shapes to choose from, and youngsters such as yourselves should\nhave no problem figuring out how to make circles and squares on the grid.\nFor more complex geometries, such as a square with a hole in the middle, you can draw a square\nand a circle positioned as you desire. You'll notice in the Set formula window that MATLAB(r) defines\nthe domain as \"square + circle\" - you can simply change that to \"square - circle\" in order to create\nthe desired hole.\nBoundary conditions\nTo set the conditions on the boundary of your geometry, go to the Boundary menu. Before\nspecifying a boundary condition, you must inform MATLAB(r) which boundary you want by clicking\non it with the mouse. Boundaries turn black when selected, and you can select multiple boundaries\nif they are all to have the same boundary condition.\nThere are basically two types of boundary conditions that we deal with - constant temperature and\nconstant heat flux (including zero heat flux, known as adiabatic). The constant temperature\ncondition is a \"Dirichlet condition\" and the constant heat flux condition is a \"Neumann condition.\" In\nMATLAB(r), the variable \"u\" represents temperature for our purposes. For a Dirichlet condition, you\nshould set the coefficient \"h\" equal to unity and the coefficient \"r\" to whatever constant temperature\n\nyou desire. For a Neumann condition, you should set the coefficient \"q\" to zero and the coefficient\n\"g\" to the negative of the desired heat flux (or zero if adiabatic). The coefficient \"c\" is the thermal\nconductivity of the material and will be specified by you later.\nPDE specification\nTo define the governing equation, now go to PDE on the menu bar. Selecting PDE specification, you\nwill see a variety of choices. For our purposes, an elliptic equation describes describes a steady-\nstate problem while a parabolic equation describes a transient problem. Forget about hyperbolic and\neigenmodes.\nIf the problem is steady-state, you can specify the thermal conductivity of the medium by giving \"c\"\na value; \"a\" should be set to zero, and \"f\" is representative of any internal heat generation. If the\nproblem is transient, the coefficient \"d\" represents the product of the density and specific heat of\nthe medium.\nInitial conditions\nI'm jumping ahead of the GUI menu here, but it makes sense to discuss how to set initial conditions\nfor the problem if it is transient. You'll go to the Solve menu and choose Parameters. Here, you can\nspecify the time domain (duration and increments for solution), and the variable \"u(t0)\" represents\nthe temperature on the entire geometry at time = 0, which is up to you to specify (i.e. the initial\ncondition).\nThe mesh\nThe next step is to define the mesh - basically, divide the geometry into discrete and\ncompuationally manageable chunks, much like you divided the time domain into little bits for\ncomputation. MATLAB(r) does this automatically when you select the Mesh menu, and you can\nfurther Refine the mesh. The mesh should be refined to the point that a regular array of mesh\nelements covers the irregularities in the geometry (\"resolution\") but not to the point that there are\nso many elements that you get marginally better answers for increased solution time (\"point of\ndiminishing returns\"). You can also Jiggle the mesh to knock the triangular elements into better\narrangement.\nWhen you have completed the mesh, you should Export the mesh to MATLAB(r), so that you can\npost-process your results. Unfortunately, the exporting process is one command that MATLAB(r)\ndoes not save to a script file, so you will have to do this manually every time you run a problem.\nThe solution\nTo solve the problem - guess how? You got it! Go to the Solve menu. Wow, you MIT engineers are\npretty sharp. Again, the selection of Parameters allows you to specify characteristics of the time\ndomain for unsteady problems. After MATLAB(r) gives you a pretty plot of the temperature solution,\nyou can also export this solution for post-processing. Again, the export step is not saved in your\nscript file, so you'll have to do it manually every time.\nExtras\nUnder the Plot menu, you can change the type of plot you get on the GUI. For example, when you\ngo to Parameters, a color plot of \"u\" is the default - this is a color plot of the temperature profile. A\ncontour plot of \"u\" gives you isotherms, a plot of \"-c*grad(u)\" gives you heat flux, etc.\nPost-processing\nFor your convenience, Professor Lienhard has created a sample MATLAB(r) script file called bredq.m\nin the MATLAB directory in the course locker. It will make some plots for you, and there are enough\ncomments that you should be able to modify it to suit your individual needs.\nRepeating your steps\nIf you have created a script file of your session in the toolbox, you should also be able to edit that\nfairly easily. Being MIT students, you should be able to figure out which command lines correspond\nto which functions and you can edit the file to match the needs of the problem you're interested in\nsolving. Professor Lienhard has also created a sample problem called aheat.m which is also in\n\"MATLAB(r)\" directory in the course locker. Any script file can be run by simply typing the file name\n\n(without the \".m\" extension) at the prompt in MATLAB(r). You can copy this into your directory and\nmodify it for the problems you'd like to solve.\nPost-mortem\nYou now have pretty much everything you need to start solving heat-conduction problems on\nMATLAB(r). Again, there are sample files in the course locker and the various commands in these are\nfairly self-explanatory. If not, MATLAB(r) itself has a superb \"help\" function built into the program -\nhow do you think we learned to do all this stuff?\nText author: Peter Noymer"
    },
    {
      "category": "Resource",
      "title": "Modeling Heat Flow using MATLAB® and PDEToolbox",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/2-51-intermediate-heat-and-mass-transfer-fall-2008/860a7775d738fd0d4a31a9d35888ad20_heatflow.pdf",
      "content": "MIT OpenCourseWare\nhttp://ocw.mit.edu\n2.51 Intermediate Heat and Mass Transfer\nFall 2008\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.\n\nModeling Heat Flow using MATLAB(r) and PDEToolbox\nCourse 2.51"
    }
  ]
}