{
  "course_name": "Special Problems in Architecture Studies",
  "course_description": "The course investigates e-Learning systems from a business, policy, technical and legal perspective. The issues presented will be tackled by discussion of the design and structure of the various example systems. The connection between information architectures and the physical workplace of the users will also be examined. The course will be comprised of readings, discussions, guest speakers and group design sessions. Laboratory sessions will be focused on implementation tools and opportunities to create one’s own working prototypes. Students will learn to describe information architectures using the Unified Modeling Language (used to specify, design and structure web applications) and XML (to designate meaningful content).",
  "topics": [
    "Fine Arts",
    "Architecture",
    "Environmental Design",
    "Media Studies",
    "Digital Media",
    "Teaching and Education",
    "Educational Technology",
    "Fine Arts",
    "Architecture",
    "Environmental Design",
    "Media Studies",
    "Digital Media",
    "Teaching and Education",
    "Educational Technology"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 1 session / week, 3 hours / session\n\nCourse Overview\n\nThe E-Commerce Architecures seminar will explore the information architectures of virtual spaces. This seminar provides an academic as well as practical approach to architecting e-Commerce systems, with special emphasis on the fast emerging web-based education market.\n\nThe course will investigate e-Learning systems from a business, policy, technical and legal perspective. The issues presented shall be tackled by discussion of the design and structure of the various example systems. The connection between information architectures and the physical workplace of the users will also be examined. There course will be comprised of readings, discussions, guest speakers and group design sessions. Laboratory sessions will be focused on implementation tools and opportunities to create one's own working prototypes. Students will learn to describe information architectures using the Unified Modeling Language (used to specify, design and structure web applications) and XML (to designate meaningful content).\n\nA cross-disciplinary approach will be taken; students with background in architecture, urban planning, law, cognition, business, digital media and computer science are encouraged to participate. No prior technical knowledge is necessary, though a rudimentary understanding of web page creation is helpful. The final project may be a paper or computer implementation.",
  "files": [
    {
      "category": "Resource",
      "title": "Lab One: Introduction to XML",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/f35efdb746f0f4b77f89f93f52b9a6ea_XML.pdf",
      "content": "Electronic Commerce Architecture Project\nLAB ONE: Introduction to XML\nAn XML document has two required parts. The first is the definition of what data should be in the\ndocument. The second is the document itself. An optional third part shows how the data is to be\ndisplayed on the browser (or printed).\nDefining the contents of an XML document is usually done using a notation called DTD. When XML\nwas first invented, that was used. However, there is another way that this can be done. That is XML\nSchemas, a newer standard from the World Wide Web Consortium. When we switch from using DTDs\nto Schemas, the first line of the document changes. The remainder of the document remains the same,\nregardless of which definition method is used.\nThe third part is optional. It defines how the data is to be viewed on the browser. Cascading Style sheets\n(CSS) or XML Style Sheet (XSL). The first is simpler. The second is more recent, complicated and is\nless supported by software. For example, Netscape supports Cascading Style Sheets but does not support\nXML Style Sheets. Internet Explorer Five supports both CSS and XSL. See the Excellent Legal XML\nNote on CSS and XSL Style sheets by Mr. Chambers.\nThe definition and style sheets are prepared by those defining the type of document. For example, e-\nprocurement companies such as Intelisys developed standards for purchase orders and items. Or trade\ngroups such as the Legal XML Group or the IMS project prepared standards for their respective\nindustries (court filing and distance education).\nThen, \"everyone\" will prepare XML documents that adhere to the standard. In many cases, this\npreparation will be done by various automated tools. For example, a person ordering products via an e-\ncommerce business system would not write the XML for the purchase orders with a text editor. Their\npurchasing system would do this for them and forward it to a receiving computer, perhaps running a\ndifferent brand of purchasing software.\nHowever, raw XML is very easy to understand with a little bit of training or by reading tutorials such as\nthis one. I believe that the proverbial \"secretary,\" with a little training, could learn to read and prepare\nraw XML files, given the will to learn.\nUsing DTDs to define a XML Document\nAll XML documents always begin with the following text. Treat it as \"boiler plate.\"\n<?xml version=\"1.0\" standalone=\"yes\"?>\nAn XML document using DTD's can include the definition of the data type directly in the file or\nreference it from an external location.\nby Lawrence Leff\n\nHowever, as standards are put in production use, the data definition will have to be referenced\nseparately. The DTD would be on one web page. Any XML document that confirms to that standard\nwould reference it.\nAn XML document consists of a series of start tags and corresponding end tags. An example is:\n<tableofcontents>\n<item>Item One Information</item>\n<item>Item Two Information</item>\n<item>Item Three Information</item>\n</tableofcontents>\nWe say that the item is inside the tableofcontents tag. We also say that each </item> matches the\ncorresponding <item>. These must be correctly nested. We must close an element inside something\nbefore we close the outer element. In our example, each ITEM must end before the end tag for\ntableofcontents comes.\nThus\n<tableofcontents>\n<item>Item One Information </tableofcontents> More information\nafter the Item One </item>\nwould be illegal.\nEach item might have information about it. For example, each item might have an identifier and a title.\nObviously we can just put the information in the text part of the tag. Say something like this:\n<tableofcontents>\n<item>Identifier=item1,title=\"Pigs\"</item>\n<item>Identifier=item2,title=\"Giraffes\"</item>\n<item>Identifier=item3,title=\"Elephants\"</item>\n</tableofcontents>\nHowever, XML provides two more structured ways of associating such information. This allows the\nprogram reading the received XML to easily pull the information out using a software utility called an\nXML parser. (In later labs, we will learn about two types of XML parsers.)\nWe could create tags for Identifier and title. These would appear between <item> and </item>.\nThis would lead to XML that looks as follows:\n<tableofcontents>\n<item><Identifier>item1</Identifier><title>Pigs</title></item>\n<item><Identifier>item2</Identifier><title>Giraffes</title></item>\n<item><Identifier>item3</Identifier><title>Elephants</title></item>\n</tableofcontents>\nOr we could make Identifier and title attributes which means that the XML would look as follows:\n<tableofcontents>\n<item Identifier='item1' title='Pigs'></item>\n<item Identifier='item2' title='Giraffes'/>\n<item Identifier='item3' title='Elephants'/>\n</tableofcontents>\nNote that the item tags don't have any information in the tag. There is nothing between <item> and\n</item>. We call this an empty element. One can simply have nothing between the tag and its end as we\n\ndid in the item1-Pigs line above. Or one can use a short cut of putting a slash just before the closing right\nbracket as done in the other two lines containing items.\nThere is no technical reason to use subelements instead of attributes or vice versa. Both are equally easy\nfor a program to parse. It is simply a personal aesthetic value judgment.\nAs mentioned earlier, these XML fragments need some boiler plate at the front. In particular, this boiler\nplate needs to point the parser to the DTD describing the information.\nThe general form for an XML is the following: <?xml version=\"1.0\" encoding='UTF-8'?>\n<!DOCTYPE rootname SYSTEM DTD-url>\n<rootname...\ninterior tags\n</rootname>\nwhere rootname must be the name of the opening tag. DTD-url gives the file location of the URL--this\ncan be a full name or the name of a file in the same directory as the XML.\nThis is exemplified by complete XML file for the first example:\n<?xml version=\"1.0\" encoding='UTF-8'?>\n<!DOCTYPE tableofcontents SYSTEM \"lab1.dtd\">\n<tableofcontents>\n<item>Item One Information</item>\n<item>Item Two Information</item>\n<item>Item Three Information</item>\n</tableofcontents>\nThe DTD would contain a definition of the form:\n<!ELEMENT tag-name (stuff-definition)>\nstuff-definition says which elements can be inside the element or if the element should contain text.\nIn the simplest case, stuff-definition contains a list of the elements that can appear between <tag-name>\nand </tag-name>. (Note that the root element also must be defined with an ELEMENT clause.) Thus, if\nwe had the line:\n<!ELEMENT tableofcontents (item)>\nThat would mean that the table of contents could have only one item.\nWhen the definer of the DTD wishes to give the user options, choices, and the ability to elements to\nappear several times, there is some special syntax to be used. (I use the phrase \"user\" to mean the person\nor program preparing the XML document.)\n-\nTo indicate that the user can choose one of several tags, the DTD has a vertical bar (|).\n-\nTo indicate that a tag can occur one or more times, use a plus sign (+) in the DTD.\n-\nWhen a tag an occur as many times as the user wants, or even not occur at all, the DTD has a star\n(*).\n-\nAnd lastly, when a tag can occur zero or one times but not more than once, the DTD has a\nquestion mark (?).\n\nWe can also group several items with parentheses.\nBottom level tags can be declared with #PCDATA, EMPTY or ANY. The first means that the tag\ncontains only text, but no subtags. Any means that the tag can contain any subtags. EMPTY means that\nthe tag contains no subtags, not even a space or carriage return. Thus, we write:\n<!ELEMENT item (#PCDATA)>\nWhen, the XML contains a tag with an attribute of the form\n<tag-name attribute-name='value' />\nWe need to declare each attribute in the DTD as follows:\n<!ATTLIST tag-name value CDATA #IMPLIED>\nThe \"implied\" means that the person preparing the document may omit the attribute. Use #REQUIRED\nin the DTD if you want to ensure that the tag will always have that attribute.\nLaboratory procedure\nYou will find your validation work easiest if one puts your XML into a home page directory that is\nreadable by the world. It will allow you to easily use validators such as those provided by: the Brown\nScholarly Technology Group, World Wide WEB Consortium XML Schema Validation software, and\nthe Microsoft validation page.\nThe first lab procedure will have you set up some simple XML files and use the validation procedures.\nTo do this on the Architecture account, do these steps:\n1. (You can also keep the materials on your Athena account and use UNIX editors and file\nmanipulation.)\n2. Log into your Architecture Account from the School of Architecture and Planning computers.\n3. Using NotePad (under Accessories), create a file INDEX.HTM in the PUBLIC_HTML\ndirectory. This directory will be in your Z drive.\nMake it contain:\n<Title<>\n<>Hello</P>\nEnter the following URL:\nhttp://architecture.mit.edu/~user-id/ where user-id is your architecture server login. This will be\nthe same as your userid.\nFor example, my home page is:\nhttp://architecture.mit.edu/leff\nsince my Athena user id is leff.\n\nIn general, if you create a file called xxxx.html in the public_html subdirectory of your account,\nyou should be able to access it as\nhttp://architecture.mit.edu/~user-id/xxxx.html\n4.\nNow, we practice with DTDs Create a file called lab1.xml in your public_html directory\ncontaining the following:\n<?xml version=\"1.0\" encoding='UTF-8'?>\n<!DOCTYPE tableofcontents SYSTEM \"lab1.dtd\">\n<tableofcontents>\n<item>Item One Information</item>\n<item>Item Two Information</item>\n<item>Item Three Information</item>\n</tableofcontents>\n5.\nCreate a file called lab1.dtd containing the following:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!ELEMENT tableofcontents (item*)>\n<!ELEMENT item (#PCDATA)>\n6. Start up Explorer and go to the following URL (Bookmark it as you will be using it often.)\nhttp://www.stg.brown.edu/service/xmlvalid/\n7. In the URI section of the form, enter the URL of the lab file that you just created:\nhttp://architecture.mit.edu/~user-id/lab1.xml\nClick on Validate.\n8. You should get the message \"Document validates OK\"\nNow change the lab1.xml file so the third \"item\" and its end tag have initial caps. That line\nshould now look like:\n<Item>Item Three Information</Item>\n9. Click on the back button in the browser and click on Validate again.\nObserve what happens.\nRestore \"item\" to its proper capitalization.\n10. Now, we will experiment with subitems.\nChange lab1.xml so it looks as follows:\n<?xml version=\"1.0\" encoding='UTF-8'?>\n<!DOCTYPE tableofcontents SYSTEM \"lab1.dtd\">\n<tableofcontents>\n<item><Identifier>item1</Identifier><title>Pigs</title></item>\n<item><Identifier>item2</Identifier><title>Giraffes</title></item>\n<item><Identifier>item3</Identifier><title>Elephants</title></item>\n</tableofcontents>\nand change lab1.dtd so it looks like\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!ELEMENT tableofcontents (item*)>\n<!ELEMENT item (Identifier,title)>\n<!ELEMENT Identifier (#PCDATA)>\n<!ELEMENT title (#PCDATA)>\n\n11. Go again to http://www.stg.brown.edu/service/xmlvalid/\n12. In the URI section of the form, you still have the URL of the lab file that you just created:\nhttp://architecture.mit.edu/~user-id/lab1.xml\nClick on Validate.\n13. You should get the message \"Document validates OK\"\n14. Now, change the second item line so it has two title's about giraffe's. Let it look like this:\n<item><Identifier>item2</Identifier><title>Giraffes</title><title>More About\nGiraffe's</title></item>\n15. Validate your model again. What happens?\nTry fixing your DTD so an item can have one or more title's. Check to ensure that the DTD\nenforces the rule that each item have at least one title.\n16. Edit lab1.xml so it reads as follows:\n<?xml version=\"1.0\" encoding='UTF-8'?>\n<!DOCTYPE tableofcontents SYSTEM \"lab1.dtd\">\n<tableofcontents>\n<item Identifier='item1' title='Pigs'></item>\n<item Identifier='item2' title='Giraffes'/>\n<item Identifier='item3' title='Elephants'/>\n</tableofcontents>\n17. Edit the lab1 DTD file so it looks below:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!ELEMENT tableofcontents (item*)>\n<!ELEMENT item EMPTY>\n<!ATTLIST item Identifier CDATA #IMPLIED>\n<!ATTLIST item title CDATA #IMPLIED>\n18. Validate your file. You should get a warning about more than one attlist for the item but no\nerrors. You can ignore this warning.\n19. Change the \"title\" attribute name so it is incorrect. For example, make it look as follows:\n<item Identifier='item2' Title='Giraffes'/>\n20. Revalidate your xml--observe the two errors.\n21. Now, we will prepare some XML according to the IMS Global Learning Consortium Metadata\nSpecification. First, we will look at the DTD and sample file from the IMS Project Home page.\nOpen up the following URL in your browser:\nhttp://www.imsproject.org\n22. Select Specifications from the menu just below their banner title. Then select Metadata.\n23. Now create a file simpleims.xml in your home page directory that looks as follows:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE record SYSTEM \"http://www.imsproject.org/xml/IMS_MDCORv1p1.dtd\">\n<record>\n<general>\n<title>\n<langstring lang=\"en\">Introduction to XML</langstring>\n</title>\n<catalogentry>\n<catalogue>http:</catalogue>\n<entry><langstring lang=\"en\">web.mit.edu/leff/www/lab1.html</langstring></entry>\n</catalogentry>\n</general>\n<lifecycle>\n\n<contribute>\n<role>\n<langstring lang=\"en\">Author</langstring>\n</role>\n<centity><vcard>BEGIN:vCardFN:Laurence L. LeffN:LeffEND:vCard</vcard></centity>\n</contribute>\n</lifecycle>\n</record>\n24. Validate it with the Brown University validator\n25. Now, read the DTD at and then edit the XML to add Ariadne Goal and Dan Greenwood as\nContributors.\n26. Revalidate your XML:\nhttp://www.imsproject.org/xml/IMS_MDCORv1p1.dtd\n27. Reading the DTD for the Rights tag, add XML that shows this lab is copyright MIT, year 2000,\nbut there is no cost for the item. You should be able to do this WITHOUT looking at the example\nin ims.org\n28. Revalidate your XML.\nBibliography\nGraham, Ian S., and Liam Quin, XML Specification Guide. ISBN 0471327530. John Wiley & Sons,\n1999.\nHomer, Alex. \"XML.\" IE5 Programmer's Reference. ISBN 1861001576. Wrox Press, 1999.\nLaurence Leff, \"Legal XML. Unofficial Note: A Tutorial on XML in the Court Filing Context.\"\n(Number UN_100XX_2000__02_28.htm)\nhttp://www.wiu.edu/users/mflll/UN_100XX_2000__02_28.htm. In Submission.\nwww.xml.com\nExtensible Markup Language (XML) 1.0. www.w3.org/TR/REC-xml. W3C Recommendation."
    },
    {
      "category": "Resource",
      "title": "Lab Three: Writing Java Applets and GUI Programs that Generate XML",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/81fb9bd75f1f5c50f8ed0d298b6cfd42_Java.pdf",
      "content": "Electronic Commerce Architecture\nProject\nLAB Three: Writing Java Applets and\nGUI programs that Generate That\nGenerate XML\nIn this lab, one creates a JAVA applet or GUI program with buttons and text fields. The\nuser will be able to enter data and click buttons to create various parts of an XML\ndocument. You will learn how to display buttons and text fields in a program. You will\nlearn how to make your program execute something when those buttons are pressed.\nLastly, I explain the use of the Java \"XML Serializer\" classes which automatically write\nout the XML in an neat indented format, ready to be validated or sent to some other\napplication.\nThese programs will use the JFC Swing library, which is the standard Graphical User\nInterface development environment from SUN, the originator of Java. We will also use\nthe Xerces XML development library form IBM. This is a superset of the the Apache\nXML library. Apache is the most popular world web server software, beating out\nWindows NT and Netscape Server--it is also free.\nWe have some one-time activities to set up your account. This will involve downloading\nthe Java Xerces parser material from the IBM directory and setting up a home page to\nwhich your program can write out XML. The S2wing Software is already in a MIT\nlocker. The one-time activities include setting up the \"add\" commands to bring itin.\nThen, I will discuss the program and its template so that you can extend it to other types\nof XML.\nOne-Time Operations\nDownload the IBM Xerces XML Java parser\n1. Log into your athena account\n2. Startup netscape and go to http://alphaworks.ibm.com/tech/xml4j\n3. Click download\n4. Select XML4J-bin.3.0.1.tar.gz which is the first file to download.\n5. Click \"DownloadNow\"\n6. You will see a license agreement. Enter your name, email address, and company.\nSelect I Accept This License Agreement\n7. Select Download File\nby Lawrence Leff\n\n8. Enter /tmp/xml.tar.gz in the Selection field and select OK The computer should\nstart downloading.\n9. In an xterm window, type cd /tmp\n10. type add sipb\n11. type gunzip xml.tar.gz\n12. type tar -xvf xml.tar. The machine will extract many files to a directory. It\nwill display a line as each file is extracted.\n13. type cd XML4J_3_0_1\n14. type cp *.jar ~\n15. You may want to save the documentation and sample xml file directories. They\naren't necessary for our work, however. So only do this if you have room in your\naccount. If so type: cp -r docs ~\nand\ncp -r data ~\n16. Create the file adds in your home directory containing:\n17. add -f java_v1.2.2\n18. add swing_v1.1\nEach time you start work on this type of the program, type source adds to bring\nin the latest version of Java and swing, the GUI development environment.\n(Specifically, do this once for each xterm you start up.)\n19. Create the file c in your home directory containing:\n20. #\n21. setenv SWING_HOME /mit/swing_v1.1/swing-1.1beta2\n22. setenv JAVA_DIR `attach -p java_v1.1.6`\n23. setenv JAVA_HOME ${JAVA_DIR}/distrib/${ATHENA_SYS}\n24. setenv CLASSPATH\n\".:xercesSamples.jar:xerces.jar:${SWING_HOME}/swingall.jar:\n25.\n${SWING_HOME}/multi.jar:${JAVA_HOME}/lib/classes.zip\"\n26. set path=(${JAVA_DIR}/arch/${ATHENA_SYS}/bin $path)\n27.\n28. javac $1.java\nNote, the two lines beginning \"CLASSPATH\" should be one line with no space\nbetween colon and ${SWING_HOME}.\nType chmod 755 c\nc will be used to compile your Java Swing programs\n29. Create the file r in your home directory containing:\n30. #\n31. setenv SWING_HOME /mit/swing_v1.1/swing-1.1beta2\n\n32. setenv JAVA_DIR `attach -p java_v1.2.2`\n33. setenv JAVA_HOME ${JAVA_DIR}/distrib/${ATHENA_SYS}\n34. setenv CLASSPATH\n.:xercesSamples.jar:xerces.jar:${SWING_HOME}/swingall.jar:\n35.\n${SWING_HOME}/multi.jar:${JAVA_HOME}/lib/classes.zip\n36. java $1\nNote, the two lines beginning \"CLASSPATH\" should be one line with no space\nbetween colon and ${SWING_HOME}.\nType chmod 755 r\nThe file r will be used to run your Java Swing programs.\nRunning a simple Java GUI program\nOur first Java program creates a table of contents according the following lab1.dtd file.\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!ELEMENT tableofcontents (item*)>\n<!ELEMENT item (Identifier,title)>\n<!ELEMENT Identifier (#PCDATA)>\n<!ELEMENT title (#PCDATA)>\nTo run it, be sure to do the following commands:\n1. Type source adds. You should do this once, whenever you log in or startup a\nnew xterm.\n2. Down load the file N.java:\n3. type c N (to compile the program)\n4. type r N (to run the program)\nSeveral warnings will be written. These just tell you which version of the libraries\nused. You should ignore them.\n5. Click the button labeled Create Tableofcontents\n6. Enter information for the Identifier and title sub tags of your first item Click the\nbutton labeled add item.\n7. Enter information for the Identifier and title sub tags of your second item Click\nthe button labeled add item.\n8. Repeat for any additional items, if desired.\n9. Click the button write it out and dismiss the N dialogue.\n10. Examine the course.xml file in the www directory. It should look something like\nthis:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE tableofcontents PUBLIC \"lab1.dtd\"\n\"lab1.dtd\">\n<tableofcontents>\n<item>\n\n<Identifier>w</Identifier>\n<Title>w</Title>\n</item>\n</tableofcontents>\n11. Validate your XML file as follows.\nTemplate for a GUI Program that\ngenerates XML\nThe N.java program can be viewed as an instance of a general template. This template\ncan be used whenever you have programs that allow the user to enter information to be\nput into an XML file. Most of the buttons will add information from the text boxes to part\nof the XML file being formed. It will either be a subtag for the root or main tag. Or it will\nbe a deeper level tag that was created earlier from another button.\n1: import com.sun.java.swing.*;\n2: import java.awt.*;\n3: import java.awt.event.*;\n4: import org.apache.xerces.dom.*;\n5: import org.apache.xml.serialize.*;\n6: import org.w3c.dom.*;\n7: import org.xml.sax.SAXException;\n8: import java.io.*;\n9: import java.lang.String;\n10: public class N {\n11: private FileWriter out;\n12: private XMLSerializer X;\n13: private Element root;\n14: private DocumentImpl d;\n15: public Component createComponents() {\n16: // for each button\n17:\nJButton internal button name = new JButton(\"button title\");\n18:\nbutton.addActionListener(new ActionListener() {\n19:\npublic void actionPerformed(ActionEvent e) {\n20:\ntry {\n21:\n// put logic for button here\n22:\n// there are templates below that you will need\n23:\n}\n24:\n}); // end of button declaration\n25: //for each edit box or text field\n26:\nfinal JTextField text-nameField = new JTextField(number of\ncharacters) ;\n27:\nJLabel text nameLabel = new JLabel (\"caption for text field\n\");\n28:\nJPanel pane = new JPanel();\n// Create a panel\n\n29:\npane.setBorder(BorderFactory.createEmptyBorder(\n// Grey background to border\n30:\n30, //top\n31:\n30, //left\n32:\n10, //bottom\n33:\n30) //right\n34:\n);\n35:\npane.setLayout(new GridLayout(0, 1));\n36:// one line for each button\n37:\npane.add(internal button name);\n38:\npane.add(text-nameLabel);\n39:\npane.add(text-nameField);\n40:\nreturn pane;\n41:\n}\n42:\npublic static void main(String[] args) {\n43:\ntry {\n44:\nUIManager.setLookAndFeel(\n// Be certain the\n'look and feel' is supported\n45:\nUIManager.getCrossPlatformLookAndFeelClassName());\n46:\n} catch (Exception e) { }\n47:\n// Create the top-\nlevel container and add contents to it.\n48:\nJFrame frame = new JFrame(\"title-bar for your application\");\n49:\nN app = new N();\n50:\nComponent contents = app.createComponents();\n51:\nframe.getContentPane().add(contents, BorderLayout.CENTER);\nframe, and show it.\n// Finish setting up the\n52:\nframe.addWindowListener(new WindowAdapter() {\n53:\npublic void windowClosing(WindowEvent e) {\n54:\nSystem.exit(0);\n55:\n}\n56:\n});\n57:\nframe.pack();\n58:\nframe.setVisible(true);\n59:\n}\n60: }\nLines one through sixteen are boiler plate. Inside the createComponents() function, one\ncreates each of the buttons, text fields and lables that one wishes to use. To create a\nbutton, one writes JButton internal button name = new JButton(\"button\ntitle\"); The internal button name is a name by which the button will be referred in the\nprogram. The button title is the name that the user will see on the button. Then, the\ncommand, pane.add(internal button name); (Line 37) physically puts the button on\nthe screen.\nLines 21 to 22 show you where to put the Java logic for your button. A \"listener\" means\nthat when you run the program, Java will wait for something to happen. In this case, it\nwaits for the button to be pressed. Then, the indicated Java is executed.\n\nLines 26 show how one creates a place in which one can enter text. In our situation, this\ninformation will be read later and put into the XML:\nfinal JTextField text-nameField = new JTextField(number of characters)\n; In the button handling logic, the Java will read the information that the user typed into\nthe place by writing text-nameField.getText();. And similarly to buttons, they are\nphysically displayed on the window by writing: pane.add(text-nameField);\nIf one simply added a text field on the screen, the user would just see a white rectangle.\nThey would have no idea what to type there, particularly, if there were many such\nrectangles on the screen. Thus, we add a lable just before each text box: JLabel text\nnameLabel = new JLabel (\"caption for text field \"); and pane.add(text-\nnameLabel);\nLines 28 to 35 create a pane which is a Java object which contains components such as\nedit boxes. In this simple example, we use GridLayout (0,1). That means that all the\ncomponents added will be in a vertical column. There are many other \"layout managers\"\nin Java Swing which allow one to have much more precise control of the look and\narrangement of one's program. However, extensive discussions are beyond the scope of\nthis course.\nOne button will have to start the creation of the XML file. The user will have to click this\nonce at start. It will contain the following:\ntry {\nout = new FileWriter(\"www/filename.xml\");\nout.flush();\nd = new DocumentImpl();\nroot = d.createElement(\"name of root tag\");\nd.insertBefore(root,null);\nOutputFormat o=new OutputFormat(d);\no.setIndent(5);\no.setIndenting(true);\no.setDoctype(\"lab1.dtd\",\"lab1.dtd\");\no.setDoctype(\"name of dtd file\",\"name of dtd file\");\nX = new XMLSerializer(o);\nX.setOutputCharStream(out);\n} catch (IOException e1){};\n}\nAnother button will put to the disk the XML file. The user will click this when they have\ncompleted the operations to create the XML file. It will contain the following text as it\nappears below.\ntry {\nX.serialize(d);\nout.flush();\n} catch (IOException e2){};\n\nAll the other buttons will add information from one or more text fields to the edit boxes.\nYou could also perform computations in them, such as totaling quantities.\nFor each XML tag that you wish to create, write:\nElement tag-name;\ntag-name = d.createElement(\"tag-name\");\nIf the tag-name is to contain text from field-name, write:\nString tag-nameString = field-nameField.getText();\nTextImpl tag-nameText = (TextImpl)d.createTextNode\n(tag-nameString);\ntag-name.appendChild(tag-nameText);\nIf tag-name is to be put as a child of other-tag, one writes:\nother-tag.appendChild(tag-name);\nIf tag-name goes just under the root, then one writes: root.appendChild(tag-name);\nThis is illustrated in the code for button1 in N.java (reproduced below). This creates an\nitem field. Then it creates two text fields for Identifier and title. The information for\neach of these is read from the text fields on the screen. The second and third from last\nlines show the Identifier tag and the title tag being added to the item tag we created in\nline two.\nThe last line adds the item we just created at the end of the list attached to the\ntableofcontents, our root element.\nElement item;\nitem = d.createElement(\"item\");\nElement Identifier;\nIdentifier = d.createElement(\"Identifier\");\nString IdentifierString = IdentifierField.getText();\nTextImpl IdentifierText = (TextImpl)d.createTextNode\n(IdentifierString);\nIdentifier.appendChild(IdentifierText);\nElement title;\ntitle = d.createElement(\"title\");\nString titleString = TitleField.getText();\nTextImpl titleText = (TextImpl)d.createTextNode\n(titleString);\ntitle.appendChild(titleText);\nitem.appendChild(Identifier);\nitem.appendChild(title);\nroot.appendChild(item);\nValidating your XML\n\nThe N.java program you worked with will create a xml file in your www directory. You\nmight wish to validate it. You can do this by downloading it to the public_html directory\nin your School of Architecture server account and following the instructions in Lab One.\nThe following procedure will work on the athena machines. You might find it more\nconvenient.\nSetting up your Home Page\nYou will find your validation work easiest if one puts your XML into a home page\ndirectory that is readable by the world. It will allow you to easily use validators such as\nthose provided by: the Brown Scholarly Technology Group, World Wide WEB\nConsortium XML Schema Validation software, and the Microsoft validation page.\nTo do this on your Athena account, do these steps:\n1. Log into your athena UNIX account\nIf you are in the School of Architecture and Planning Computerized classroom,\nthen use Secure CRT to log in. Enter Start and Programs, Secure CRT 3.0 and\nSecure CRT 3.0. On the quick connect screen, enter athena.dialup.mit.edu in\nthe host name field.\n2. Type\nmkdir ~/www\n3. Type\nfs sa ~/www system:anyuser read\n4. Type\ncd www\n5. create an html file called home.html and put some info there like <P>Hello, I\nam your name.\n6. Type chmod 755 home.html.\nMIT provides a good introduction to this procedure and pointers to resources on writing\nHTML.\nNote: You only have to do the above four steps once! You will now have an established\nhome page directory for the duration of your association with MIT.\nYou will need to refer to your home page as a URL from a web browser. Bring up\nNetscape or Internet Explorer. (The latter will be best in the School of Architecture\nComputerized Classroom)\nEnter the following URL:\nhttp://web.mit.edu/afs/athena.mit.edu/user/n1/n2/user-id/www/home.html\nwhere user-id is your Athena user id, n1 is the first letter of your Athena user id, n2 is the\nsecond letter of your Athena user id. For example, my home page is:\nhttp://web.mit.edu/afs/athena.mit.edu/user/l/e/leff/www/index.html\nsince my Athena user id is leff.\n\nAfter a few days, you won't have to type such a tedious URL. You should be able to type\nhttp://web.mit.edu/user-id/www/home.html to get to your home page.\nIn general, if you create a file called xxxx.html in the www subdirectory of your account,\nyou should be able to access it as\nhttp://web.mit.edu/afs/athena.mit.edu/user/n1/n2/user-id/www/xxxx.html\nor\nhttp://web.mit.edu/user-id/www/xxxx.html to get to your home page.\nValidation\n1. Start up Netscape and go to the following URL (Bookmark it as you will be using\nit often.)\nhttp://www.stg.brown.edu/service/xmlvalid/\n2. In the URI section of the form, enter the URL of the lab file that you just created:\nhttp://web.mit.edu/afs/athena.mit.edu/user/n1/n2/user-id/www/lab1.xml\nBibliography\nWalrath, Kathy, and Mary Campione. The JFC Swing Tutorial: A Guide to Constructing\nGUIs. ISBN 0201433214. Addison Wesley, 1999.\nXerces XML Parser Documentation. http://alphaworks.ibm.com/tech/xml4j"
    },
    {
      "category": "Resource",
      "title": "Lab Two: Introduction to UML",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/895991ce4cf8d6dfeec49a5cc7a4a7ed_UML3.pdf",
      "content": "Electronic Commerce Architecture Project\nLAB TWO: Introduction to UML\nIntroduction to UML.\nUML stands for Unified Modeling Language. It is a visual technique for diagramming the\nrequirements, actions and physical distribution of software systems. (It might also be\nused for diagramming manual flows such as paper handling in a court or hardware.)\nIn the mid 1990's, there were several popular object-oriented diagramming methods.\nFortunately, each of their proponents agreed to develop a new system and standard that\nhas the best qualities of all of them. I list below, the UML books that would be most\nhelpful to learn about it.\nThe following are the important types of diagrams:\nUse Cases\nThese represent the types of people (roles) that will be using the software being\ndeveloped or documented. It also indicates what they will be doing. The labs describe\nmore material.\nAssociation Diagrams\nThese represent the data or objects in the system and their relationships. For example, a\nschool reigstrar system would show courses and students, and the fact that the software\ncan determine from a student, which courses they are taken. And, given a course, it can\ngenerate a list of students. It would show that each course could have several students and\neach student might be taking several courses.\nThese serve the same purpose as entity relationship diagrams, a technique developed by\nthe database community, which you can see inside of Microsoft Access. A simple\nassociation diagram showing the relationship between course and student follows.\nby Lawrence Leff\n\nCollaboration and Sequence Diagrams\nThese diagrams show the time dependent behavior of a system. Unlike association\ndiagrams, they are intended for showing specific examples. When, we describe an\noperation of a sytem, one might give a verbal description of a situation: Mr. Smith\nregistered for course CS310 and MGT295 and Ms. Sandoz registered for CS310. One\nmight draw a collaboration diagram showing the connections between the courses and\npeople to illustrate the verbal description of the example below.\nCollaboration diagrams and sequence diagrams are used to show time-dependent changes\nas the software is used. In a University environment, it might show that the payment\nactivities associated with registration would occur before a student is associated, i.e.,\nregistered, for a course. Collaboration diagrams and sequence diagrams show the same\nsequencing activities. However, the two forms of diagrams are visually very different.\nThe information shown is the same--Rational Rose has a feature to automatically convert\na collaboration diagram to a sequence diagram and vice versa.\n\nComponent and Deployment Diagrams\nBoth of these diagrams are specific to the collection of the basic parts of programs (a\nsingle file or program) and how they are grouped in modules by linkage editing as well as\nhow the different programs would run on different servers and computers. Needless, to\nsay, these are used by those concerned with the implementation of the software, i.e.,\ncomputer programmers and software engineers. Component diagrams represent the\ncollection of the individual programs such as pieces of Java or C into object modules and\nexecutables. Deployment diagrams show the computers that compose a distributed\nsystem, which executables run on which communication, and the communication\npathways between them.\nLaboratory Procedure\nThe first part of the lab shows you how to draw UML use cases with the Adobe\nPageMaker in the School of Architecture and Planning Computerized Classroom. The\nsecond part of the lab shows you how to use GDPRO to do UML use cases. You can\ndownload this to your personal computer from GDPRO.com. .LP we also hope to obtain\nRational Software's UML product, Rational ROSE. At the time of writing this lab,\nRational has failed to send it to us.\nMs. Goel set up some figures for the standard forms that appear in a UML Use case\ndiagram. We will copy them first; then use them to create an example of diagrams that\nmight appear in situation.\nThe oval represents a \"use case.\" This is simply a scenario of activities for a common\npurpose. An example would be the sequence of screens to add or drop a course.\nThe stick figures represent actors which are people in some role. For example, a person\nmight be in the role of student when they add a course. Note, that occasionally, the same\nhuman might serve two different roles. A professor in one department might happen to\ntake a course elsewhere at the University. We would consider that person two different\nactors, depending upon their role.\nWhen a user activates a scenario, we show with an arrow with an open head.\nOccasionally, one might have non-human act's that have inputs and/or outputs from your\nsystem. These represent software or hardware not part of the system you are designing.\nFor example, in designing the software in a burglar alarm control box, the telephone\nsystem by which it communicates and the motion sensors would be non-human actors. If\none is designing a payroll system, the Internal Revenue Service computer to which one\nsends W-4's would be a non-human actor. All non-human actors are drawn as rectangles.\nOften, several activities or scenarios have some common sequence. For example, whether\na student is adding or dropping a course, they still enter their login and password. To\n\nillustrate a subsequence of activities, one draws an open-head arrow between the oval\nrepresenting one use case and the one representing the common subsequence. This is\ncalled an extends relationship.\nWe can show generalizations between categories of actors with the open arrow. Graduate\nstudents are a type of student. Managers and programmers are both types of employee,\netc. Of course a subcategory can implement all the scenarios that the general ones can.\nFor example, if all employees in the firm can check their paycheck status, then so can\nmanagers and programmers.\nOne draws an open arrow from the more specific type of actor to the more general\ncategory. Thus, in the example below, we draw an open-headed arrow from student to\ngraduate student.\nProcedure to use Adobe PageMaker to do UML use cases\n1. Log into the one of the computers in the School of Architecture and Planning\ncomputerized classroom\n2. Select Network Neighborhood\n3. Select Archfile and Archfile01\n4. Select a_goel\n5. Select public_html and Summer\n6. Drag the UML-IMAGES folder to your desktop.\n7. (You can now close all the directories that were just opened.)\n8. Open the UML-IMAGES directory. Copy the Test item to the name LABTWO.\n(This will give you a copy of the images to work with when you make your\ndiagram, leaving the original set to copy again for a homework assignment.)\n9. Open LabTWO, the image will reopen.\n(You will now see the figures of which a standard UML use case diagram is\ncomposed.)\n10. We will make a use case diagram for the following scenario:\no Any student performs the following actions,\n1. registers for classes (adds)\n2. drops classes\n3. Changes to pass fail status\nAll of these use cases require a validation process (logging in)\no Professors assign grades\no Department Chairperson's\n1. create classes\n2. assign professor to class\nThere is one more wrinkle. Graduate students are a type of student. They register for\nthesis. This involves (extends) the process of registering or adding for class. To think\n\nabout this in the right way, a graduate student registering for thesis has to log in and enter\na class number, etc. just like any class. However, they have additional actions like\nchoosing an advisor and typing in the name of thesis, abstract, and expected lab materials\nbudget.\nYour image should look something like below. I suspect that your work will be neater\nthan mine.\n\nProcedure to Download and Install GDPRO\n1. Go to www.gdpro.com on your browser.\n2. Select evaluate\n3. Enter the information on your form and click on Submit Completed Agreement\n4. Select \"download via ftp\" under GDPro 4.1 for Windows (43MB)\n5. Select \"Save this program to disk\" and choose allocation to put the download\ncompressed executable. (This will be a temporary file that will be expanded later.)\n6. Execute that file. You can do that by going to MS-DOS. Changing to the directory\nin the previous step and typing GDPRO_~1.exe.\n7. Click Next and OK\n8. Click Yes on the Software License Agreement.\n9. Enter your name and company into the \"User Information\" dialogue. Select Next.\n10. Be sure that GDPRO Client is checked. The other two will not be checked. Click\non Next\n11. Click on Next on the Choose Destination Path. (It is possible; you may have to\nchange directories if you don't have room on your C: drive.)\n12. Click on Next when asked about accessing across a network.\n13. Click on Next on the Select Program Folders dialogue.\n14. Click on Next on the Start Copying Files dialogue. The system should start the\ninstallation process.\n15. Click on OK twice.\n16. You will be asked about restarting your computer. To be absolutely safe, go ahead\nand restart. I think it will work if you don't restart.\nProcedure to Use GDPRO\n1. GDPRO should be available as GDPRO on the Start and Programs menu. Select\nit.\n2. Select GDPRO on the sub menu.\n3. You will be told how many days you have left on the evaluation copy. Click on\nOK.\n4. Leave the user name as Guest on the menu with the big GD PRO 4.1 on a picture.\nClick on OK.\n5. Click on Close on the Next Tip dialogue box.\n6. Click on File and New System\n7. Enter a system name and click OK. All your diagrams about a particular software\nsystem are kept in one GDPRO \"system.\"\n8. Enter a diagram Name and be sure that the Diagram Type says Use Case\nDiagram. Click OK.\n9. The middle column should contain some diagrammatic figures that would appear\non use case diagrams. Click on the Actor button. Drag over four actors.\n10. Click on the leftward pointing arrow (the selection tool). To change the label on\nan actor, right click on it. Select Properties. Enter the new name and press the\nENTER key.\n\n11. Label your actors as follows:\no Professor\no Graduate Student\no Student\no Department Chairperson\n12. Find the button with two actors, an arrow, and the label \"AL\"\nClick on it.\n13. Connect from Graduate Student to Student. An open-ended arrow will be created\nbetween these two actors. (This represents that Student is a generalization of\nGraduate Student.)\n14. Click on the Use Case button at the top of the middle bar. Drag over seven Use\ncase ovals.\n15. Click on the arrow (selection tool)\n16. To change the label on a use case, right click on it, select Properties, change the\n\"name\" field, and press the OK button.\nChange your use case labels as follows:\n1. Register for Thesis\n2. Register for a Class (Add)\n3. Delete a Course (Drop)\n4. Validation (Login)\n5. Change to Pass Fail\n6. Add Course\n7. Assign Grade\n17. Click on the button that has two blue ovals, an open-headed arrow and UL.\n18. Connect \"Register for Thesis\" to \"Register for a class\" (This shows that register\nfor thesis uses the steps for registering for a class in its scenario.) In other words,\nwhen one registers for thesis, one also does the same steps that one would when\nregistering for a class. However, registering for a thesis would include some\nadditional actions.\n19. Also, connect \"Change to Pass Fail\" to \"Validation(Login),\n\"Delete a Course (Drop)\" to \"Validation(Login),\n\"Register for a Class (Add)\" to \"Validation (Login)\n20. Now click on the button with an actor, a blue oval, and a \"CL\" label.\n21. Use it to connect:\n0. \"Student\" to \"Register for a Class (Add)\"\n1. \"Student\" to \"Delete a Course (Drop)\"\n2. \"Student\" to \"Change to Pass Fail\"\n3. \"Graduate Student\" to \"Register for Thesis\"\n4. \"Professor\" to \"Assign Grade\"\n5. \"Department Chairperson\" to \"Add Course\"\n22. To save in JPEG format (e.g., to put on your web page), click on File and Export.\nBe sure that JPEG is chosen and click on OK. Select a directory and file for your\nJPEG image.\n23. Click on File and Exit to save.\n\nYour picture should look as follows:\nAnother Example\nWe design a set of use cases for a commercial wholesaler supporting electronic\ncommerce with its customers. A purchaser (customer) will make orders. Making an order\nwill involve checking the credit card of the customer and it communicates with the non-\nhuman actor (the credit card company, or more precisely its computer systems). From\ntime to time, customers will check the shipping status.\nThe shipping clerk is responsible for preparing the outgoing order. This involves a\ncommunication with UPS to register the outgoing item. UPS is thus shown\ncommunicating with \"Ship Item to Customer\" as well as \"Check Shipping Status.\"\nThe manager adds new parts that the firm decides to sell.\n\nThe shipping clerk is also responsible for receiving incoming shipments. We also show\nthat the buyer is responsible for ordering new quantities of parts when they run out.\n\nThe association diagram represents the data and information that has to be stored. Each\ncustomer will have one or more orders. Each order has one or more lines. (A line in order\nrepresents the fact that a customer ordered a particular quantity of a particular part.) Each\nline is connected to one or more parts.\nReferences\n1. Booch, Grady, James Rumbaugh, and Ivar Jacobson. The Unified Modeling\nLanguage User Guide. Addison-Wesley, 1999.\n2. Pooley, R. J., and Perdita Stevens. Using UML : software engineering with\nobjects and components. Addison-Wesley, 1999\n3. Quatrani, Terry, and Grady Booch. \"Visual Modeling with Rational Rose 2000\nand UML.\" The Addison-Wesley Object Technology Series. Addison Wesley,\n1999."
    },
    {
      "category": "Resource",
      "title": "UML and Use Cases for Object-oriented Analysis",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/d479df419f4158e7aa0c19810a6e0166_UML1.pdf",
      "content": "MIT\nE-Commerce Architecture Project\nUML and Use Cases\nfor\nObject-oriented\nAnalysis\nby Daniel Greenwood\n\nTopics of Discussion\nOOA\nUML\nUse Cases & Business\nTransaction Scenarios\nUse Case Models\n\nObject-oriented Analysis\n\"Object-oriented Analysis (OOA) is a\nmethod of analysis that examines\nrequirements from the perspective\nof the classes and objects found in\nthe vocabulary of the problem\ndomain\"\n- Grady Booch\n\nObject-oriented Analysis\nAnalysis Model provides the\nfoundation for the Design Model\nFocus on Hi-level Business Objects\nConcentrate on activities of the User\nof the business process\nAvoid detailed design tasks\n\nRequirements Analysis\nWho are the Users and the Customers?\nWhy do they want this system?\nDefine what the business needs to\naccomplish\nDefine Constraints on how a solution is\nmanifested but not on how system it is\ndesigned\nWhat is accomplished conceptually\nWhat is required to interface to the system\nWhat is required to operate it\n\nEnterprise-wide Vs Project-Specific\nEnterprise-wide requirements provide Re-Use\nRequirements common to a project can be\nobtained by referring to enterprise-wide\nrequirements\nProject-specific requirements should be\nevaluated for re-factoring into enterprise-wide\nrequirements\n\nRequirements\nFunctional\nNon-Functional\nRequirement\nRequirement\nInterface Constraint\nOperational Constraint\n\nThe Big Process Picture\nRequirements Analysis process fits into other\nprocesses within Integrated Requirements\nDeliverables output from one process become\ninputs to other processes\nIntegrated Requirements provide the glue\nbetween the business side and the technology\nside\n\nEssential Elements for\nRequirements Analysis\nClarity\nEfficiency\nPriority\nQuality\nTraceability\nCompleteness\nAccuracy\n\nGuidelines for\nRequirements Analysis\nProblem Vs Solution\nEvolution\nAbstraction\nIteration\nModeling\nRe-Use\n\nUML\nUnified Modeling Language\nSuccessor to methods of Booch,\nRumbaugh & Jacobson\nA modeling language and not a\nmethod\n\nThe Unified Modeling Language (UML) is the\nindustry-standard language for specifying,\nvisualizing, constructing, and documenting the\nartifacts of software systems. It simplifies the\ncomplex process of software design, making a\n\"blueprint\" for construction. The UML definition\nwas led by Rational Software's industry-leading\nmethodologists: Grady Booch, Ivar Jacobson,\nand Jim Rumbaugh.\n\nUse Cases\nA typical interaction a user has with a\nsystem to achieve a goal\nAn essential tool in Requirements\nCapturing\nProvides User-visible function\nUse Cases are part of UML\n\nSome Definitions\nRectangles\nIndicate a computer system boundary (Human\nare always outside \"systems\")\nOvals\nIndicate a \"use case\" and straddle the boundary\nwhen a human Actor is involved, or can be inside\na system when non-humans are interacting\nActors\nAn actor is a role that an external object or user\nplays vis the System\nArrows\nIndicate activity or flow of information\n\nBusiness Transaction Scenarios\nBusiness Transaction Scenarios describe all the\npossible interactions between the system and the\nexternal objects of the outside world. BTS are\nmodeled as Use Cases\nNormal Scenario captures the normal interaction\nbetween the actor and the system\nAbnormal Scenario captures interaction that\noccurs during exceptions or error conditions\n\nSequence Diagrams\nA Sequence Diagram provides a\ndiagrammatic representation of a specific\ninstance of a Use Case (a scenario)\n\nFormat of Use Cases\n[Optional Information]\nScenarios and Use Cases will have the following\nsections in this order:\n- .Purpose\n- .Assumptions\n- .Actors\n- .Use Cases Used\n- .Use Cases Extended\n- .Preconditions\n- .Postconditions\n- .Basic Course\n- .Alternate Course\n- .Rules\n- .Interface Contraints\n- .Operational Constraints\n\nBusiness Transaction Scenario: Learning\nAdministration System\nDraft 0.2\n\n1.Scenario: Learning Administration System\nThe Learning Administration System (LAS)\ndepicts the scenario where a student enrolls\nfor a Program or Courses at a Learning\nInstitution, attends the courses scheduled\nand after completion of the same, applies for\nvarious job positions at different companies.\n\nWho are the Actors?\nAdmissions Rep\nInstructor\nAdmissions Director\nFinancial Aid Director\nEducation Director\nCareer Services Director\nAccountant\n\nLet us model the system\n\nAdmissions Rep\nAdmissions Rep\ngets Lead Info\nAdmissions Rep\nenrolls Student\nInstructor\nSystem processes Lead\nInfo Request\nAdmissions Rep\nconducts Interview\n<<uses>>\nAdmissions Director\nreviews Leads Info\n<<uses>>\nInstructor marks Student\nEvaluation\nAdmissions\nDirector\nEducation\nDirector\nEducation Director\nreviews Student\nCareer Services\nDirector\nSystem processes\nStudent Info\n<<uses>>\nSystem processes\nInterview Tasks\n<<uses>>\nSystem processes\nStudent Enrollment\n<<uses>>\n<<uses>>\n<<uses>>\nSystem processes\nProgram & Course Info\n<<uses>>\nEducation Director\nreviews Program &\nCourse\n<<uses>>\nCareer Services Director\nreviews Companies &\nJobRecords\nSystem processes\nCompanies Info\n<<uses>>\nAccountant\nAccountant prepares\nStudent Ledgers\nAccountant prepares\nSummary\n<<uses>>\nSystem processes\nLedger Accounts\n<<uses>>\n<<uses>>\nFnancial Aid\nDirector\nFinancial Aid Director\nprocesses Loan\nApplication for Student\n<<uses>>\nCareerServices Director\nreviews Student\n<<uses>>\n<<uses>>\nInfo\nInfo\nReports\nInfo\n\nNext Step ...\nLet's get Hands-On\nThank You"
    },
    {
      "category": "Resource",
      "title": "BBMAC.COM: a web-based bidding market for the construction industry",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/ee44b14e5d7d8adc118ad907511e8caf_AnthonyGuaraldoJasonHart.pdf",
      "content": "a web-based bidding market\nfor the construction industry\nAnthony Guaraldo\nJason Hart\nMassachusetts Institute of Technology | Cambridge, MA. 01239\nBBMAC.COM\nBID+BUY MACHINE\n\n- archaic principles of product price comparison and\n\"sealed envelope bidding\"\n- ENDLESS telephone calls and faxes\nVendor A | Vendor B | Vendor C | Vendor D | Vendor E\nGC | Architect\nHow it works today (Problem):\n\n- an open web-based bidding market !!!\nVendor A | Vendor B | Vendor C | Vendor D | Vendor E\nreal-time bidding\nw/ charts, graphs, etc.\nGC | Architect\nOn-line purchase\nA | B | C | D | E\nProposal:\n\n- HUGE time saver and simplification = $$$\n- theoretically, all suppliers end up with similar bids, thereby\nbringing quality and performance issues to the forefront\n- real-time knowledge\n- increases project profitability: on-time & on-budget\n- clear and effective communication\n- purchase on-line\n- minimize costly distribution of CAD files by uploading relevant\nCD's and take-off's\n- reputation builder\n- creation of a supplier / product database for the use of an\ninternational audience\nGC | Architect Benefits:\n\n- time saver = $$$\n- can \"see\" competition in real-time\n- larger market = sell more\n- sell on-line\n- cuts unfit competition = better quality and performance\nSupplier Benefits:\n\nGC | Architect\n- creates project bid folder\n- selects CSI categories for bid\n- selects suppliers in relevant categories for bid\nsubmittals\n- uploads all relevant info. (ie. CD'S, takeoffs,\ndescriptions, etc.)\n- sets opening and closing date and time for bid\nsubmittals\n- submittal solicitations sent via e-mail to suppliers\n- if needed, may have discussions w/ suppliers via e-mail and/or online\nHow it works:\n\nSuppliers\n- receive bid submittal solicitation via e-mail\n- logs into bid folder and reviews documentation\n- submits bid in real-time\n- submits value-added services\n- can see competitors bids and services in\nreal-time; last min. underbids before closing\n- if needed may have discussions w/ GC|Architect via\nand/or online\ne-mail\n\nGC | Architect\n- selects preferred supplier after bidding closes\n- GC | Architect | Supplier\n- fulfil all contract negotiations online\n(i.e. Purchase !!)\n- submits feedback and reason for choice to site\ndatabase\n\n- virtual meetings: real-time online\n- international supplier coalition database\n- news and events\n- industry links\nWeb Sites Value - Added Services\n\n- problem: waste of time and $ in today's construction\nindustry w/ regards to product selection - quality and\nperformance suffering\n- solution: real-time web-based bidding and purchasing -\nsaves time and $ - brings quality and performance issues to\nthe forefront\n- market: construction industry private sector (international)\n- growth potential: HUGH - may extend into other\ninternational industries\n- competitive advantage: 1st start\n- revenue: advertising and member/registration fee (?)\nBusiness - Model Summary"
    },
    {
      "category": "Resource",
      "title": "Camfield Estates-MIT Creating Community Connections Project",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/583c4b107517bb7b09621e32f8ca1f7a_RichardOBryant.pdf",
      "content": "Camfield Estates-MIT\nCreating Community\nConnections Project\nCamfield Estates-MIT\nCreating Community\nConnections Project\nRichard L. O'Bryant\n4.297 E-Commerce Architecture seminar\nRichard L. O'Bryant\nMIT-School of Architecture and Planning\n4.297 E-Commerce Architecture seminar\nCamfield Estates-MIT\nCreating Community\nConnections Project\nRichard L. O'Bryant\nMIT-School of Architecture and Planning\nMIT-School of Architecture and Planning\n4.297 E-Commerce Architecture seminar\n\nProject Site\nProject Site\n3⁄4Camfield Estates, Roxbury, MA\n3⁄4102 units and 400 residents\n3⁄4All residents classified as \"very low\nincome\" according to HUD's guidelines\n3⁄4Neighborhood Technology Center (NTC)\non the premises\n3⁄4Camfield Estates, Roxbury, MA\n3⁄4102 units and 400 residents\n3⁄4All residents classified as \"very low\nincome\" according to HUD's guidelines\n3⁄4Neighborhood Technology Center (NTC)\non the premises\nProject Site\n3⁄4Camfield Estates, Roxbury, MA\n3⁄4102 units and 400 residents\n3⁄4 All residents classified as \"very low\nincome\" according to HUD's guidelines\n3⁄4 Neighborhood Technology Center (NTC)\non the premises\n\nRCN\nInternet\nHome\nMy\nCamfield\nMy\nCommunity\nHelp\nNTC\nCamfield\nEstates\nwww.CamfieldEstates.net\nAdministrator\nuser\nTeacher\n\nwww.CamfieldEstates.net\nNTC\nIntroduction\nUpcoming\nevents\nStudents\nTeachers\nAdministrator\nOnline\nTraining\nProcess\nRegistration\nClasses\nSchedule\nCollaboration\nDispute\nStorage\n\nwww.CamfieldEstates.net\nIntroduction\nResources\nCommunity\nCalendar\nDiscussion\nForum\nChat\nOrganizations\nBusinesses\nStorage\nMy\nCommunity\nE-Mail\nResidents\n\nCamfield Estates-MIT\nCreating Community\nConnections Project\nCamfield Estates-MIT\nCreating Community\nConnections Project\nRichard L. O'Bryant\n4.297 E-Commerce Architecture seminar\nRichard L. O'Bryant\nMIT-School of Architecture and Planning\n4.297 E-Commerce Architecture seminar\nCamfield Estates-MIT\nCreating Community\nConnections Project\nRichard L. O'Bryant\nMIT-School of Architecture and Planning\nMIT-School of Architecture and Planning\n4.297 E-Commerce Architecture seminar"
    },
    {
      "category": "Resource",
      "title": "Seasons Exchange",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/1f37a148df1b16f2ffec9a64bbe8b672_ShipingLinWeilingHuang.pdf",
      "content": "http://SeasonExchange.com\nShi-Ping Lin\nWei-Ling Huang\nOctober 13, 2000\n\nWho are we\n-\nSeasons Exchange is a internet flea\nmarket that provides more\nopportunities for buyers and\nsellers to match.\n-\nSeasons Exchange focus on products,\nwhich are traditionally limited by\nlocation and seasons.\n-\nSeason Exchange is unique in the\nway we help business-to-\nbusiness trade happens, while\nconsumer-to-consumer bids.\n\nThe idea\n- From where\n- Location and time limitation of the\ntraditional agricultural markets\n- Exchange helps to reduce the\nwaste of products and to decrease\nthe cost\n- Special of the idea\n- Group-to-group, group-to-1,\n1-to-group trades, instead of 1-to-1\n- collaborate buyers/sellers\ngeographically nearby\n- Connection with bank account\n\nHow do we do it\n- Match buyers and sellers\nthrough a semi-open process\n- 2%-5% commission fee\n\nDevelopment phases\n- Physical coverage\n- North America\n- North and South America\n- Global\n- Product coverage\n- Seeds\n- Agriculture products\n- All seasonal trading products\n\nWhy we will success\n- Market potential\n- In US, 2,100,000 farmers\n- 60% of farmers connected to\ninternet\n- 228,000 persons!!!\n- $500,000,000 be brought online\n\nMarket Comparison\n- Traditional Market\n- Retail\n- Internet web sites\n-\nXSAg.com\n-\nIcecorp.com\n-\nAgweb.com\n-\nDirectag.com\n-\nVantagepoint.com\n-\nFarmbid.com\n-\nFarms.com\n-\nMpower3.com\n-\nVtraction.com\n-\nE-garden\n\nMarket Comparison\n- Traditional Dutch Flower\nMarket\n- The Aalsmeer Flower Auction\n- Home Depot\n- XSAg.com\n\nMarket analysis\nThe Aalsmeer Flower\nAuction\n- The largest auction in Dutch\n- 42.5% of total sales in Dutch\n- 1,826 employs\n- 1,350 buyers / 7,000 growers\n- 50,000 Daily Transactions\n- NLG 3 billion Yearly Turnover\n\nMarket analysis\nThe Home Depot\n- One of the largest retail stores\n- 990 stores, 22,600 employee\n- Garden Center\n- 15,000-25,000 sq.. ft.\n- $38.4 billion net sales (+27.2%)\n- $11 billion gross profit (+32.6%)\n- $2.3 billion net earnings (+44%)\n\nMarket analysis\nXSAg.com\n- The fastest growth online farm\ngoods purchase web site\n- Established in May 2000\n- 30 employs\n- $12,000-$150,000 transaction\n- Commission Fee: 2%\n- Sales: $100 Million\n\nhttp://SeasonExchange.com"
    },
    {
      "category": "Resource",
      "title": "Web Site Architecture for Marketplace",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/2a67b033af59871f60f8dc2a6ca3c843_LinBu.pdf",
      "content": "WEB SITE ARCHITECTURE FOR\nMARKETPLACE\nThe web site should be structured\nfrom the point of view of the USER\nLin Bu\n\nMission of project\naHow can make a web site satisfies\ndifferent INDIVIDUAL USER's interesting\n`Web site\n⌧content\n⌧structure\n⌧solution\n`User\n⌧consumer\n⌧business partner\n⌧employee\n⌧government\n\nCase analysis: Wine in Web\naSearch by key word \"Wine\" in Yahoo\n`499,000 web pages\n`4500 web sites\na2 million web pages online\n\nUser identify\nConsumer\nBusiness partner\nemployee\nGovernment\nRole\nMotivation\nPreference\nrelationship\n\nSolution of market maker\naWeb structure\n`content\n`design\naSupporting technology platform\n`\"smart agent\", database based customer\nlearning system\n`realiable personalization\n\nProject plan\naStructure difinetion\n`content\naTechnology support(resource)\n`Identify\n`a framework of knowledge database\naPrivacy & security policy, payment\ninfrastructure\naWeb site test"
    },
    {
      "category": "Resource",
      "title": "REIT 2 Strategic consultants",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/4-297-special-problems-in-architecture-studies-fall-2000/b199c5431629d764c712cb90b691b55d_AyanSen.pdf",
      "content": "REIT 2 Strategic consultants\nAyan Sen\n\nDiversified\nResorts\nIndustrial /Office\nHealth care\nRetail\nResidential\n\nREIT\n- A voice for the publicly traded real estate\nindustry with the financial media and the\ninvestment marketplace\n- Numerous opportunities for REITs and\npublicly traded real estate companies to\nnetwork among themselves and with a\nvariety of service providers in the real\nestate industry\n\nNew York Stock\nExchange - 155\nREITs American\nStock Exchange - 30\nREITs NASDAQ\nNational Market System - 13\n\nWhat is REIT activity\n- Information\n- One must know what is done by REITs\n-\nIn terms of projects\n-\nBeing done\n-\nnew ventures\n-\nIn terms of assets details\nthrough collection and creation of a data base\nPosted by REITS\n\nService provider connection\n- This site connects REITs information to\ncurrent market facts\n- Gives Market value of the REIT stocks\nPosted by REITS\n\nTaxonomy of strategies\n- Provides a set of available strategies\n- one a can learn about case facts and choose\nfrom a set of\n- Legal\n- Financial\n- Design\nPosted by consultants\n\nStrategic consultants\n- Gives a list of the consultants and their\ninformation with areas of specialization\n- and actually connects to them for a fee for\nfurther details\nPosted by consultants\n\nInformation\n- Facts about the\nparticular REIT\n\nGives a list of option of\ndevelopment and strategic\nconsultants\nAnd connects them to and their\nweb sites for further help\n\nThe connection with their facts\n- The consultants"
    }
  ]
}