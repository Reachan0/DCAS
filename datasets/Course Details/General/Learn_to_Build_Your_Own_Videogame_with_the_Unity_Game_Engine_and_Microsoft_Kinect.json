{
  "course_name": "Learn to Build Your Own Videogame with the Unity Game Engine and Microsoft Kinect",
  "course_description": "This is a 9-day hands-on workshop about designing, building, and publishing simple educational videogames. No previous experience with computer programming or videogame design is required; beginning students will be taught everything they need to know and advanced students will be challenged to learn new skills. Participants will learn about videogame creation using the Unity game engine, collaborative software development using GitHub, gesture handling using the Microsoft Kinect, 3D digital object creation, videogame design, and small team management.\nThis course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.",
  "topics": [
    "Engineering",
    "Computer Science",
    "Graphics and Visualization",
    "Software Design and Engineering",
    "Fine Arts",
    "Game Design",
    "Media Studies",
    "Digital Media",
    "Engineering",
    "Computer Science",
    "Graphics and Visualization",
    "Software Design and Engineering",
    "Fine Arts",
    "Game Design",
    "Media Studies",
    "Digital Media"
  ],
  "syllabus_content": "Workshop Meeting Times\n\nLectures and Open Lab: 9 sessions in total, 3 hours / session\n\nOverview\n\nThis short course takes place at MIT during the 2017 IAP (Independent Activities Period). It is best for students from any major interested in building videogames as a hobby, creative outlet, or for any other reason. No previous game design or computer programming experience is required. This can serve as a first course in videogame design and creation for those without any previous experience or as a fun refresher for those with some exposure. Advanced students are welcome and will be accommodated with a faster pace and more free time to work on projects.\n\nDescription\n\nThis is a 9-day hands-on workshop about designing, building, and publishing simple educational videogames. No previous experience with computer programming or videogame design is required, beginning students will be taught everything they need to know and advanced students will be challenged to learn new skills. Participants will work in small teams to design, build, and publish their own videogames that will be shared in a large public exhibition. Team projects are completely open-ended and designed by participants, example projects include: A collection of bouncing balls that can be sped up or slowed down using hand gestures, a virtual reality laboratory where kids can perform experiments, an internet-enabled puzzle that multiple players can contribute to, and crowdsourcing interface for describing scientific graphics for blind students. Participants will complete one guided projects in order to learn the fundamentals and will then break into small teams to complete a one-day short project of their choosing. After the short project, participants will break into new teams that will each have four days to design, plan, and build a custom project of their choice. On the last day of the course, students will present their projects in a public exhibition and have the chance to win a prize for \"crowd favorite\". Participants will learn about videogame creation using the\nUnity\ngame engine, collaborative software development using GitHub, gesture handling using the Microsoft Kinect, 3D digital object creation, videogame design, and small team management.\n\nGrading\n\nThere are no grades for this course.\n\nLogistics\n\nThe class size is 30 students from varying backgrounds, and the class takes place in a classroom with movable desks or tables so students can form teams.\n\nIf you want to use the Microsoft Kinect Controller for your video game, you have to intall the\nUnity Pacakge\nfirst.\n\nSchedule\n\nSES #\n\nTOPICS / CLASS ACTIVITIES\n\nSurvey of GitHub, Arduino, and the basics of software collaboration:\n\n20 minute lecture: An overview of GitHub collaboration\n\n40 minute activity: Creating and contributing to repositories\n\n20 minute lecture: An overview of Unity programming\n\n100 minute activity: Recreating a guided project (roll-a-ball)\n\nThe basics of design and ideation:\n\n20 minute activity: Using the Microsoft Kinect\n\n40 minute activity: Expand, explore, and personalize the roll-a-ball example\n\n20 minute lecture: Overview of collaborative design process\n\n40 minute activity: Team formation for short project\n\n60 minute activity: Start short project\n\nProject design and execution for short projects:\n\n30 minute lecture: Crash course in prototyping and documenting ideas\n\n150 minute activity: Short project\n\nIdeation, pitches, team formation, and project selection for short projects:\n\n30 minute discussion: Reflections from yesterday\n\n30 minute lecture: Overview of plan, team structure and expected outcomes\n\n30 minute discussion: Project ideation\n\n30 minute activity: Team formation\n\n60 minute activity: Get started or refine idea\n\nPresentation of short projects\n\nProject time for long projects: 180 minute open lab time: Meet and create with guidance\n\nProject time for long projects: 180 minute open lab time: Meet and create with guidance\n\nProject time for long projects: 180 minute open lab time: Meet and create with guidance\n\nPresentation of long projects",
  "files": []
}