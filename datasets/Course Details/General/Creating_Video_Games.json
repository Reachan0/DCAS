{
  "course_name": "Creating Video Games",
  "course_description": "CMS.611J / 6.073 Creating Video Games is a class that introduces students to the complexities of working in small, multidisciplinary teams to develop video games. Students will learn creative design and production methods, working together in small teams to design, develop, and thoroughly test their own original digital games. Design iteration across all aspects of video game development (game design, audio design, visual aesthetics, fiction and programming) will be stressed. Students will also be required to focus test their games, and will need to support and challenge their game design decisions with appropriate focus testing and data analysis.",
  "topics": [
    "Business",
    "Project Management",
    "Engineering",
    "Computer Science",
    "Software Design and Engineering",
    "Fine Arts",
    "Game Design",
    "Media Studies",
    "Digital Media",
    "Business",
    "Project Management",
    "Engineering",
    "Computer Science",
    "Software Design and Engineering",
    "Fine Arts",
    "Game Design",
    "Media Studies",
    "Digital Media"
  ],
  "syllabus_content": "Course Meeting Times\n\nLectures: 2 sessions / week, 3 hours / session\n\nPrerequisites\n\nCMS.608 Game Design\nor\n6.01 Introduction to EECS I\n\nDescription\n\nStudents will learn creative design and production methods, working together in small teams to design, develop, and thoroughly test their own original digital games. Design iteration across all aspects of video game development (game design, audio design, visual aesthetics, fiction and programming) will be stressed. Students will also be required to focus test their games, and will need to support and challenge their game design decisions with appropriate focus testing and data analysis.\n\nGrading\n\nACTIVITIES\n\nPERCENTAGES\n\nPreparedness for Class\n\n25%\n\nProject 1\n\n15%\n\nProject 2\n\n15%\n\nProject 3\n\n15%\n\nProject 4\n\n30%\n\nPreparedness includes overall participation in individual and group exercises in class and group focus testing, as well as the Game Engine Tutorial Assignment.\n\nProject Grading Criteria\n\nThis course is about learning effective processes and procedures for working as a team on a complex, multifunctional project. While it is important to deliver your projects successfully, we want to teach you how to practice and improve your project management and group teamwork skills. Your project grades will depend heavily on the methods, tools, and processes you use to develop your games, as well as the justification and explanation of the choices you made in organizing your team and your project. We use multiple methods to capture this information, including presentations, written reports, design diaries, project management documentation, and mandatory in-class playtesting sessions.\n\nProject Grading Breakdown\n\nGame Functionality\n\n20%\n\nIterative Design Process\n\n20%\n\nProject Management\n\n20%\n\nIndividual Postmortem\n\n20%\n\nGroup Postmortem Presentation\n\n20%\n\nNote that 80% of each project grade is shared with your team.\n\nGame functionality: Meeting the specific project constraints as well as our basic standards of playability, code stability and adequate user feedback.\n\nIterative Design Process: Adherence to and rigorous use of iterative design process, including responsiveness to tester and instructor feedback (focus test reports, changelogs).\n\nProject Management: Teamwork and project management, including the thoughtful and consistent use of project management methods and tools (tasklists, backlog, design documents).\n\nIndividually written postmortem, including clarity and depth of writing.\n\nGroup postmortem presentation, including clarity and depth of presentation.\n\nAttendance\n\nBecause this class emphasizes participation and teamwork, and because you will have to work closely with your classmates to complete each project, the faculty reserve the right to warn and penalize the participation grade of any student who engages in antisocial or disruptive behavior (see our anti-harassment policy). Regular and consistent class attendance is mandatory. You may receive a failing grade if you miss more than 3 classes without justification and approval from the instructors. However, we intend to be lenient on absences due to illnesses and discourage working when you are sick. Meeting up with classmates in person while you have a contagious illness is particularly discouraged. Please email the instructors before the start of class if you will be absent due to illness.\n\nLateness\n\nStudents will not be allowed into the classroom from 5 minutes in until the end of any lecture in progress, including scheduled guest lectures. This is to avoid disruption to the lecturer, fellow students, and future students (i.e. those watching the MIT-OCW posted videos). Once the lecture is over, late students will be able to enter the classroom, work in the remaining class period, and register their attendance. Lateness with a previously approved excuse will not affect participation grades. Lateness without an excuse will not count as a complete absence, but will result in a lower participation grade.\n\nWriting\n\nPostmortems, written game rules, and any other delivered writings are expected to be clear, spell-checked, and demonstrate a high proficiency in written English. Advice about writing and oral presentations can be found at the\nWriting and Communication Center at MIT website\n.\n\nReadings\n\nThis class does not have a required textbook, but a useful book to read for advice on game design is\n\nBrathwaite, Brenda, and Ian Schreiber.\nChallenges for Game Designers\n. Charles River Media, 2009.\n\nStatement on Plagiarism\n\nPlagiarism--use of another's intellectual work without acknowledgement--is a serious offense. It is the policy of the CMSW Faculty that students who plagiarize will receive an F in the subject, and that the instructor will forward the case to the Committee on Discipline. Full acknowledgement for all information, code and assets obtained from sources outside the classroom must be clearly stated in all written work submitted. All ideas, arguments, and direct phrasings taken from someone else's work must be identified and properly footnoted. Quotations from other sources must be clearly marked as distinct from the student's own work. For further guidance on the proper forms of attribution, consult the\nMIT website on Plagiarism\n.\n\nStatement on Harassment\n\nThe MIT Game Lab is dedicated to providing a harassment-free experience for everyone, regardless of race, color, sex, disability, religion, national origin, sexual orientation, gender identity, veteran's status, age, physical appearance, or body size. Classes and events that are held by the MIT Game Lab or that are sponsored by the lab and held on on MIT grounds, follow MIT's policy on harrassment, which includes MIT's policy on sexual harassment, as found in\nSection 9.5 of MIT Policies and Procedures: A Guide for Faculty and Staff Members\n. MIT also has\nGuidelines for Raising Complaints about Harassment\n. Harassment includes offensive verbal comments related to gender, gender identity, sexual orientation, disability, physical appearance, body size, race, religion, sexual images in public spaces, deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of talks or other events, inappropriate physical contact, and unwelcome sexual attention. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact an instructor immediately. As an institution, we have adopted a statement of\nResponsible and Ethical Conduct at MIT\n. The statement is a compilation of existing, longstanding policies that individually and taken as a whole express the Institute's expectations of how we treat each other, and the manner in which we carry out our responsibilities as educators, researchers and administrators. We are also reaffirming our belief that ethical behavior applies to every member of our community. We all share responsibility in ensuring compliance with the values and principles contained within this statement of Responsible and Ethical Conduct at MIT. Please direct any questions about this policy to your instructors.",
  "files": [
    {
      "category": "Resource",
      "title": "\"SNAP!\": Warm-up Activity to Elicit Ideas on Open Data",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/f0f83140e1c4b2791918c6ea59600ae8_MITCMS_611JF14_SNAP_for_WB.pdf",
      "content": "1. \"SNAP!\": WARMUP ACTIVITY to elicit ideas on Open Data (13:45 to 14:00)\n\"Snap!\" is a quick game with three aims:\n-\nEnergize participants: activate people's brainpower (crucial for sessions after lunch)\n-\nCreate a sense of shared identity among participants of the same sector (Edu, Gov,\nOrg), so as to awaken later the real-world tendencies to be selfish towards other\nsectors\n-\nLearn from participants about what concepts they associate with Open Data - we\nexpect people to invoke words that focus on software and tasks, as opposed to\nchallenges (politics, issues with data sharing, emotions)\nIn the \"Snap!\" game, players will first form groups by Sector, then go through cycles\nwhere they have to quickly come up with a sequence of words, state those words\nsimultaneously with a partner, and try to react faster than the partner if a certain type of\ncircumstance emerges. The first cycle is easy and fun, and promotes bonding. Then\ncomplexity grows until in the third cycle players tend to confront a 'clogging' of ideas that\nbuilds their appetite for crystallizing concepts they associate with the topic of the session\n(i.e. words related to 'Open Data for Resilience').\nAn additional, short group activity elicits those concepts in word cards (blank papers),\nallowing the facilitation team to create word clouds that illustrate and show their current\nstate of understanding of the issue. The same activity can be deployed in less than 5\nminutes at the end of the session, for a quick and fun way to assess whether the\nparticipants' understanding of the Open Data issue has evolved in any way as a result of\nthe afternoon activities. The images below depict the word clouds resulting from the use\nof \"Snap!\" before and after a participatory activity about micoinsurance at the recent\nCommunity Based Adaptation Conference in Nepal.\n\nNote the evolution from fewer, relatively simpler and more negative concepts in the first one (Accident,\nInterest, Premium) to relatively more nuanced and positive concepts in the second one (Transfer,\nInvestment, Choice).\n\n\"SNAP!\": Notes for facilitators\nMaterials:\n-\nSlides 5-7 of the powerpoint file in Annex A.\n-\nBlank pieces of paper (4 'blank cards' for every three players), to be used in step \"h\"\nSequence:\na) Show slide 5. Ask participants to form duos, and shake hands with their new partner. Facilitator\nto recruit a participant as partner to illustrate game sequence\nb) Tell players to accept the unusual rules and tasks of the game as they come along:\n-\nEach player has a deck of imaginary cards, with numbers 1 to 10. Please shuffle your\nimaginary cards, take the top half of the deck, and swap it with your partner's.\n-\nEach player takes the top imaginary card, use body language to indicate that you're about\nto flip your card, and simultaneously flip it and state the imaginary number with a loud\nvoice. For example: [invite partner. Facilitator say \"9\", partner will likely say a different\nnumber]. Tell others \"you heard us: I said 9 and my partner said [number]. If the numbers\nare different, nothing happens and we flip the next imaginary card in our decks. If the\nnumbers are the same, the first player to shout \"SNAP!\" takes all the imaginary cards\nplayed so far, and wins an imaginary point.\n-\nYour goal is to \"Snap!\" as many times as possible in about one minute. If you snap, keep\ngoing and play again. Ready, set, GO!\nc) After about one minute, ask players to stop playing and share some insights about what you\nobserve (usually a lot of laughter, some people having a hard time snapping). Note that this\ngame requires both thinking fast, listening actively, and acting when something unusual occurs.\nd) For the second round of \"Snap!\", ask players to seek a new partner, and tell them that in their\ndeck of imaginary cards they no longer have numbers, they now have names of animals. Any\nanimals of their choice. Give them a few seconds to think of the names in their deck while they\nshuffle and trade imaginary cards. Ready, set, GO!\ne) After less than a minute ask to stop, and share insights (usually more difficulty in snapping, and\nalso more difficulty coming up with words, even though everybody knows ten or more animals).\nf) For the last round of \"Snap!\", ask participants to pair up again with their original partner. This\ntime they will each have to play with a special new deck: formed with words that they associate\nwith the concept of \"Open Data for Resilience\". No more than 3 words in a card. As facilitator\nyou can give implausible examples (such as \"Hate\", or \"Software Interoperability\"). Tell players\nthat it will be hard, but along the way they will discover what they think and what their partner\nthinks about the concept that brings us together. Ready, set, GO!\ng) After about half a minute ask to stop, and share some insights (usually severe difficulty in\ncoming up with words to say, and almost no snapping).\nh) Show slide 6 in powerpoint file form Annex A. Form trios. Give each trio four pieces of blank\npaper. Indicate that we will form a deck of Snap cards about Open Data. In about two minutes,\neach trio has to come up with text (up to 3 words relating to the concept of Open Data) that\nthey would want to use to play \"Snap!\"\ni) After deadline, facilitator invites some trios to share the concepts they have written. Other trios\ncan shout \"Snap!\" if they wrote the same concept in their own cards. Share any insights on\npatterns that emerge. End by asking participants to say good bye to people with ID-Badges of\nother colours (from now on they will compete across colors).\nTRANSITION\nj) Ask everybody to form groups by color, and then cluster in sub-groups by sector (thus forming\n\"Sector Trios\", for example the three players that share \"Blue\" and \".Gov\" attributes\n(North+West+South players of same color and sector). Each Sector Trio sits near a computer.\nk) Show slide 7. Indicate that 'serious play' is about to start, and that each Sector Trio will\ncompete with other Trios of the same sector but different color.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "A Selection of Indie Games",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/7d45ea86f049c21a38142667b9e910f7_MITCMS_611JF14_ASeleOfInGa.pdf",
      "content": "A Selection Of Indie Games\nMinecraft\n● http://www.minecraft.net/\n● In beta\n● Under development since May 10, 2009\n● Four team members: Lead programmer and designer, composer, artist, additional\nprogrammer\n● Strong iterative design process\nEvery Day The Same Dream\n● http://www.molleindustria.org/everydaythesamedream/everydaythesamedream.html\n● Flash game\n● Made in 6 days for the Experimental Gameplay Project\n● One programmer / artist / designer\n(I Fell In Love With) The Majesty Of Colors\n● http://www.kongregate.com/games/GregoryWeir/the-majesty-of-colors\n● Flash game\n● Made with Flex and FlashDevelop\n● Drawn out development process (months)\n● One programmer / artist / designer\nSpelunky\n● http://www.spelunkyworld.com/\n● First release December 2008\n● Made with Game Maker\n● One programmer / artist / designer\n● Previously made Aquaria\nWorld of Goo\n● http://www.worldofgoo.com/\n● Mostly two team members: Shared roles\n● 2 years of development\n● Posts on the evolution of the game starting at http://2dboy.com/2009/03/page/3/\nBraid\n● http://www.braid-game.com/\n● Two team members: Programmer / designer and artist\n● Additional composition too\n● 3 years of development\n\nAquaria\n● http://www.bit-blot.com/aquaria/\n● 3 years of development from concept to release. 2 years of serious development.\n● Two team members: Programmer and artist (with some shared tasks)\n● Lead designer went on to make Spelunky\nMonaco\n● http://www.monacoismine.com/\n● Still in development\n● One core team member with industry experience plus some additional art and audio support\nBlueberry Garden\n● http://eriksvedang.com/blueberrygarden/\n● Made in a little over a year\n● Great Gamasutra article on its development: http://www.gamasutra.com/view/feature/4322/\ncreating_blueberry_garden.php\nCrayon Physics\n● http://www.kloonigames.com/blog/games/crayon\n● One team member: programmer / artist / designer\n● Made in 5 days\n● The commercial version took a year and 8 months to make http://www.crayonphysics.com/\nLimbo\n● http://www.limbogame.org/\n● Three years of concept work then 3 more of production work\n● Eight scaling to sixteen team members\n● Personally funded then large investors jumped in later\nCastle Crashers\n● http://www.castlecrashers.com/\n● Second XBLA game from the studio\n● Small team of downsized industry veterans\n● Around three years of development time\n● Unknown development team size\nSynaesthete\n● http://synaesthete.en.softonic.com/\n● Bootstrapped from a class project\n● Built from scratch in C++ and DirectX\n● Four team members (students from DigiPen)\n\nPassage\n● http://hcsoftware.sourceforge.net/passage/\n● One team member: programmer / artist / designer\n● Designer's statement on the game's intent: http://hcsoftware.sourceforge.net/passage/\nstatement.html\n● Short development time\n\nTag\n● https://www.digipen.edu/studentprojects/tag/\n● About 18 months of development time starting f rom scratch\n● Seven team members: Four programmers, two artists, one composer (students from\nDigiPen)\n● Interview with t he team: http://www.allroundgeek.com/2009/02/interview-with-tagthe-tower-\nof-paint.html\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n\nCMS.611J / 6.073 Creating Video Games\nFall 2014\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Agile Part II",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/0455c23af9c81619913ada60f60eda25_MITCMS_611JF14_AgileLec2.pdf",
      "content": "Today In Class\nEstimation Lecture\nSprint Backlogs & Tasklists\nBacklog, Tasklist & Estimation Workshop (45)\nGood Software Practices with Andrew\nIf there's any time left: Project Work\nDue Today:\nProduct Backlog.\nRunning Code (expected milestone, no\ndeliverable)\n\nMIT CMS.611J/6.073 Fall 2014\n\nBe Ready for Wednesday!\nDue Wednesday:\nTestable version of your game\nSprint Tasklist (Spreadsheet format)\nFocus Testing lecture\nIn Class Work: Creating a Focus Test\nIn Class Work: Running a Focus Test\nGenevieve Conley - Guest Lecturer from Riot\nMIT CMS.611J/6.073 Fall 2014\nMIT CMS.611J/6.073 Fall 2014\n\nAgile Part II\nMIT CMS.611J/6.073 Fall 2014\n\nWord Quiz\nTeam Member\nScrum Master\nProduct Owner\n\nProduct Backlog\nSprint Backlog\nTask List\nScrum Board\n\nSprint\nSprint Planning\nDaily Scrum\nSprint Review\nRetrospective\n\nMIT CMS.611J/6.073 Fall 2014\n\nSprint Backlogs,\nTasklists, and Tasks.\nMIT CMS.611J/6.073 Fall 2014\n\nCreating a Sprint Backlog\nSprint Tasklist\nSprint Backlog\nProduct Backlog\nBig Story\nStory A\nTask 1\nTask 2\nStory B\nTask 3\nTask 4\nMIT CMS.611J/6.073 Fall 2014\n\nEpic Stories Smaller\nstories\nAs the user I want an improved physics engine so that I\ncan have good, responsive car driving physics'\nWhat does that mean, anyway?\nRealistic acceleration?\nBraking?\nFriction? Mass & Momentum?\nSpecial effects of sparks crackling off the pavement, smoke\npouring out of overworked engines?\n\nThis is one of the methods Agile Teams with 'differently skilled'\nmembers can use to do better load balancing for their team!\nMIT CMS.611J/6.073 Fall 2014\n\nTasks\nTasks are small enough to estimate with better\naccuracy: tasks should range from 1 - 8hrs of\nwork, ideally.\nTasks (ideally) can be assigned to a single\nperson.\nBy breaking a 'story' into 'tasks', the team can\nfind 'hidden' dependencies & potential team\nmember overloading before the Sprint gets\nstarted.\nMIT CMS.611J/6.073 Fall 2014\n\nCreating a ScrumBoard\nTRELLO.COM,\nSCRUMY.COM\nMIT CMS.611J/6.073 Fall 2014\n\nCreating Tasklist\nCreate a Sprint Backlog & Tasklist for the next\nweek.\nStop estimating when you run out of time to do\nwork, not when you run out of stories!\nAsk yourself: is that the project you want to\nmake?\nPrepare a 2 minute (no visuals) presentation,\ntalking about the process of making your sprint\ntask list. What did your team learn while doing\nit?\n\nMIT CMS.611J/6.073 Fall 2014\n\nPulling it all together\nThere you have it. Be Agile.\nMIT CMS.611J/6.073 Fall 2014\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Back of the Box",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/8a6928f7c588869db8426ccac1c6f432_MITCMS_611JF14_Back_Of_Box.pdf",
      "content": "Back of The Box:\nYou are responsible for writing the marketing copy that will go on the back of this game's box. Come\nup with 3 - 4 (no more!) exciting 'bullet point items' that describe the heart and soul of this game.\nExample for the 'Ex Drug Lord Game':\n- Will you retire to the Cayman Islands... or the federal penitentiary?\n- Rid yourself of old labs and old clients... while ridding them of their cash!\n- Hide your ill gotten gains where only you will find them again!\n- Avoid cops... or bribe them? The choice is yours!\n\nTeam/Responsibility Breakdown:\nJobs, hours, responsibilities.\n\nThirty Seconds of Gameplay:\nWhat am I going to do most in your game? Is it going to be fun and engaging? Come back & reread\nthis section: you'd be amazed at how often your 'intended' key game play gets cluttered away with 'and\nwe coulds...'\nRisks:\nKey technical, personnel, scope, time, etc risks. What's scariest about the project you want to do?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n\nCMS.611J / 6.073 Creating Video Games\nFall 2014\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Brainstorming",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/f64380756ad91a0499d488ea5482af63_MITCMS_611JF14_Brainstormin.pdf",
      "content": "Brainstorming\nOrganized Ideation\n- Forget what you thought you knew about Brainstorming, Osborne \"people ran away with the idea without practicing it correctly\"\n- Video Game design is coordinated creative collaboration involving different skilled workers\n- Social pressures against being imaginative in a collaborative environment\n\n4 PRINCIPLES OF\nBRAINSTORMING\nAccording to Osborn, Alex F. Applied Imagination.\nNew York: Charles Scribner's Sons. 1957.\n- 4 primary principles of brainstorming according to Osborne\n- Advertising Manager\n- BBDO very large advertising agency\n- similarities in ad, marketing, and video game design\n\nNO CRITICISM!\n\"Adverse judgement\nof ideas must be\nwithheld until later.\"\n- Most important rule of a brainstorm session\n- if this rule is not adhered to it can subvert the entire session\n- positive v. negative reinforcement\n- p. 160 professional shame and fear (not uncommon at MIT)\n- Why?\n- inhibition stunts ideation\n- freedom to explore new territories\n\n- social\n\npressures/professional\n\npressures\n\nFREE-WHEELING\n\"The wilder the idea, the better; it is easier to\ntame down than to think up.\"\n- Straightforward\n- innovation generally starts with \"pipe-dream\" or \"blue moon\" ideas.\n- expanding on a simple idea is more difficult than reworking a wild idea to be feasible\n\nQUANTITY!\n\"The greater the number of ideas, the more the\nlikelihood of useful ideas.\"\n- The entire goal of brainstorming is not problem solving but idea generation\n- Therefor, the more ideas that can be generated, the more successful the brainstorm session\n- Judgement is not applied in a brainstorm session, so all ideas are welcome, nothing is excluded\n\nBUILD ON IDEAS!\n\"...two or more things can be combined to\nyield something greater than the sum total\nof the individual parts.\"\nSynthesis of ideas\n- great ideas are often generated when disparate ideas are combined\n- often ideas are built or expanded off of other ideas\n\nOrganization\n- Casual spirit/atmosphere\n- Start with a \"bad\" or \"worthless\" idea\n- Don't interrupt anyone\n- Designate a facilitator and secretary\n- Explain process and principal question at\nstart of session\n- Write down EVERYTHING!\n- Casual \"Picnic\"\n- negate social pressures\n- \"spirit\" p. 157 \"playing\"\n- Starting with wild idea encourages \"free-wheeling\"\n- Absolutely no interruptions (social pressure)\n- Leader (talk more about this coming up)\n- Clarity of process and goal\n- Record keeping\n- Often forget best ideas or important variants that are not written down\n- Write a little more than just the title of the idea\n- So you actually remember what the idea actually was\n\nProblems Suitable to\nBrainstorming\nClear definition of the aim of the session is\nessential.\n- Problems should be simple\n- Divide complex problems into subdivisions\nfor separate brainstorm sessions\n- Problems should be clearly and simply\narticulated\n- Not all problems are suitable to brainstorming\n- creative questions, not judgement calls\n- \"get married\" bad example from Osborn pros and cons vs. idea generation\n\nResponsibilities of the\nFacilitator\n- Understand and explain the problem and\nthe aim of the brainstorm session\n- Facilitate the session, encouraging ideation\nand discouraging criticism\n- Ensure that no voices are lost during the\ndiscussion\n- Encourage synthesis of ideas\n- Leader responisbilities\n- don't like term \"leader\" prefer facilitator or borrowing from Quakerism \"clerk\"\n- make sure goals are understood, and that the session runs smoothly\n- steward to the process more than the goal\n\nResponsibilities of the\nSecretary\n- Record every idea\n- Monitor duration of the session\n- (If possible) Participate in brainstorming\nRecord keeping is vital to ideation\n\n- reportorial\n\n- two secretaries if needed, noting every other idea\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Coding Tips",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/67ef05799e799842605b015427e21718_MITCMS_611JF14_Coding_Tips.pdf",
      "content": "Coding Tips\n\nAndrew Haydn Grant\nTechnical Director\nMIT Game Lab\nSeptember 22, 2014\n\nIterate Everything\n\nExperiment, analyze, repeat\n●Paper prototypes\n●Digital prototypes\n●Team communication\n●Baseball pitches\n●Scientific Theories\n●Romantic relationships\n●Lasagna recipes\n●Coding style\n\nQuick Review\n\nAll Software Sucks\nBut we still use it.\n\nAll Software Sucks\nIncluding yours.\n\nNOT Writing Code\n\n●Coding Is Slow\no\nthink\no\nimplement\no\ndebug\no\nintegrate\no\ndebug\no\ndebug\no\ndebug\n\n●Coding Is Slow\no\nthink\no\nimplement\no\ndebug\no\nintegrate\no\ndebug\no\ndebug\no\ndebug\n●Debugging Is Slower\n\nNOT Debugging\n\nHow To Debug Code\n\n●Figure out the problem\n●Change the code\n\nPlaytest Your Code\n\"I know that man page is clear! I wrote it.\"\n\n●\nYour gameplay is harder than you think it is.\n●\nYour puzzles are harder than you think that are.\n●\nYour instructions aren't as clear as you think they are.\n●\nYour documentation isn't as clear as you think it is.\n●\nYour code is not as comprehensible as you think it is.\n\nIt's harder to read code than to write it.\n\nMake It Easier\n\n●Write your code to require as little knowledge as\npossible.\n○of the project\n○of the function\n○of the computer language\n○of the subject matter\n\nPsychology\n\nMiller's Law:\nThe number of objects an average human can hold in\nworking memory is 7 ± 2.\n\nPsychology\n\nDecision Fatigue:\nThe deteriorating quality of decisions made by an\nindividual, after a long session of decision making\n\nSimplicity\n\n●Simplicity means easier to read.\n●Simplicity means fewer bugs.\n●Simple rarely means \"fewer characters\"\n●Each step is simple. When there are too many steps to\nhold in your head, clump them.\n●Some language functionality is awesome, but still\ndangerous.\n○In particular, be wary of \"write once read never\"\ncode.\n\nWrite Once, Read Never\n\nComments\n\n●Write comments to explain WHY we are doing\nsomething.\n●Write comments to explain WHAT we are doing only\nwhen the briefest glance at the code is not enough.\n●Name variables and functions so that they remove the\nneed for comments.\n●If an algorithm is long enough that it's easy to lose track\nof the steps, write an overview of the algorithm in plain\nlanguage.\n●When in doubt, add a comment.\n\nComments\n\n// Is the enemy off the screen?\nif (x < 0 || x >= width)\n{\n// Yes!\nreturn null;\n}\n\nCode\n\nif ((x0-x1)*(x0-x1)+(y0-y1)*(y0-y1) < 900)\n\nreturn 50;\n\nCode\n\nif ((x0-x1)*(x0-x1)+(y0-1)*(y0-y1) < 30*30)\n\nreturn 50;\n\nCode\n\nif ((v0-v1).getLength() < 30)\n\nreturn 50;\n\nCode\n\n// Did the player get a bulls eye?\nif ((v0-v1).getLength() < 30)\n{\n\n// Yes! Return the bulls-eye score.\n\nreturn 50;\n}\n\nCode\n\nVector2 offset_from_center = arrow_location - center_of_target;\n\nbool is_bulls_eye = offset_from_center.getLength() < bulls_eye_radius;\n\nif (is_bulls_eye)\n{\n\nreturn bulls_eye_score;\n}\n\nShorter Functions\n\nMake Wrong Code Look Wrong\n\nfloat track_length = angle * radius;\n\nfloat expected_race_duration = track_length / speed;\n\nMake Wrong Code Look Wrong\n\nfloat cm_track_length = angle_in_degrees * radius_in_inches;\n\nfloat ms_expected_race_duration = km_track_length / mph_speed;\n\nVariables, not Constants\n\nPresent options to game designer\nA constant you can tweak is only useful IF the tweaker can figure out which\nconstant does what\nUNITY tips-\nExpose constants in the editor so people can play with them\nBut then make them private if you find a global value that works\n\nVariable Names\n\n●Should be longer than you think\n●Should be pronouncable\n●Should look different: ClientRecs ClientReps\n●Should be spelled correctly\n●Should include the units of measurement\n●Should not be reused\n\nFunction Names\n\n●Should be longer than you think\n●Should be pronouncable\n●Should look different\n●Should be spelled correctly\n●Should include the units of measurement\n\n●Are the primary way you teach other programmers\nabout your API\n\nVariable Scope & Names\n\nvoid FeedThePigs(int num_truffles)\n{\nthis.numHungryPigs -= num_truffles;\nfloat total_cost = num_truffles * gCostInDollarsPerTruffle;\ntotal_cost += CalculateOverhead(total_cost);\ngCash -= total_cost;\n}\n\nParallel Arrays\n\nstring[] PlayerNames;\nint[] PlayerCash;\nVector2[] PlayerLocation;\n\nAVOID.\n\nPlayer[] Players;\n\nOrder Of Operations\n\nfloat y = 35 * x + (int) --fever / 4.0f + x ^ 2 % snarkle++;\n\nI use parenthesis.\n\nWarnings Are Errors\n\n●Warnings are often useful clues about a flaw in your\ncode.\n●When you let warnings stick around, you won't notice\nthe new one that actually matters.\n\nBackwards Conditionals\n\nif (player_spaceship == null) {}\nif (null == player_spaceship) {}\n\nBackwards Conditionals\n\nif (player_spaceship == null) {}\nif (null == player_spaceship) {}\n\n// Because\nif (player_spaceship = null) {} // valid code (in some languages)\nif (null = player_spaceship) {} // NOT valid code\n\n//Similarly,\nif (3 = num_players) {}\nif (\"ferdinand\" = player_name) {}\n\nSplit Up The Math\n\nfloat foo = (x^2 - sqrt( visibility_threshhold - invisibility_factor / ECM_tech ));\n\nvs\n\nfloat adjusted_invisibility = invisibility_factor / ECM_tech;\nfloat visibility = visibility_threshhold - adjusted_invisibility;\nfloat foo = x^2 - sqrt(visibility);\n\nSplit Up The Math\n\nx = foo + bar--;\n\nvs\n\nx = foo + bar;\nbar--;\n\nBooleans\n\nA boolean name should ask a question.\nThat question should be unambiguously answered by TRUE or FALSE.\n\nBooleans\nIsHungry\nHasFood\nWasEaten\n\nDone (yay)\nStatus (boo)\nIsSquare >> Square\n\nMysterious Constants\n\nNever use string or numeric constants when you can use a variable\n\n// Bad\nif (status == \"closed\")\nOR\nif (status == 5)\n\n// Good\nif (status == Status.Closed)\n\nfoo ? bar : baz\n\ngoto\n\n●\ngoto isn't ALWAYS evil.\n○\nJust most of the time.\n●\nSometimes, it can make code MORE readable.\n○\nA convoluted pile of nested IF statements can be really hard to\nunravel.\n\nProximity\n\nKeep related actions together:\n\n●\nAllows reader to mentally clump code.\n●\nReduces frequency of stealth code\n●\nDeclare a variable right before you use it, not 30 lines earlier.\n\nPrepare(x);\nPrepare(y);\nCalculate(x);\nCalculate(y);\nPrint(x);\nPrint(y);\n\nProximity\n\nKeep related actions together:\n\n●\nAllows reader to mentally clump code.\n●\nReduces frequency of stealth code\n●\nDeclare a variable right before you use it, not 30 lines earlier.\n\nPrepare(x);\nCalculate(x);\nPrint(x);\n\nPrepare(y);\nCalculate(y);\nPrint(y);\n\nKISS\n\nKeep It Simple, Stupid.\nKeep It Stupidly Simple.\n\n●\nDo it the easy way first\n●\nThen do it the cool/elegant/efficient way WHEN THE EASY WAY FAILS.\n○\nAnd run it by someone else on your team first.\n\nSystems\n\nResist the temptation to build a system on day 1.\n\nRecursion\n\n●\nRecursion is really fun\n●\nRecursion is really hard to debug\n\n○\nNever recurse when iterating will work just as well.\n○\nNever have two functions recursively calling each other.\n■\nIt might be \"elegant,\" but you will tear your hair out getting it to\nwork.\n■\nAnd you will forever be terrified of changing the code (rightly so)\n\nOptimizing\n\nWait.\n\nOnly optimize your code if it is actually, observably slow.\n\nAddress Bugs ASAP\n\n●Fix bugs before writing new code\n○It will only get harder to fix them\n○You might build on top of the bugs\n○You cannot estimate bug fixes\n○You are always ready to ship\n●Treat warnings as errors\n\nWon't Fix\n\nFixing bugs is only important when the value of having the\nbug fixed exceeds the cost of the fixing it.\n-Joel Spolsky\n\nDebugging\n\n●\nUse a debugger\n○\nLearn it. Love it.\n●\nTalk to a team mate.\n○\nThey probably will have no idea what you are talking about.\n■\nThat doesn't matter.\n●\nTake a walk.\n●\nBinary search\n○\nPerform a test that will cut out as many possibilities as you can.\n●\nIf the bug magically vanishes, you are not done.\n○\nBut now you have a clue.\n\nSource Control\n\n●\nCheck EVERYTHING into source control\n○\nEspecially 3rd party libs\n●\nAnyone should be able to do a get and build\n○\nThe build should be one human step.\n●\nCheck in often\n\nDaily Builds\n\n●The checked-in build must never remain broken.\n○Fix it immediately.\n●Do Check Builds\n○Have a second, clean checkout of the code on your\nmachine\n○When you check in, immediately check out and build\nthere!\n●Daily builds force a code test\n●Daily deliverables force a project status\ncheck\n\nCoding Standards\n\nWhy?\n●\nWe like tidy code\n●\nIt is an objective truth that opening braces belong on the same line as the\ncode\n\nCoding Standards\n\nWhy?\n●\nWe like tidy code\n●\nIt is an objective truth that opening braces belong on the same line as the\ncode\n●\nUniform code can reduce the sense of \"MY code\"\n●\nRules reduce decision fatigue\n●\nEncourages code that is easier to read\n●\nEncourages code that is easier to debug\n\nSources\nCode Complete by Steve McConnell\nJoel is easy to read in blog-sized chunks. He talks as much about management and\nstartups as about code. His writing style is fun and engaging.\n\nSteve has gigantic books that look really daunting. I've never read one from cover to\ncover. However, that's because he has a lot to say and he says it well.\nhttp://www.joelonsoftware.com/\n\nhttp://www.stevemcconnell.com/books.htm\n\nCoding Tips\n\nAndrew Haydn Grant\nTechnical Director\nMIT Game Lab\nOctober 2, 2013\n\nTeam Coding\n\nPair Programming\n\n●\nTwo programmers, one computer\n○\nThe driver writes code\n○\nThe observer or navigator reviews each line of code in real time.\n○\nSwitch roles frequently!\n●\nThe driver considers tactical issues, focusing on the current task.\n●\nThe navigator considers larger issues, acting as a safety net.\n\n???\n\nArt\nPlaceholder art! Awesome.\nTimeboxing\nPhotoshop pngs: save for web!!\nSprite strips\nAudio\nCan kill your download size.\nCompress!\nMono!\nmp3 is a pain, but ogg isn't supported everywhere\n\n???\n\nSlide from BBN presentation- these things are hard\n(in the slow sense)\nSynchronizing music to user inputs\n\nLate Changes\n\nTrespasser Sorting\n\nThe Iceberg Secret\n\n●Very little of your software is visible to the player\n●People judge software by how it looks\n●So make sure that it looks about as done as it is\n\ned;hjsdf;kj\n\nBeware Algorithms\n\nEspecially ones you create yourself.\n\nWait, what?\nCool ways of solving problems are one of the reasons that we all learned to\nprogram. An Algorithm, in the textbook sense, is a particularly clever way of\nsolving a problem. We want to make some of our own.\nOkay, but only make one when you need to.\nThis goes back to performance. Most algorithms are about solving some\nproblem QUICKLY. The first step you should take is solving the problem in\nthe simplest, most readable, least bug-prone way possible.\nThen run it. Computers are fast. This may be good enough.\n\nAfter the simple thing fails, then think about optimizations. After you've done\nthe easy ones, then consider creating an algorithm. No, wait, don't! Look\nonline first. It's be faster and less bug prone to benefit from some poor\nshmuck who has solved (and debugged) this problem before.\n\nIntelligent Design\n\nEvolved code vs designed code.\nIt's stunning, really, how much the code of a long-running prject resembles DNA. There are huge swathes of it that are useless,\nor appear to be. But when you take them out, the program stops working.\nRewriting is dangerous, but only when you are rewriting old, evolved code.\n\n???\n\n●\nKeep functions short.\n●\nDeclare your variables as close as possible to the place where you will use them.\n●\nDon't use macros to create your own personal programming language.\n●\nDon't use goto.\n●\nDon't put closing braces more than one screen away from the matching opening brace.\n\n???\n\nBut also resist the temptation to cut&paste code everywhere. It's already a\ngood idea to split your code up into functions just for readablilty.\nIt's also a good idea to put common code in functions to save debugging time.\nSo make it a function call instead of a cut&paste, but wait for AT LEAST the\nsecond instance of the code. I like to wait for the third instance, but at that\npoint I'm risking forgetting one of the first two.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n\nCMS.611J / 6.073 Creating Video Games\nFall 2014\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Creating Videogames",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/7d5aa5417112862941373710c9950725_MITCMS_611JF14_Sep3InttoCou.pdf",
      "content": "Welcome to CMS.611J / 6.073\n\"Creating Videogames\"\n\nSeptember 3, 2014\nFall 2014 CMS.611J/6.073\n\nComparative Media Studies /\nWriting\nhttp://cmsw.mit.edu\ncritical analysis, collaborative research, and design\nacross a variety of media arts, forms, and practices\n\nFall 2014 CMS.611J/6.073\n\nMIT Game Lab\nhttp://gamelab.mit.edu\n\nGame Design & Research\nCMS.300 CMS.301\nCMS.608\nCMS.615 CMS.610\nCMS.617\nUROP\n\n6.UAP\n\nM.Eng\nFall 2014 CMS.611J/6.073\n\n1-line version of this class...\n\n\"Work face-to-face. Test often.\nPrioritize, integrate & cut features\nearly. Sleep. Avoid 3D & network.\nVersion control.\"\n\nFall 2014 CMS.611J/6.073\n\n❖4 Game Projects that build to a common theme\n\"Meaningful Decision Making\"\n➢Project 1: \"Planning for Randomness\" Non-digital\n➢Project 2: \"Planning for Randomness\" Digital\n➢Project 3: \"Tradeoffs in Decision Making\"\n➢Project 4: \"Help policy makers understand the need\nto spend money, time, & resources on disaster\npreparedness\nStructure\nFall 2014 CMS.611J/6.073\n\nGrading Rubric\n❖Game Functionality\n❖Iterative Design Process\n❖Teamwork & Project Management Practices\n❖Group Postmortem Presentation\n❖Written Postmortem\n\nAll but the written postmortems are team-delivered\nFall 2014 CMS.611J/6.073\n\n❖This class is run as 2 3-hour workshops\n❖Class time will be allotted for work in teams\non projects\n➢~60 min per session for Projects 1 & 2\n➢Up to ~90min per session for Projects 3 & 4\n❖Teamwork is the heart of this course!\nIn Class Expectations\nFall 2014 CMS.611J/6.073\n\n❖Regular attendance is mandatory (MW 1-4p)\n➢Grade penalties if you miss more than 3 classes\nw/o justification\n❖Do not be late!\n➢Be in this room by 1:10pm!\n➢We will lock doors during guest lectures to prevent\ndisruption. Doors will unlock afterwards to allow you\nto work with your team that day.\nAttendance & Lateness\nFall 2014 CMS.611J/6.073\n\n❖Harassment includes offensive verbal comments related\nto gender, gender identity, sexual orientation, disability,\nphysical appearance, body size, race, religion, sexual\nimages in public spaces, deliberate intimidation,\nstalking, following, harassing photography or recording,\nsustained disruption of talks or other events,\ninappropriate physical contact, and unwelcome sexual\nattention.\n❖If you see something or are a target of harassment,\ncontact any of your instructors or TA in person or via\nemail.\nHarassment & Behavior\nFall 2014 CMS.611J/6.073\n\n❖Modern videogames are created by teams of individuals\nwith differing yet complementary skillsets.\n➢Programmers\n➢Designers\n➢QA Testers\n➢Artists\n➢Sound Designers\n➢Composers\n➢Community Managers\n➢Business Analysts\n➢Marketers\nCreating Videogames?\nFall 2014 CMS.611J/6.073\n\n❖This class is designed to give hands-on experience in\nworking on complex projects with large teams.\n❖Team size grows from 3 in project 1 to a minimum of 8\nin project 4\n➢Communication becomes important!\n➢Bottlenecks form!\n➢Quality of code and assets can easily nosedive!\nCreating Videogames?\nFall 2014 CMS.611J/6.073\n\nTeam & Project Management\n❖We will use tools and methods to manage these\nproblems!\n➢Code & Asset Workflows\n➢Code Review\n➢Product Backlogs & Task Lists\n➢Retrospectives\n❖Ultimately, however, prior experience in working in\nthese environments is your best solution!\nFall 2014 CMS.611J/6.073\n\n1-line version of this class...\n\n\"Work face-to-face. Test often.\nPrioritize, integrate & cut features\nearly. Sleep. Avoid 3D & network.\nUse version control.\"\n\nFall 2014 CMS.611J/6.073\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Lecture Notes",
      "title": "Game Engine Selection",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/9d35a969f845f919a9c696530ca45fc3_MITCMS_611JF14_Game_Engine.pdf",
      "content": "Game Engine Selection\nAndrew Haydn Grant\nTechnical Director\nMIT Game Lab\nSeptember 3, 2014\nFall 2014 CMS.611J/6.073\n\nGames Are Software\n● UI\n● Back end\n● Design/Spec/Customer\n● Features\n● Bugs\n● Task lists\n● etc.\nFall 2014 CMS.611J/6.073\n\nGames Are Software++\n● UI must be intuitive\n● User testing\n● \"Fun\"\n● User testing\n● Gameplay Difficulty\n● User testing\n● Emotional Impact\n● User Testing\nFall 2014 CMS.611J/6.073\n\nPreview\n● Why Use A Game Engine?\n● Criteria For Game Engine Selection\no Dealbreakers\no Nice to have\n● Engines\no The Good\no The Nooses\n● Final Word\no How To Learn An Engine\no All Software Sucks\no Engine Assignment Mechanic\nFall 2014 CMS.611J/6.073\n\nTinker Toys vs Vision\nThis is what I WANT.\nHow do I make it with these?\nThis is what I HAVE.\nWhat can I make?\nFall 2014 CMS.611J/6.073\n\nDefinition of \"Hard\"\n\"Actually, I don't care how hard it is.\nHow long will it take?\"\nFall 2014 CMS.611J/6.073\n\nNOT Writing Code\n● Coding Is Slow\no think\no implement\no debug\no integrate\no debug\no debug\no debug\nFall 2014 CMS.611J/6.073\n\nNOT Writing Code\n● Coding Is Slow\no think\no implement\no debug\no integrate\no debug\n● So Write Less Code\no Paper Prototyping\no Iterative Design & Testing Early\no Game Engines\nFall 2014 CMS.611J/6.073\n\nWhy A Game Engine?\n● Time\no Avoid reinventing the wheel\no Avoid certain kinds of bugs\no Define general direction of your\narchitecture\n● Inspiration\no Use the feature list as a set of possibilities\no Use the feature list as a set of limitations\nFall 2014 CMS.611J/6.073\n\nPreview\n● Why Use A Game Engine?\n● Criteria For Game Engine Selection\no Dealbreakers\no Nice to have\n● Engines\no The Good\no The Nooses\n● Final Word\no How To Learn An Engine\no All Software Sucks\no Engine Assignment Mechanic\nFall 2014 CMS.611J/6.073\n\nGame Engine Selection\n● It's an important decision\n● But don't stress about it too much.\no No engine is perfect.\nFall 2014 CMS.611J/6.073\n\nPreview\n● Why Use A Game Engine?\n● Criteria For Game Engine Selection\no Dealbreakers\no Nice to have\n● Engines\no The Good\no The Okay\no The Nooses\n● Final Word\no How To Learn An Engine\no All Software Sucks\no Engine Assignment Mechanic\nFall 2014 CMS.611J/6.073\n\nPrimary Selection Criteria\n(dealbreakers)\nCost\nFree\nvs\nPainful\nvs\nImpossible\nFall 2014 CMS.611J/6.073\n\nPrimary Selection Criteria\n(dealbreakers)\nPower: Can We Build It?\n● Fundamentals only\no Ignore bells & whistles\n● 3d/2d\n● Publishing platform\n● Input methods\n● Other known requirements\nFall 2014 CMS.611J/6.073\n\nPrimary Selection Criteria\n(dealbreakers)\nEase of learning\n● Search engine friendly\no\nSupport community!\n● Tutorials & Documentation\no\nSupport community!\no In-house experts?\n-\nA person knowing the engine is only useful if that person WELCOMES being a teacher.\n● Learning Curve\nFall 2014 CMS.611J/6.073\n\nPrimary Selection Criteria\n(dealbreakers)\nEase of Use\n● Strongly Typed Programming Language\no\nCompile-time error detection\no\nFree Communication Channels\n-\nAuto-complete code editor\n-\nEasier Integration\nFall 2014 CMS.611J/6.073\n\nClose Enough\nIf you know one, you know the others:\n● Java\n● C#\n● AS3\n● Haxe\nExtra bonus:\n● C++\nIf you know this, you know all of the above.\nFall 2014 CMS.611J/6.073\n\nNot Close Enough\nJava != Javascript\nFall 2014 CMS.611J/6.073\n\nPrimary Selection Criteria\n(dealbreakers)\nEase of Use\n● Source control friendly?\n● Debugging?\nFall 2014 CMS.611J/6.073\n\nPrimary Selection Criteria\n(dealbreakers)\nRobust Product\n● Few bugs\no\nHard to analyze quickly\no\nCues:\n-\nStrong Community\n-\nLarge Community\nFall 2014 CMS.611J/6.073\n\nPreview\n● Why Use A Game Engine?\n● Criteria For Game Engine Selection\no Dealbreakers\no Nice to have\n● Engines\no The Good\no The Nooses\n● Final Word\no How To Learn An Engine\no All Software Sucks\no Engine Assignment Mechanic\nFall 2014 CMS.611J/6.073\n\nSecondary Selection Criteria\n(nice to have)\nEase of Use\n● Asset pipeline\n● Source Code Available?\n● Code IDE?\n● World Editor?\n● Profiling?\nFall 2014 CMS.611J/6.073\n\nSecondary Selection Criteria\n(meh)\nPower: Bells And Whistles\n● Rendering Speed\n● Pathfinding\n● Physics\n● Shaders\n● Shadows\n● Particle Systems\nFall 2014 CMS.611J/6.073\n\nCriteria I Don't Use\n● Scripting Languages\n● Beautiful Games\nFall 2014 CMS.611J/6.073\n\nPreview\n● Why Use A Game Engine?\n● Criteria For Game Engine Selection Dealbreakers\no Nice to have\n● Engines\no The Good\no The Nooses\n● Final Word\no How To Learn An Engine\no All Software Sucks\no Engine Assignment Mechanic\nFall 2014 CMS.611J/6.073\n\nWhy Flixel?\n● Free\n● Publishes to web in Flash\n● Robust\n● IDE\n● All source visible\n● Strongly typed language\n● Simple object oriented architecture\n● Excellent for 2d sprite-based\nAction\nFall 2014 CMS.611J/6.073\n\nLearning Curve: Flixel\nFall 2014 CMS.611J/6.073\n\nWhy Not Flixel?\n● Not so good at heavy GUI work\n● Falling usage\no Adobe is insane\nFall 2014 CMS.611J/6.073\n\nWhy Unity?\n● Free\n● Publishes to web\n● Excellent Community\n● Robust\n● IDE\n● Excellent Asset Pipeline\n● Strongly typed language\no and two weakly typed ones\n● Harder to learn than Flixel, but easier than almost\neverything else\n● Simple, but unusual component-based architecture\nFall 2014 CMS.611J/6.073\n\nWhy Not Unity?\n● 3D\n● Source Control/Merge\n● Not so good at heavy GUI work\nFall 2014 CMS.611J/6.073\n\nPreview\n● Why Use A Game Engine?\n● Criteria For Game Engine Selection\no Dealbreakers\no Nice to have\n● Engines\no The Good\no The Nooses\n● Final Word\no How To Learn An Engine\no All Software Sucks\no Engine Assignment Mechanic\nFall 2014 CMS.611J/6.073\n\nNooses\n● Haxe Flixel\no AS3, Flash pedigree\no Flixel Pedigree\no Untried\n● Phaser\no Education Arcade\no Javascript\n-\nbleah- use Typescript!\no Untried\nFall 2014 CMS.611J/6.073\n\nLearning A Game Engine\n● Start with a tutorial\n● Try something very small\n● Skim the docs\n● Try something harder\nFall 2014 CMS.611J/6.073\n\nAll Software Sucks\nBut we still use it.\nFall 2014 CMS.611J/6.073\n\nAnalysis Assignment\n● You can trade game engines.\n● Spend no more than 4 hours learning your game engine.\no If you finish the tutorials, start making an Asteroids or\nSpace Invaders clone.\n● Bring your experiences to class Wednesday (Sept 10)\no ... and a development machine!\nFall 2014 CMS.611J/6.073\n\nGame Engine Selection\nAndrew Haydn Grant\nTechnical Director\nMIT Game Lab\nSeptember 3, 2014\nFall 2014 CMS.611J/6.073\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "High Level Design Document",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/fe72e5f0c2388e03bfd5ea323ec798c3_MITCMS_611JF14_HLDD.pdf",
      "content": "Vision:\nWhat's the guiding vision of this game? Innovative gameplay? Deep, meaningful narrative? The\nability to take down your opponent with a single well timed slice? Amazing audio? An interactive\nstory? What is at the core of this project, that you can come back and focus on when design discussions\nwaver and development is stymied?\n\nTeam/Responsibility Breakdown:\nJobs, hours, responsibilities.\nMajor Gameplay Concepts:\nWhat is core to your game, that hasn't already been covered. A story? Networking? Co operative\nplay? PVP? If you were writing the five markegin points to go on the back of your game's box, to\nadvertise it, what would they be?\n\nThirty Seconds of Gameplay:\nWhat am I going to do most in your game? Is it going to be fun and engaging? Come back & reread\nthis section: you'd be amazed at how often your 'intended' key game play gets cluttered away with 'and\nwe coulds...'\nRisks:\nKey technical, personnel, scope, time, etc risks. What's scariest about the project you want to do?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\n\nCMS.611J / 6.073 Creating Video Games\nFall 2014\n\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Paper Prototyping",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/348ee58d265e61e4760d196bd97b1ad1_MITCMS_611JF14_Paper_Prot.pdf",
      "content": "Phillip Philip Tan\nPaper Prototyping\nMIT Game Lab\n\nPrototypes are much faster to build than finished implementations, so we can evaluate them sooner and get early feedback about the good and bad points of a design.\nIf we have a design decision that is hard to resolve, we can build multiple prototypes embodying the different alternatives of the decision.\nA prototype can be changed more easily. Paper is easy to change. You can even change it in the middle of a test. If part of the prototype was a problem for one user, you can scratch it out or replace it before\nthe next user arrives. Paper is more malleable than digital bits in many ways.\nIf the design flaws are serious, a prototype can be thrown away. It's important not to commit strongly to design ideas in the early stages of design. Unfortunately, writing and debugging a lot of code creates a\npsychological sense of commitment which is hard to break. You don't want to throw away something you've worked hard on, so you're tempted to keep some of the code around, even if it really should be\nscrapped.\nIn fact, this exercise should end up with a prototype that is not immediately useful for your digital project!\nThis is a good mindset to have in early iterations, since it maximizes your creative freedom.\nWhy Prototype?\nGet feedback\nearlier, cheaper\nExperiment with\nalternatives\nEasier to change\nor throw away\n\nFind the fun!\n\"A series of interesting choices\" - Sid Meier\n\nPrototyping lies at the heart of good game design. All you have are the fundamental mechanics to keep you engaged, and if these mechanics can sustain the interest of testers, then you know that you're\nonto something.\n\nThe main advantage of prototyping is that it forces you to define game mechanics in their purest form.\n\nFocus on the small handful of choices that the player must make to play the prototype.\nModel a system with a few basic rules that creates interesting choices for the player.\nAlways ask a question about your game and make sure it's falsifiable.\n\nPhysical prototyping does not give insight to everything, e.g. the sensory experience created by a digital game, the feasibility of implementing a digital feature.\n\nGet on the same page!\nImagine getting in a room with developers who know nothing about the project and you are trying to describe to them the game you have in your head.\n\nIf you want to create gameplay that people have never seen before, it may be impossible. A written treatment or design document is good, but when you need to communicate how a complex system works, it\ncan't compare to a prototype that someone can actually play. A physical prototype that they can sit down and play helps them grasp your vision of the game. They have something solid to work from.\n\nAny game design benefits tremendously in its early stages by building a physical prototype. Physically prototyping allows you to build a structure for the game, think through how the various elements interact,\nand formulate a systemic approach to how the game will function.\n\nAt a minimum, physical prototyping forces you to think through the design elements and define them. You can always change them down the road, but this gives you a framework to build upon, and that in\nitself can save you from stumbling around blindly when it comes to preparing and launching a production team.\n\nBring in players!\nNo special skills are required for people to play paper prototypes. Artists, designers, producers, coders, QA leads, audio leads, and even players can help create prototypes and operate them.\nUnlike a sketch or storyboard, a paper prototype is interactive. You can actually user-test it: give users a task to do and watch how they do it.\nIf you do several prototypes and present them to the same player, people tend to be more ready to criticize and offer problems, which is exactly what you want in the early stages of design.\nPaper prototypes can reveal many usability problems that are important to find in early stages of design. Fixing these problems may require large changes in design. If users don't understand the metaphor or\nconceptual model of the interface, for example, the entire interface may need to be scrapped.\nIn some cases, suggestions from players can also be implemented directly into the prototype, allowing testers to be involved in the design process. This can be very useful in co-design.\nDesigners should be cautious and vet each suggestion to see if it fits their vision. Testing is not a replacement for direction.\n\nIndex cards can be used as cards (shuffling, hidden information, recording options) or for rules\n\nDice can be tokens, help keep track of stats. Don't use two D10s for large numbers! Use a notepad instead.\n\nI find kindergarten counters more useful than game bits. There's little assumption about what they're supposed to be, no worries about returning them back to the games they came from.\n\nDon't get too enamored with the interlocking cubes (or any other particular prototyping tool).\n\nDon't forget to keep a record of your drafts and setups. Use your mobile phone camera during the session, a photocopier or scanner for your project.\nBig sheets of paper\nIndex cards\nDice\nPost-it(r) glue and notepads\nPencils, pens, markers, scissors, tape\nGame bits, small toys, kindergarten counters\nPhotocopier, mobile phone camera\nUseful tools\n\nThe computer is the person responsible for making the prototype work. This person moves around the pieces, writes down responses, and generally does everything that a real computer would do. In\nparticular, the computer should not do anything that a real computer wouldn't. Think mechanically, and respond mechanically.\nThe facilitator is the human voice of the design team and the director of the testing session. The facilitator explains the purpose and process of the user study, obtains the user's informed consent, and\npresents the user study tasks one by one. While the user is working on a task, the facilitator tries to elicit verbal feedback from the user, particularly encouraging the user to \"think aloud\" by asking probing (but\nnot leading) questions. The facilitator is responsible for keeping everybody disciplined and the user test on the right track.\nEverybody else in the room (aside from the user) is an observer. The most important rule about being an observer is to keep your mouth shut and watch. Don't offer help to the user, even if they're missing\nsomething obvious. Bite your tongue, sit on your hands, and just watch. The observers are the primary note takers, since the computer and the facilitator are usually too busy with their duties. Have a notepad\non hand!\nTeam roles\nPlayers\n\"Computer\" or facilitator\nObservers\n\nWizard of Oz\nSomeone plays the\n\"computer\"\nVery constrained\nCommunication\nRules\nDon't let the player\nknow what the\n\"computer\" is thinking\nDepth refers to how deeply each feature is actually implemented. Is there a backend behind the prototype that's actually implementing the feature? Low-fidelity in depth may mean limited choices (e.g., you\ncan't print double-sided), canned responses (always prints the same text, not what you actually typed), or lack of robustness and error handling (crashes if the printer is offline).\nCan be high-fidelity in depth at little cost, since a human being is simulating the backend.\n\nMay still be useful for single-player games\n\n\"NPC\"s can have different rules from \"PC\"s\n\nHard to get consistent results across tests\n\nStill absolutely necessary for multiplayer games\nPlayer vs Player\nPeople play together\nCooperative/Competitive\nSymmetric/Asymmetric\nVery loose\nOpen communication\nRule negotiation\nFacilitator helps to explain rules\n\nNot for today's exercise!\nPredetermined rules\nExplained before game\nLoose interpretation and constraints\nLimited communication\nTry it for \"avatar walks around\" games\nLive Action\n\nHand drawing is fast. You can draw many sketches in the same time it would take to draw one nice picture, let alone implement a game with code.\nSome of you can draw very nicely. Try to make it look rough and sketchy.\nSketchy prototypes focus attention on the issues that matter in early design without distracting anybody with details. You aren't bothered with details like font, color, alignment, whitespace, etc.\nRough prototypes improve the feedback you get from users. They're less likely to nitpick about details that aren't relevant at this stage. They won't complain about the color scheme if there isn't one.\nA hand-sketched design also seems less finished, less set in stone, and more open to suggestions and improvements.\nBig is good. A paper prototype should be larger than life-size. Fingers are bigger than a mouse pointer.\nEveryone involved needs to see what's going on during testing.\nOne dark ink. Don't worry too much about color in your prototype. Use a single, dark color for text.\nYou can use color to differentiate between different types (cards, bits) but anything you draw should be monochrome.\nKeep it rough!\nHand-drawn\nSketchy\nBig\nOne dark ink\n\nKeep track of your rules!\nWrite rules on cards\nRearrange flow control\nUpdate cards as you\nchange rules\nPeriodically take photos\nSimplify, simplify,\nsimplify\nGame paper prototypes should only represent a subset of your feature set.\n\nWhile it's easy to cram more features into a paper prototype (just sketch/write more) it is usually detrimental to iteration, since it makes it harder to identify which feature caused problems.\n\nAlso, feature creep makes playtesting longer because people have more to read or understand before they can play.\n\nQuestion: Start with a problem to be solved and an idea to be tested. Make sure it's falsifiable - what does a workable solution need to achieve? You can also look at Axiomatic design: establish Axioms - things\nthat you are taking to be true or baseline that need to be fulfilled by any workable design, then think of solutions.\n\nRapid design: The key point of prototyping is that it has to be rapid. The more iterations a game can undergo, the higher quality it will be, so spending time discussing issues can be a waste of time. There is a\ngreat tendency among designers to debate the outcome of something that could be tested in half the time.\n\nPlaytest: A full or partial play session to identify strengths and weaknesses in the design.\n\nKeep iterating!\nQuestion\nRapid design\nPlaytest\nRevise\nRepeat\nRevise: Fortify weaknesses or build upon strengths. Sometimes, changes are small incremental changes incorporated one at a time. Keep and eye out for unexpected play dynamics that cause the game to go\nin a completely different direction, those might be gold.\n\nRepeat: Play again! Once things seem to be working, grab someone from another prototyping group to playtest.\n\nKeep changing!\nAmend, replace, kill\nLimit/unlimit\nPlayer interference\nMess with the play order\nMultiply/divide by 2\nCore and reconstruct\nThrow away\nKill a Rule\nKilling a rule is usually a good thing to do in the prototype stage. Identify the core of the game and start by killing every rule that doesn't directly affect the core of the game.\n\nMake a Resource Limited (Or Unlimited)\nInteracting with Your Friends (multiplayer, or single-player vs NPCs)\nWhile it's always fun to win a game, it's occasionally as fun to stop someone else from doing the same or otherwise affect their play.\n\nLook at the various actions your players are performing in a game. Next, ask yourself, \"How could someone else stop that from happening or make it happen even faster?\" You can even take it one step further\nand ask how players could then protect themselves from aggressive moves or solicit help more directly from their opponents.\n\nAllowing players to affect the play of other players is an effective means of introducing a bit of uncertainty even in the most mundane games. It also forces a minor amount of strategy on players who must\nconsider preparing a counter to that attack or a means to ally with another player.\n\nMess with the Play Order\nWe've talked about rearranging the order of the rules. Consider allowing players to mess with them too: Mechanics such as \"go again\" and \"skip a turn\" in board games are also common.\n\nUse the \"Rule of Two\"\nIf something seems off but you're not sure what, take one of the game's values and either multiply or divide it by two. Making such a drastic change gives you insight into how the game's values interact with\neach other and what effects they have on play, and you'll often realize things you never would have seen if you made smaller, incremental changes.\n\nCore and reconstruct\nThe prototype you've created may or may not be very playable. Parts may be out of balance and rules may conflict. Your game may also feel slow or disjointed.\n\nMany designers panic at this point and throw out everything. They feel that their game is hopeless and the only solution is to start from scratch with a new game idea concept.\n\nBefore you take such drastic measures, go back to your just your core game mechanics.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Assignment",
      "title": "Assignment: Game Engine Tutorial",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/0ae04c372894a22ed7359fafb9092cb1_MITCMS_611JF14_GameEngine.pdf",
      "content": "Assignment: Game Engine Tutorial\nCMS.611J/6.073 Fall 2014\nAssigned:\nSeptember 3, 2014\nClass Discussion:\nSeptember 10, 2014\nGoal: Each student will complete a tutorial for an assigned game engine to better understand\ncapabilities of various game engines that will be used throughout class. Students will discuss\ngame engines in class. No turn-ins required.\nYou will be assigned one of the four game engines below on September 3rd. You may trade\nassigned engines with another student.\nDownload the software development kit for the game engine and install it onto your computer.\nComplete a tutorial for the game engine. Create an executable standalone program that is able\nto run on a separate computer or browser without having to install development tools on the\ncomputer. Test your executable on a separate computer and take note of the results.\nWe estimate this tutorial to require 2 to 4 hours of focused effort. After 4 hours, you may stop\nworking on the tutorial even if you have not completed the goal of a tested executable on a\nseparate computer. Take note any difficulties, challenges or frustrations involved in installing or\nlearning the tools and be prepared to share what you have learned with classmates.\nWe recommend you use one of the tutorials listed below. We will have an inclass discussion\nand workshop on Wednesday, September 10th. Everyone will be asked to share their thoughts,\nexperiences, and evaluations of the various game engines. Everyone will then work with another\nstudent to share and compile code.\nFlixel\nhttp://flashgamedojo.com/go/ (Download an integrated development environment for your OS)\nhttp://flixel.org/ (Download Flixel ActionScript 3 libraries)\nhttp://flashgamedojo.com/wiki/index.php?title=EZPlatformer_(Flixel) (Create a game)\nHaxeFlixel\nhttp://haxeflixel.com/documentation/getting-started/ (Install HaxeFlixel tools and libraries)\nhttp://www.adobe.com/support/flashplayer/downloads.html#fp14 (Install debug Flash Player)\nhttp://haxeflixel.com/documentation/tutorials/ (Create a game)\nUnity3D\nhttp://unity3d.com/unity/download (Download Unity3D game engine and editing tools)\nhttp://unity3d.com/learn/tutorials/projects/roll-a-ball (Create a 3D game)\nhttp://unity3d.com/learn/tutorials/modules/beginner/2d/2d-overview (2D game fundamentals)\nhttp://unity3d.com/learn/ (Documentation and more tutorials)\nPhaser\nhttp://phaser.io (Download Phaser codebase or fork via GitHub)\nhttp://phaser.io/getting-started-js.php (Set up editor and web server or cloud account)\nhttp://www.photonstorm.com/phaser/tutorial-making-your-first-phaser-game (Create a game)\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Bugs and Bug Reporting",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/77735532cada1b978e3545dbe5b57da0_MITCMS_611JF14_BugReportng.pdf",
      "content": "__________________\n\nBugs and Bug Reporting\nWhat's in this doc:\n1. What is QA, and what do testers do?\n2. What is a bug?\n3. How do you find one?\n4. How do you report it?\nI. Testing and Quality Assurance\nQuality assurance is the process that guarantees a product - software, a game, a hat - meets\nthe standards that someone - the client, the consumer, the producer - expects it to.\nTesting is one of the primary tools in the Quality Assurance process, the only way to guarantee\nthat something meets a particular standard is to *test* it against that standard, and check the\nresults to see if they are what was expected. So, the primary job of a QA tester is precisely that:\nplay through the game, comparing what occurs in game vs what is expected to occur (according\nto design), and reporting as bugs all those places where the game's performance does not\nmatch the expectation.\nII. What is a bug?\nSimply put, a bug is a behavior in the software that causes the game to behave in a manner that\ndoesn't meet the expected behaviors or standards. A more technical term for a bug would be\na software defect, but the colourful parlance of 'bug' is well rooted in the history of computers\nand engineering in general. For a more detailed description about bugs, go ahead and read the\nwikipedia article.\nIII. Finding bugs.\nBasic testing: Check to see if it works!\n● The player should not be able to break or crash the game while playing it.\n● All features should behave as detailed in the game design/ checklist. If they don't, either\nthe game or the checklist should be fixed.\nEven before a tester knows the system specs (specifications) for a game (or a piece of\nsoftware), there are easily apparent bugs to be found. Any obvious software failures, such as\ncrashes, glitches, hangs; characters that move oddly or don't move at all, buttons that when\npressed don't do anything - those are bugs. This is still testing against a standard; it's the just\nthe simple standard any person starting up a program should expect: the player should not be\nable to break or crash the game while playing it. The program's behavior should not confuse\nplayers unless it is intended to.\n\nOnce a tester is more familiar with the game,the next standard of testing is against the actual\ndesign of the game. Here is where checklists and design docs become important - if a tester\ndoes not know how a game is supposed to behave in a given situation, it is impossible to know\nif particular feature - be it a weapon, a button, or a cutscene - is behaving properly. How does\na tester know how high the avatar should be able to jump, or how long a cutscene should\nrun? Read the design docs. Ask the team. Talk to other testers. Read the checklist. And\nuse some common sense - checklists and design docs get out of date. If something doesn't\nmatch the 'described behavior', but it seems to work well with the game, and to fit properly,\nask. Update the checklist/design doc if necessary to keep the next tester from making the same\nmistake. If features do not behave as described in documentation, then it's a bug - often in the\ngame, sometimes in the documentation. Both need to be fixed.\nAdvanced Testing: Sharing your opinion!\n● Features that look good in a design doc sometimes don't play well.\n● User interfaces that look like they work... sometimes don't.\n● Sometimes, if there was just one more thing the player could do....\nOften when a tester is playing a game, everything can run fine, work according to spec... and\nstill not be right. Testers spend a lot of time playing the game - often, more than the designers.\nGood feedback about the gameplay, the mechanics, and the user interface are important from\nthe QA testers.\nEspecially the user interface. If you don't like clicking through eight levels of menu to\naccomplish something in game, the casual user is really going to LOATHE it. If the game\ncontrols are very persnickty, and it bothers you... it will truly infuriate your user. And that's\nsomething the designers of the game won't see, because they won't play the game for hours -\nand that's where that sort of repetition goes from annoying to put-the-game-down irritating.\nHowever, this is where many testers get into trouble. As a tester, if you are offering an\nopinion about the features in the game, be it positive or negative, you need to be careful to be\ncritiquing rather than criticizing. What's the difference?\nA criticism is an unsupported opinion, sometimes delivered in an unprofessional tone. \"Hey,\nthe second cutscene sucks - it's too long and nothing happens in it.\" The game might even\nneed that criticism - no one wants a lousy cutscene in the game. But the right way to deliver\nthat feedback is politely, with an explanation of why it's not good, how long is too long, and what\nyou mean by 'nothing happens in it.'\nA critique is a statement of opinion about the game, backed up by facts, examples, and a\ndispassionate explanation. For example... \"The BFG doesn't feel powerful enough. It takes\nit 2 full clips of ammo to take out Big Boss Number one, while my MiniGun takes out the same\nboss in 1 clip. But the BFG is built up in the fiction as being the biggest, baddest gun around.\"\nAlternatively, \"I didn't like placement or the story of the second cutscene. I was having a great\ntime playing the game, zooming around, and then suddenly, control was taken out of my hands\n\nand I had to sit back for over a minute, watching two people talk about things that didn't feel\nat all relevant to what I was doing.\" Those are critiques: they state a problem, or even just an\nopinion, and give support - facts, evidence, examples - as to why it's a problem.\nGood games need critique from testers - in a very real way, the tester is the first player to play it,\nand their opinions are going to reflect other players' - ie, the audience's - initial reactions. If the\ntesters don't like the game, there's something wrong with it, and the team needs to hear that -\npolitely.\nExpert Testing: Feature Suggestions\nAt some point, everyone who plays a game thinks like a game designer, and has an idea about\nwhat to add to make it better, testers included. This is, however, expert testing. Wait until you\nhave a good feel for the game, how it is supposed to play, and what kind of an aesthetic &\ngame dynamic the game designers are going for. Be prepared to have nine out of ten of your\nsuggestions shot down, because they are too hard, there isn't enough time, or 'we tried that\nalready.'\nFor the best possible reception, write your feature ideas as critiques, worded politely, and\nprovide supporting evidence. Explain what problem you're trying to solve with this suggestion,\nand then offer your idea as a suggestion. Often, the designers will agree with you on the\nproblem, but come up with an alternate way to solve it. That's their job, and their privilege.\nBug Feedback: You are a professional, and should be treated as such.\nGame development is often not just a 'job'; most developers see themselves in the work they\ndo, and therefore in the quality of the game. Sometimes this makes them oversensitive to\ncritiques and bug reports. However, just as a tester is responsible for giving professional\nreports, developers are also responsible for accepting your feedback in a professional manner.\nIV. Reporting Bugs\nWhen you report a bug, the goal is to include in the bug report everything the developer will\nneed to go in, locate the bug, reproduce it, and then fix it. In the real world, many bugs aren't\nthat easy to nail down, but as a tester, you still need to try.\nSo, for every bug, you should follow roughly the same formula, and gather the following\ninformation for your bug report.\n1. Check for Duplicates - has someone already reported this bug? Open the database,\ndo a key word search/ title scan to see if this has already been reported. If so, stop now,\nunless you have new information to add to the report that will help the developers fix it.\n2. Steps to Reproduce: Explain exactly how to reproduce the bug, and how reliable the\nreproduction is. (IE, if you follow these steps, it will happen every time; or, it will have 2\nout of 3 times, or, I did it once but then couldn't get it to happen again after 10 times.\n\na. Take the time to nail down a good set of repeatable steps. Sometimes the Steps\nto Reproduce are quick and easy, and you just need to do one pass to confirm\nthat's how it works; sometimes it's a lot harder. Always do the confirmation step.\nb. It never hurts to ask another tester to reproduce your bug on their machine\nbefore filing the report, just to confirm that your Steps can be followed.\n3. Compatibility Issues: Is there a hardware or software component to the bug? For\nbrowser games, which browser were you using? Does it happen in all browsers? Is it\nOS specific? Machine specific?\n4. Frequency: How common is the bug? (This is related to repeatability!) Does it happen\nevery 2 seconds, or under a blue moon of carefully constructed sequences?\n5. Severity: How serious is the bug? IE - when it occurs, how badly does it disturb the\nplayer's game? Does it crash the system, or does it mean that the player has to go pick\nup a different red jewel to go on?\n6. Description:\na. What is the precise behaviour of the bug - ie, what happens in game?\nb. What is the *expected behavior* that should have happened?\n7. Supporting Data: Would taking a screenshot of the bug make it much easier to\nunderstand? If so, do so, and attach it to the report.\na. Is there error data, from a popup window, error box, crashdump log? If so,\ninclude it.\nb. If it's a serious bug - a crash, a hang, a feature malfunction that breaks playability\nis there a developer around you can talk to immediately? Can you try to\nreproduce the bug for them running the debugger?\nLooking over the list, it's a lot of information - and time - for just one bug. However, the more\nyou do it, the faster you will get. Also, the more bugs you report, and the more testing you do,\nthe better you'll get a feel for how much verification any one bug needs before it gets reported.\nUse your common sense - if there's a misspelling in one of the menus, you don't need to spend\na lot of time reproducing, verifying, and checking to see if it happens on all browsers or not.\nOne screenshot, along with an explanation of where it appears, is enough. Crashes and hangs,\non the other hand, usually need a second pass to check on the repeatability, and often need\nsome research to figure out their precise Steps to Reproduce.\nYou've found a bug. You've got a pile of data to support it. Now what do you do with it? Put it\nin the database, and assign it to the team contact, of course.\nVI. Life of a Bug\nFrom Open To Close\nYou find a bug, you report a bug, it's the developer's problem now. Until, of course, the bug\ncomes back to you. Why would it do that?\n\nWell, that's the normal life of a bug. Bugs are found, reported in the database, assigned to\na fixer, fixed, and then confirmed as fixed in the current build. Testers are responsible for\nconfirming that a bug has been fixed, so all bugs (eventually) return to their initial reporter.\nSometimes bugs return unfixed, because a developer needs more information to fix the bug.\nIn that case, bugs will show up as Status: OPEN, Assigned: TESTER NAME. If you get a bug\nassigned to you, while still open, it's your responsibility to get the information the developer\nneeds. There should be a comment added to the bug report explaining what they need; ideally,\nthe developer came and talked to you in person as well. Feel free to go back and talk to the\ndeveloper if you don't understand what's needed by them.\nAvoid having database conversations, where you trade the bug back and forth, adding\ncomments like \"Here's the repro...\" \"That didn't work, try again\"... \"No, really, here's the repro..\"\netc. Go talk to someone face to face.\nWhen a bug shows up as Resolved: Fixed and assigned to a tester, it's time to verify it. Before\nyou go in and do so, make sure the bug fix is in the build you are testing. The developer should\nindicate in their Fixed comments as of which build the bug is fixed; if you're not sure, ask.\nReview the bug before Closing it. Make sure that if it is hardware or software specific, you are\nreproducing it on the relevant setup! Verify it is fixed, and mark the bug Closed. If it isn't fixed,\nupdate the bug with your new information, why you are declaring it not fixed, and assign it back\nto the developer who 'fixed' it.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class on Creating Video Games, Anticipatory Humanitarian Action: Forecast-based Early Warning Protocol",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/992826e4dcd24682b6a737c3172c6468_MITCMS_611JF14_funding.pdf",
      "content": "Anticipatory Humanitarian Action:\nForecast-based early warning protocol\n\nWorldwide investments in disaster risk reduction (DRR)\nhave shown tremendous returns when compared to losses\nand expenses that have been avoided after a hazard\nstrikes. However, humanitarian and development\norganizations currently invest only in DRR actions to\nreduce long-term risk of disaster, such as livelihood\ndiversification or structural modifications to the\nenvironment. Beyond these currently funded programs,\nthere are a number of shorter-term actions that can be taken both by humanitarian organizations\n(ie: prepositioning relief supplies) and by disaster-prone communities (ie: moving animals out of a\nfloodplain) that could drastically reduce the impact of a hazard before it occurs. However, these\nactions are routinely overlooked, and disaster response is only scaled up after the hazard strikes.\n\nThese shorter-term actions are not worthwhile to implement on an everyday basis, but should be\ntaken months, weeks, or days before a disaster, when the disaster risk is higher than normal. What\nindicates a heightened risk of disaster? Science-based forecasts of rainfall and temperature can\nanticipate extreme events, and alert the humanitarian community to the enhanced risk. Climate and\nweather services enable forecasting at different timescales (imminent storm warnings, seasonal\nrainfall forecasts based on El Nino, etc.), yet the humanitarian sector vastly underutilizes this\nknowledge in its efforts to reduce losses among the most vulnerable.\n\nAfter a forecast is issued, taking these short-term actions can save lives and livelihoods. However,\nthe hazard is not 100% certain, and therefore humanitarian actors are reluctant to take\nanticipatory humanitarian action based on a forecast, for fear of occasionally acting in vain.\nHowever, there are many inexpensive short-term actions, such as moving assets out of harm's way,\nwhich save money, time, and livelihoods after a disaster. These actions are extremely cost-effective;\nand would certainly be worthwhile to carry out based on a forecast of heightened risk, even though\nwe will sometimes act in vain. To secure funding for such forecast-based interventions, there must\nbe evidence that the risks of acting in vain weigh less than the risks of failing to act.\n\nOnce this evidence is compiled, current DRR programming should be complemented by a funding\nmechanism for anticipatory humanitarian action in the short-term. This \"Preparedness Fund\"\ndisburses funding before a disaster happens, triggered by science-based parameters involving the\nforecast of an extreme event that is likely to cause avoidable losses and suffering. The fund is\ndesigned to immediately take a set of predefined actions that reduce loss in a cost-effective way.\nThe first Preparedness Funds in the Red Cross Red Crescent Movement are being piloted by Uganda\nand Togolese Red Cross Societies with financial and technical support from the German Red Cross\nand the Red Cross Red Crescent Climate Centre (see box). These pilot programs aim to generate\nevidence for the improved effectiveness of humanitarian programming which invests both in long-\nterm DRR actions as well as short-term forecast-based actions.\n\nTo establish the Preparedness Fund, projects begin by defining all possible DRR actions; these are\nthen divided according to whether they are most appropriate for long-term planning or short-term\nforecast-based actions, thus sharpening the traditional long-term DRR analysis. These predefined\nactions are used to develop robust standard operating procedures (SOPs) that link each type of\n\nPreparedness Fund in Uganda and Togo\nThis Integrated Climate Change Adaptation Project is funded by Germany's\nFederal Ministry for Economic Cooperation and Development through the\nGerman Red Cross, and is being implemented by the Uganda and Togolese\nRed Cross Societies with technical support from the Red Cross Red Crescent\nClimate Centre. The project runs for six years, and invests 2.2 million Euro\nin Uganda and 1.8 million in Togo.\n\nUganda\nTogo\nMain Hazards\nWaterlogging, flash floods,\ndrought\nRiverine floods\nLong-term DRR\ninvestment\nDiversified agricultural\nproduction, access to water,\nnatural resource\nmanagement\nFlood-proof houses,\nhealth and hygiene\neducation, natural\nresource management\nPreparedness\nFund\n100,000 Euro\n50,000 Euro\nAnticipatory\nHumanitarian\nAction\nUsing forecasts of rainfall in\nthe highlands, anticipatory\naction will prevent\ndisasters of waterlogging\nand water-borne diseases\nin the lowlands\nBased on forecasts of\nriver levels rising, action\nwill focus on movement of\ngoods and people before a\nflood, as well as hygiene\npromotion\nforecast with suitable action. Forecasts with more certainty (ie: imminent flood warning) can be\nlinked to more difficult or expensive actions than more general seasonal forecasts.\n\nMany actions, such as hand-\nwashing campaigns before a\npotential flood, will have long-\nterm lasting effects that are\nbeneficial to the community\neven if the disaster does not\nmaterialize. However, all\nactions have an opportunity\ncost, and therefore the SOP\ninternalizes this risk and\nauthorizes early action based\non pre-calculated\nprobabilities. Because this is\nstandard protocol, individuals\nare not blamed for the\ninstances of acting in vain, and\nthe protocol is designed such\nthat the benefit of funding\nearly action every time the\ntrigger is reached will\noutweigh the cost of\nsometimes acting in vain. The final result will be an institutionalized mechanism that can greatly\nimprove the efficiency and effectiveness of work in the humanitarian sector.\n\nThis type of preparedness fund is not only relevant in today's world, but becomes increasingly\nimportant in a changing climate. Red Cross National Societies have an active presence in vulnerable\ncommunities across the world, with an explicit mandate to integrate adaptation to a changing and\nmore uncertain climate into plans and policies, but often lack both technical capacity to utilise\nclimate services and financial means to build and integrate adaptation capacity into a robust\ndisaster risk management system. The annual number of climate-related disasters has more than\ndoubled since 1980 and their damages have almost tripled. With climate change, the number of\nextreme weather events are projected to increase. Given this growing demand under human and\nfinancial resource constraints, the humanitarian sector cannot successfully manage rising climate\nrisks using \"business as usual\" approaches. A climate-smart, more cost-effective risk reduction\napproach is needed to link science-based forecasts with adaptive early action to enhance resilience\nin the most vulnerable communities.\n\nForecast: Likely that the next 3\nMONTHS will be unusually wet\n-\nObtain emergency food and\nwater supplies\n-\nEliminate malaria breeding\nsites\n-\nRecruit and train volunteers\n\nForecast: Heavy rainfall\npossible in the next WEEK\n-\nTrain volunteers on flood\nprotocol\n-\nTransport emergency kits to\nrural locations\n-\nTrain communities on hygiene\nfor water-borne disease\nForecast: Rain likely in next few\nHOURS; high water upstream\n-\nDevelop beneficiary targeting\nand registration system\n-\nProvide basic medical\nsupplies to clinics\n-\nMove supplies to most at-risk\nlocations\nExamples of flood response actions that are currently funded post-disaster by the IFRC Disaster Relief Emergency Fund in\nthat could be triggered by forecasts before floods materialize, reducing human suffering and improving the effectiveness of\nhumanitarian investment. Examples taken from Kenya and the Philippines.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class on Creating Video Games, Focus Test Script",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/1294a56fa0b31fe20a0fead232293c88_MITCMS_611JF14_FocusScript.pdf",
      "content": "Team Fabulous - Observer Instructions\nFocus Test\n\"For\n\ne\n#\ns\nt o\n-\nf\nRe\nJu\nfle\nl\nc\ny\nti\nons\"\n\nToday'\nFeedb\ns Goal\n-\na\ns\n-\n\n-\nFeedba\nck\nck\n\n-\n\n-\nFeedb\nCombat\nack\n\n-\n-\nFeedb\nStory\nack\nTesting\nFeedb\nScript\na\n\nck\n1.\n2.\n\nIntr\n\"The goal of today's focus test is to have you play our game, which has the\noduce your\nForest of Reflecti\nself.\n\nwo\nget confused, let me know.\"\nrking title\n\nons. Please feel free to think out loud, and if you\n3.\n4.\nPoint them to the instruction sheet.\nObs\n-\ne\n\nrve:\n\n-\n-\nDO\nDO\n\nst\nta\na\nk\nn\ne\nd\nn\nb\not\na\nes.\nck\n\nquietly.\n-\nDO ask them about odd behavior (e.g. Was there a reason you entered\ncombat and walked away f\nDO intervene if there is a game\nive times in a row?).\n-‐int\n\n-\ninterrupt game play, take note and let the player continue).\nerrupting bug (if it does not\n\n-\n-\nDO let play testers fill in their\nDON'T immediately explain mechanics beyond what is provided on\nDO ask why a player is getting\nsu\nfru\nrveys\nstrat\nin\ned\np\nif\nriva\nthey\nte.\na\n\nre visibly agitated.\nthe ins\no\ntr\nIf\nuc\nthe player\ntion shee\n-\nis\nt.\n\nlost, DO ask if they want help and DO assist\n-\n-\nDON'T ask for identifying information.\nDON'T offer\nthem.\nun\n\nsolicited help.\n-\nDO\n\nDON'T express frustration or justify parts of the game to the player.\nbe polite! Our testers are being awesomely helpful.\n5. Give them a survey (with the tester number on it!).\n\n6. Thank them for their time!\nHave Quest\n\nions? Find Lex and Ask!\n\nObserver Notes\nFocus Test\n\"For\n\ne\n#\ns\nt o\n-\nf\nRe\nJu\nfle\nl\nc\ny\nti\nons\"\n\nObserver Name:\n\n__________________________\nTester Number: __________________________\nRem\n\n1.\nember these steps!\nSpiel\n3.\n2.\n\nIns\nObs\ntr\ne\nuction Sheet\n\n4.\nt\nr\n\nGive them a Survey. WRITE THEIR TESTER NUMBER ON IT!!!!!!!!!!!!!!!!!!!!!\nObserva ion\nve\nQu\nand\nest\ntake\nions\nnotes on the questions below\n\nDo they understand that they need to explore?\nYes / No\nDo they have a combat strategy?\nWhat difficulties are they having with the combat?\nOther Notes:\nWrite their tester number on a Survey Form and ask them if they would help\nus by filling out an optional questionnaire on their experience that would help\nus improve our game. Thank them.\n\nIf there was a bug, write it on the back of this page.\n\nPlay Tester Questionnaire\nFocus Test\n\"For\n\ne\n#\ns\nt o\n-\nf\nRe\nJu\nfle\nl\nc\ny\nti\nons\"\n\nTester Number: __________________________\n\nIf you would pleas\nthat we can make our game that much better!\ne fill out this\nThank you for pl\noptional s\na\nur\nying our game!\nvey, we'd love to get your\n\nfeedback so\n\nThere a\n\nre no right or wrong answers, only useful feedback.\nOn a scale from 1 (not at all) to 5 (a lot):\nHow much did you enjoy the game?\n1 2 3 4 5\nWould you play again?\n1 2 3 4 5\nWould you suggest this game to someone else?\n1 2 3 4 5\nDid you find selection of gender to be a meaningful choice? Why or why not?\nWhat do you think this game is about?\nWhat do you think the enemies and encounters represented?\n\nWhat was the story of the game? Was it too blunt? Too subtle?\nFocus Test\n\n\"Fore\n#\ns\nt o\n-\nf\nRe\nJu\nfle\nl\nc\ny\nti\nons\"\n\nWhat do you think was the best part of the game? The worst?\nWhat would you most like to see changed?\nOther Comments?\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class on Creating Video Games, Heatwave Fact Sheet",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/5a8468e991452be2b0ed53492a28e903_MITCMS_611JF14_HeatwavFact.pdf",
      "content": "Heatwave Fact Sheet\n- Body temperature can rise to 105°F/ 40°C degrees if working outside in a heat wave. Death\noccurs usually when a body temperature reaches 107.6°F/ 42° C.\n- When the temperature hits 95 ° Fahrenheit/ 35 Celsius °, according to NASA, your output at work\ndrops by 45 percent. Your loss of accuracy is 700%.\n- 40-‐50% of global land area experienced an increase in maximum temperatures over the period\n1951-‐2003 (Smith, 2003)\n- Current observations of climate change impacts from 1900 to 2005 in East Africa demonstrate\nincreasing temperatures and future climatic projections indicate mean temperatures increasing\neven further (CARE)\n- Warmer temperatures (that have occurred from 1970-‐2003) in East Africa have already increased\nthe incidence of malaria in highland regions (Alonso et al, 2010)\n- In Kenya, between 1960 and 2003, mean annual temperatures have increased in Kenya by\n1.0 Degrees centigrade per decade. Daily temperature observations show significantly increasing\ntrends in the frequency of hot days and a much larger increase in the frequency of hot nights.\n- Between 1960 and 2003, the average number of hot days in Kenya has increased by 57, and the\naverage number of hot nights has increased by 113.Future temperature projections indicate that\nthe mean annual temperature may increase by 1.0 to 2.8 degrees. (Source: CARE 'Assessing\nClimate Change Vulnerability in East Africa' report).\nHeat Wave Disasters from 1980-‐2008 (Source: Prevention Web)\nNumber of Events:\nNumber of People Killed:\n89,889\nAverage people killer per year:\n3,100\nNumber of people affected:\n4,614,411\nAverage people affected per year:\n159,118\nEconomic Damage (US$ X 1,000):\n21,989,859\nEconomic Damage per year (US$ X 1,000):\n758,271\n\nIncreasing Global Surface Air Temperature\nDecadal global combined surface-air temperature over land and sea-surface temperature (°C) obtained from the average\nover the three independent datasets maintained by the HadCRU, NOAA-NCDCand NASA-GISS.The Horizontal grey line\nindicates the long term average value ( 14°C). (Source: WMO 2001-2010 A Decade of Climate Extremes Report)\nIncreasing Casualties as a result of Extreme Climatic Events\nImpact of Extreme events during 2001-2010 compared with 1991-2000. Total number of loss of lives (Source: WMO 2001\n2010 A Decade of Climate Extremes Report)\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class on Creating Video Games, Presentation Expectations and Requirements",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/f00286a318999170f3ad46408c2d1bf9_MITCMS_611JF14_Presntation.pdf",
      "content": "CMS.611J/6.073\nFall 2014\nInstructors: P. Tan, R. Eberhardt, S. Verrilli, A. Grant\nOral Presentation Expectations\nProject 1: Pitch Presentation\nAt the beginning of class, project teams will pitch their game as a possible project to be worked\non for Project 2. This is a greenlight presentation: half of the pitched games will be selected by\nthe instructors as solid enough to be used for Project 2.\nPresentations should contain the following:\n❖\nBrief description of highlevel gameplay (one or two mechanics, basic interactions)\n❖\nDescription of scope of a digital prototype: what is required for a digital prototype, what\nwould be beyond the scope of a digital prototype.\n❖\nReason this is a good or interesting project to work on in Project 2: a finding revealed\nduring testing, an interesting game mechanic, ...\nProjects 2, 3, & 4: 2 Minute Presentations of game inprogress\nTwo minute presentations are a snapshot of aspect of your project you are presenting. We do\nnot expect slides or visual materials other than the item you are talking about a product\nbacklog, a sprint tasklist, a vision document, or whatever. Do be able to display the document or\nprototype you are discussing, but don't worry too much about making it beautiful. We want to\nsee your working version.\n*Keep your presentation to 2 minutes!* Tell us what your key choices & decisions were,\nwhat the team's process was, what complications/troubles you ran into while doing it, and then\nbe done.\nProjects 2 & 3: 5 Minute Presentations of final game delivered\nThe goal of the 5 minute presentations is the same as for the final project, but there's a lot less\ntime. Think about all the thoughts and topics below, but we recommend you condense them into\n\"Five things that went right, Five things that went wrong, One or two things we'd do instead\"\nwhere those numbers are adjustable as long as it fits in five minutes.\nDon't spend a lot of time describing your game give it a one or two sentence description, then\nget into the details of how your project went. What we want to hear, as instructors, is what went\nwrong, and what you learned from that, as well as what went right and *why* those things went\nright and we want you to share that with your classmates, so that you don't all have to make all\nthe mistakes every time.\n\nProject 4: 20 minute Presentation of final game delivered, at end of term\nThe goal of the oral presentation is to serve as a postmortem of each game's development\nprocess, to share good practices and mistakes with the other teams, and to allow each team to\nshow what they have learned during the project. It is reasonable to include a brief description of\nyour game theme, key mechanic, etc but remember that everyone in the class is familiar with\nyour game, and has probably played it multiple times.\n\nIn your presentation you should discuss:\n●\nDevelopment process:\n○\nWhat elements of the development process worked best for the team? Why?\n○\nWhat didn't work? Why?\n○\nWhat changes or adjustments to the development process would or did the team\nmake to improve things?\n●\nWhat were the best decisions the team made? Why?\n●\nWhat were the worst decisions the team made? Why?\n●\nDesign Process:\n○\nWhat went right: What worked well for the team?\n○\nWhat went wrong: What problems did the team encounter? How were these\nproblems resolved, assuming they were? If they weren't resolved, why not, and\nhow did that affect the overall project?\n\nEach team has 20 minutes to present their game and their postmortem. Your game must run on\nstage, played by a naive player, but for no longer than 5 minutes without developer commentary.\nAllow this playthrough to serve as the description of your game.\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class on Creating Video Games, Sample Focus Test Document",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/0e375e950326e7df67c4e6e66567a12a_MITCMS_611JF14_SamplObsrvr.pdf",
      "content": "Focus Test #1 - 07/07/2011\nAuntie MeeMaggi's Cleaning School\nGeneral Info for Members of Death by Durian:\n\nRead this before the testing session!\n\nRemember: Our goals for this testing session are to answer these questions\n\n● Do players understand the goal of the game and what they need to do?\n● Do players understand the basic mechanics of a Point & Click adventure game?\n● UI Issues\n○ Do players know what they need to click in order to do what they want?\n○ Does the feedback the game gives help the players understand what they did\nright/wrong?\n○ Are menus easy to navigate?\n○ Do players realize that the game is procedurally generated / restartable? (So\ndon't go around telling them unless they thought they finished the game xD)\n\nThings to know:\n\n-\nDO sit back quietly, watch them play and take notes.\n-\nDO encourage them to speak what they're thinking out loud.\n-\nDO write down questions you might have for them after they finish playing the game (ex.\nWhy were you spam-clicking that area?)\n-\nDON'T give them more information if they ask you stuff. If they ask for hints, shake your\nhead and ask them (nicely) to make do with the information available. (for the sake of\ntesting)\n-\nDO intervene if there is a problem with the game. For example, if there is a bug or if the\ngame crashes.\no If the bug is game breaking (crucial NPC missing), send the Debug Log right\naway with the Tester Number, and feel free to start up a new game for the player.\no If the bug is not game breaking (ie wonky graphics), write it down in your Form B\nand remember to send the Debug Log to Now after they finish playing. Please\ninclude the Tester Number in your bug report.\n-\nIf a player gets frustrated, DON'T tell them what to do. Ask them what is wrong / why\nthey are frustrated, and ask if they'd like to stop playing.\no DO help if they are getting too frustrated/annoyed/angry.\n-\nDO let playtesters fill in their surveys with some privacy\n-\nDON'T ask personal questions\n-\nBe nice to your testers =D They are helping us!\n-\nFeel free to come grab Now at any time, for any reason. She might respond differently\naccording to the validity of the reason.\n\nFocus Test #1 - 07/07/2011\nAuntie MeeMaggi's Cleaning School\nForm A: (For Playtesters) Tester Number: ____________\n\nThank you for playing our game!\nWe'd really love it if you could help make our game better by answering some questions =)\nRemember: This is not a test, and there are no right or wrong answers ;D\n\nAge(circle one) 15 and under / 16 - 20 / 21 - 25 / 26 - 30 / 30 - 35 / 36 and above\n\nWhat were you trying to do in the game?\n\nWas there a point where you didn't know what to do?\n\nWhat were the best and worst things in the game?\n\nHave you played this type of game before? If so, which ones?\n\nOther notes / comments:\n\nThank you!\n\nFocus Test #1 - 07/07/2011\nAuntie MeeMaggi's Cleaning School\nForm B (for Members of Death by Durian)\n\nYour Name: ________________ Tester Number: _______________\n\nHi :) Thank you for your interest in Auntie MeeMaggi's Cleaning School!\nWhile you are playing the game, I'll be sitting right here and taking notes. Feel free to let me\nknow at any time if that makes you uncomfortable.\nAuntie MeeMaggi's Cleaning School is set in Singapore, so there might be names of people,\nobjects and locations that you have never heard of, but you might be able to figure out what\nthey are using clues from the game. If you get stuck at any point, for the sake of testing, please\ntry to make do with the information available in the game first. However, if you feel like you're\nreally stuck, feel free to ask for help.\n\nAsk the tester a few questions before testing:\n-\nHow many hours a week do they play games _____________________\n-\nWhat kind of games do they play ________________________________\n-\nIf they are 17 or younger, ask them if their parents have signed a consent form. If they\nhaven't, come grab Now.\n\nNow show them the instruction sheet. Give them some time to read it over.\n\nObserve the player and write notes about:\n\nDid they understand the goal of the game and what they need to do?\n\nDid they get stuck at parts of the game? If so, which parts?\n\nFocus Test #1 - 07/07/2011\nAuntie MeeMaggi's Cleaning School\nDid they struggle with the UI/ Did they miss the game's feedback?\n\nHow was their reaction to the game? Did they get frustrated / like it? When?\n\nDid the players figure out the restart/reset features by themselves: Yes / No\n\nOther notes:\n\nOnce they're done playing, ask them how they feel about the game. Also ask extra\nquestions if any (ex. Why were you spam-clicking that area)\n\nHand them Form A and ask them if they could help fill out an optional questionnaire that\nwould help improve our game xD Give them some privacy and use the time to set up the\nmachine for the next player.\n\nIf there was a bug, send that Debug Log to Now with the tester number!\n\nRemember to thank your tester for helping = D\n\nFocus Test #1 - 07/07/2011\nAuntie MeeMaggi's Cleaning School\n\nInstructions\n\nYou are Aldo, a student in Auntie MeeMaggi's Cleaning School.\n\nEach day she sends you out to do new tasks\nto learn more about Singapore !\n\nControls - Use the mouse to play the game :D\n\nEnjoy!\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Class on Creating Video Games, Useful Tools for Game Making",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/1875ec3f3970518f0353c4c1c6e83f3b_MITCMS_611JF14_UsefulTools.pdf",
      "content": "CMS.611J/6.073 Fall 2014\nUseful Tools List\nThis list is by no means complete, but should get you started. Talk to other folks in the class\nabout their recommendations.\nRevision Control\nVersion control software,\nprovides backups and easy\nreversion.\nPerforce\nMac/Win GUI (p4v):\nhttp://www.perforce.com/dow\nnloads/Perforce-Software-Ver\nsion-Management/complete_l\nist/Customer\nHeavily used in game\nindustry. Commercial\nsoftware; you can use the\nGame Lab server.\nSubversion\nCommand line:\nhttp://subversion.apache.org/\nWindows GUI:\nhttp://tortoisesvn.net/\nOpen source, server-based\nGit\nCommand line:\nhttp://git-scm.com/\nOpen source, distributed\nMercurial\nCommand line:\nhttp://mercurial.selenic.com/\nWindows GUI:\nhttp://tortoisehg.bitbucket.org/\nOpen source, distributed\nSourceTree\nMac/Win GUI:\nhttp://www.sourcetreeapp.co\nm/\nNot a source control system,\njust a GUI for Git and\nMercurial clients\nRevision Control Hosting\nSourceForge\nhttp://sourceforge.net/\ngit, mercurial, or subversion\nBitBucket\nhttps://bitbucket.org/\ngit or mercurial\nGitHub\nhttps://github.com/\ngit, has own (painful) GUI for\nGit\n\nImage Editing\nMSPaint\nWindows, pre-installed\nSurprisingly useful quick pixel\nart editor (esp for prototypes)\nPaint.NET\nWindows,\nhttp://www.getpaint.net/download\n.html\nAbout as easy as MSPaint, but\nmuch more powerful\nPhotoshop\nMac, Windows\nNew Media Center, 26-139\nGIMP\nMany platforms,\nhttp://www.gimp.org/downloads/\nEasier than photoshop, at\nleast.\nSound\nGarageBand\nMac\nNew Media Center, 26-139\nAudacity\nMany platforms,\nhttp://audacity.sourceforge.ne\nt/download/\nFree, open source.\nGame Engines\nFlixel\nAS3, Flex/Flash\nhttp://flixel.org/help.html\nHaxe Flixel\nHaxe\nhttp://haxeflixel.com/documen\ntation/getting-started/\nUnity3d\nC#, Javascript, Boo (Python)\nPrimarily 3d game engine\nhttp://unity3d.com/learn/tutori\nals/modules\nPhaser\nJavascript, HTML5\nhttp://www.photonstorm.com/\nphaser/tutorial-making-your-fi\nrst-phaser-game\n\nIssue/Project Tracking\nFogbugz\nTrac\nfound on many hosting sites\nIssue tracking, integrated\nsource control, wiki\nTrello\nhttps://trello.com/\nWiki\nShared game design docs,\nmeeting notes, etc.\nArt and Sound Assets\nAssemblee asset archive\nhttp://www.derekyu.com/tigs/\nassemblee/\nUnsorted, Creative\nCommons licensed art and\nsound assets from\nTIGSource's game\ndevelopment competition\nDanc's Miraculously Flexible\nGame Prototyping Graphics\nFor Small Worlds\nhttp://www.lostgarden.com/2\n009/03/dancs-miraculously-fl\nexible-game.htm\nHi resolution cute prototyping\ngraphics\nSmaller tilesets from Danc\nhttp://www.lostgarden.com/2\n006/07/mo\nAn assortment of smaller\nprototyping tile sets from\nDanc\nFree Sound Library\nhttp://www.freesound.org/\nUnsorted sound assets\nIDE's\nFlashDevelop\nAS3, Haxe\nhttp://www.flashdevelop.org/\nEclipse\nJava, Javascript, Haxe plugin\nhttp://www.eclipse.org/downl\noads/\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Focus Test Summary",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/49a45dc4c6e9baf68f554c772e5b3ce1_MITCMS_611JF14_FocusReport.pdf",
      "content": "Focus Test Summary\nCMS.611J / 6.073\nProject #____\nTeam: _________\nFall 2014\nTest Date:____________\nA. Pre Focus Test: Preparation\n1. What is the goal of this focus test? What do you want to learn? (Question, data, etc.)\n2. Attach a copy of the testing survey, interview question list, observer sheet or other testing\ndocumentation used to gather & allow analysis of testing data. Could be a print out of a Google\nform.\nB. Post Focus Test: Observations & Intended Actions\n1. Number of testers: _________ Who were they:_________________\n2. Summary of results (should be supported by data gathered by testing.)\n3. Intended actions/changes to design:\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    },
    {
      "category": "Resource",
      "title": "Focus Testing Basics",
      "type": "PDF",
      "source_url": "https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/1a20b2e5345f48413761ff0f22c2c99c_MITCMS_611JF14_FocusBasics.pdf",
      "content": "CMS.611J/6.073 1\nFall 2014\nFocus Testing Basics\nKey Points:\nChoosing focus testers; what to know before you start testing; advertising; what do your testers need to\nknow before they start playing; observing testers and gathering data; treating your testers with respect;\nWhat do you do with the data; Quick Checklist of Things to Do and Have.\nChoosing Focus Testers:\n-\nKnow your audience.\n-\nKnow what you want to test.\nThis is most relevant for out of class testing, as where you advertise and who you contact affects what\nkind of person attends. For in-class testing, you're going to get a fairly homogenous group of players:\ncollege students with a strong interest in video games. Most of the people in the world aren't like that,\nso you want to keep that in mind for your results.\nWhat kind of people you want as your focus testers depends on what your goal is. If you're trying to\ncreate a game that you think only hardcore, serious video game players will play, you're going to want to\nget people who spend thirty hours a week playing videogames, and the other ninety hours a week\nthinking about them. If you're making a game targeted at ten year olds, you'd better get some ten year\nolds in to test it, because it doesn't matter how much college students like it; that's not your target\naudience.\nOn the other hand, if you're trying to create a game that appeals to a broader section of people, you\nwant a broader selection - folks who play games a lot, occasional players, people who usually sit and\nwatch someone else play, but can be tempted into playing 'just one game.' They are harder to find, but\nthat makes their feedback more valuable - because they are less informed on how to play video games,\nand less skilled, they represent a ' casual player' better - because they ARE. They often have more\nproblems with the UI, or understanding instructions, or slower reactions so the games are just too hard\nfor them - and for a potential 'casual' game, that information is really important.\nAdvertising for Focus Testers:\n-\nAdvertise for your audience in advance.\n-\nChoose the appropriate channel.\n-\nGive them a reason to come.\n-\n\nYour target tester isn't going to walk in the door just because you need them. So, think about where\nthey are likely to hang out, and what communication method will get their attention. You also need to\ngive them enough time to make it to your testing site, but don't advertise so far in advance that it gets\nforgotten by the time the actual event rolls around. Do you want casual gamers? How about postering\nat an Internet cafe, or a coffee house that offers wireless? Do you want college students? Poster on\ncampus, or in dorms.\n\nPeople have inertia; by default, they aren't going to come. If you can offer them something -even\nsomething as simple as pizza and soda, or cookies - it may increase the likelihood of them appearing.\nGiving people an email address to RSVP to may also increase response; after all, people who have\nresponded feel a bit of commitment.\nWhat do you - and your testers - need to know before you start testing?\n-\nKnow your focus test goal.\n-\nBe prepared with questions or surveys for your players.\n-\nBe prepared with scripts for the team running the test.\n-\nBaseline questions.\nFirst, and most important: why are you focus testing? To determine your game's overall playability?\nLevel of difficulty for a new player? A specific mechanic implementation? Ease of use with your current\nuser interface? Have a goal - a key goal - expressed as a question, preferably in simple English. \"We\nwant to know if a new player unfamiliar with rhythm games can understand and start playing our game\nquickly.\"\nSecondly, you need to know what information to share with testers before start playing. In a perfect\nuniverse, you could set them down in front of the game and start them playing. However, frequently\nuser tutorials, clear UI, and helpful hints are among the last part of a game to get in. So how do you\nexplain the game to your player, giving them the same amount of information they would get from the\ngame 'in the real world'? By writing and using observer scripts for the people running the prototype,\nand preparing player handouts for your testers.\nPlayer handouts are a single sheet of paper, with all the relevant keys, instructions, and 'how-to' that\nyou expect to give your players in your final game. Think of it as a reference card - if a player wants to\nknow how to 'jump', they should be able to check their handout, and not need to ask a hovering\nobserver.\nObserver scripts are written for the people running the focus test. They list what information players\nshould be give before starting the game, what information players should receive after playing, and\nwhat questions the observers should ask (and when to ask them.) By standardizing the information you\ngive your players, you have a better chance of getting usable data from them. Scripts also control for\nthe natural tendency developers have to 'show-off' their game. If you leap in and 'show' your testers\nwhat they 'should be doing', you will never learn what your players really will do, without a helper to\npoint things out. Unless you intend to ship a team member with each game, that's not going to be\nhelpful.\nAnd, finally, you need to know what you want to know from each player. Is observing them and taking\nnotes enough? Do you have a list of specific questions you want answered? How are you going to\ngather - and record - the data from the focus test? Think about whether you want a interview with the\nobserver and set of questions to ask; a one page survey, or just notes from the observer watching the\ngame being played.\nOne more thing: baseline questions. Sometimes, you want to know how experienced someone is, so\nyou can take their results with a grain of salt - if you are testing a physics learning game, you are going\nto get a very different understanding of the game from a fifth grader vs physics teacher. So you may\nCMS.611J/6.073\nFall 2014\n\nwant to ask some basic baseline questions about your testers. Try to *only* ask these questions if you\nactually need the data - every question you ask about the player is one less question (generally) you can\nask about the game, since each player has only so much patience for answering questions! Sample\nbaseline questions include:\n-\nHow many hours a week do you play games?\n-\nDo you consider yourself a hardcore gamer?\n-\nWhat is your favorite kind of game?\n-\nWhat age group are you (15 and under) (15 - 25) (25 - 35) (35 and up)\n-\nDo you like ____________ type of games?\nObserving Testers and Gathering Data\n-\nHave instructions for the game ready\n-\nObserve without interfering or leading your players.\n-\nKeep surveys short - one page max!\nYou should try to keep your focus testing as scientific as possible: while your test is running, you don't\nwant to contaminate the data. In this case, that means avoiding influencing your testers, or ruining your\nresults by giving them outside information.\nIn practice, this means you need to know exactly what information it is reasonable for an 'average\nplayer' to have, and in what format, and to give that, and only that, to your tester. So, if your game is\nsupposed to be downloaded from the Internet, and have all of its instructions in its menu system, you\nwant your testers to receive all of their information from the game - not their observers.\nIdeally, you should sit back quietly, watch them play, and take notes; if they ask for more information or\n'hints', you should shake your head, and ask them - for the sake of the testing - to make do with the\ninformation available to them. If there is an unexpected problem with the game, or testing, then you\nshould intervene. The game crashes, a new mechanic isn't working properly, etc.\nAfter the testing is done, you will probably have a few more questions to ask them; those can either be\nasked verbally, and the notes written down (if so, have just a few questions); or, you can hand them a\nquestionnaire to fill out. Keep \"time spent filling out paperwork\" less then \"time spent playing the\ngame\"; for short games, more than one page of questions is too much.\nTreating Testers With Respect:\n-\nDon't tell them what to do; ask them what is wrong.\n-\nIf you notice a player is frustrated, ask them why, and ask them if you can help, or if they'd like\nto quit.\n-\nLet players fill out their surveys in privacy.\n-\nDon't ask personal questions.\nYour players are helping you make your game better, so treat them well. Be courteous, and make sure\nthat they feel comfortable. They've decided to use some of their time to help you with your work-in-\nprogress, and it is their choice to be here at all times. Remember that your testers may quit testing at\nany time, and that answering questions is voluntary - they may choose to answer some, all or none of\nthe questions asked of them.\nCMS.611J/6.073 3\nFall 2014\n\nAlso, while you should be as much of a 'silent observer' as possible, remember that you are observing a\nperson. If the tester is clearly getting too frustrated, too annoyed, upset or angry, ask them about it.\nAsk them what is so frustrating, and ask them if they would like assistance. Note that your help was\nnecessary - because no game should make someone that frustrated - but give them a hand when\nneeded.\nAfter Testing: Now What?\n-\nReview your observations and your surveys.\n-\nDecide how to use the results.\n-\nReview your survey and focus test goals, so you can improve the process next time.\n-\nRemember your testers are TESTERS, not game designers.\nOnce you've finished the focus test, gather up your notes, and the team, and review the information.\nOnce again, it really helps to have a couple of key questions you are trying to get answered \"Is the game\ntoo hard?\" \"Is the UI easy to use?\" \"Is the game fun?\" Look at the data through those lenses, and see\nwhat you are doing right - and what you are doing wrong.\nYou will often learn things about your game you didn't expect to, things that you didn't even realize\nwere a problem, or things that the players enjoyed you hadn't expected them to. Take advantage of\nthat! On the flip side... sometimes the answers are all over the place, and you can't quite figure out\nwhat to do with it. Review your surveys, think about how you could focus your questions a bit better.\nAnd, finally - players will always be happy to tell you 'what to do'. They will have suggestions, ideas,\ncomplaints, you name it. Accept those suggestions and complaints politely and gracefully - and then,\nthink seriously about throwing them all out. Just because one player - or ten - wants you to add guns\nto your game doesn't mean your game needs guns; it may mean that those players are ones who\ncouldn't imagine playing a game without guns. Possibly you need a group of less aggressive focus\ntesters. In the end, you are making the game, and the final design decisions must be guided by you,\nyour team, and whatever the overall goal of your game is. Your focus testing data is just that - data.\nYou need to decide how to interpret it, and how to use it.\nQuick Focus Testing Checklist.\n(Not intended to cover all situations!)\nPre-Focus Test\n1.\nDecide on the focus test's goal - the best goals are formed as a question that your observation of\ntesters will answer. \"Do people enjoy the game?\" \"Is our UI easy to use?\" \"Do people\nunderstand our life mechanic?\"\n2.\nChoose your audience.\n3.\nChoose a place and a time (should be convenient for your target audience!)\n4.\nWrite up a set of questions (if you want a filled out survey.)\n5.\nWill the testers need any additional information to play your game that isn't included in the\ngame? You may want to write up a simple How To Play guide, if your game isn't advanced\nenough yet to have necessary instructions embedded in the shell and UI.\nCMS.611J/6.073 4\nFall 2014\n\n6.\nMake sure you have a stable working build, installed and tested on each of the testing machines,\nthat will allow your testers enough functionality to answer your questions.\nDuring the Focus Test\n7.\nHave at least one observer for each station where the game is being played. Observers should\ntake notes, assist with starting and ending the game, provide surveys for filling out afterwards,\nand answer any questions.\n8.\nIdeal observers? Everyone on the team! Designers, programmers and artists all see the game a\nbit differently, and likewise often focus on different aspects of the game.\n9.\nIt's often helpful to have one central person collecting finished surveys, and any notes from the\nobservers that go with the surveys; that way things don't get lost.\n10. Don't ignore observations just because they don't match your Questions. Testers will often turn\nup problems or make observations that never occurred to the team to think about.\nAfter the Focus Test\n11. You need to have a meeting to discuss the results, and decide what if anything the team is going\nto do about it. You can either go over the raw data (read the surveys out loud together!) at the\nmeeting, or have someone compile the survey and observational data into a reasonable\nsynopsis. (Having someone compile the data into a reasonable synopsis is a good time saver,\nbut there is also value in everyone seeing the raw data, thus avoiding single viewpoint bias.)\nCMS.611J/6.073 5\nFall 2014\n\nMIT OpenCourseWare\nhttp://ocw.mit.edu\nCMS.611J / 6.073 Creating Video Games\nFall 2014\nFor information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms."
    }
  ]
}